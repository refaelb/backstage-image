{"version":3,"file":"static/module-rjsf.1ca395dd.js","mappings":"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","sources":["webpack://app/../../node_modules/@rjsf/core/lib/components/fields/ArrayField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/fields/BooleanField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/fields/MultiSchemaField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/fields/NumberField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/fields/ObjectField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/fields/SchemaField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/fields/StringField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/fields/NullField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/fields/index.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/ArrayFieldDescriptionTemplate.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/ArrayFieldItemTemplate.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/ArrayFieldTemplate.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/ArrayFieldTitleTemplate.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/BaseInputTemplate.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/ButtonTemplates/SubmitButton.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/ButtonTemplates/IconButton.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/ButtonTemplates/AddButton.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/ButtonTemplates/index.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/DescriptionField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/ErrorList.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/FieldTemplate/Label.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/FieldTemplate/FieldTemplate.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/FieldTemplate/index.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/FieldErrorTemplate.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/FieldHelpTemplate.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/ObjectFieldTemplate.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/TitleField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/UnsupportedField.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/WrapIfAdditionalTemplate.js","webpack://app/../../node_modules/@rjsf/core/lib/components/templates/index.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/AltDateWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/AltDateTimeWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/CheckboxWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/CheckboxesWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/ColorWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/DateWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/DateTimeWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/EmailWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/FileWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/HiddenWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/PasswordWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/RadioWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/RangeWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/SelectWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/TextareaWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/TextWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/TimeWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/URLWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/UpDownWidget.js","webpack://app/../../node_modules/@rjsf/core/lib/components/widgets/index.js","webpack://app/../../node_modules/@rjsf/core/lib/getDefaultRegistry.js","webpack://app/../../node_modules/@rjsf/core/lib/components/Form.js","webpack://app/../../node_modules/@rjsf/core/lib/withTheme.js","webpack://app/../../node_modules/@rjsf/core/lib/index.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/AddButton/AddButton.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/ArrayFieldItemTemplate/ArrayFieldItemTemplate.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/ArrayFieldTemplate/ArrayFieldTemplate.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/BaseInputTemplate/BaseInputTemplate.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/DescriptionField/DescriptionField.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/ErrorList/ErrorList.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/IconButton/IconButton.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/FieldErrorTemplate/FieldErrorTemplate.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/FieldHelpTemplate/FieldHelpTemplate.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/FieldTemplate/FieldTemplate.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/ObjectFieldTemplate/ObjectFieldTemplate.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/SubmitButton/SubmitButton.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/TitleField/TitleField.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/WrapIfAdditionalTemplate/WrapIfAdditionalTemplate.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/Templates/Templates.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/CheckboxWidget/CheckboxWidget.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/CheckboxesWidget/CheckboxesWidget.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/RadioWidget/RadioWidget.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/RangeWidget/RangeWidget.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/SelectWidget/SelectWidget.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/TextareaWidget/TextareaWidget.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/Widgets/Widgets.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/Theme/Theme.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/MuiForm/MuiForm.js","webpack://app/../../node_modules/@rjsf/material-ui/lib/index.js","webpack://app/../../node_modules/@rjsf/utils/lib/isObject.js","webpack://app/../../node_modules/@rjsf/utils/lib/allowAdditionalItems.js","webpack://app/../../node_modules/@rjsf/utils/lib/asNumber.js","webpack://app/../../node_modules/@rjsf/utils/lib/constants.js","webpack://app/../../node_modules/@rjsf/utils/lib/getUiOptions.js","webpack://app/../../node_modules/@rjsf/utils/lib/canExpand.js","webpack://app/../../node_modules/@rjsf/utils/lib/createErrorHandler.js","webpack://app/../../node_modules/@rjsf/utils/lib/deepEquals.js","webpack://app/../../node_modules/@rjsf/utils/lib/findSchemaDefinition.js","webpack://app/../../node_modules/@rjsf/utils/lib/getOptionMatchingSimpleDiscriminator.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/getMatchingOption.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/getFirstMatchingOption.js","webpack://app/../../node_modules/@rjsf/utils/lib/getDiscriminatorFieldFromSchema.js","webpack://app/../../node_modules/@rjsf/utils/lib/guessType.js","webpack://app/../../node_modules/@rjsf/utils/lib/getSchemaType.js","webpack://app/../../node_modules/@rjsf/utils/lib/mergeSchemas.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/retrieveSchema.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/getClosestMatchingOption.js","webpack://app/../../node_modules/@rjsf/utils/lib/isFixedItems.js","webpack://app/../../node_modules/@rjsf/utils/lib/mergeDefaultsWithFormData.js","webpack://app/../../node_modules/@rjsf/utils/lib/mergeObjects.js","webpack://app/../../node_modules/@rjsf/utils/lib/isConstant.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/isSelect.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/isMultiSelect.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/getDefaultFormState.js","webpack://app/../../node_modules/@rjsf/utils/lib/isCustomWidget.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/isFilesArray.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/getDisplayLabel.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/mergeValidationData.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/sanitizeDataForNewSchema.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/toIdSchema.js","webpack://app/../../node_modules/@rjsf/utils/lib/schema/toPathSchema.js","webpack://app/../../node_modules/@rjsf/utils/lib/createSchemaUtils.js","webpack://app/../../node_modules/@rjsf/utils/lib/dataURItoBlob.js","webpack://app/../../node_modules/@rjsf/utils/lib/replaceStringParameters.js","webpack://app/../../node_modules/@rjsf/utils/lib/englishStringTranslator.js","webpack://app/../../node_modules/@rjsf/utils/lib/enumOptionsValueForIndex.js","webpack://app/../../node_modules/@rjsf/utils/lib/enumOptionsDeselectValue.js","webpack://app/../../node_modules/@rjsf/utils/lib/enumOptionsIsSelected.js","webpack://app/../../node_modules/@rjsf/utils/lib/enumOptionsIndexForValue.js","webpack://app/../../node_modules/@rjsf/utils/lib/enumOptionsSelectValue.js","webpack://app/../../node_modules/@rjsf/utils/lib/ErrorSchemaBuilder.js","webpack://app/../../node_modules/@rjsf/utils/lib/rangeSpec.js","webpack://app/../../node_modules/@rjsf/utils/lib/getInputProps.js","webpack://app/../../node_modules/@rjsf/utils/lib/getSubmitButtonOptions.js","webpack://app/../../node_modules/@rjsf/utils/lib/getTemplate.js","webpack://app/../../node_modules/@rjsf/utils/lib/getWidget.js","webpack://app/../../node_modules/@rjsf/utils/lib/hashForSchema.js","webpack://app/../../node_modules/@rjsf/utils/lib/hasWidget.js","webpack://app/../../node_modules/@rjsf/utils/lib/idGenerators.js","webpack://app/../../node_modules/@rjsf/utils/lib/labelValue.js","webpack://app/../../node_modules/@rjsf/utils/lib/localToUTC.js","webpack://app/../../node_modules/@rjsf/utils/lib/toConstant.js","webpack://app/../../node_modules/@rjsf/utils/lib/optionsList.js","webpack://app/../../node_modules/@rjsf/utils/lib/orderProperties.js","webpack://app/../../node_modules/@rjsf/utils/lib/pad.js","webpack://app/../../node_modules/@rjsf/utils/lib/parseDateString.js","webpack://app/../../node_modules/@rjsf/utils/lib/schemaRequiresTrueValue.js","webpack://app/../../node_modules/@rjsf/utils/lib/shouldRender.js","webpack://app/../../node_modules/@rjsf/utils/lib/toDateString.js","webpack://app/../../node_modules/@rjsf/utils/lib/toErrorList.js","webpack://app/../../node_modules/@rjsf/utils/lib/toErrorSchema.js","webpack://app/../../node_modules/@rjsf/utils/lib/unwrapErrorHandler.js","webpack://app/../../node_modules/@rjsf/utils/lib/utcToLocal.js","webpack://app/../../node_modules/@rjsf/utils/lib/validationDataMerge.js","webpack://app/../../node_modules/@rjsf/utils/lib/withIdRefPrefix.js","webpack://app/../../node_modules/@rjsf/utils/lib/enums.js","webpack://app/../../node_modules/@rjsf/utils/lib/parser/ParserValidator.js","webpack://app/../../node_modules/@rjsf/utils/lib/parser/schemaParser.js","webpack://app/../../node_modules/@rjsf/utils/node_modules/react-is/cjs/react-is.production.min.js","webpack://app/../../node_modules/@rjsf/utils/node_modules/react-is/index.js","webpack://app/../../node_modules/@rjsf/validator-ajv8/lib/createAjvInstance.js","webpack://app/../../node_modules/@rjsf/validator-ajv8/lib/processRawValidationErrors.js","webpack://app/../../node_modules/@rjsf/validator-ajv8/lib/validator.js","webpack://app/../../node_modules/@rjsf/validator-ajv8/lib/customizeValidator.js","webpack://app/../../node_modules/@rjsf/validator-ajv8/lib/precompiledValidator.js","webpack://app/../../node_modules/@rjsf/validator-ajv8/lib/createPrecompiledValidator.js","webpack://app/../../node_modules/@rjsf/validator-ajv8/lib/index.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Component } from 'react';\nimport { getTemplate, getWidget, getUiOptions, isFixedItems, allowAdditionalItems, isCustomWidget, optionsList, TranslatableString, ITEMS_KEY, } from '@rjsf/utils';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport { nanoid } from 'nanoid';\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n    return nanoid();\n}\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData(formData) {\n    return !Array.isArray(formData)\n        ? []\n        : formData.map((item) => {\n            return {\n                key: generateRowId(),\n                item,\n            };\n        });\n}\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData(keyedFormData) {\n    if (Array.isArray(keyedFormData)) {\n        return keyedFormData.map((keyedItem) => keyedItem.item);\n    }\n    return [];\n}\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField extends Component {\n    /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n     *\n     * @param props - The `FieldProps` for this template\n     */\n    constructor(props) {\n        super(props);\n        /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n         * that the schema is fixed and allows additional items.\n         */\n        this._getNewFormDataRow = () => {\n            const { schema, registry } = this.props;\n            const { schemaUtils } = registry;\n            let itemSchema = schema.items;\n            if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n                itemSchema = schema.additionalItems;\n            }\n            // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n            return schemaUtils.getDefaultFormState(itemSchema);\n        };\n        /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n         * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n         * keyed data\n         *\n         * @param event - The event for the click\n         */\n        this.onAddClick = (event) => {\n            this._handleAddClick(event);\n        };\n        /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n         * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n         * form data converted from the keyed data\n         *\n         * @param index - The index at which the add button is clicked\n         */\n        this.onAddIndexClick = (index) => {\n            return (event) => {\n                this._handleAddClick(event, index);\n            };\n        };\n        /** Callback handler for when the user clicks on the copy button on an existing array element. Clones the row of\n         * keyed form data at the `index` into the next position in the state, and then returning `onChange()` with the plain\n         * form data converted from the keyed data\n         *\n         * @param index - The index at which the copy button is clicked\n         */\n        this.onCopyIndexClick = (index) => {\n            return (event) => {\n                if (event) {\n                    event.preventDefault();\n                }\n                const { onChange, errorSchema } = this.props;\n                const { keyedFormData } = this.state;\n                // refs #195: revalidate to ensure properly reindexing errors\n                let newErrorSchema;\n                if (errorSchema) {\n                    newErrorSchema = {};\n                    for (const idx in errorSchema) {\n                        const i = parseInt(idx);\n                        if (i <= index) {\n                            set(newErrorSchema, [i], errorSchema[idx]);\n                        }\n                        else if (i > index) {\n                            set(newErrorSchema, [i + 1], errorSchema[idx]);\n                        }\n                    }\n                }\n                const newKeyedFormDataRow = {\n                    key: generateRowId(),\n                    item: cloneDeep(keyedFormData[index].item),\n                };\n                const newKeyedFormData = [...keyedFormData];\n                if (index !== undefined) {\n                    newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);\n                }\n                else {\n                    newKeyedFormData.push(newKeyedFormDataRow);\n                }\n                this.setState({\n                    keyedFormData: newKeyedFormData,\n                    updatedKeyedFormData: true,\n                }, () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema));\n            };\n        };\n        /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n         * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n         * from the keyed data\n         *\n         * @param index - The index at which the remove button is clicked\n         */\n        this.onDropIndexClick = (index) => {\n            return (event) => {\n                if (event) {\n                    event.preventDefault();\n                }\n                const { onChange, errorSchema } = this.props;\n                const { keyedFormData } = this.state;\n                // refs #195: revalidate to ensure properly reindexing errors\n                let newErrorSchema;\n                if (errorSchema) {\n                    newErrorSchema = {};\n                    for (const idx in errorSchema) {\n                        const i = parseInt(idx);\n                        if (i < index) {\n                            set(newErrorSchema, [i], errorSchema[idx]);\n                        }\n                        else if (i > index) {\n                            set(newErrorSchema, [i - 1], errorSchema[idx]);\n                        }\n                    }\n                }\n                const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n                this.setState({\n                    keyedFormData: newKeyedFormData,\n                    updatedKeyedFormData: true,\n                }, () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema));\n            };\n        };\n        /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n         * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n         * plain form data converted from the keyed data\n         *\n         * @param index - The index of the item to move\n         * @param newIndex - The index to where the item is to be moved\n         */\n        this.onReorderClick = (index, newIndex) => {\n            return (event) => {\n                if (event) {\n                    event.preventDefault();\n                    event.currentTarget.blur();\n                }\n                const { onChange, errorSchema } = this.props;\n                let newErrorSchema;\n                if (errorSchema) {\n                    newErrorSchema = {};\n                    for (const idx in errorSchema) {\n                        const i = parseInt(idx);\n                        if (i == index) {\n                            set(newErrorSchema, [newIndex], errorSchema[index]);\n                        }\n                        else if (i == newIndex) {\n                            set(newErrorSchema, [index], errorSchema[newIndex]);\n                        }\n                        else {\n                            set(newErrorSchema, [idx], errorSchema[i]);\n                        }\n                    }\n                }\n                const { keyedFormData } = this.state;\n                function reOrderArray() {\n                    // Copy item\n                    const _newKeyedFormData = keyedFormData.slice();\n                    // Moves item from index to newIndex\n                    _newKeyedFormData.splice(index, 1);\n                    _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n                    return _newKeyedFormData;\n                }\n                const newKeyedFormData = reOrderArray();\n                this.setState({\n                    keyedFormData: newKeyedFormData,\n                }, () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema));\n            };\n        };\n        /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n         * `onChange` callback with the updated form data\n         *\n         * @param index - The index of the item being changed\n         */\n        this.onChangeForIndex = (index) => {\n            return (value, newErrorSchema, id) => {\n                const { formData, onChange, errorSchema } = this.props;\n                const arrayData = Array.isArray(formData) ? formData : [];\n                const newFormData = arrayData.map((item, i) => {\n                    // We need to treat undefined items as nulls to have validation.\n                    // See https://github.com/tdegrunt/jsonschema/issues/206\n                    const jsonValue = typeof value === 'undefined' ? null : value;\n                    return index === i ? jsonValue : item;\n                });\n                onChange(newFormData, errorSchema &&\n                    errorSchema && {\n                    ...errorSchema,\n                    [index]: newErrorSchema,\n                }, id);\n            };\n        };\n        /** Callback handler used to change the value for a checkbox */\n        this.onSelectChange = (value) => {\n            const { onChange, idSchema } = this.props;\n            onChange(value, undefined, idSchema && idSchema.$id);\n        };\n        const { formData = [] } = props;\n        const keyedFormData = generateKeyedFormData(formData);\n        this.state = {\n            keyedFormData,\n            updatedKeyedFormData: false,\n        };\n    }\n    /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n     * regenerates the keyed form data and returns it\n     *\n     * @param nextProps - The next set of props data\n     * @param prevState - The previous set of state data\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {\n        // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n        if (prevState.updatedKeyedFormData) {\n            return {\n                updatedKeyedFormData: false,\n            };\n        }\n        const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];\n        const previousKeyedFormData = prevState.keyedFormData || [];\n        const newKeyedFormData = nextFormData.length === previousKeyedFormData.length\n            ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n                return {\n                    key: previousKeyedFormDatum.key,\n                    item: nextFormData[index],\n                };\n            })\n            : generateKeyedFormData(nextFormData);\n        return {\n            keyedFormData: newKeyedFormData,\n        };\n    }\n    /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n     * the description from the schema.items, and finally the string \"Item\"\n     */\n    get itemTitle() {\n        const { schema, registry } = this.props;\n        const { translateString } = registry;\n        return get(schema, [ITEMS_KEY, 'title'], get(schema, [ITEMS_KEY, 'description'], translateString(TranslatableString.ArrayItemTitle)));\n    }\n    /** Determines whether the item described in the schema is always required, which is determined by whether any item\n     * may be null.\n     *\n     * @param itemSchema - The schema for the item\n     * @return - True if the item schema type does not contain the \"null\" type\n     */\n    isItemRequired(itemSchema) {\n        if (Array.isArray(itemSchema.type)) {\n            // While we don't yet support composite/nullable jsonschema types, it's\n            // future-proof to check for requirement against these.\n            return !itemSchema.type.includes('null');\n        }\n        // All non-null array item types are inherently required by design\n        return itemSchema.type !== 'null';\n    }\n    /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n     * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n     * `formData` matches that value, then false is returned, otherwise true is returned.\n     *\n     * @param formItems - The list of items in the form\n     * @returns - True if the item is addable otherwise false\n     */\n    canAddItem(formItems) {\n        const { schema, uiSchema, registry } = this.props;\n        let { addable } = getUiOptions(uiSchema, registry.globalUiOptions);\n        if (addable !== false) {\n            // if ui:options.addable was not explicitly set to false, we can add\n            // another item if we have not exceeded maxItems yet\n            if (schema.maxItems !== undefined) {\n                addable = formItems.length < schema.maxItems;\n            }\n            else {\n                addable = true;\n            }\n        }\n        return addable;\n    }\n    /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\n     * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\n     * the state, and then returning `onChange()` with the plain form data converted from the keyed data\n     *\n     * @param event - The event for the click\n     * @param [index] - The optional index at which to add the new data\n     */\n    _handleAddClick(event, index) {\n        if (event) {\n            event.preventDefault();\n        }\n        const { onChange, errorSchema } = this.props;\n        const { keyedFormData } = this.state;\n        // refs #195: revalidate to ensure properly reindexing errors\n        let newErrorSchema;\n        if (errorSchema) {\n            newErrorSchema = {};\n            for (const idx in errorSchema) {\n                const i = parseInt(idx);\n                if (index === undefined || i < index) {\n                    set(newErrorSchema, [i], errorSchema[idx]);\n                }\n                else if (i >= index) {\n                    set(newErrorSchema, [i + 1], errorSchema[idx]);\n                }\n            }\n        }\n        const newKeyedFormDataRow = {\n            key: generateRowId(),\n            item: this._getNewFormDataRow(),\n        };\n        const newKeyedFormData = [...keyedFormData];\n        if (index !== undefined) {\n            newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n        }\n        else {\n            newKeyedFormData.push(newKeyedFormDataRow);\n        }\n        this.setState({\n            keyedFormData: newKeyedFormData,\n            updatedKeyedFormData: true,\n        }, () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema));\n    }\n    /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n     */\n    render() {\n        const { schema, uiSchema, idSchema, registry } = this.props;\n        const { schemaUtils, translateString } = registry;\n        if (!(ITEMS_KEY in schema)) {\n            const uiOptions = getUiOptions(uiSchema);\n            const UnsupportedFieldTemplate = getTemplate('UnsupportedFieldTemplate', registry, uiOptions);\n            return (_jsx(UnsupportedFieldTemplate, { schema: schema, idSchema: idSchema, reason: translateString(TranslatableString.MissingItems), registry: registry }));\n        }\n        if (schemaUtils.isMultiSelect(schema)) {\n            // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n            return this.renderMultiSelect();\n        }\n        if (isCustomWidget(uiSchema)) {\n            return this.renderCustomWidget();\n        }\n        if (isFixedItems(schema)) {\n            return this.renderFixedArray();\n        }\n        if (schemaUtils.isFilesArray(schema, uiSchema)) {\n            return this.renderFiles();\n        }\n        return this.renderNormalArray();\n    }\n    /** Renders a normal array without any limitations of length\n     */\n    renderNormalArray() {\n        const { schema, uiSchema = {}, errorSchema, idSchema, name, disabled = false, readonly = false, autofocus = false, required = false, registry, onBlur, onFocus, idPrefix, idSeparator = '_', rawErrors, } = this.props;\n        const { keyedFormData } = this.state;\n        const title = schema.title === undefined ? name : schema.title;\n        const { schemaUtils, formContext } = registry;\n        const uiOptions = getUiOptions(uiSchema);\n        const _schemaItems = isObject(schema.items) ? schema.items : {};\n        const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n        const formData = keyedToPlainFormData(this.state.keyedFormData);\n        const canAdd = this.canAddItem(formData);\n        const arrayProps = {\n            canAdd,\n            items: keyedFormData.map((keyedItem, index) => {\n                const { key, item } = keyedItem;\n                // While we are actually dealing with a single item of type T, the types require a T[], so cast\n                const itemCast = item;\n                const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n                const itemErrorSchema = errorSchema ? errorSchema[index] : undefined;\n                const itemIdPrefix = idSchema.$id + idSeparator + index;\n                const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n                return this.renderArrayFieldItem({\n                    key,\n                    index,\n                    name: name && `${name}-${index}`,\n                    canAdd,\n                    canMoveUp: index > 0,\n                    canMoveDown: index < formData.length - 1,\n                    itemSchema,\n                    itemIdSchema,\n                    itemErrorSchema,\n                    itemData: itemCast,\n                    itemUiSchema: uiSchema.items,\n                    autofocus: autofocus && index === 0,\n                    onBlur,\n                    onFocus,\n                    rawErrors,\n                    totalItems: keyedFormData.length,\n                });\n            }),\n            className: `field field-array field-array-of-${itemsSchema.type}`,\n            disabled,\n            idSchema,\n            uiSchema,\n            onAddClick: this.onAddClick,\n            readonly,\n            required,\n            schema,\n            title,\n            formContext,\n            formData,\n            rawErrors,\n            registry,\n        };\n        const Template = getTemplate('ArrayFieldTemplate', registry, uiOptions);\n        return _jsx(Template, { ...arrayProps });\n    }\n    /** Renders an array using the custom widget provided by the user in the `uiSchema`\n     */\n    renderCustomWidget() {\n        var _a;\n        const { schema, idSchema, uiSchema, disabled = false, readonly = false, autofocus = false, required = false, hideError, placeholder, onBlur, onFocus, formData: items = [], registry, rawErrors, name, } = this.props;\n        const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n        const { widget, title: uiTitle, ...options } = getUiOptions(uiSchema, globalUiOptions);\n        const Widget = getWidget(schema, widget, widgets);\n        const label = (_a = uiTitle !== null && uiTitle !== void 0 ? uiTitle : schema.title) !== null && _a !== void 0 ? _a : name;\n        const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n        return (_jsx(Widget, { id: idSchema.$id, name: name, multiple: true, onChange: this.onSelectChange, onBlur: onBlur, onFocus: onFocus, options: options, schema: schema, uiSchema: uiSchema, registry: registry, value: items, disabled: disabled, readonly: readonly, hideError: hideError, required: required, label: label, hideLabel: !displayLabel, placeholder: placeholder, formContext: formContext, autofocus: autofocus, rawErrors: rawErrors }));\n    }\n    /** Renders an array as a set of checkboxes\n     */\n    renderMultiSelect() {\n        var _a;\n        const { schema, idSchema, uiSchema, formData: items = [], disabled = false, readonly = false, autofocus = false, required = false, placeholder, onBlur, onFocus, registry, rawErrors, name, } = this.props;\n        const { widgets, schemaUtils, formContext, globalUiOptions } = registry;\n        const itemsSchema = schemaUtils.retrieveSchema(schema.items, items);\n        const enumOptions = optionsList(itemsSchema);\n        const { widget = 'select', title: uiTitle, ...options } = getUiOptions(uiSchema, globalUiOptions);\n        const Widget = getWidget(schema, widget, widgets);\n        const label = (_a = uiTitle !== null && uiTitle !== void 0 ? uiTitle : schema.title) !== null && _a !== void 0 ? _a : name;\n        const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n        return (_jsx(Widget, { id: idSchema.$id, name: name, multiple: true, onChange: this.onSelectChange, onBlur: onBlur, onFocus: onFocus, options: { ...options, enumOptions }, schema: schema, uiSchema: uiSchema, registry: registry, value: items, disabled: disabled, readonly: readonly, required: required, label: label, hideLabel: !displayLabel, placeholder: placeholder, formContext: formContext, autofocus: autofocus, rawErrors: rawErrors }));\n    }\n    /** Renders an array of files using the `FileWidget`\n     */\n    renderFiles() {\n        var _a;\n        const { schema, uiSchema, idSchema, name, disabled = false, readonly = false, autofocus = false, required = false, onBlur, onFocus, registry, formData: items = [], rawErrors, } = this.props;\n        const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n        const { widget = 'files', title: uiTitle, ...options } = getUiOptions(uiSchema, globalUiOptions);\n        const Widget = getWidget(schema, widget, widgets);\n        const label = (_a = uiTitle !== null && uiTitle !== void 0 ? uiTitle : schema.title) !== null && _a !== void 0 ? _a : name;\n        const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n        return (_jsx(Widget, { options: options, id: idSchema.$id, name: name, multiple: true, onChange: this.onSelectChange, onBlur: onBlur, onFocus: onFocus, schema: schema, uiSchema: uiSchema, value: items, disabled: disabled, readonly: readonly, required: required, registry: registry, formContext: formContext, autofocus: autofocus, rawErrors: rawErrors, label: label, hideLabel: !displayLabel }));\n    }\n    /** Renders an array that has a maximum limit of items\n     */\n    renderFixedArray() {\n        const { schema, uiSchema = {}, formData = [], errorSchema, idPrefix, idSeparator = '_', idSchema, name, disabled = false, readonly = false, autofocus = false, required = false, registry, onBlur, onFocus, rawErrors, } = this.props;\n        const { keyedFormData } = this.state;\n        let { formData: items = [] } = this.props;\n        const title = schema.title || name;\n        const uiOptions = getUiOptions(uiSchema);\n        const { schemaUtils, formContext } = registry;\n        const _schemaItems = isObject(schema.items) ? schema.items : [];\n        const itemSchemas = _schemaItems.map((item, index) => schemaUtils.retrieveSchema(item, formData[index]));\n        const additionalSchema = isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n            : null;\n        if (!items || items.length < itemSchemas.length) {\n            // to make sure at least all fixed items are generated\n            items = items || [];\n            items = items.concat(new Array(itemSchemas.length - items.length));\n        }\n        // These are the props passed into the render function\n        const canAdd = this.canAddItem(items) && !!additionalSchema;\n        const arrayProps = {\n            canAdd,\n            className: 'field field-array field-array-fixed-items',\n            disabled,\n            idSchema,\n            formData,\n            items: keyedFormData.map((keyedItem, index) => {\n                const { key, item } = keyedItem;\n                // While we are actually dealing with a single item of type T, the types require a T[], so cast\n                const itemCast = item;\n                const additional = index >= itemSchemas.length;\n                const itemSchema = (additional && isObject(schema.additionalItems)\n                    ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n                    : itemSchemas[index]) || {};\n                const itemIdPrefix = idSchema.$id + idSeparator + index;\n                const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n                const itemUiSchema = additional\n                    ? uiSchema.additionalItems || {}\n                    : Array.isArray(uiSchema.items)\n                        ? uiSchema.items[index]\n                        : uiSchema.items || {};\n                const itemErrorSchema = errorSchema ? errorSchema[index] : undefined;\n                return this.renderArrayFieldItem({\n                    key,\n                    index,\n                    name: name && `${name}-${index}`,\n                    canAdd,\n                    canRemove: additional,\n                    canMoveUp: index >= itemSchemas.length + 1,\n                    canMoveDown: additional && index < items.length - 1,\n                    itemSchema,\n                    itemData: itemCast,\n                    itemUiSchema,\n                    itemIdSchema,\n                    itemErrorSchema,\n                    autofocus: autofocus && index === 0,\n                    onBlur,\n                    onFocus,\n                    rawErrors,\n                    totalItems: keyedFormData.length,\n                });\n            }),\n            onAddClick: this.onAddClick,\n            readonly,\n            required,\n            registry,\n            schema,\n            uiSchema,\n            title,\n            formContext,\n            rawErrors,\n        };\n        const Template = getTemplate('ArrayFieldTemplate', registry, uiOptions);\n        return _jsx(Template, { ...arrayProps });\n    }\n    /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n     * back to the `ArrayFieldItemTemplate`.\n     *\n     * @param props - The props for the individual array item to be rendered\n     */\n    renderArrayFieldItem(props) {\n        const { key, index, name, canAdd, canRemove = true, canMoveUp, canMoveDown, itemSchema, itemData, itemUiSchema, itemIdSchema, itemErrorSchema, autofocus, onBlur, onFocus, rawErrors, totalItems, } = props;\n        const { disabled, hideError, idPrefix, idSeparator, readonly, uiSchema, registry, formContext } = this.props;\n        const { fields: { ArraySchemaField, SchemaField }, globalUiOptions, } = registry;\n        const ItemSchemaField = ArraySchemaField || SchemaField;\n        const { orderable = true, removable = true, copyable = false } = getUiOptions(uiSchema, globalUiOptions);\n        const has = {\n            moveUp: orderable && canMoveUp,\n            moveDown: orderable && canMoveDown,\n            copy: copyable && canAdd,\n            remove: removable && canRemove,\n            toolbar: false,\n        };\n        has.toolbar = Object.keys(has).some((key) => has[key]);\n        return {\n            children: (_jsx(ItemSchemaField, { name: name, index: index, schema: itemSchema, uiSchema: itemUiSchema, formData: itemData, formContext: formContext, errorSchema: itemErrorSchema, idPrefix: idPrefix, idSeparator: idSeparator, idSchema: itemIdSchema, required: this.isItemRequired(itemSchema), onChange: this.onChangeForIndex(index), onBlur: onBlur, onFocus: onFocus, registry: registry, disabled: disabled, readonly: readonly, hideError: hideError, autofocus: autofocus, rawErrors: rawErrors })),\n            className: 'array-item',\n            disabled,\n            canAdd,\n            hasCopy: has.copy,\n            hasToolbar: has.toolbar,\n            hasMoveUp: has.moveUp,\n            hasMoveDown: has.moveDown,\n            hasRemove: has.remove,\n            index,\n            totalItems,\n            key,\n            onAddIndexClick: this.onAddIndexClick,\n            onCopyIndexClick: this.onCopyIndexClick,\n            onDropIndexClick: this.onDropIndexClick,\n            onReorderClick: this.onReorderClick,\n            readonly,\n            registry,\n            schema: itemSchema,\n            uiSchema: itemUiSchema,\n        };\n    }\n}\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n//# sourceMappingURL=ArrayField.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getWidget, getUiOptions, optionsList, TranslatableString, } from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField(props) {\n    var _a, _b;\n    const { schema, name, uiSchema, idSchema, formData, registry, required, disabled, readonly, hideError, autofocus, onChange, onFocus, onBlur, rawErrors, } = props;\n    const { title } = schema;\n    const { widgets, formContext, translateString, globalUiOptions } = registry;\n    const { widget = 'checkbox', title: uiTitle, \n    // Unlike the other fields, don't use `getDisplayLabel()` since it always returns false for the boolean type\n    label: displayLabel = true, ...options } = getUiOptions(uiSchema, globalUiOptions);\n    const Widget = getWidget(schema, widget, widgets);\n    const yes = translateString(TranslatableString.YesLabel);\n    const no = translateString(TranslatableString.NoLabel);\n    let enumOptions;\n    const label = (_a = uiTitle !== null && uiTitle !== void 0 ? uiTitle : title) !== null && _a !== void 0 ? _a : name;\n    if (Array.isArray(schema.oneOf)) {\n        enumOptions = optionsList({\n            oneOf: schema.oneOf\n                .map((option) => {\n                if (isObject(option)) {\n                    return {\n                        ...option,\n                        title: option.title || (option.const === true ? yes : no),\n                    };\n                }\n                return undefined;\n            })\n                .filter((o) => o), // cast away the error that typescript can't grok is fixed\n        });\n    }\n    else {\n        // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n        const schemaWithEnumNames = schema;\n        const enums = (_b = schema.enum) !== null && _b !== void 0 ? _b : [true, false];\n        if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v) => typeof v === 'boolean')) {\n            enumOptions = [\n                {\n                    value: enums[0],\n                    label: enums[0] ? yes : no,\n                },\n                {\n                    value: enums[1],\n                    label: enums[1] ? yes : no,\n                },\n            ];\n        }\n        else {\n            enumOptions = optionsList({\n                enum: enums,\n                // NOTE: enumNames is deprecated, but still supported for now.\n                enumNames: schemaWithEnumNames.enumNames,\n            });\n        }\n    }\n    return (_jsx(Widget, { options: { ...options, enumOptions }, schema: schema, uiSchema: uiSchema, id: idSchema.$id, name: name, onChange: onChange, onFocus: onFocus, onBlur: onBlur, label: label, hideLabel: !displayLabel, value: formData, required: required, disabled: disabled, readonly: readonly, hideError: hideError, registry: registry, formContext: formContext, autofocus: autofocus, rawErrors: rawErrors }));\n}\nexport default BooleanField;\n//# sourceMappingURL=BooleanField.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Component } from 'react';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport { deepEquals, ERRORS_KEY, getDiscriminatorFieldFromSchema, getUiOptions, getWidget, mergeSchemas, TranslatableString, } from '@rjsf/utils';\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField extends Component {\n    /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n     *\n     * @param props - The `FieldProps` for this template\n     */\n    constructor(props) {\n        super(props);\n        /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n         * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n         * the `onChange` handler.\n         *\n         * @param option - The new option value being selected\n         */\n        this.onOptionChange = (option) => {\n            const { selectedOption, retrievedOptions } = this.state;\n            const { formData, onChange, registry } = this.props;\n            const { schemaUtils } = registry;\n            const intOption = option !== undefined ? parseInt(option, 10) : -1;\n            if (intOption === selectedOption) {\n                return;\n            }\n            const newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n            const oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n            let newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);\n            if (newFormData && newOption) {\n                // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n                // so that only the root objects themselves are created without adding undefined children properties\n                newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, 'excludeObjectChildren');\n            }\n            onChange(newFormData, undefined, this.getFieldId());\n            this.setState({ selectedOption: intOption });\n        };\n        const { formData, options, registry: { schemaUtils }, } = this.props;\n        // cache the retrieved options in state in case they have $refs to save doing it later\n        const retrievedOptions = options.map((opt) => schemaUtils.retrieveSchema(opt, formData));\n        this.state = {\n            retrievedOptions,\n            selectedOption: this.getMatchingOption(0, formData, retrievedOptions),\n        };\n    }\n    /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\n     * currently selected option based on the overall `formData`\n     *\n     * @param prevProps - The previous `FieldProps` for this template\n     * @param prevState - The previous `AnyOfFieldState` for this template\n     */\n    componentDidUpdate(prevProps, prevState) {\n        const { formData, options, idSchema } = this.props;\n        const { selectedOption } = this.state;\n        let newState = this.state;\n        if (!deepEquals(prevProps.options, options)) {\n            const { registry: { schemaUtils }, } = this.props;\n            // re-cache the retrieved options in state in case they have $refs to save doing it later\n            const retrievedOptions = options.map((opt) => schemaUtils.retrieveSchema(opt, formData));\n            newState = { selectedOption, retrievedOptions };\n        }\n        if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {\n            const { retrievedOptions } = newState;\n            const matchingOption = this.getMatchingOption(selectedOption, formData, retrievedOptions);\n            if (prevState && matchingOption !== selectedOption) {\n                newState = { selectedOption: matchingOption, retrievedOptions };\n            }\n        }\n        if (newState !== this.state) {\n            this.setState(newState);\n        }\n    }\n    /** Determines the best matching option for the given `formData` and `options`.\n     *\n     * @param formData - The new formData\n     * @param options - The list of options to choose from\n     * @return - The index of the `option` that best matches the `formData`\n     */\n    getMatchingOption(selectedOption, formData, options) {\n        const { schema, registry: { schemaUtils }, } = this.props;\n        const discriminator = getDiscriminatorFieldFromSchema(schema);\n        const option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption, discriminator);\n        return option;\n    }\n    getFieldId() {\n        const { idSchema, schema } = this.props;\n        return `${idSchema.$id}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`;\n    }\n    /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n     */\n    render() {\n        const { name, disabled = false, errorSchema = {}, formContext, onBlur, onFocus, registry, schema, uiSchema, } = this.props;\n        const { widgets, fields, translateString, globalUiOptions, schemaUtils } = registry;\n        const { SchemaField: _SchemaField } = fields;\n        const { selectedOption, retrievedOptions } = this.state;\n        const { widget = 'select', placeholder, autofocus, autocomplete, title = schema.title, ...uiOptions } = getUiOptions(uiSchema, globalUiOptions);\n        const Widget = getWidget({ type: 'number' }, widget, widgets);\n        const rawErrors = get(errorSchema, ERRORS_KEY, []);\n        const fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n        const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n        const option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n        let optionSchema;\n        if (option) {\n            // merge top level required field\n            const { required } = schema;\n            // Merge in all the non-oneOf/anyOf properties and also skip the special ADDITIONAL_PROPERTY_FLAG property\n            optionSchema = required ? mergeSchemas({ required }, option) : option;\n        }\n        const translateEnum = title\n            ? TranslatableString.TitleOptionPrefix\n            : TranslatableString.OptionPrefix;\n        const translateParams = title ? [title] : [];\n        const enumOptions = retrievedOptions.map((opt, index) => ({\n            label: opt.title || translateString(translateEnum, translateParams.concat(String(index + 1))),\n            value: index,\n        }));\n        return (_jsxs(\"div\", { className: 'panel panel-default panel-body', children: [_jsx(\"div\", { className: 'form-group', children: _jsx(Widget, { id: this.getFieldId(), name: `${name}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`, schema: { type: 'number', default: 0 }, onChange: this.onOptionChange, onBlur: onBlur, onFocus: onFocus, disabled: disabled || isEmpty(enumOptions), multiple: false, rawErrors: rawErrors, errorSchema: fieldErrorSchema, value: selectedOption >= 0 ? selectedOption : undefined, options: { enumOptions, ...uiOptions }, registry: registry, formContext: formContext, placeholder: placeholder, autocomplete: autocomplete, autofocus: autofocus, label: title !== null && title !== void 0 ? title : name, hideLabel: !displayLabel }) }), option !== null && _jsx(_SchemaField, { ...this.props, schema: optionSchema })] }));\n    }\n}\nexport default AnyOfField;\n//# sourceMappingURL=MultiSchemaField.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useCallback } from 'react';\nimport { asNumber } from '@rjsf/utils';\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField(props) {\n    const { registry, onChange, formData, value: initialValue } = props;\n    const [lastValue, setLastValue] = useState(initialValue);\n    const { StringField } = registry.fields;\n    let value = formData;\n    /** Handle the change from the `StringField` to properly convert to a number\n     *\n     * @param value - The current value for the change occurring\n     */\n    const handleChange = useCallback((value) => {\n        // Cache the original value in component state\n        setLastValue(value);\n        // Normalize decimals that don't start with a zero character in advance so\n        // that the rest of the normalization logic is simpler\n        if (`${value}`.charAt(0) === '.') {\n            value = `0${value}`;\n        }\n        // Check that the value is a string (this can happen if the widget used is a\n        // <select>, due to an enum declaration etc) then, if the value ends in a\n        // trailing decimal point or multiple zeroes, strip the trailing values\n        const processed = typeof value === 'string' && value.match(trailingCharMatcherWithPrefix)\n            ? asNumber(value.replace(trailingCharMatcher, ''))\n            : asNumber(value);\n        onChange(processed);\n    }, [onChange]);\n    if (typeof lastValue === 'string' && typeof value === 'number') {\n        // Construct a regular expression that checks for a string that consists\n        // of the formData value suffixed with zero or one '.' characters and zero\n        // or more '0' characters\n        const re = new RegExp(`${value}`.replace('.', '\\\\.') + '\\\\.?0*$');\n        // If the cached \"lastValue\" is a match, use that instead of the formData\n        // value to prevent the input value from changing in the UI\n        if (lastValue.match(re)) {\n            value = lastValue;\n        }\n    }\n    return _jsx(StringField, { ...props, formData: value, onChange: handleChange });\n}\nexport default NumberField;\n//# sourceMappingURL=NumberField.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Component } from 'react';\nimport { getTemplate, getUiOptions, orderProperties, TranslatableString, ADDITIONAL_PROPERTY_FLAG, PROPERTIES_KEY, REF_KEY, ANY_OF_KEY, ONE_OF_KEY, } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField extends Component {\n    constructor() {\n        super(...arguments);\n        /** Set up the initial state */\n        this.state = {\n            wasPropertyKeyModified: false,\n            additionalProperties: {},\n        };\n        /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n         * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n         * formData.\n         *\n         * @param name - The name of the property\n         * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n         * @returns - The onPropertyChange callback for the `name` property\n         */\n        this.onPropertyChange = (name, addedByAdditionalProperties = false) => {\n            return (value, newErrorSchema, id) => {\n                const { formData, onChange, errorSchema } = this.props;\n                if (value === undefined && addedByAdditionalProperties) {\n                    // Don't set value = undefined for fields added by\n                    // additionalProperties. Doing so removes them from the\n                    // formData, which causes them to completely disappear\n                    // (including the input field for the property name). Unlike\n                    // fields which are \"mandated\" by the schema, these fields can\n                    // be set to undefined by clicking a \"delete field\" button, so\n                    // set empty values to the empty string.\n                    value = '';\n                }\n                const newFormData = { ...formData, [name]: value };\n                onChange(newFormData, errorSchema &&\n                    errorSchema && {\n                    ...errorSchema,\n                    [name]: newErrorSchema,\n                }, id);\n            };\n        };\n        /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n         * and calls the `onChange` callback with it\n         *\n         * @param key - The key for which the drop callback is desired\n         * @returns - The drop property click callback\n         */\n        this.onDropPropertyClick = (key) => {\n            return (event) => {\n                event.preventDefault();\n                const { onChange, formData } = this.props;\n                const copiedFormData = { ...formData };\n                unset(copiedFormData, key);\n                onChange(copiedFormData);\n            };\n        };\n        /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n         * that is already not assigned is found.\n         *\n         * @param preferredKey - The preferred name of a new key\n         * @param [formData] - The form data in which to check if the desired key already exists\n         * @returns - The name of the next available key from `preferredKey`\n         */\n        this.getAvailableKey = (preferredKey, formData) => {\n            const { uiSchema, registry } = this.props;\n            const { duplicateKeySuffixSeparator = '-' } = getUiOptions(uiSchema, registry.globalUiOptions);\n            let index = 0;\n            let newKey = preferredKey;\n            while (has(formData, newKey)) {\n                newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n            }\n            return newKey;\n        };\n        /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n         * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n         *\n         * @param oldValue - The old value of a field\n         * @returns - The key change callback function\n         */\n        this.onKeyChange = (oldValue) => {\n            return (value, newErrorSchema) => {\n                if (oldValue === value) {\n                    return;\n                }\n                const { formData, onChange, errorSchema } = this.props;\n                value = this.getAvailableKey(value, formData);\n                const newFormData = {\n                    ...formData,\n                };\n                const newKeys = { [oldValue]: value };\n                const keyValues = Object.keys(newFormData).map((key) => {\n                    const newKey = newKeys[key] || key;\n                    return { [newKey]: newFormData[key] };\n                });\n                const renamedObj = Object.assign({}, ...keyValues);\n                this.setState({ wasPropertyKeyModified: true });\n                onChange(renamedObj, errorSchema &&\n                    errorSchema && {\n                    ...errorSchema,\n                    [value]: newErrorSchema,\n                });\n            };\n        };\n        /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n         * default data for that field has been added to the formData.\n         *\n         * @param schema - The schema element to which the new property is being added\n         */\n        this.handleAddClick = (schema) => () => {\n            if (!schema.additionalProperties) {\n                return;\n            }\n            const { formData, onChange, registry } = this.props;\n            const newFormData = { ...formData };\n            let type = undefined;\n            if (isObject(schema.additionalProperties)) {\n                type = schema.additionalProperties.type;\n                let apSchema = schema.additionalProperties;\n                if (REF_KEY in apSchema) {\n                    const { schemaUtils } = registry;\n                    apSchema = schemaUtils.retrieveSchema({ $ref: apSchema[REF_KEY] }, formData);\n                    type = apSchema.type;\n                }\n                if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n                    type = 'object';\n                }\n            }\n            const newKey = this.getAvailableKey('newKey', newFormData);\n            // Cast this to make the `set` work properly\n            set(newFormData, newKey, this.getDefaultValue(type));\n            onChange(newFormData);\n        };\n    }\n    /** Returns a flag indicating whether the `name` field is required in the object schema\n     *\n     * @param name - The name of the field to check for required-ness\n     * @returns - True if the field `name` is required, false otherwise\n     */\n    isRequired(name) {\n        const { schema } = this.props;\n        return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;\n    }\n    /** Returns a default value to be used for a new additional schema property of the given `type`\n     *\n     * @param type - The type of the new additional schema property\n     */\n    getDefaultValue(type) {\n        const { registry: { translateString }, } = this.props;\n        switch (type) {\n            case 'array':\n                return [];\n            case 'boolean':\n                return false;\n            case 'null':\n                return null;\n            case 'number':\n                return 0;\n            case 'object':\n                return {};\n            case 'string':\n            default:\n                // We don't have a datatype for some reason (perhaps additionalProperties was true)\n                return translateString(TranslatableString.NewStringDefault);\n        }\n    }\n    /** Renders the `ObjectField` from the given props\n     */\n    render() {\n        var _a, _b, _c;\n        const { schema: rawSchema, uiSchema = {}, formData, errorSchema, idSchema, name, required = false, disabled = false, readonly = false, hideError, idPrefix, idSeparator, onBlur, onFocus, registry, } = this.props;\n        const { fields, formContext, schemaUtils, translateString, globalUiOptions } = registry;\n        const { SchemaField } = fields;\n        const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n        const uiOptions = getUiOptions(uiSchema, globalUiOptions);\n        const { properties: schemaProperties = {} } = schema;\n        const title = (_b = (_a = uiOptions.title) !== null && _a !== void 0 ? _a : schema.title) !== null && _b !== void 0 ? _b : name;\n        const description = (_c = uiOptions.description) !== null && _c !== void 0 ? _c : schema.description;\n        let orderedProperties;\n        try {\n            const properties = Object.keys(schemaProperties);\n            orderedProperties = orderProperties(properties, uiOptions.order);\n        }\n        catch (err) {\n            return (_jsxs(\"div\", { children: [_jsx(\"p\", { className: 'config-error', style: { color: 'red' }, children: _jsx(Markdown, { children: translateString(TranslatableString.InvalidObjectField, [name || 'root', err.message]) }) }), _jsx(\"pre\", { children: JSON.stringify(schema) })] }));\n        }\n        const Template = getTemplate('ObjectFieldTemplate', registry, uiOptions);\n        const templateProps = {\n            // getDisplayLabel() always returns false for object types, so just check the `uiOptions.label`\n            title: uiOptions.label === false ? '' : title,\n            description: uiOptions.label === false ? undefined : description,\n            properties: orderedProperties.map((name) => {\n                const addedByAdditionalProperties = has(schema, [PROPERTIES_KEY, name, ADDITIONAL_PROPERTY_FLAG]);\n                const fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];\n                const hidden = getUiOptions(fieldUiSchema).widget === 'hidden';\n                const fieldIdSchema = get(idSchema, [name], {});\n                return {\n                    content: (_jsx(SchemaField, { name: name, required: this.isRequired(name), schema: get(schema, [PROPERTIES_KEY, name], {}), uiSchema: fieldUiSchema, errorSchema: get(errorSchema, name), idSchema: fieldIdSchema, idPrefix: idPrefix, idSeparator: idSeparator, formData: get(formData, name), formContext: formContext, wasPropertyKeyModified: this.state.wasPropertyKeyModified, onKeyChange: this.onKeyChange(name), onChange: this.onPropertyChange(name, addedByAdditionalProperties), onBlur: onBlur, onFocus: onFocus, registry: registry, disabled: disabled, readonly: readonly, hideError: hideError, onDropPropertyClick: this.onDropPropertyClick }, name)),\n                    name,\n                    readonly,\n                    disabled,\n                    required,\n                    hidden,\n                };\n            }),\n            readonly,\n            disabled,\n            required,\n            idSchema,\n            uiSchema,\n            errorSchema,\n            schema,\n            formData,\n            formContext,\n            registry,\n        };\n        return _jsx(Template, { ...templateProps, onAddClick: this.handleAddClick });\n    }\n}\nexport default ObjectField;\n//# sourceMappingURL=ObjectField.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, Component } from 'react';\nimport { ADDITIONAL_PROPERTY_FLAG, deepEquals, descriptionId, getSchemaType, getTemplate, getUiOptions, ID_KEY, mergeObjects, TranslatableString, UI_OPTIONS_KEY, } from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\nimport omit from 'lodash/omit';\nimport Markdown from 'markdown-to-jsx';\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES = {\n    array: 'ArrayField',\n    boolean: 'BooleanField',\n    integer: 'NumberField',\n    number: 'NumberField',\n    object: 'ObjectField',\n    string: 'StringField',\n    null: 'NullField',\n};\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent(schema, uiOptions, idSchema, registry) {\n    const field = uiOptions.field;\n    const { fields, translateString } = registry;\n    if (typeof field === 'function') {\n        return field;\n    }\n    if (typeof field === 'string' && field in fields) {\n        return fields[field];\n    }\n    const schemaType = getSchemaType(schema);\n    const type = Array.isArray(schemaType) ? schemaType[0] : schemaType || '';\n    const schemaId = schema.$id;\n    let componentName = COMPONENT_TYPES[type];\n    if (schemaId && schemaId in fields) {\n        componentName = schemaId;\n    }\n    // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n    // render a field and let the MultiSchemaField component handle the form display\n    if (!componentName && (schema.anyOf || schema.oneOf)) {\n        return () => null;\n    }\n    return componentName in fields\n        ? fields[componentName]\n        : () => {\n            const UnsupportedFieldTemplate = getTemplate('UnsupportedFieldTemplate', registry, uiOptions);\n            return (_jsx(UnsupportedFieldTemplate, { schema: schema, idSchema: idSchema, reason: translateString(TranslatableString.UnknownFieldType, [String(schema.type)]), registry: registry }));\n        };\n}\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender(props) {\n    const { schema: _schema, idSchema: _idSchema, uiSchema, formData, errorSchema, idPrefix, idSeparator, name, onChange, onKeyChange, onDropPropertyClick, required, registry, wasPropertyKeyModified = false, } = props;\n    const { formContext, schemaUtils, globalUiOptions } = registry;\n    const uiOptions = getUiOptions(uiSchema, globalUiOptions);\n    const FieldTemplate = getTemplate('FieldTemplate', registry, uiOptions);\n    const DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, uiOptions);\n    const FieldHelpTemplate = getTemplate('FieldHelpTemplate', registry, uiOptions);\n    const FieldErrorTemplate = getTemplate('FieldErrorTemplate', registry, uiOptions);\n    const schema = schemaUtils.retrieveSchema(_schema, formData);\n    const fieldId = _idSchema[ID_KEY];\n    const idSchema = mergeObjects(schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator), _idSchema);\n    /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n     * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n     */\n    const handleFieldComponentChange = useCallback((formData, newErrorSchema, id) => {\n        const theId = id || fieldId;\n        return onChange(formData, newErrorSchema, theId);\n    }, [fieldId, onChange]);\n    const FieldComponent = getFieldComponent(schema, uiOptions, idSchema, registry);\n    const disabled = Boolean(props.disabled || uiOptions.disabled);\n    const readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);\n    const uiSchemaHideError = uiOptions.hideError;\n    // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n    const hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);\n    const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n    if (Object.keys(schema).length === 0) {\n        return null;\n    }\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    const { __errors, ...fieldErrorSchema } = errorSchema || {};\n    // See #439: uiSchema: Don't pass consumed class names or style to child components\n    const fieldUiSchema = omit(uiSchema, ['ui:classNames', 'classNames', 'ui:style']);\n    if (UI_OPTIONS_KEY in fieldUiSchema) {\n        fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], ['classNames', 'style']);\n    }\n    const field = (_jsx(FieldComponent, { ...props, onChange: handleFieldComponentChange, idSchema: idSchema, schema: schema, uiSchema: fieldUiSchema, disabled: disabled, readonly: readonly, hideError: hideError, autofocus: autofocus, errorSchema: fieldErrorSchema, formContext: formContext, rawErrors: __errors }));\n    const id = idSchema[ID_KEY];\n    // If this schema has a title defined, but the user has set a new key/label, retain their input.\n    let label;\n    if (wasPropertyKeyModified) {\n        label = name;\n    }\n    else {\n        label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;\n    }\n    const description = uiOptions.description || props.schema.description || schema.description || '';\n    const richDescription = uiOptions.enableMarkdownInDescription ? _jsx(Markdown, { children: description }) : description;\n    const help = uiOptions.help;\n    const hidden = uiOptions.widget === 'hidden';\n    const classNames = ['form-group', 'field', `field-${getSchemaType(schema)}`];\n    if (!hideError && __errors && __errors.length > 0) {\n        classNames.push('field-error has-error has-danger');\n    }\n    if (uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema.classNames) {\n        if (process.env.NODE_ENV !== 'production') {\n            console.warn(\"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\");\n        }\n        classNames.push(uiSchema.classNames);\n    }\n    if (uiOptions.classNames) {\n        classNames.push(uiOptions.classNames);\n    }\n    const helpComponent = (_jsx(FieldHelpTemplate, { help: help, idSchema: idSchema, schema: schema, uiSchema: uiSchema, hasErrors: !hideError && __errors && __errors.length > 0, registry: registry }));\n    /*\n     * AnyOf/OneOf errors handled by child schema\n     * unless it can be rendered as select control\n     */\n    const errorsComponent = hideError || ((schema.anyOf || schema.oneOf) && !schemaUtils.isSelect(schema)) ? undefined : (_jsx(FieldErrorTemplate, { errors: __errors, errorSchema: errorSchema, idSchema: idSchema, schema: schema, uiSchema: uiSchema, registry: registry }));\n    const fieldProps = {\n        description: (_jsx(DescriptionFieldTemplate, { id: descriptionId(id), description: richDescription, schema: schema, uiSchema: uiSchema, registry: registry })),\n        rawDescription: description,\n        help: helpComponent,\n        rawHelp: typeof help === 'string' ? help : undefined,\n        errors: errorsComponent,\n        rawErrors: hideError ? undefined : __errors,\n        id,\n        label,\n        hidden,\n        onChange,\n        onKeyChange,\n        onDropPropertyClick,\n        required,\n        disabled,\n        readonly,\n        hideError,\n        displayLabel,\n        classNames: classNames.join(' ').trim(),\n        style: uiOptions.style,\n        formContext,\n        formData,\n        schema,\n        uiSchema,\n        registry,\n    };\n    const _AnyOfField = registry.fields.AnyOfField;\n    const _OneOfField = registry.fields.OneOfField;\n    const isReplacingAnyOrOneOf = (uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema['ui:field']) && (uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema['ui:fieldReplacesAnyOrOneOf']) === true;\n    return (_jsx(FieldTemplate, { ...fieldProps, children: _jsxs(_Fragment, { children: [field, schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (_jsx(_AnyOfField, { name: name, disabled: disabled, readonly: readonly, hideError: hideError, errorSchema: errorSchema, formData: formData, formContext: formContext, idPrefix: idPrefix, idSchema: idSchema, idSeparator: idSeparator, onBlur: props.onBlur, onChange: props.onChange, onFocus: props.onFocus, options: schema.anyOf.map((_schema) => schemaUtils.retrieveSchema(isObject(_schema) ? _schema : {}, formData)), registry: registry, schema: schema, uiSchema: uiSchema })), schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (_jsx(_OneOfField, { name: name, disabled: disabled, readonly: readonly, hideError: hideError, errorSchema: errorSchema, formData: formData, formContext: formContext, idPrefix: idPrefix, idSchema: idSchema, idSeparator: idSeparator, onBlur: props.onBlur, onChange: props.onChange, onFocus: props.onFocus, options: schema.oneOf.map((_schema) => schemaUtils.retrieveSchema(isObject(_schema) ? _schema : {}, formData)), registry: registry, schema: schema, uiSchema: uiSchema }))] }) }));\n}\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField extends Component {\n    shouldComponentUpdate(nextProps) {\n        return !deepEquals(this.props, nextProps);\n    }\n    render() {\n        return _jsx(SchemaFieldRender, { ...this.props });\n    }\n}\nexport default SchemaField;\n//# sourceMappingURL=SchemaField.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getWidget, getUiOptions, optionsList, hasWidget, } from '@rjsf/utils';\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField(props) {\n    var _a;\n    const { schema, name, uiSchema, idSchema, formData, required, disabled = false, readonly = false, autofocus = false, onChange, onBlur, onFocus, registry, rawErrors, hideError, } = props;\n    const { title, format } = schema;\n    const { widgets, formContext, schemaUtils, globalUiOptions } = registry;\n    const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n    let defaultWidget = enumOptions ? 'select' : 'text';\n    if (format && hasWidget(schema, format, widgets)) {\n        defaultWidget = format;\n    }\n    const { widget = defaultWidget, placeholder = '', title: uiTitle, ...options } = getUiOptions(uiSchema);\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    const label = (_a = uiTitle !== null && uiTitle !== void 0 ? uiTitle : title) !== null && _a !== void 0 ? _a : name;\n    const Widget = getWidget(schema, widget, widgets);\n    return (_jsx(Widget, { options: { ...options, enumOptions }, schema: schema, uiSchema: uiSchema, id: idSchema.$id, name: name, label: label, hideLabel: !displayLabel, hideError: hideError, value: formData, onChange: onChange, onBlur: onBlur, onFocus: onFocus, required: required, disabled: disabled, readonly: readonly, formContext: formContext, autofocus: autofocus, registry: registry, placeholder: placeholder, rawErrors: rawErrors }));\n}\nexport default StringField;\n//# sourceMappingURL=StringField.js.map","import { useEffect } from 'react';\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField(props) {\n    const { formData, onChange } = props;\n    useEffect(() => {\n        if (formData === undefined) {\n            onChange(null);\n        }\n    }, [formData, onChange]);\n    return null;\n}\nexport default NullField;\n//# sourceMappingURL=NullField.js.map","import ArrayField from './ArrayField';\nimport BooleanField from './BooleanField';\nimport MultiSchemaField from './MultiSchemaField';\nimport NumberField from './NumberField';\nimport ObjectField from './ObjectField';\nimport SchemaField from './SchemaField';\nimport StringField from './StringField';\nimport NullField from './NullField';\nfunction fields() {\n    return {\n        AnyOfField: MultiSchemaField,\n        ArrayField: ArrayField,\n        // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n        BooleanField,\n        NumberField,\n        ObjectField,\n        OneOfField: MultiSchemaField,\n        SchemaField,\n        StringField,\n        NullField,\n    };\n}\nexport default fields;\n//# sourceMappingURL=index.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { descriptionId, getTemplate, getUiOptions, } from '@rjsf/utils';\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate(props) {\n    const { idSchema, description, registry, schema, uiSchema } = props;\n    const options = getUiOptions(uiSchema, registry.globalUiOptions);\n    const { label: displayLabel = true } = options;\n    if (!description || !displayLabel) {\n        return null;\n    }\n    const DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, options);\n    return (_jsx(DescriptionFieldTemplate, { id: descriptionId(idSchema), description: description, schema: schema, uiSchema: uiSchema, registry: registry }));\n}\n//# sourceMappingURL=ArrayFieldDescriptionTemplate.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate(props) {\n    const { children, className, disabled, hasToolbar, hasMoveDown, hasMoveUp, hasRemove, hasCopy, index, onCopyIndexClick, onDropIndexClick, onReorderClick, readonly, registry, uiSchema, } = props;\n    const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n    const btnStyle = {\n        flex: 1,\n        paddingLeft: 6,\n        paddingRight: 6,\n        fontWeight: 'bold',\n    };\n    return (_jsxs(\"div\", { className: className, children: [_jsx(\"div\", { className: hasToolbar ? 'col-xs-9' : 'col-xs-12', children: children }), hasToolbar && (_jsx(\"div\", { className: 'col-xs-3 array-item-toolbox', children: _jsxs(\"div\", { className: 'btn-group', style: {\n                        display: 'flex',\n                        justifyContent: 'space-around',\n                    }, children: [(hasMoveUp || hasMoveDown) && (_jsx(MoveUpButton, { style: btnStyle, disabled: disabled || readonly || !hasMoveUp, onClick: onReorderClick(index, index - 1), uiSchema: uiSchema, registry: registry })), (hasMoveUp || hasMoveDown) && (_jsx(MoveDownButton, { style: btnStyle, disabled: disabled || readonly || !hasMoveDown, onClick: onReorderClick(index, index + 1), uiSchema: uiSchema, registry: registry })), hasCopy && (_jsx(CopyButton, { style: btnStyle, disabled: disabled || readonly, onClick: onCopyIndexClick(index), uiSchema: uiSchema, registry: registry })), hasRemove && (_jsx(RemoveButton, { style: btnStyle, disabled: disabled || readonly, onClick: onDropIndexClick(index), uiSchema: uiSchema, registry: registry }))] }) }))] }));\n}\n//# sourceMappingURL=ArrayFieldItemTemplate.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { getTemplate, getUiOptions, } from '@rjsf/utils';\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate(props) {\n    const { canAdd, className, disabled, idSchema, uiSchema, items, onAddClick, readonly, registry, required, schema, title, } = props;\n    const uiOptions = getUiOptions(uiSchema);\n    const ArrayFieldDescriptionTemplate = getTemplate('ArrayFieldDescriptionTemplate', registry, uiOptions);\n    const ArrayFieldItemTemplate = getTemplate('ArrayFieldItemTemplate', registry, uiOptions);\n    const ArrayFieldTitleTemplate = getTemplate('ArrayFieldTitleTemplate', registry, uiOptions);\n    // Button templates are not overridden in the uiSchema\n    const { ButtonTemplates: { AddButton }, } = registry.templates;\n    return (_jsxs(\"fieldset\", { className: className, id: idSchema.$id, children: [_jsx(ArrayFieldTitleTemplate, { idSchema: idSchema, title: uiOptions.title || title, required: required, schema: schema, uiSchema: uiSchema, registry: registry }), _jsx(ArrayFieldDescriptionTemplate, { idSchema: idSchema, description: uiOptions.description || schema.description, schema: schema, uiSchema: uiSchema, registry: registry }), _jsx(\"div\", { className: 'row array-item-list', children: items &&\n                    items.map(({ key, ...itemProps }) => (_jsx(ArrayFieldItemTemplate, { ...itemProps }, key))) }), canAdd && (_jsx(AddButton, { className: 'array-item-add', onClick: onAddClick, disabled: disabled || readonly, uiSchema: uiSchema, registry: registry }))] }));\n}\n//# sourceMappingURL=ArrayFieldTemplate.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate, getUiOptions, titleId, } from '@rjsf/utils';\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate(props) {\n    const { idSchema, title, schema, uiSchema, required, registry } = props;\n    const options = getUiOptions(uiSchema, registry.globalUiOptions);\n    const { label: displayLabel = true } = options;\n    if (!title || !displayLabel) {\n        return null;\n    }\n    const TitleFieldTemplate = getTemplate('TitleFieldTemplate', registry, options);\n    return (_jsx(TitleFieldTemplate, { id: titleId(idSchema), title: title, required: required, schema: schema, uiSchema: uiSchema, registry: registry }));\n}\n//# sourceMappingURL=ArrayFieldTitleTemplate.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds, examplesId, getInputProps, } from '@rjsf/utils';\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate(props) {\n    const { id, name, // remove this from ...rest\n    value, readonly, disabled, autofocus, onBlur, onFocus, onChange, onChangeOverride, options, schema, uiSchema, formContext, registry, rawErrors, type, hideLabel, // remove this from ...rest\n    hideError, // remove this from ...rest\n    ...rest } = props;\n    // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n    // exclude the \"options\" and \"schema\" ones here.\n    if (!id) {\n        console.log('No id for', props);\n        throw new Error(`no id for props ${JSON.stringify(props)}`);\n    }\n    const inputProps = {\n        ...rest,\n        ...getInputProps(schema, type, options),\n    };\n    let inputValue;\n    if (inputProps.type === 'number' || inputProps.type === 'integer') {\n        inputValue = value || value === 0 ? value : '';\n    }\n    else {\n        inputValue = value == null ? '' : value;\n    }\n    const _onChange = useCallback(({ target: { value } }) => onChange(value === '' ? options.emptyValue : value), [onChange, options]);\n    const _onBlur = useCallback(({ target: { value } }) => onBlur(id, value), [onBlur, id]);\n    const _onFocus = useCallback(({ target: { value } }) => onFocus(id, value), [onFocus, id]);\n    return (_jsxs(_Fragment, { children: [_jsx(\"input\", { id: id, name: id, className: 'form-control', readOnly: readonly, disabled: disabled, autoFocus: autofocus, value: inputValue, ...inputProps, list: schema.examples ? examplesId(id) : undefined, onChange: onChangeOverride || _onChange, onBlur: _onBlur, onFocus: _onFocus, \"aria-describedby\": ariaDescribedByIds(id, !!schema.examples) }), Array.isArray(schema.examples) && (_jsx(\"datalist\", { id: examplesId(id), children: schema.examples\n                    .concat(schema.default && !schema.examples.includes(schema.default) ? [schema.default] : [])\n                    .map((example) => {\n                    return _jsx(\"option\", { value: example }, example);\n                }) }, `datalist_${id}`))] }));\n}\n//# sourceMappingURL=BaseInputTemplate.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getSubmitButtonOptions } from '@rjsf/utils';\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton({ uiSchema }) {\n    const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions(uiSchema);\n    if (norender) {\n        return null;\n    }\n    return (_jsx(\"div\", { children: _jsx(\"button\", { type: 'submit', ...submitButtonProps, className: `btn btn-info ${submitButtonProps.className || ''}`, children: submitText }) }));\n}\n//# sourceMappingURL=SubmitButton.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { TranslatableString } from '@rjsf/utils';\nexport default function IconButton(props) {\n    const { iconType = 'default', icon, className, uiSchema, registry, ...otherProps } = props;\n    return (_jsx(\"button\", { type: 'button', className: `btn btn-${iconType} ${className}`, ...otherProps, children: _jsx(\"i\", { className: `glyphicon glyphicon-${icon}` }) }));\n}\nexport function CopyButton(props) {\n    const { registry: { translateString }, } = props;\n    return (_jsx(IconButton, { title: translateString(TranslatableString.CopyButton), className: 'array-item-copy', ...props, icon: 'copy' }));\n}\nexport function MoveDownButton(props) {\n    const { registry: { translateString }, } = props;\n    return (_jsx(IconButton, { title: translateString(TranslatableString.MoveDownButton), className: 'array-item-move-down', ...props, icon: 'arrow-down' }));\n}\nexport function MoveUpButton(props) {\n    const { registry: { translateString }, } = props;\n    return (_jsx(IconButton, { title: translateString(TranslatableString.MoveUpButton), className: 'array-item-move-up', ...props, icon: 'arrow-up' }));\n}\nexport function RemoveButton(props) {\n    const { registry: { translateString }, } = props;\n    return (_jsx(IconButton, { title: translateString(TranslatableString.RemoveButton), className: 'array-item-remove', ...props, iconType: 'danger', icon: 'remove' }));\n}\n//# sourceMappingURL=IconButton.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { TranslatableString } from '@rjsf/utils';\nimport IconButton from './IconButton';\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({ className, onClick, disabled, registry, }) {\n    const { translateString } = registry;\n    return (_jsx(\"div\", { className: 'row', children: _jsx(\"p\", { className: `col-xs-3 col-xs-offset-9 text-right ${className}`, children: _jsx(IconButton, { iconType: 'info', icon: 'plus', className: 'btn-add col-xs-12', title: translateString(TranslatableString.AddButton), onClick: onClick, disabled: disabled, registry: registry }) }) }));\n}\n//# sourceMappingURL=AddButton.js.map","import SubmitButton from './SubmitButton';\nimport AddButton from './AddButton';\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from './IconButton';\nfunction buttonTemplates() {\n    return {\n        SubmitButton,\n        AddButton,\n        CopyButton,\n        MoveDownButton,\n        MoveUpButton,\n        RemoveButton,\n    };\n}\nexport default buttonTemplates;\n//# sourceMappingURL=index.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField(props) {\n    const { id, description } = props;\n    if (!description) {\n        return null;\n    }\n    if (typeof description === 'string') {\n        return (_jsx(\"p\", { id: id, className: 'field-description', children: description }));\n    }\n    else {\n        return (_jsx(\"div\", { id: id, className: 'field-description', children: description }));\n    }\n}\n//# sourceMappingURL=DescriptionField.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { TranslatableString, } from '@rjsf/utils';\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList({ errors, registry, }) {\n    const { translateString } = registry;\n    return (_jsxs(\"div\", { className: 'panel panel-danger errors', children: [_jsx(\"div\", { className: 'panel-heading', children: _jsx(\"h3\", { className: 'panel-title', children: translateString(TranslatableString.ErrorsLabel) }) }), _jsx(\"ul\", { className: 'list-group', children: errors.map((error, i) => {\n                    return (_jsx(\"li\", { className: 'list-group-item text-danger', children: error.stack }, i));\n                }) })] }));\n}\n//# sourceMappingURL=ErrorList.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst REQUIRED_FIELD_SYMBOL = '*';\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props) {\n    const { label, required, id } = props;\n    if (!label) {\n        return null;\n    }\n    return (_jsxs(\"label\", { className: 'control-label', htmlFor: id, children: [label, required && _jsx(\"span\", { className: 'required', children: REQUIRED_FIELD_SYMBOL })] }));\n}\n//# sourceMappingURL=Label.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { getTemplate, getUiOptions, } from '@rjsf/utils';\nimport Label from './Label';\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate(props) {\n    const { id, label, children, errors, help, description, hidden, required, displayLabel, registry, uiSchema } = props;\n    const uiOptions = getUiOptions(uiSchema);\n    const WrapIfAdditionalTemplate = getTemplate('WrapIfAdditionalTemplate', registry, uiOptions);\n    if (hidden) {\n        return _jsx(\"div\", { className: 'hidden', children: children });\n    }\n    return (_jsxs(WrapIfAdditionalTemplate, { ...props, children: [displayLabel && _jsx(Label, { label: label, required: required, id: id }), displayLabel && description ? description : null, children, errors, help] }));\n}\n//# sourceMappingURL=FieldTemplate.js.map","import FieldTemplate from './FieldTemplate';\nexport default FieldTemplate;\n//# sourceMappingURL=index.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { errorId } from '@rjsf/utils';\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate(props) {\n    const { errors = [], idSchema } = props;\n    if (errors.length === 0) {\n        return null;\n    }\n    const id = errorId(idSchema);\n    return (_jsx(\"div\", { children: _jsx(\"ul\", { id: id, className: 'error-detail bs-callout bs-callout-info', children: errors\n                .filter((elem) => !!elem)\n                .map((error, index) => {\n                return (_jsx(\"li\", { className: 'text-danger', children: error }, index));\n            }) }) }));\n}\n//# sourceMappingURL=FieldErrorTemplate.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { helpId } from '@rjsf/utils';\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate(props) {\n    const { idSchema, help } = props;\n    if (!help) {\n        return null;\n    }\n    const id = helpId(idSchema);\n    if (typeof help === 'string') {\n        return (_jsx(\"p\", { id: id, className: 'help-block', children: help }));\n    }\n    return (_jsx(\"div\", { id: id, className: 'help-block', children: help }));\n}\n//# sourceMappingURL=FieldHelpTemplate.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { canExpand, descriptionId, getTemplate, getUiOptions, titleId, } from '@rjsf/utils';\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate(props) {\n    const { description, disabled, formData, idSchema, onAddClick, properties, readonly, registry, required, schema, title, uiSchema, } = props;\n    const options = getUiOptions(uiSchema);\n    const TitleFieldTemplate = getTemplate('TitleFieldTemplate', registry, options);\n    const DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, options);\n    // Button templates are not overridden in the uiSchema\n    const { ButtonTemplates: { AddButton }, } = registry.templates;\n    return (_jsxs(\"fieldset\", { id: idSchema.$id, children: [title && (_jsx(TitleFieldTemplate, { id: titleId(idSchema), title: title, required: required, schema: schema, uiSchema: uiSchema, registry: registry })), description && (_jsx(DescriptionFieldTemplate, { id: descriptionId(idSchema), description: description, schema: schema, uiSchema: uiSchema, registry: registry })), properties.map((prop) => prop.content), canExpand(schema, uiSchema, formData) && (_jsx(AddButton, { className: 'object-property-expand', onClick: onAddClick(schema), disabled: disabled || readonly, uiSchema: uiSchema, registry: registry }))] }));\n}\n//# sourceMappingURL=ObjectFieldTemplate.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst REQUIRED_FIELD_SYMBOL = '*';\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField(props) {\n    const { id, title, required } = props;\n    return (_jsxs(\"legend\", { id: id, children: [title, required && _jsx(\"span\", { className: 'required', children: REQUIRED_FIELD_SYMBOL })] }));\n}\n//# sourceMappingURL=TitleField.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { TranslatableString } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField(props) {\n    const { schema, idSchema, reason, registry } = props;\n    const { translateString } = registry;\n    let translateEnum = TranslatableString.UnsupportedField;\n    const translateParams = [];\n    if (idSchema && idSchema.$id) {\n        translateEnum = TranslatableString.UnsupportedFieldWithId;\n        translateParams.push(idSchema.$id);\n    }\n    if (reason) {\n        translateEnum =\n            translateEnum === TranslatableString.UnsupportedField\n                ? TranslatableString.UnsupportedFieldWithReason\n                : TranslatableString.UnsupportedFieldWithIdAndReason;\n        translateParams.push(reason);\n    }\n    return (_jsxs(\"div\", { className: 'unsupported-field', children: [_jsx(\"p\", { children: _jsx(Markdown, { children: translateString(translateEnum, translateParams) }) }), schema && _jsx(\"pre\", { children: JSON.stringify(schema, null, 2) })] }));\n}\nexport default UnsupportedField;\n//# sourceMappingURL=UnsupportedField.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { ADDITIONAL_PROPERTY_FLAG, TranslatableString, } from '@rjsf/utils';\nimport Label from './FieldTemplate/Label';\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate(props) {\n    const { id, classNames, style, disabled, label, onKeyChange, onDropPropertyClick, readonly, required, schema, children, uiSchema, registry, } = props;\n    const { templates, translateString } = registry;\n    // Button templates are not overridden in the uiSchema\n    const { RemoveButton } = templates.ButtonTemplates;\n    const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n    const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n    if (!additional) {\n        return (_jsx(\"div\", { className: classNames, style: style, children: children }));\n    }\n    return (_jsx(\"div\", { className: classNames, style: style, children: _jsxs(\"div\", { className: 'row', children: [_jsx(\"div\", { className: 'col-xs-5 form-additional', children: _jsxs(\"div\", { className: 'form-group', children: [_jsx(Label, { label: keyLabel, required: required, id: `${id}-key` }), _jsx(\"input\", { className: 'form-control', type: 'text', id: `${id}-key`, onBlur: (event) => onKeyChange(event.target.value), defaultValue: label })] }) }), _jsx(\"div\", { className: 'form-additional form-group col-xs-5', children: children }), _jsx(\"div\", { className: 'col-xs-2', children: _jsx(RemoveButton, { className: 'array-item-remove btn-block', style: { border: '0' }, disabled: disabled || readonly, onClick: onDropPropertyClick(label), uiSchema: uiSchema, registry: registry }) })] }) }));\n}\n//# sourceMappingURL=WrapIfAdditionalTemplate.js.map","import ArrayFieldDescriptionTemplate from './ArrayFieldDescriptionTemplate';\nimport ArrayFieldItemTemplate from './ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from './ArrayFieldTemplate';\nimport ArrayFieldTitleTemplate from './ArrayFieldTitleTemplate';\nimport BaseInputTemplate from './BaseInputTemplate';\nimport ButtonTemplates from './ButtonTemplates';\nimport DescriptionField from './DescriptionField';\nimport ErrorList from './ErrorList';\nimport FieldTemplate from './FieldTemplate';\nimport FieldErrorTemplate from './FieldErrorTemplate';\nimport FieldHelpTemplate from './FieldHelpTemplate';\nimport ObjectFieldTemplate from './ObjectFieldTemplate';\nimport TitleField from './TitleField';\nimport UnsupportedField from './UnsupportedField';\nimport WrapIfAdditionalTemplate from './WrapIfAdditionalTemplate';\nfunction templates() {\n    return {\n        ArrayFieldDescriptionTemplate,\n        ArrayFieldItemTemplate,\n        ArrayFieldTemplate,\n        ArrayFieldTitleTemplate,\n        ButtonTemplates: ButtonTemplates(),\n        BaseInputTemplate,\n        DescriptionFieldTemplate: DescriptionField,\n        ErrorListTemplate: ErrorList,\n        FieldTemplate,\n        FieldErrorTemplate,\n        FieldHelpTemplate,\n        ObjectFieldTemplate,\n        TitleFieldTemplate: TitleField,\n        UnsupportedFieldTemplate: UnsupportedField,\n        WrapIfAdditionalTemplate,\n    };\n}\nexport default templates;\n//# sourceMappingURL=index.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer, useState } from 'react';\nimport { ariaDescribedByIds, parseDateString, toDateString, pad, TranslatableString, } from '@rjsf/utils';\nfunction rangeOptions(start, stop) {\n    const options = [];\n    for (let i = start; i <= stop; i++) {\n        options.push({ value: i, label: pad(i, 2) });\n    }\n    return options;\n}\nfunction readyForChange(state) {\n    return Object.values(state).every((value) => value !== -1);\n}\nfunction dateElementProps(state, time, yearsRange = [1900, new Date().getFullYear() + 2]) {\n    const { year, month, day, hour, minute, second } = state;\n    const data = [\n        {\n            type: 'year',\n            range: yearsRange,\n            value: year,\n        },\n        { type: 'month', range: [1, 12], value: month },\n        { type: 'day', range: [1, 31], value: day },\n    ];\n    if (time) {\n        data.push({ type: 'hour', range: [0, 23], value: hour }, { type: 'minute', range: [0, 59], value: minute }, { type: 'second', range: [0, 59], value: second });\n    }\n    return data;\n}\nfunction DateElement({ type, range, value, select, rootId, name, disabled, readonly, autofocus, registry, onBlur, onFocus, }) {\n    const id = rootId + '_' + type;\n    const { SelectWidget } = registry.widgets;\n    return (_jsx(SelectWidget, { schema: { type: 'integer' }, id: id, name: name, className: 'form-control', options: { enumOptions: rangeOptions(range[0], range[1]) }, placeholder: type, value: value, disabled: disabled, readonly: readonly, autofocus: autofocus, onChange: (value) => select(type, value), onBlur: onBlur, onFocus: onFocus, registry: registry, label: '', \"aria-describedby\": ariaDescribedByIds(rootId) }));\n}\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget({ time = false, disabled = false, readonly = false, autofocus = false, options, id, name, registry, onBlur, onFocus, onChange, value, }) {\n    const { translateString } = registry;\n    const [lastValue, setLastValue] = useState(value);\n    const [state, setState] = useReducer((state, action) => {\n        return { ...state, ...action };\n    }, parseDateString(value, time));\n    useEffect(() => {\n        const stateValue = toDateString(state, time);\n        if (readyForChange(state) && stateValue !== value) {\n            // The user changed the date to a new valid data via the comboboxes, so call onChange\n            onChange(stateValue);\n        }\n        else if (lastValue !== value) {\n            // We got a new value in the props\n            setLastValue(value);\n            setState(parseDateString(value, time));\n        }\n    }, [time, value, onChange, state, lastValue]);\n    const handleChange = useCallback((property, value) => {\n        setState({ [property]: value });\n    }, []);\n    const handleSetNow = useCallback((event) => {\n        event.preventDefault();\n        if (disabled || readonly) {\n            return;\n        }\n        const nextState = parseDateString(new Date().toJSON(), time);\n        onChange(toDateString(nextState, time));\n    }, [disabled, readonly, time]);\n    const handleClear = useCallback((event) => {\n        event.preventDefault();\n        if (disabled || readonly) {\n            return;\n        }\n        onChange(undefined);\n    }, [disabled, readonly, onChange]);\n    return (_jsxs(\"ul\", { className: 'list-inline', children: [dateElementProps(state, time, options.yearsRange).map((elemProps, i) => (_jsx(\"li\", { className: 'list-inline-item', children: _jsx(DateElement, { rootId: id, name: name, select: handleChange, ...elemProps, disabled: disabled, readonly: readonly, registry: registry, onBlur: onBlur, onFocus: onFocus, autofocus: autofocus && i === 0 }) }, i))), (options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && (_jsx(\"li\", { className: 'list-inline-item', children: _jsx(\"a\", { href: '#', className: 'btn btn-info btn-now', onClick: handleSetNow, children: translateString(TranslatableString.NowLabel) }) })), (options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && (_jsx(\"li\", { className: 'list-inline-item', children: _jsx(\"a\", { href: '#', className: 'btn btn-warning btn-clear', onClick: handleClear, children: translateString(TranslatableString.ClearLabel) }) }))] }));\n}\nexport default AltDateWidget;\n//# sourceMappingURL=AltDateWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget({ time = true, ...props }) {\n    const { AltDateWidget } = props.registry.widgets;\n    return _jsx(AltDateWidget, { time: time, ...props });\n}\nexport default AltDateTimeWidget;\n//# sourceMappingURL=AltDateTimeWidget.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds, descriptionId, getTemplate, labelValue, schemaRequiresTrueValue, } from '@rjsf/utils';\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget({ schema, uiSchema, options, id, value, disabled, readonly, label, hideLabel, autofocus = false, onBlur, onFocus, onChange, registry, }) {\n    var _a;\n    const DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, options);\n    // Because an unchecked checkbox will cause html5 validation to fail, only add\n    // the \"required\" attribute if the field value must be \"true\", due to the\n    // \"const\" or \"enum\" keywords\n    const required = schemaRequiresTrueValue(schema);\n    const handleChange = useCallback((event) => onChange(event.target.checked), [onChange]);\n    const handleBlur = useCallback((event) => onBlur(id, event.target.checked), [onBlur, id]);\n    const handleFocus = useCallback((event) => onFocus(id, event.target.checked), [onFocus, id]);\n    const description = (_a = options.description) !== null && _a !== void 0 ? _a : schema.description;\n    return (_jsxs(\"div\", { className: `checkbox ${disabled || readonly ? 'disabled' : ''}`, children: [!hideLabel && !!description && (_jsx(DescriptionFieldTemplate, { id: descriptionId(id), description: description, schema: schema, uiSchema: uiSchema, registry: registry })), _jsxs(\"label\", { children: [_jsx(\"input\", { type: 'checkbox', id: id, name: id, checked: typeof value === 'undefined' ? false : value, required: required, disabled: disabled || readonly, autoFocus: autofocus, onChange: handleChange, onBlur: handleBlur, onFocus: handleFocus, \"aria-describedby\": ariaDescribedByIds(id) }), labelValue(_jsx(\"span\", { children: label }), hideLabel)] })] }));\n}\nexport default CheckboxWidget;\n//# sourceMappingURL=CheckboxWidget.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds, enumOptionsDeselectValue, enumOptionsIsSelected, enumOptionsSelectValue, enumOptionsValueForIndex, optionId, } from '@rjsf/utils';\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget({ id, disabled, options: { inline = false, enumOptions, enumDisabled, emptyValue }, value, autofocus = false, readonly, onChange, onBlur, onFocus, }) {\n    const checkboxesValues = Array.isArray(value) ? value : [value];\n    const handleBlur = useCallback(({ target: { value } }) => onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue)), [onBlur, id]);\n    const handleFocus = useCallback(({ target: { value } }) => onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue)), [onFocus, id]);\n    return (_jsx(\"div\", { className: 'checkboxes', id: id, children: Array.isArray(enumOptions) &&\n            enumOptions.map((option, index) => {\n                const checked = enumOptionsIsSelected(option.value, checkboxesValues);\n                const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n                const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n                const handleChange = (event) => {\n                    if (event.target.checked) {\n                        onChange(enumOptionsSelectValue(index, checkboxesValues, enumOptions));\n                    }\n                    else {\n                        onChange(enumOptionsDeselectValue(index, checkboxesValues, enumOptions));\n                    }\n                };\n                const checkbox = (_jsxs(\"span\", { children: [_jsx(\"input\", { type: 'checkbox', id: optionId(id, index), name: id, checked: checked, value: String(index), disabled: disabled || itemDisabled || readonly, autoFocus: autofocus && index === 0, onChange: handleChange, onBlur: handleBlur, onFocus: handleFocus, \"aria-describedby\": ariaDescribedByIds(id) }), _jsx(\"span\", { children: option.label })] }));\n                return inline ? (_jsx(\"label\", { className: `checkbox-inline ${disabledCls}`, children: checkbox }, index)) : (_jsx(\"div\", { className: `checkbox ${disabledCls}`, children: _jsx(\"label\", { children: checkbox }) }, index));\n            }) }));\n}\nexport default CheckboxesWidget;\n//# sourceMappingURL=CheckboxesWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate } from '@rjsf/utils';\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget(props) {\n    const { disabled, readonly, options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    return _jsx(BaseInputTemplate, { type: 'color', ...props, disabled: disabled || readonly });\n}\n//# sourceMappingURL=ColorWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { getTemplate } from '@rjsf/utils';\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget(props) {\n    const { onChange, options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    const handleChange = useCallback((value) => onChange(value || undefined), [onChange]);\n    return _jsx(BaseInputTemplate, { type: 'date', ...props, onChange: handleChange });\n}\n//# sourceMappingURL=DateWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate, localToUTC, utcToLocal, } from '@rjsf/utils';\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget(props) {\n    const { onChange, value, options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    return (_jsx(BaseInputTemplate, { type: 'datetime-local', ...props, value: utcToLocal(value), onChange: (value) => onChange(localToUTC(value)) }));\n}\n//# sourceMappingURL=DateTimeWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate } from '@rjsf/utils';\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget(props) {\n    const { options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    return _jsx(BaseInputTemplate, { type: 'email', ...props });\n}\n//# sourceMappingURL=EmailWidget.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useState } from 'react';\nimport { dataURItoBlob, getTemplate, TranslatableString, } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\nfunction addNameToDataURL(dataURL, name) {\n    if (dataURL === null) {\n        return null;\n    }\n    return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\nfunction processFile(file) {\n    const { name, size, type } = file;\n    return new Promise((resolve, reject) => {\n        const reader = new window.FileReader();\n        reader.onerror = reject;\n        reader.onload = (event) => {\n            var _a;\n            if (typeof ((_a = event.target) === null || _a === void 0 ? void 0 : _a.result) === 'string') {\n                resolve({\n                    dataURL: addNameToDataURL(event.target.result, name),\n                    name,\n                    size,\n                    type,\n                });\n            }\n            else {\n                resolve({\n                    dataURL: null,\n                    name,\n                    size,\n                    type,\n                });\n            }\n        };\n        reader.readAsDataURL(file);\n    });\n}\nfunction processFiles(files) {\n    return Promise.all(Array.from(files).map(processFile));\n}\nfunction FileInfoPreview({ fileInfo, registry, }) {\n    const { translateString } = registry;\n    const { dataURL, type, name } = fileInfo;\n    if (!dataURL) {\n        return null;\n    }\n    if (type.indexOf('image') !== -1) {\n        return _jsx(\"img\", { src: dataURL, style: { maxWidth: '100%' }, className: 'file-preview' });\n    }\n    return (_jsxs(_Fragment, { children: [' ', _jsx(\"a\", { download: `preview-${name}`, href: dataURL, className: 'file-download', children: translateString(TranslatableString.PreviewLabel) })] }));\n}\nfunction FilesInfo({ filesInfo, registry, preview, }) {\n    if (filesInfo.length === 0) {\n        return null;\n    }\n    const { translateString } = registry;\n    return (_jsx(\"ul\", { className: 'file-info', children: filesInfo.map((fileInfo, key) => {\n            const { name, size, type } = fileInfo;\n            return (_jsxs(\"li\", { children: [_jsx(Markdown, { children: translateString(TranslatableString.FilesInfo, [name, type, String(size)]) }), preview && _jsx(FileInfoPreview, { fileInfo: fileInfo, registry: registry })] }, key));\n        }) }));\n}\nfunction extractFileInfo(dataURLs) {\n    return dataURLs\n        .filter((dataURL) => dataURL)\n        .map((dataURL) => {\n        const { blob, name } = dataURItoBlob(dataURL);\n        return {\n            dataURL,\n            name: name,\n            size: blob.size,\n            type: blob.type,\n        };\n    });\n}\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget(props) {\n    const { disabled, readonly, required, multiple, onChange, value, options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    const [filesInfo, setFilesInfo] = useState(Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]));\n    const handleChange = useCallback((event) => {\n        if (!event.target.files) {\n            return;\n        }\n        // Due to variances in themes, dealing with multiple files for the array case now happens one file at a time.\n        // This is because we don't pass `multiple` into the `BaseInputTemplate` anymore. Instead, we deal with the single\n        // file in each event and concatenate them together ourselves\n        processFiles(event.target.files).then((filesInfoEvent) => {\n            const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n            if (multiple) {\n                setFilesInfo(filesInfo.concat(filesInfoEvent[0]));\n                onChange(value.concat(newValue[0]));\n            }\n            else {\n                setFilesInfo(filesInfoEvent);\n                onChange(newValue[0]);\n            }\n        });\n    }, [multiple, value, filesInfo, onChange]);\n    return (_jsxs(\"div\", { children: [_jsx(BaseInputTemplate, { ...props, disabled: disabled || readonly, type: 'file', required: value ? false : required, onChangeOverride: handleChange, value: '', accept: options.accept ? String(options.accept) : undefined }), _jsx(FilesInfo, { filesInfo: filesInfo, registry: registry, preview: options.filePreview })] }));\n}\nexport default FileWidget;\n//# sourceMappingURL=FileWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget({ id, value, }) {\n    return _jsx(\"input\", { type: 'hidden', id: id, name: id, value: typeof value === 'undefined' ? '' : value });\n}\nexport default HiddenWidget;\n//# sourceMappingURL=HiddenWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate } from '@rjsf/utils';\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget(props) {\n    const { options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    return _jsx(BaseInputTemplate, { type: 'password', ...props });\n}\n//# sourceMappingURL=PasswordWidget.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds, enumOptionsIsSelected, enumOptionsValueForIndex, optionId, } from '@rjsf/utils';\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget({ options, value, required, disabled, readonly, autofocus = false, onBlur, onFocus, onChange, id, }) {\n    const { enumOptions, enumDisabled, inline, emptyValue } = options;\n    const handleBlur = useCallback(({ target: { value } }) => onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue)), [onBlur, id]);\n    const handleFocus = useCallback(({ target: { value } }) => onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue)), [onFocus, id]);\n    return (_jsx(\"div\", { className: 'field-radio-group', id: id, children: Array.isArray(enumOptions) &&\n            enumOptions.map((option, i) => {\n                const checked = enumOptionsIsSelected(option.value, value);\n                const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n                const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n                const handleChange = () => onChange(option.value);\n                const radio = (_jsxs(\"span\", { children: [_jsx(\"input\", { type: 'radio', id: optionId(id, i), checked: checked, name: id, required: required, value: String(i), disabled: disabled || itemDisabled || readonly, autoFocus: autofocus && i === 0, onChange: handleChange, onBlur: handleBlur, onFocus: handleFocus, \"aria-describedby\": ariaDescribedByIds(id) }), _jsx(\"span\", { children: option.label })] }));\n                return inline ? (_jsx(\"label\", { className: `radio-inline ${disabledCls}`, children: radio }, i)) : (_jsx(\"div\", { className: `radio ${disabledCls}`, children: _jsx(\"label\", { children: radio }) }, i));\n            }) }));\n}\nexport default RadioWidget;\n//# sourceMappingURL=RadioWidget.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget(props) {\n    const { value, registry: { templates: { BaseInputTemplate }, }, } = props;\n    return (_jsxs(\"div\", { className: 'field-range-wrapper', children: [_jsx(BaseInputTemplate, { type: 'range', ...props }), _jsx(\"span\", { className: 'range-view', children: value })] }));\n}\n//# sourceMappingURL=RangeWidget.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds, enumOptionsIndexForValue, enumOptionsValueForIndex, } from '@rjsf/utils';\nfunction getValue(event, multiple) {\n    if (multiple) {\n        return Array.from(event.target.options)\n            .slice()\n            .filter((o) => o.selected)\n            .map((o) => o.value);\n    }\n    return event.target.value;\n}\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget({ schema, id, options, value, required, disabled, readonly, multiple = false, autofocus = false, onChange, onBlur, onFocus, placeholder, }) {\n    const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n    const emptyValue = multiple ? [] : '';\n    const handleFocus = useCallback((event) => {\n        const newValue = getValue(event, multiple);\n        return onFocus(id, enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));\n    }, [onFocus, id, schema, multiple, options]);\n    const handleBlur = useCallback((event) => {\n        const newValue = getValue(event, multiple);\n        return onBlur(id, enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));\n    }, [onBlur, id, schema, multiple, options]);\n    const handleChange = useCallback((event) => {\n        const newValue = getValue(event, multiple);\n        return onChange(enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));\n    }, [onChange, schema, multiple, options]);\n    const selectedIndexes = enumOptionsIndexForValue(value, enumOptions, multiple);\n    return (_jsxs(\"select\", { id: id, name: id, multiple: multiple, className: 'form-control', value: typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes, required: required, disabled: disabled || readonly, autoFocus: autofocus, onBlur: handleBlur, onFocus: handleFocus, onChange: handleChange, \"aria-describedby\": ariaDescribedByIds(id), children: [!multiple && schema.default === undefined && _jsx(\"option\", { value: '', children: placeholder }), Array.isArray(enumOptions) &&\n                enumOptions.map(({ value, label }, i) => {\n                    const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n                    return (_jsx(\"option\", { value: String(i), disabled: disabled, children: label }, i));\n                })] }));\n}\nexport default SelectWidget;\n//# sourceMappingURL=SelectWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds } from '@rjsf/utils';\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget({ id, options = {}, placeholder, value, required, disabled, readonly, autofocus = false, onChange, onBlur, onFocus, }) {\n    const handleChange = useCallback(({ target: { value } }) => onChange(value === '' ? options.emptyValue : value), [onChange, options.emptyValue]);\n    const handleBlur = useCallback(({ target: { value } }) => onBlur(id, value), [onBlur, id]);\n    const handleFocus = useCallback(({ target: { value } }) => onFocus(id, value), [id, onFocus]);\n    return (_jsx(\"textarea\", { id: id, name: id, className: 'form-control', value: value ? value : '', placeholder: placeholder, required: required, disabled: disabled, readOnly: readonly, autoFocus: autofocus, rows: options.rows, onBlur: handleBlur, onFocus: handleFocus, onChange: handleChange, \"aria-describedby\": ariaDescribedByIds(id) }));\n}\nTextareaWidget.defaultProps = {\n    autofocus: false,\n    options: {},\n};\nexport default TextareaWidget;\n//# sourceMappingURL=TextareaWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate } from '@rjsf/utils';\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget(props) {\n    const { options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    return _jsx(BaseInputTemplate, { ...props });\n}\n//# sourceMappingURL=TextWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { getTemplate } from '@rjsf/utils';\n/** The `TimeWidget` component uses the `BaseInputTemplate` changing the type to `time` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TimeWidget(props) {\n    const { onChange, options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    const handleChange = useCallback((value) => onChange(value ? `${value}:00` : undefined), [onChange]);\n    return _jsx(BaseInputTemplate, { type: 'time', ...props, onChange: handleChange });\n}\n//# sourceMappingURL=TimeWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate } from '@rjsf/utils';\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget(props) {\n    const { options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    return _jsx(BaseInputTemplate, { type: 'url', ...props });\n}\n//# sourceMappingURL=URLWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate } from '@rjsf/utils';\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget(props) {\n    const { options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    return _jsx(BaseInputTemplate, { type: 'number', ...props });\n}\n//# sourceMappingURL=UpDownWidget.js.map","import AltDateWidget from './AltDateWidget';\nimport AltDateTimeWidget from './AltDateTimeWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport CheckboxesWidget from './CheckboxesWidget';\nimport ColorWidget from './ColorWidget';\nimport DateWidget from './DateWidget';\nimport DateTimeWidget from './DateTimeWidget';\nimport EmailWidget from './EmailWidget';\nimport FileWidget from './FileWidget';\nimport HiddenWidget from './HiddenWidget';\nimport PasswordWidget from './PasswordWidget';\nimport RadioWidget from './RadioWidget';\nimport RangeWidget from './RangeWidget';\nimport SelectWidget from './SelectWidget';\nimport TextareaWidget from './TextareaWidget';\nimport TextWidget from './TextWidget';\nimport TimeWidget from './TimeWidget';\nimport URLWidget from './URLWidget';\nimport UpDownWidget from './UpDownWidget';\nfunction widgets() {\n    return {\n        AltDateWidget,\n        AltDateTimeWidget,\n        CheckboxWidget,\n        CheckboxesWidget,\n        ColorWidget,\n        DateWidget,\n        DateTimeWidget,\n        EmailWidget,\n        FileWidget,\n        HiddenWidget,\n        PasswordWidget,\n        RadioWidget,\n        RangeWidget,\n        SelectWidget,\n        TextWidget,\n        TextareaWidget,\n        TimeWidget,\n        UpDownWidget,\n        URLWidget,\n    };\n}\nexport default widgets;\n//# sourceMappingURL=index.js.map","import { englishStringTranslator } from '@rjsf/utils';\nimport fields from './components/fields';\nimport templates from './components/templates';\nimport widgets from './components/widgets';\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry() {\n    return {\n        fields: fields(),\n        templates: templates(),\n        widgets: widgets(),\n        rootSchema: {},\n        formContext: {},\n        translateString: englishStringTranslator,\n    };\n}\n//# sourceMappingURL=getDefaultRegistry.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Component, createRef } from 'react';\nimport { createSchemaUtils, deepEquals, getTemplate, getUiOptions, isObject, mergeObjects, NAME_KEY, RJSF_ADDITONAL_PROPERTIES_FLAG, shouldRender, SUBMIT_BTN_OPTIONS_KEY, toErrorList, UI_GLOBAL_OPTIONS_KEY, UI_OPTIONS_KEY, validationDataMerge, } from '@rjsf/utils';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport _pick from 'lodash/pick';\nimport _toPath from 'lodash/toPath';\nimport getDefaultRegistry from '../getDefaultRegistry';\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form extends Component {\n    /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n     * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n     * state construction.\n     *\n     * @param props - The initial props for the `Form`\n     */\n    constructor(props) {\n        super(props);\n        /** Returns the `formData` with only the elements specified in the `fields` list\n         *\n         * @param formData - The data for the `Form`\n         * @param fields - The fields to keep while filtering\n         */\n        this.getUsedFormData = (formData, fields) => {\n            // For the case of a single input form\n            if (fields.length === 0 && typeof formData !== 'object') {\n                return formData;\n            }\n            // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n            const data = _pick(formData, fields);\n            if (Array.isArray(formData)) {\n                return Object.keys(data).map((key) => data[key]);\n            }\n            return data;\n        };\n        /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n         *\n         * @param pathSchema - The `PathSchema` object for the form\n         * @param [formData] - The form data to use while checking for empty objects/arrays\n         */\n        this.getFieldNames = (pathSchema, formData) => {\n            const getAllPaths = (_obj, acc = [], paths = [[]]) => {\n                Object.keys(_obj).forEach((key) => {\n                    if (typeof _obj[key] === 'object') {\n                        const newPaths = paths.map((path) => [...path, key]);\n                        // If an object is marked with additionalProperties, all its keys are valid\n                        if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== '') {\n                            acc.push(_obj[key][NAME_KEY]);\n                        }\n                        else {\n                            getAllPaths(_obj[key], acc, newPaths);\n                        }\n                    }\n                    else if (key === NAME_KEY && _obj[key] !== '') {\n                        paths.forEach((path) => {\n                            const formValue = _get(formData, path);\n                            // adds path to fieldNames if it points to a value\n                            // or an empty object/array\n                            if (typeof formValue !== 'object' ||\n                                _isEmpty(formValue) ||\n                                (Array.isArray(formValue) && formValue.every((val) => typeof val !== 'object'))) {\n                                acc.push(path);\n                            }\n                        });\n                    }\n                });\n                return acc;\n            };\n            return getAllPaths(pathSchema);\n        };\n        /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n         * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n         * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n         * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n         * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n         * callback will be called if specified with the updated state.\n         *\n         * @param formData - The new form data from a change to a field\n         * @param newErrorSchema - The new `ErrorSchema` based on the field change\n         * @param id - The id of the field that caused the change\n         */\n        this.onChange = (formData, newErrorSchema, id) => {\n            const { extraErrors, omitExtraData, liveOmit, noValidate, liveValidate, onChange } = this.props;\n            const { schemaUtils, schema, retrievedSchema } = this.state;\n            if (isObject(formData) || Array.isArray(formData)) {\n                const newState = this.getStateFromProps(this.props, formData, retrievedSchema);\n                formData = newState.formData;\n            }\n            const mustValidate = !noValidate && liveValidate;\n            let state = { formData, schema };\n            let newFormData = formData;\n            let _retrievedSchema;\n            if (omitExtraData === true && liveOmit === true) {\n                _retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n                const pathSchema = schemaUtils.toPathSchema(_retrievedSchema, '', formData);\n                const fieldNames = this.getFieldNames(pathSchema, formData);\n                newFormData = this.getUsedFormData(formData, fieldNames);\n                state = {\n                    formData: newFormData,\n                };\n            }\n            if (mustValidate) {\n                const schemaValidation = this.validate(newFormData, schema, schemaUtils, retrievedSchema);\n                let errors = schemaValidation.errors;\n                let errorSchema = schemaValidation.errorSchema;\n                const schemaValidationErrors = errors;\n                const schemaValidationErrorSchema = errorSchema;\n                if (extraErrors) {\n                    const merged = validationDataMerge(schemaValidation, extraErrors);\n                    errorSchema = merged.errorSchema;\n                    errors = merged.errors;\n                }\n                state = {\n                    formData: newFormData,\n                    errors,\n                    errorSchema,\n                    schemaValidationErrors,\n                    schemaValidationErrorSchema,\n                };\n            }\n            else if (!noValidate && newErrorSchema) {\n                const errorSchema = extraErrors\n                    ? mergeObjects(newErrorSchema, extraErrors, 'preventDuplicates')\n                    : newErrorSchema;\n                state = {\n                    formData: newFormData,\n                    errorSchema: errorSchema,\n                    errors: toErrorList(errorSchema),\n                };\n            }\n            if (_retrievedSchema) {\n                state.retrievedSchema = _retrievedSchema;\n            }\n            this.setState(state, () => onChange && onChange({ ...this.state, ...state }, id));\n        };\n        /**\n         * Callback function to handle reset form data.\n         * - Reset all fields with default values.\n         * - Reset validations and errors\n         *\n         */\n        this.reset = () => {\n            const { onChange } = this.props;\n            const newState = this.getStateFromProps(this.props, undefined);\n            const newFormData = newState.formData;\n            const state = {\n                formData: newFormData,\n                errorSchema: {},\n                errors: [],\n                schemaValidationErrors: [],\n                schemaValidationErrorSchema: {},\n            };\n            this.setState(state, () => onChange && onChange({ ...this.state, ...state }));\n        };\n        /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n         * was provided.\n         *\n         * @param id - The unique `id` of the field that was blurred\n         * @param data - The data associated with the field that was blurred\n         */\n        this.onBlur = (id, data) => {\n            const { onBlur } = this.props;\n            if (onBlur) {\n                onBlur(id, data);\n            }\n        };\n        /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n         * was provided.\n         *\n         * @param id - The unique `id` of the field that was focused\n         * @param data - The data associated with the field that was focused\n         */\n        this.onFocus = (id, data) => {\n            const { onFocus } = this.props;\n            if (onFocus) {\n                onFocus(id, data);\n            }\n        };\n        /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n         * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n         * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n         * via the `onError()` callback unless validation is disabled. Finally, it will add in any `extraErrors` and then call\n         * back the `onSubmit` callback if it was provided.\n         *\n         * @param event - The submit HTML form event\n         */\n        this.onSubmit = (event) => {\n            event.preventDefault();\n            if (event.target !== event.currentTarget) {\n                return;\n            }\n            event.persist();\n            const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n            let { formData: newFormData } = this.state;\n            const { schema, schemaUtils } = this.state;\n            if (omitExtraData === true) {\n                const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n                const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', newFormData);\n                const fieldNames = this.getFieldNames(pathSchema, newFormData);\n                newFormData = this.getUsedFormData(newFormData, fieldNames);\n            }\n            if (noValidate || this.validateForm()) {\n                // There are no errors generated through schema validation.\n                // Check for user provided errors and update state accordingly.\n                const errorSchema = extraErrors || {};\n                const errors = extraErrors ? toErrorList(extraErrors) : [];\n                this.setState({\n                    formData: newFormData,\n                    errors,\n                    errorSchema,\n                    schemaValidationErrors: [],\n                    schemaValidationErrorSchema: {},\n                }, () => {\n                    if (onSubmit) {\n                        onSubmit({ ...this.state, formData: newFormData, status: 'submitted' }, event);\n                    }\n                });\n            }\n        };\n        if (!props.validator) {\n            throw new Error('A validator is required for Form functionality to work');\n        }\n        this.state = this.getStateFromProps(props, props.formData);\n        if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {\n            this.props.onChange(this.state);\n        }\n        this.formElement = createRef();\n    }\n    /**\n     * `getSnapshotBeforeUpdate` is a React lifecycle method that is invoked right before the most recently rendered\n     * output is committed to the DOM. It enables your component to capture current values (e.g., scroll position) before\n     * they are potentially changed.\n     *\n     * In this case, it checks if the props have changed since the last render. If they have, it computes the next state\n     * of the component using `getStateFromProps` method and returns it along with a `shouldUpdate` flag set to `true` IF\n     * the `nextState` and `prevState` are different, otherwise `false`. This ensures that we have the most up-to-date\n     * state ready to be applied in `componentDidUpdate`.\n     *\n     * If `formData` hasn't changed, it simply returns an object with `shouldUpdate` set to `false`, indicating that a\n     * state update is not necessary.\n     *\n     * @param prevProps - The previous set of props before the update.\n     * @param prevState - The previous state before the update.\n     * @returns Either an object containing the next state and a flag indicating that an update should occur, or an object\n     *        with a flag indicating that an update is not necessary.\n     */\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        if (!deepEquals(this.props, prevProps)) {\n            const nextState = this.getStateFromProps(this.props, this.props.formData, prevProps.schema !== this.props.schema ? undefined : this.state.retrievedSchema);\n            const shouldUpdate = !deepEquals(nextState, prevState);\n            return { nextState, shouldUpdate };\n        }\n        return { shouldUpdate: false };\n    }\n    /**\n     * `componentDidUpdate` is a React lifecycle method that is invoked immediately after updating occurs. This method is\n     * not called for the initial render.\n     *\n     * Here, it checks if an update is necessary based on the `shouldUpdate` flag received from `getSnapshotBeforeUpdate`.\n     * If an update is required, it applies the next state and, if needed, triggers the `onChange` handler to inform about\n     * changes.\n     *\n     * This method effectively replaces the deprecated `UNSAFE_componentWillReceiveProps`, providing a safer alternative\n     * to handle prop changes and state updates.\n     *\n     * @param _ - The previous set of props.\n     * @param prevState - The previous state of the component before the update.\n     * @param snapshot - The value returned from `getSnapshotBeforeUpdate`.\n     */\n    componentDidUpdate(_, prevState, snapshot) {\n        if (snapshot.shouldUpdate) {\n            const { nextState } = snapshot;\n            if (!deepEquals(nextState.formData, this.props.formData) &&\n                !deepEquals(nextState.formData, prevState.formData) &&\n                this.props.onChange) {\n                this.props.onChange(nextState);\n            }\n            this.setState(nextState);\n        }\n    }\n    /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n     * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n     * validation process IF required by the `props`.\n     *\n     * @param props - The props passed to the `Form`\n     * @param inputFormData - The new or current data for the `Form`\n     * @returns - The new state for the `Form`\n     */\n    getStateFromProps(props, inputFormData, retrievedSchema) {\n        const state = this.state || {};\n        const schema = 'schema' in props ? props.schema : this.props.schema;\n        const uiSchema = ('uiSchema' in props ? props.uiSchema : this.props.uiSchema) || {};\n        const edit = typeof inputFormData !== 'undefined';\n        const liveValidate = 'liveValidate' in props ? props.liveValidate : this.props.liveValidate;\n        const mustValidate = edit && !props.noValidate && liveValidate;\n        const rootSchema = schema;\n        const experimental_defaultFormStateBehavior = 'experimental_defaultFormStateBehavior' in props\n            ? props.experimental_defaultFormStateBehavior\n            : this.props.experimental_defaultFormStateBehavior;\n        let schemaUtils = state.schemaUtils;\n        if (!schemaUtils ||\n            schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema, experimental_defaultFormStateBehavior)) {\n            schemaUtils = createSchemaUtils(props.validator, rootSchema, experimental_defaultFormStateBehavior);\n        }\n        const formData = schemaUtils.getDefaultFormState(schema, inputFormData);\n        const _retrievedSchema = retrievedSchema !== null && retrievedSchema !== void 0 ? retrievedSchema : schemaUtils.retrieveSchema(schema, formData);\n        const getCurrentErrors = () => {\n            if (props.noValidate) {\n                return { errors: [], errorSchema: {} };\n            }\n            else if (!props.liveValidate) {\n                return {\n                    errors: state.schemaValidationErrors || [],\n                    errorSchema: state.schemaValidationErrorSchema || {},\n                };\n            }\n            return {\n                errors: state.errors || [],\n                errorSchema: state.errorSchema || {},\n            };\n        };\n        let errors;\n        let errorSchema;\n        let schemaValidationErrors = state.schemaValidationErrors;\n        let schemaValidationErrorSchema = state.schemaValidationErrorSchema;\n        if (mustValidate) {\n            const schemaValidation = this.validate(formData, schema, schemaUtils, _retrievedSchema);\n            errors = schemaValidation.errors;\n            errorSchema = schemaValidation.errorSchema;\n            schemaValidationErrors = errors;\n            schemaValidationErrorSchema = errorSchema;\n        }\n        else {\n            const currentErrors = getCurrentErrors();\n            errors = currentErrors.errors;\n            errorSchema = currentErrors.errorSchema;\n        }\n        if (props.extraErrors) {\n            const merged = validationDataMerge({ errorSchema, errors }, props.extraErrors);\n            errorSchema = merged.errorSchema;\n            errors = merged.errors;\n        }\n        const idSchema = schemaUtils.toIdSchema(_retrievedSchema, uiSchema['ui:rootFieldId'], formData, props.idPrefix, props.idSeparator);\n        const nextState = {\n            schemaUtils,\n            schema,\n            uiSchema,\n            idSchema,\n            formData,\n            edit,\n            errors,\n            errorSchema,\n            schemaValidationErrors,\n            schemaValidationErrorSchema,\n            retrievedSchema: _retrievedSchema,\n        };\n        return nextState;\n    }\n    /** React lifecycle method that is used to determine whether component should be updated.\n     *\n     * @param nextProps - The next version of the props\n     * @param nextState - The next version of the state\n     * @returns - True if the component should be updated, false otherwise\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        return shouldRender(this, nextProps, nextState);\n    }\n    /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n     * `schemaUtils` in the state), returning the results.\n     *\n     * @param formData - The new form data to validate\n     * @param schema - The schema used to validate against\n     * @param altSchemaUtils - The alternate schemaUtils to use for validation\n     */\n    validate(formData, schema = this.props.schema, altSchemaUtils, retrievedSchema) {\n        const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;\n        const { customValidate, transformErrors, uiSchema } = this.props;\n        const resolvedSchema = retrievedSchema !== null && retrievedSchema !== void 0 ? retrievedSchema : schemaUtils.retrieveSchema(schema, formData);\n        return schemaUtils\n            .getValidator()\n            .validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);\n    }\n    /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n    renderErrors(registry) {\n        const { errors, errorSchema, schema, uiSchema } = this.state;\n        const { formContext } = this.props;\n        const options = getUiOptions(uiSchema);\n        const ErrorListTemplate = getTemplate('ErrorListTemplate', registry, options);\n        if (errors && errors.length) {\n            return (_jsx(ErrorListTemplate, { errors: errors, errorSchema: errorSchema || {}, schema: schema, uiSchema: uiSchema, formContext: formContext, registry: registry }));\n        }\n        return null;\n    }\n    /** Returns the registry for the form */\n    getRegistry() {\n        var _a;\n        const { translateString: customTranslateString, uiSchema = {} } = this.props;\n        const { schemaUtils } = this.state;\n        const { fields, templates, widgets, formContext, translateString } = getDefaultRegistry();\n        return {\n            fields: { ...fields, ...this.props.fields },\n            templates: {\n                ...templates,\n                ...this.props.templates,\n                ButtonTemplates: {\n                    ...templates.ButtonTemplates,\n                    ...(_a = this.props.templates) === null || _a === void 0 ? void 0 : _a.ButtonTemplates,\n                },\n            },\n            widgets: { ...widgets, ...this.props.widgets },\n            rootSchema: this.props.schema,\n            formContext: this.props.formContext || formContext,\n            schemaUtils,\n            translateString: customTranslateString || translateString,\n            globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY],\n        };\n    }\n    /** Provides a function that can be used to programmatically submit the `Form` */\n    submit() {\n        if (this.formElement.current) {\n            this.formElement.current.dispatchEvent(new CustomEvent('submit', {\n                cancelable: true,\n            }));\n            this.formElement.current.requestSubmit();\n        }\n    }\n    /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\n     * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\n     * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\n     *\n     * @param error - The error on which to focus\n     */\n    focusOnError(error) {\n        const { idPrefix = 'root', idSeparator = '_' } = this.props;\n        const { property } = error;\n        const path = _toPath(property);\n        if (path[0] === '') {\n            // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n            path[0] = idPrefix;\n        }\n        else {\n            // Otherwise insert the idPrefix into the first location using unshift\n            path.unshift(idPrefix);\n        }\n        const elementId = path.join(idSeparator);\n        let field = this.formElement.current.elements[elementId];\n        if (!field) {\n            // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n            field = this.formElement.current.querySelector(`input[id^=${elementId}`);\n        }\n        if (field && field.length) {\n            // If we got a list with length > 0\n            field = field[0];\n        }\n        if (field) {\n            field.focus();\n        }\n    }\n    /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n     * same way as would happen on form submission.\n     *\n     * @returns - True if the form is valid, false otherwise.\n     */\n    validateForm() {\n        const { extraErrors, extraErrorsBlockSubmit, focusOnFirstError, onError } = this.props;\n        const { formData, errors: prevErrors } = this.state;\n        const schemaValidation = this.validate(formData);\n        let errors = schemaValidation.errors;\n        let errorSchema = schemaValidation.errorSchema;\n        const schemaValidationErrors = errors;\n        const schemaValidationErrorSchema = errorSchema;\n        const hasError = errors.length > 0 || (extraErrors && extraErrorsBlockSubmit);\n        if (hasError) {\n            if (extraErrors) {\n                const merged = validationDataMerge(schemaValidation, extraErrors);\n                errorSchema = merged.errorSchema;\n                errors = merged.errors;\n            }\n            if (focusOnFirstError) {\n                if (typeof focusOnFirstError === 'function') {\n                    focusOnFirstError(errors[0]);\n                }\n                else {\n                    this.focusOnError(errors[0]);\n                }\n            }\n            this.setState({\n                errors,\n                errorSchema,\n                schemaValidationErrors,\n                schemaValidationErrorSchema,\n            }, () => {\n                if (onError) {\n                    onError(errors);\n                }\n                else {\n                    console.error('Form validation failed', errors);\n                }\n            });\n        }\n        else if (prevErrors.length > 0) {\n            this.setState({\n                errors: [],\n                errorSchema: {},\n                schemaValidationErrors: [],\n                schemaValidationErrorSchema: {},\n            });\n        }\n        return !hasError;\n    }\n    /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n     * needed along with the submit button or any children of the form.\n     */\n    render() {\n        const { children, id, idPrefix, idSeparator, className = '', tagName, name, method, target, action, autoComplete, enctype, acceptcharset, noHtml5Validate = false, disabled = false, readonly = false, formContext, showErrorList = 'top', _internalFormWrapper, } = this.props;\n        const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n        const registry = this.getRegistry();\n        const { SchemaField: _SchemaField } = registry.fields;\n        const { SubmitButton } = registry.templates.ButtonTemplates;\n        // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n        // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n        // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n        const as = _internalFormWrapper ? tagName : undefined;\n        const FormTag = _internalFormWrapper || tagName || 'form';\n        let { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions = {} } = getUiOptions(uiSchema);\n        if (disabled) {\n            submitOptions = { ...submitOptions, props: { ...submitOptions.props, disabled: true } };\n        }\n        const submitUiSchema = { [UI_OPTIONS_KEY]: { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions } };\n        return (_jsxs(FormTag, { className: className ? className : 'rjsf', id: id, name: name, method: method, target: target, action: action, autoComplete: autoComplete, encType: enctype, acceptCharset: acceptcharset, noValidate: noHtml5Validate, onSubmit: this.onSubmit, as: as, ref: this.formElement, children: [showErrorList === 'top' && this.renderErrors(registry), _jsx(_SchemaField, { name: '', schema: schema, uiSchema: uiSchema, errorSchema: errorSchema, idSchema: idSchema, idPrefix: idPrefix, idSeparator: idSeparator, formContext: formContext, formData: formData, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, registry: registry, disabled: disabled, readonly: readonly }), children ? children : _jsx(SubmitButton, { uiSchema: submitUiSchema, registry: registry }), showErrorList === 'bottom' && this.renderErrors(registry)] }));\n    }\n}\n//# sourceMappingURL=Form.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport Form from './components/Form';\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme(themeProps) {\n    return forwardRef(({ fields, widgets, templates, ...directProps }, ref) => {\n        var _a;\n        fields = { ...themeProps === null || themeProps === void 0 ? void 0 : themeProps.fields, ...fields };\n        widgets = { ...themeProps === null || themeProps === void 0 ? void 0 : themeProps.widgets, ...widgets };\n        templates = {\n            ...themeProps === null || themeProps === void 0 ? void 0 : themeProps.templates,\n            ...templates,\n            ButtonTemplates: {\n                ...(_a = themeProps === null || themeProps === void 0 ? void 0 : themeProps.templates) === null || _a === void 0 ? void 0 : _a.ButtonTemplates,\n                ...templates === null || templates === void 0 ? void 0 : templates.ButtonTemplates,\n            },\n        };\n        return (_jsx(Form, { ...themeProps, ...directProps, fields: fields, widgets: widgets, templates: templates, ref: ref }));\n    });\n}\n//# sourceMappingURL=withTheme.js.map","import Form from './components/Form';\nimport withTheme from './withTheme';\nimport getDefaultRegistry from './getDefaultRegistry';\nexport { withTheme, getDefaultRegistry };\nexport default Form;\n//# sourceMappingURL=index.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport { TranslatableString } from '@rjsf/utils';\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({ uiSchema, registry, ...props }) {\n    const { translateString } = registry;\n    return (_jsx(IconButton, { title: translateString(TranslatableString.AddItemButton), ...props, color: 'primary', children: _jsx(AddIcon, {}) }));\n}\n//# sourceMappingURL=AddButton.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate(props) {\n    const { children, disabled, hasToolbar, hasCopy, hasMoveDown, hasMoveUp, hasRemove, index, onCopyIndexClick, onDropIndexClick, onReorderClick, readonly, uiSchema, registry, } = props;\n    const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n    const btnStyle = {\n        flex: 1,\n        paddingLeft: 6,\n        paddingRight: 6,\n        fontWeight: 'bold',\n        minWidth: 0,\n    };\n    return (_jsxs(Grid, { container: true, alignItems: 'center', children: [_jsx(Grid, { item: true, xs: true, style: { overflow: 'auto' }, children: _jsx(Box, { mb: 2, children: _jsx(Paper, { elevation: 2, children: _jsx(Box, { p: 2, children: children }) }) }) }), hasToolbar && (_jsxs(Grid, { item: true, children: [(hasMoveUp || hasMoveDown) && (_jsx(MoveUpButton, { style: btnStyle, disabled: disabled || readonly || !hasMoveUp, onClick: onReorderClick(index, index - 1), uiSchema: uiSchema, registry: registry })), (hasMoveUp || hasMoveDown) && (_jsx(MoveDownButton, { style: btnStyle, disabled: disabled || readonly || !hasMoveDown, onClick: onReorderClick(index, index + 1), uiSchema: uiSchema, registry: registry })), hasCopy && (_jsx(CopyButton, { style: btnStyle, disabled: disabled || readonly, onClick: onCopyIndexClick(index), uiSchema: uiSchema, registry: registry })), hasRemove && (_jsx(RemoveButton, { style: btnStyle, disabled: disabled || readonly, onClick: onDropIndexClick(index), uiSchema: uiSchema, registry: registry }))] }))] }));\n}\n//# sourceMappingURL=ArrayFieldItemTemplate.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { getTemplate, getUiOptions, } from '@rjsf/utils';\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate(props) {\n    const { canAdd, disabled, idSchema, uiSchema, items, onAddClick, readonly, registry, required, schema, title } = props;\n    const uiOptions = getUiOptions(uiSchema);\n    const ArrayFieldDescriptionTemplate = getTemplate('ArrayFieldDescriptionTemplate', registry, uiOptions);\n    const ArrayFieldItemTemplate = getTemplate('ArrayFieldItemTemplate', registry, uiOptions);\n    const ArrayFieldTitleTemplate = getTemplate('ArrayFieldTitleTemplate', registry, uiOptions);\n    // Button templates are not overridden in the uiSchema\n    const { ButtonTemplates: { AddButton }, } = registry.templates;\n    return (_jsx(Paper, { elevation: 2, children: _jsxs(Box, { p: 2, children: [_jsx(ArrayFieldTitleTemplate, { idSchema: idSchema, title: uiOptions.title || title, schema: schema, uiSchema: uiSchema, required: required, registry: registry }), _jsx(ArrayFieldDescriptionTemplate, { idSchema: idSchema, description: uiOptions.description || schema.description, schema: schema, uiSchema: uiSchema, registry: registry }), items &&\n                    items.map(({ key, ...itemProps }) => (_jsx(ArrayFieldItemTemplate, { ...itemProps }, key))), canAdd && (_jsx(Grid, { container: true, justifyContent: 'flex-end', children: _jsx(Grid, { item: true, children: _jsx(Box, { mt: 2, children: _jsx(AddButton, { className: 'array-item-add', onClick: onAddClick, disabled: disabled || readonly, uiSchema: uiSchema, registry: registry }) }) }) }))] }) }));\n}\n//# sourceMappingURL=ArrayFieldTemplate.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport TextField from '@material-ui/core/TextField';\nimport { ariaDescribedByIds, examplesId, getInputProps, labelValue, } from '@rjsf/utils';\nconst TYPES_THAT_SHRINK_LABEL = ['date', 'datetime-local', 'file', 'time'];\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate(props) {\n    const { id, name, // remove this from textFieldProps\n    placeholder, required, readonly, disabled, type, label, hideLabel, hideError, value, onChange, onChangeOverride, onBlur, onFocus, autofocus, options, schema, uiSchema, rawErrors = [], formContext, registry, InputLabelProps, ...textFieldProps } = props;\n    const inputProps = getInputProps(schema, type, options);\n    // Now we need to pull out the step, min, max into an inner `inputProps` for material-ui\n    const { step, min, max, ...rest } = inputProps;\n    const otherProps = {\n        inputProps: {\n            step,\n            min,\n            max,\n            ...(schema.examples ? { list: examplesId(id) } : undefined),\n        },\n        ...rest,\n    };\n    const _onChange = ({ target: { value } }) => onChange(value === '' ? options.emptyValue : value);\n    const _onBlur = ({ target: { value } }) => onBlur(id, value);\n    const _onFocus = ({ target: { value } }) => onFocus(id, value);\n    const DisplayInputLabelProps = TYPES_THAT_SHRINK_LABEL.includes(type)\n        ? {\n            ...InputLabelProps,\n            shrink: true,\n        }\n        : InputLabelProps;\n    return (_jsxs(_Fragment, { children: [_jsx(TextField, { id: id, name: id, placeholder: placeholder, label: labelValue(label || undefined, hideLabel, false), autoFocus: autofocus, required: required, disabled: disabled || readonly, ...otherProps, value: value || value === 0 ? value : '', error: rawErrors.length > 0, onChange: onChangeOverride || _onChange, onBlur: _onBlur, onFocus: _onFocus, InputLabelProps: DisplayInputLabelProps, ...textFieldProps, \"aria-describedby\": ariaDescribedByIds(id, !!schema.examples) }), Array.isArray(schema.examples) && (_jsx(\"datalist\", { id: examplesId(id), children: schema.examples\n                    .concat(schema.default && !schema.examples.includes(schema.default) ? [schema.default] : [])\n                    .map((example) => {\n                    return _jsx(\"option\", { value: example }, example);\n                }) }))] }));\n}\n//# sourceMappingURL=BaseInputTemplate.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport Typography from '@material-ui/core/Typography';\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField(props) {\n    const { id, description } = props;\n    if (description) {\n        return (_jsx(Typography, { id: id, variant: 'subtitle2', style: { marginTop: '5px' }, children: description }));\n    }\n    return null;\n}\n//# sourceMappingURL=DescriptionField.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport ErrorIcon from '@material-ui/icons/Error';\nimport Box from '@material-ui/core/Box';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { TranslatableString } from '@rjsf/utils';\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList({ errors, registry, }) {\n    const { translateString } = registry;\n    return (_jsx(Paper, { elevation: 2, children: _jsxs(Box, { mb: 2, p: 2, children: [_jsx(Typography, { variant: 'h6', children: translateString(TranslatableString.ErrorsLabel) }), _jsx(List, { dense: true, children: errors.map((error, i) => {\n                        return (_jsxs(ListItem, { children: [_jsx(ListItemIcon, { children: _jsx(ErrorIcon, { color: 'error' }) }), _jsx(ListItemText, { primary: error.stack })] }, i));\n                    }) })] }) }));\n}\n//# sourceMappingURL=ErrorList.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport CopyIcon from '@material-ui/icons/FileCopy';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport { TranslatableString } from '@rjsf/utils';\nexport default function MuiIconButton(props) {\n    const { icon, color, uiSchema, registry, ...otherProps } = props;\n    return (_jsx(IconButton, { ...otherProps, size: 'small', color: color, children: icon }));\n}\nexport function CopyButton(props) {\n    const { registry: { translateString }, } = props;\n    return (_jsx(MuiIconButton, { title: translateString(TranslatableString.CopyButton), ...props, icon: _jsx(CopyIcon, { fontSize: 'small' }) }));\n}\nexport function MoveDownButton(props) {\n    const { registry: { translateString }, } = props;\n    return (_jsx(MuiIconButton, { title: translateString(TranslatableString.MoveDownButton), ...props, icon: _jsx(ArrowDownwardIcon, { fontSize: 'small' }) }));\n}\nexport function MoveUpButton(props) {\n    const { registry: { translateString }, } = props;\n    return (_jsx(MuiIconButton, { title: translateString(TranslatableString.MoveUpButton), ...props, icon: _jsx(ArrowUpwardIcon, { fontSize: 'small' }) }));\n}\nexport function RemoveButton(props) {\n    const { iconType, ...otherProps } = props;\n    const { registry: { translateString }, } = otherProps;\n    return (_jsx(MuiIconButton, { title: translateString(TranslatableString.RemoveButton), ...otherProps, color: 'secondary', icon: _jsx(RemoveIcon, { fontSize: iconType === 'default' ? 'medium' : 'small' }) }));\n}\n//# sourceMappingURL=IconButton.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport ListItem from '@material-ui/core/ListItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport List from '@material-ui/core/List';\nimport { errorId } from '@rjsf/utils';\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate(props) {\n    const { errors = [], idSchema } = props;\n    if (errors.length === 0) {\n        return null;\n    }\n    const id = errorId(idSchema);\n    return (_jsx(List, { dense: true, disablePadding: true, children: errors.map((error, i) => {\n            return (_jsx(ListItem, { disableGutters: true, children: _jsx(FormHelperText, { id: id, children: error }) }, i));\n        }) }));\n}\n//# sourceMappingURL=FieldErrorTemplate.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { helpId } from '@rjsf/utils';\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate(props) {\n    const { idSchema, help } = props;\n    if (!help) {\n        return null;\n    }\n    const id = helpId(idSchema);\n    return _jsx(FormHelperText, { id: id, children: help });\n}\n//# sourceMappingURL=FieldHelpTemplate.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport { getTemplate, getUiOptions, } from '@rjsf/utils';\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate(props) {\n    const { id, children, classNames, style, disabled, displayLabel, hidden, label, onDropPropertyClick, onKeyChange, readonly, required, rawErrors = [], errors, help, description, rawDescription, schema, uiSchema, registry, } = props;\n    const uiOptions = getUiOptions(uiSchema);\n    const WrapIfAdditionalTemplate = getTemplate('WrapIfAdditionalTemplate', registry, uiOptions);\n    if (hidden) {\n        return _jsx(\"div\", { style: { display: 'none' }, children: children });\n    }\n    return (_jsx(WrapIfAdditionalTemplate, { classNames: classNames, style: style, disabled: disabled, id: id, label: label, onDropPropertyClick: onDropPropertyClick, onKeyChange: onKeyChange, readonly: readonly, required: required, schema: schema, uiSchema: uiSchema, registry: registry, children: _jsxs(FormControl, { fullWidth: true, error: rawErrors.length ? true : false, required: required, children: [children, displayLabel && rawDescription ? (_jsx(Typography, { variant: 'caption', color: 'textSecondary', children: description })) : null, errors, help] }) }));\n}\n//# sourceMappingURL=FieldTemplate.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport Grid from '@material-ui/core/Grid';\nimport { canExpand, descriptionId, getTemplate, getUiOptions, titleId, } from '@rjsf/utils';\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate(props) {\n    const { description, title, properties, required, disabled, readonly, uiSchema, idSchema, schema, formData, onAddClick, registry, } = props;\n    const uiOptions = getUiOptions(uiSchema);\n    const TitleFieldTemplate = getTemplate('TitleFieldTemplate', registry, uiOptions);\n    const DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, uiOptions);\n    // Button templates are not overridden in the uiSchema\n    const { ButtonTemplates: { AddButton }, } = registry.templates;\n    return (_jsxs(_Fragment, { children: [title && (_jsx(TitleFieldTemplate, { id: titleId(idSchema), title: title, required: required, schema: schema, uiSchema: uiSchema, registry: registry })), description && (_jsx(DescriptionFieldTemplate, { id: descriptionId(idSchema), description: description, schema: schema, uiSchema: uiSchema, registry: registry })), _jsxs(Grid, { container: true, spacing: 2, style: { marginTop: '10px' }, children: [properties.map((element, index) => \n                    // Remove the <Grid> if the inner element is hidden as the <Grid>\n                    // itself would otherwise still take up space.\n                    element.hidden ? (element.content) : (_jsx(Grid, { item: true, xs: 12, style: { marginBottom: '10px' }, children: element.content }, index))), canExpand(schema, uiSchema, formData) && (_jsx(Grid, { container: true, justifyContent: 'flex-end', children: _jsx(Grid, { item: true, children: _jsx(AddButton, { className: 'object-property-expand', onClick: onAddClick(schema), disabled: disabled || readonly, uiSchema: uiSchema, registry: registry }) }) }))] })] }));\n}\n//# sourceMappingURL=ObjectFieldTemplate.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { getSubmitButtonOptions } from '@rjsf/utils';\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton({ uiSchema }) {\n    const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions(uiSchema);\n    if (norender) {\n        return null;\n    }\n    return (_jsx(Box, { marginTop: 3, children: _jsx(Button, { type: 'submit', variant: 'contained', color: 'primary', ...submitButtonProps, children: submitText }) }));\n}\n//# sourceMappingURL=SubmitButton.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField({ id, title, }) {\n    return (_jsxs(Box, { id: id, mb: 1, mt: 1, children: [_jsx(Typography, { variant: 'h5', children: title }), _jsx(Divider, {})] }));\n}\n//# sourceMappingURL=TitleField.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { ADDITIONAL_PROPERTY_FLAG, TranslatableString, } from '@rjsf/utils';\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate(props) {\n    const { children, classNames, style, disabled, id, label, onDropPropertyClick, onKeyChange, readonly, required, schema, uiSchema, registry, } = props;\n    const { templates, translateString } = registry;\n    // Button templates are not overridden in the uiSchema\n    const { RemoveButton } = templates.ButtonTemplates;\n    const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n    const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n    const btnStyle = {\n        flex: 1,\n        paddingLeft: 6,\n        paddingRight: 6,\n        fontWeight: 'bold',\n    };\n    if (!additional) {\n        return (_jsx(\"div\", { className: classNames, style: style, children: children }));\n    }\n    const handleBlur = ({ target }) => onKeyChange(target.value);\n    return (_jsxs(Grid, { container: true, alignItems: 'center', spacing: 2, className: classNames, style: style, children: [_jsx(Grid, { item: true, xs: true, children: _jsx(TextField, { fullWidth: true, required: required, label: keyLabel, defaultValue: label, disabled: disabled || readonly, id: `${id}-key`, name: `${id}-key`, onBlur: !readonly ? handleBlur : undefined, type: 'text' }) }), _jsx(Grid, { item: true, xs: true, children: children }), _jsx(Grid, { item: true, children: _jsx(RemoveButton, { iconType: 'default', style: btnStyle, disabled: disabled || readonly, onClick: onDropPropertyClick(label), uiSchema: uiSchema, registry: registry }) })] }, `${id}-key`));\n}\n//# sourceMappingURL=WrapIfAdditionalTemplate.js.map","import AddButton from '../AddButton';\nimport ArrayFieldItemTemplate from '../ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from '../ArrayFieldTemplate';\nimport BaseInputTemplate from '../BaseInputTemplate';\nimport DescriptionField from '../DescriptionField';\nimport ErrorList from '../ErrorList';\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from '../IconButton';\nimport FieldErrorTemplate from '../FieldErrorTemplate';\nimport FieldHelpTemplate from '../FieldHelpTemplate';\nimport FieldTemplate from '../FieldTemplate';\nimport ObjectFieldTemplate from '../ObjectFieldTemplate';\nimport SubmitButton from '../SubmitButton';\nimport TitleField from '../TitleField';\nimport WrapIfAdditionalTemplate from '../WrapIfAdditionalTemplate';\nexport function generateTemplates() {\n    return {\n        ArrayFieldItemTemplate,\n        ArrayFieldTemplate,\n        BaseInputTemplate,\n        ButtonTemplates: {\n            AddButton,\n            CopyButton,\n            MoveDownButton,\n            MoveUpButton,\n            RemoveButton,\n            SubmitButton,\n        },\n        DescriptionFieldTemplate: DescriptionField,\n        ErrorListTemplate: ErrorList,\n        FieldErrorTemplate,\n        FieldHelpTemplate,\n        FieldTemplate,\n        ObjectFieldTemplate,\n        TitleFieldTemplate: TitleField,\n        WrapIfAdditionalTemplate,\n    };\n}\nexport default generateTemplates();\n//# sourceMappingURL=Templates.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { ariaDescribedByIds, descriptionId, getTemplate, labelValue, schemaRequiresTrueValue, } from '@rjsf/utils';\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function CheckboxWidget(props) {\n    var _a;\n    const { schema, id, value, disabled, readonly, label = '', hideLabel, autofocus, onChange, onBlur, onFocus, registry, options, uiSchema, } = props;\n    const DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, options);\n    // Because an unchecked checkbox will cause html5 validation to fail, only add\n    // the \"required\" attribute if the field value must be \"true\", due to the\n    // \"const\" or \"enum\" keywords\n    const required = schemaRequiresTrueValue(schema);\n    const _onChange = (_, checked) => onChange(checked);\n    const _onBlur = ({ target: { value } }) => onBlur(id, value);\n    const _onFocus = ({ target: { value } }) => onFocus(id, value);\n    const description = (_a = options.description) !== null && _a !== void 0 ? _a : schema.description;\n    return (_jsxs(_Fragment, { children: [!hideLabel && !!description && (_jsx(DescriptionFieldTemplate, { id: descriptionId(id), description: description, schema: schema, uiSchema: uiSchema, registry: registry })), _jsx(FormControlLabel, { control: _jsx(Checkbox, { id: id, name: id, checked: typeof value === 'undefined' ? false : Boolean(value), required: required, disabled: disabled || readonly, autoFocus: autofocus, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, \"aria-describedby\": ariaDescribedByIds(id) }), label: labelValue(label, hideLabel, false) })] }));\n}\n//# sourceMappingURL=CheckboxWidget.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { ariaDescribedByIds, enumOptionsDeselectValue, enumOptionsIsSelected, enumOptionsSelectValue, enumOptionsValueForIndex, labelValue, optionId, } from '@rjsf/utils';\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function CheckboxesWidget({ label, hideLabel, id, disabled, options, value, autofocus, readonly, required, onChange, onBlur, onFocus, }) {\n    const { enumOptions, enumDisabled, inline, emptyValue } = options;\n    const checkboxesValues = Array.isArray(value) ? value : [value];\n    const _onChange = (index) => ({ target: { checked } }) => {\n        if (checked) {\n            onChange(enumOptionsSelectValue(index, checkboxesValues, enumOptions));\n        }\n        else {\n            onChange(enumOptionsDeselectValue(index, checkboxesValues, enumOptions));\n        }\n    };\n    const _onBlur = ({ target: { value } }) => onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n    const _onFocus = ({ target: { value } }) => onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n    return (_jsxs(_Fragment, { children: [labelValue(_jsx(FormLabel, { required: required, htmlFor: id, children: label || undefined }), hideLabel), _jsx(FormGroup, { id: id, row: !!inline, children: Array.isArray(enumOptions) &&\n                    enumOptions.map((option, index) => {\n                        const checked = enumOptionsIsSelected(option.value, checkboxesValues);\n                        const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n                        const checkbox = (_jsx(Checkbox, { id: optionId(id, index), name: id, checked: checked, disabled: disabled || itemDisabled || readonly, autoFocus: autofocus && index === 0, onChange: _onChange(index), onBlur: _onBlur, onFocus: _onFocus, \"aria-describedby\": ariaDescribedByIds(id) }));\n                        return _jsx(FormControlLabel, { control: checkbox, label: option.label }, index);\n                    }) })] }));\n}\n//# sourceMappingURL=CheckboxesWidget.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { ariaDescribedByIds, enumOptionsIndexForValue, enumOptionsValueForIndex, labelValue, optionId, } from '@rjsf/utils';\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RadioWidget({ id, options, value, required, disabled, readonly, label, hideLabel, onChange, onBlur, onFocus, }) {\n    var _a;\n    const { enumOptions, enumDisabled, emptyValue } = options;\n    const _onChange = (_, value) => onChange(enumOptionsValueForIndex(value, enumOptions, emptyValue));\n    const _onBlur = ({ target: { value } }) => onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n    const _onFocus = ({ target: { value } }) => onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n    const row = options ? options.inline : false;\n    const selectedIndex = (_a = enumOptionsIndexForValue(value, enumOptions)) !== null && _a !== void 0 ? _a : null;\n    return (_jsxs(_Fragment, { children: [labelValue(_jsx(FormLabel, { required: required, htmlFor: id, children: label || undefined }), hideLabel), _jsx(RadioGroup, { id: id, name: id, value: selectedIndex, row: row, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, \"aria-describedby\": ariaDescribedByIds(id), children: Array.isArray(enumOptions) &&\n                    enumOptions.map((option, index) => {\n                        const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n                        const radio = (_jsx(FormControlLabel, { control: _jsx(Radio, { name: id, id: optionId(id, index), color: 'primary' }), label: option.label, value: String(index), disabled: disabled || itemDisabled || readonly }, index));\n                        return radio;\n                    }) })] }));\n}\n//# sourceMappingURL=RadioWidget.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Slider from '@material-ui/core/Slider';\nimport { ariaDescribedByIds, labelValue, rangeSpec, } from '@rjsf/utils';\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget(props) {\n    const { value, readonly, disabled, onBlur, onFocus, options, schema, onChange, required, label, hideLabel, id } = props;\n    const sliderProps = { value, label, id, name: id, ...rangeSpec(schema) };\n    const _onChange = (_, value) => {\n        onChange(value !== null && value !== void 0 ? value : options.emptyValue);\n    };\n    const _onBlur = ({ target: { value } }) => onBlur(id, value);\n    const _onFocus = ({ target: { value } }) => onFocus(id, value);\n    return (_jsxs(_Fragment, { children: [labelValue(_jsx(FormLabel, { required: required, htmlFor: id, children: label || undefined }), hideLabel), _jsx(Slider, { disabled: disabled || readonly, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, valueLabelDisplay: 'auto', ...sliderProps, \"aria-describedby\": ariaDescribedByIds(id) })] }));\n}\n//# sourceMappingURL=RangeWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport { ariaDescribedByIds, enumOptionsIndexForValue, enumOptionsValueForIndex, labelValue, } from '@rjsf/utils';\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function SelectWidget({ schema, id, name, // remove this from textFieldProps\noptions, label, hideLabel, required, disabled, readonly, placeholder, value, multiple, autofocus, onChange, onBlur, onFocus, rawErrors = [], registry, uiSchema, hideError, formContext, ...textFieldProps }) {\n    const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n    multiple = typeof multiple === 'undefined' ? false : !!multiple;\n    const emptyValue = multiple ? [] : '';\n    const isEmpty = typeof value === 'undefined' || (multiple && value.length < 1) || (!multiple && value === emptyValue);\n    const _onChange = ({ target: { value } }) => onChange(enumOptionsValueForIndex(value, enumOptions, optEmptyVal));\n    const _onBlur = ({ target: { value } }) => onBlur(id, enumOptionsValueForIndex(value, enumOptions, optEmptyVal));\n    const _onFocus = ({ target: { value } }) => onFocus(id, enumOptionsValueForIndex(value, enumOptions, optEmptyVal));\n    const selectedIndexes = enumOptionsIndexForValue(value, enumOptions, multiple);\n    return (_jsx(TextField, { id: id, name: id, label: labelValue(label, hideLabel || !label, false), value: !isEmpty && typeof selectedIndexes !== 'undefined' ? selectedIndexes : emptyValue, required: required, disabled: disabled || readonly, autoFocus: autofocus, placeholder: placeholder, error: rawErrors.length > 0, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, ...textFieldProps, select // Apply this and the following props after the potential overrides defined in textFieldProps\n        : true, InputLabelProps: {\n            ...textFieldProps.InputLabelProps,\n            shrink: !isEmpty,\n        }, SelectProps: {\n            ...textFieldProps.SelectProps,\n            multiple,\n        }, \"aria-describedby\": ariaDescribedByIds(id), children: Array.isArray(enumOptions) &&\n            enumOptions.map(({ value, label }, i) => {\n                const disabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(value) !== -1;\n                return (_jsx(MenuItem, { value: String(i), disabled: disabled, children: label }, i));\n            }) }));\n}\n//# sourceMappingURL=SelectWidget.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate } from '@rjsf/utils';\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextareaWidget(props) {\n    const { options, registry } = props;\n    const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n    let rows = 5;\n    if (typeof options.rows === 'string' || typeof options.rows === 'number') {\n        rows = options.rows;\n    }\n    return _jsx(BaseInputTemplate, { ...props, multiline: true, rows: rows });\n}\n//# sourceMappingURL=TextareaWidget.js.map","import CheckboxWidget from '../CheckboxWidget/CheckboxWidget';\nimport CheckboxesWidget from '../CheckboxesWidget/CheckboxesWidget';\nimport RadioWidget from '../RadioWidget/RadioWidget';\nimport RangeWidget from '../RangeWidget/RangeWidget';\nimport SelectWidget from '../SelectWidget/SelectWidget';\nimport TextareaWidget from '../TextareaWidget/TextareaWidget';\nexport function generateWidgets() {\n    return {\n        CheckboxWidget,\n        CheckboxesWidget,\n        RadioWidget,\n        RangeWidget,\n        SelectWidget,\n        TextareaWidget,\n    };\n}\nexport default generateWidgets();\n//# sourceMappingURL=Widgets.js.map","import { generateTemplates } from '../Templates';\nimport { generateWidgets } from '../Widgets';\nexport function generateTheme() {\n    return {\n        templates: generateTemplates(),\n        widgets: generateWidgets(),\n    };\n}\nexport default generateTheme();\n//# sourceMappingURL=Theme.js.map","import { withTheme } from '@rjsf/core';\nimport { generateTheme } from '../Theme';\nexport function generateForm() {\n    return withTheme(generateTheme());\n}\nexport default generateForm();\n//# sourceMappingURL=MuiForm.js.map","import MuiForm from './MuiForm/MuiForm';\nexport { default as Form, generateForm } from './MuiForm';\nexport { default as Templates, generateTemplates } from './Templates';\nexport { default as Theme, generateTheme } from './Theme';\nexport { default as Widgets, generateWidgets } from './Widgets';\nexport default MuiForm;\n//# sourceMappingURL=index.js.map","/** Determines whether a `thing` is an object for the purposes of RSJF. In this case, `thing` is an object if it has\n * the type `object` but is NOT null, an array or a File.\n *\n * @param thing - The thing to check to see whether it is an object\n * @returns - True if it is a non-null, non-array, non-File object\n */\nexport default function isObject(thing) {\n    if (typeof File !== 'undefined' && thing instanceof File) {\n        return false;\n    }\n    if (typeof Date !== 'undefined' && thing instanceof Date) {\n        return false;\n    }\n    return typeof thing === 'object' && thing !== null && !Array.isArray(thing);\n}\n//# sourceMappingURL=isObject.js.map","import isObject from './isObject';\n/** Checks the schema to see if it is allowing additional items, by verifying that `schema.additionalItems` is an\n * object. The user is warned in the console if `schema.additionalItems` has the value `true`.\n *\n * @param schema - The schema object to check\n * @returns - True if additional items is allowed, otherwise false\n */\nexport default function allowAdditionalItems(schema) {\n    if (schema.additionalItems === true) {\n        console.warn('additionalItems=true is currently not supported');\n    }\n    return isObject(schema.additionalItems);\n}\n//# sourceMappingURL=allowAdditionalItems.js.map","/** Attempts to convert the string into a number. If an empty string is provided, then `undefined` is returned. If a\n * `null` is provided, it is returned. If the string ends in a `.` then the string is returned because the user may be\n * in the middle of typing a float number. If a number ends in a pattern like `.0`, `.20`, `.030`, string is returned\n * because the user may be typing number that will end in a non-zero digit. Otherwise, the string is wrapped by\n * `Number()` and if that result is not `NaN`, that number will be returned, otherwise the string `value` will be.\n *\n * @param value - The string or null value to convert to a number\n * @returns - The `value` converted to a number when appropriate, otherwise the `value`\n */\nexport default function asNumber(value) {\n    if (value === '') {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    if (/\\.$/.test(value)) {\n        // '3.' can't really be considered a number even if it parses in js. The\n        // user is most likely entering a float.\n        return value;\n    }\n    if (/\\.0$/.test(value)) {\n        // we need to return this as a string here, to allow for input like 3.07\n        return value;\n    }\n    if (/\\.\\d*0$/.test(value)) {\n        // It's a number, that's cool - but we need it as a string so it doesn't screw\n        // with the user when entering dollar amounts or other values (such as those with\n        // specific precision or number of significant digits)\n        return value;\n    }\n    const n = Number(value);\n    const valid = typeof n === 'number' && !Number.isNaN(n);\n    return valid ? n : value;\n}\n//# sourceMappingURL=asNumber.js.map","/** Below are the list of all the keys into various elements of a RJSFSchema or UiSchema that are used by the various\n * utility functions. In addition to those keys, there are the special `ADDITIONAL_PROPERTY_FLAG` and\n * `RJSF_ADDITONAL_PROPERTIES_FLAG` flags that is added to a schema under certain conditions by the `retrieveSchema()`\n * utility.\n */\nexport const ADDITIONAL_PROPERTY_FLAG = '__additional_property';\nexport const ADDITIONAL_PROPERTIES_KEY = 'additionalProperties';\nexport const ALL_OF_KEY = 'allOf';\nexport const ANY_OF_KEY = 'anyOf';\nexport const CONST_KEY = 'const';\nexport const DEFAULT_KEY = 'default';\nexport const DEFINITIONS_KEY = 'definitions';\nexport const DEPENDENCIES_KEY = 'dependencies';\nexport const ENUM_KEY = 'enum';\nexport const ERRORS_KEY = '__errors';\nexport const ID_KEY = '$id';\nexport const IF_KEY = 'if';\nexport const ITEMS_KEY = 'items';\nexport const JUNK_OPTION_ID = '_$junk_option_schema_id$_';\nexport const NAME_KEY = '$name';\nexport const ONE_OF_KEY = 'oneOf';\nexport const PROPERTIES_KEY = 'properties';\nexport const REQUIRED_KEY = 'required';\nexport const SUBMIT_BTN_OPTIONS_KEY = 'submitButtonOptions';\nexport const REF_KEY = '$ref';\nexport const RJSF_ADDITONAL_PROPERTIES_FLAG = '__rjsf_additionalProperties';\nexport const ROOT_SCHEMA_PREFIX = '__rjsf_rootSchema';\nexport const UI_FIELD_KEY = 'ui:field';\nexport const UI_WIDGET_KEY = 'ui:widget';\nexport const UI_OPTIONS_KEY = 'ui:options';\nexport const UI_GLOBAL_OPTIONS_KEY = 'ui:globalOptions';\n//# sourceMappingURL=constants.js.map","import { UI_OPTIONS_KEY, UI_WIDGET_KEY } from './constants';\nimport isObject from './isObject';\n/** Get all passed options from ui:options, and ui:<optionName>, returning them in an object with the `ui:`\n * stripped off. Any `globalOptions` will always be returned, unless they are overridden by options in the `uiSchema`.\n *\n * @param [uiSchema={}] - The UI Schema from which to get any `ui:xxx` options\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - An object containing all the `ui:xxx` options with the `ui:` stripped off along with all `globalOptions`\n */\nexport default function getUiOptions(uiSchema = {}, globalOptions = {}) {\n    return Object.keys(uiSchema)\n        .filter((key) => key.indexOf('ui:') === 0)\n        .reduce((options, key) => {\n        const value = uiSchema[key];\n        if (key === UI_WIDGET_KEY && isObject(value)) {\n            console.error('Setting options via ui:widget object is no longer supported, use ui:options instead');\n            return options;\n        }\n        if (key === UI_OPTIONS_KEY && isObject(value)) {\n            return { ...options, ...value };\n        }\n        return { ...options, [key.substring(3)]: value };\n    }, { ...globalOptions });\n}\n//# sourceMappingURL=getUiOptions.js.map","import getUiOptions from './getUiOptions';\n/** Checks whether the field described by `schema`, having the `uiSchema` and `formData` supports expanding. The UI for\n * the field can expand if it has additional properties, is not forced as non-expandable by the `uiSchema` and the\n * `formData` object doesn't already have `schema.maxProperties` elements.\n *\n * @param schema - The schema for the field that is being checked\n * @param [uiSchema={}] - The uiSchema for the field\n * @param [formData] - The formData for the field\n * @returns - True if the schema element has additionalProperties, is expandable, and not at the maxProperties limit\n */\nexport default function canExpand(schema, uiSchema = {}, formData) {\n    if (!schema.additionalProperties) {\n        return false;\n    }\n    const { expandable = true } = getUiOptions(uiSchema);\n    if (expandable === false) {\n        return expandable;\n    }\n    // if ui:options.expandable was not explicitly set to false, we can add\n    // another property if we have not exceeded maxProperties yet\n    if (schema.maxProperties !== undefined && formData) {\n        return Object.keys(formData).length < schema.maxProperties;\n    }\n    return true;\n}\n//# sourceMappingURL=canExpand.js.map","import isPlainObject from 'lodash/isPlainObject';\nimport { ERRORS_KEY } from './constants';\n/** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n *\n * @param formData - The form data around which the error handler is created\n * @returns - A `FormValidation` object based on the `formData` structure\n */\nexport default function createErrorHandler(formData) {\n    const handler = {\n        // We store the list of errors for this node in a property named __errors\n        // to avoid name collision with a possible sub schema field named\n        // 'errors' (see `utils.toErrorSchema`).\n        [ERRORS_KEY]: [],\n        addError(message) {\n            this[ERRORS_KEY].push(message);\n        },\n    };\n    if (Array.isArray(formData)) {\n        return formData.reduce((acc, value, key) => {\n            return { ...acc, [key]: createErrorHandler(value) };\n        }, handler);\n    }\n    if (isPlainObject(formData)) {\n        const formObject = formData;\n        return Object.keys(formObject).reduce((acc, key) => {\n            return { ...acc, [key]: createErrorHandler(formObject[key]) };\n        }, handler);\n    }\n    return handler;\n}\n//# sourceMappingURL=createErrorHandler.js.map","import isEqualWith from 'lodash/isEqualWith';\n/** Implements a deep equals using the `lodash.isEqualWith` function, that provides a customized comparator that\n * assumes all functions are equivalent.\n *\n * @param a - The first element to compare\n * @param b - The second element to compare\n * @returns - True if the `a` and `b` are deeply equal, false otherwise\n */\nexport default function deepEquals(a, b) {\n    return isEqualWith(a, b, (obj, other) => {\n        if (typeof obj === 'function' && typeof other === 'function') {\n            // Assume all functions are equivalent\n            // see https://github.com/rjsf-team/react-jsonschema-form/issues/255\n            return true;\n        }\n        return undefined; // fallback to default isEquals behavior\n    });\n}\n//# sourceMappingURL=deepEquals.js.map","import jsonpointer from 'jsonpointer';\nimport omit from 'lodash/omit';\nimport { REF_KEY } from './constants';\n/** Splits out the value at the `key` in `object` from the `object`, returning an array that contains in the first\n * location, the `object` minus the `key: value` and in the second location the `value`.\n *\n * @param key - The key from the object to extract\n * @param object - The object from which to extract the element\n * @returns - An array with the first value being the object minus the `key` element and the second element being the\n *      value from `object[key]`\n */\nexport function splitKeyElementFromObject(key, object) {\n    const value = object[key];\n    const remaining = omit(object, [key]);\n    return [remaining, value];\n}\n/** Given the name of a `$ref` from within a schema, using the `rootSchema`, look up and return the sub-schema using the\n * path provided by that reference. If `#` is not the first character of the reference, or the path does not exist in\n * the schema, then throw an Error. Otherwise return the sub-schema. Also deals with nested `$ref`s in the sub-schema.\n *\n * @param $ref - The ref string for which the schema definition is desired\n * @param [rootSchema={}] - The root schema in which to search for the definition\n * @returns - The sub-schema within the `rootSchema` which matches the `$ref` if it exists\n * @throws - Error indicating that no schema for that reference exists\n */\nexport default function findSchemaDefinition($ref, rootSchema = {}) {\n    let ref = $ref || '';\n    if (ref.startsWith('#')) {\n        // Decode URI fragment representation.\n        ref = decodeURIComponent(ref.substring(1));\n    }\n    else {\n        throw new Error(`Could not find a definition for ${$ref}.`);\n    }\n    const current = jsonpointer.get(rootSchema, ref);\n    if (current === undefined) {\n        throw new Error(`Could not find a definition for ${$ref}.`);\n    }\n    if (current[REF_KEY]) {\n        const [remaining, theRef] = splitKeyElementFromObject(REF_KEY, current);\n        const subSchema = findSchemaDefinition(theRef, rootSchema);\n        if (Object.keys(remaining).length > 0) {\n            return { ...remaining, ...subSchema };\n        }\n        return subSchema;\n    }\n    return current;\n}\n//# sourceMappingURL=findSchemaDefinition.js.map","import get from 'lodash/get';\nimport { PROPERTIES_KEY } from './constants';\n/** Compares the value of `discriminatorField` within `formData` against the value of `discriminatorField` within schema for each `option`.\n * Returns index of first `option` whose discriminator matches formData. Returns `undefined` if there is no match.\n * This function does not work with discriminators of `\"type\": \"object\"` and `\"type\": \"array\"`\n *\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the matched option or undefined if there is no match\n */\nexport default function getOptionMatchingSimpleDiscriminator(formData, options, discriminatorField) {\n    var _a;\n    if (formData && discriminatorField) {\n        const value = get(formData, discriminatorField);\n        if (value === undefined) {\n            return;\n        }\n        for (let i = 0; i < options.length; i++) {\n            const option = options[i];\n            const discriminator = get(option, [PROPERTIES_KEY, discriminatorField], {});\n            if (discriminator.type === 'object' || discriminator.type === 'array') {\n                continue;\n            }\n            if (discriminator.const === value) {\n                return i;\n            }\n            if ((_a = discriminator.enum) === null || _a === void 0 ? void 0 : _a.includes(value)) {\n                return i;\n            }\n        }\n    }\n    return;\n}\n//# sourceMappingURL=getOptionMatchingSimpleDiscriminator.js.map","import get from 'lodash/get';\nimport has from 'lodash/has';\nimport isNumber from 'lodash/isNumber';\nimport { PROPERTIES_KEY } from '../constants';\nimport getOptionMatchingSimpleDiscriminator from '../getOptionMatchingSimpleDiscriminator';\n/** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n * Deprecated, use `getFirstMatchingOption()` instead.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the matched option or 0 if none is available\n * @deprecated\n */\nexport default function getMatchingOption(validator, formData, options, rootSchema, discriminatorField) {\n    // For performance, skip validating subschemas if formData is undefined. We just\n    // want to get the first option in that case.\n    if (formData === undefined) {\n        return 0;\n    }\n    const simpleDiscriminatorMatch = getOptionMatchingSimpleDiscriminator(formData, options, discriminatorField);\n    if (isNumber(simpleDiscriminatorMatch)) {\n        return simpleDiscriminatorMatch;\n    }\n    for (let i = 0; i < options.length; i++) {\n        const option = options[i];\n        // If we have a discriminator field, then we will use this to make the determination\n        if (discriminatorField && has(option, [PROPERTIES_KEY, discriminatorField])) {\n            const value = get(formData, discriminatorField);\n            const discriminator = get(option, [PROPERTIES_KEY, discriminatorField], {});\n            if (validator.isValid(discriminator, value, rootSchema)) {\n                return i;\n            }\n        }\n        else if (option[PROPERTIES_KEY]) {\n            // If the schema describes an object then we need to add slightly more\n            // strict matching to the schema, because unless the schema uses the\n            // \"requires\" keyword, an object will match the schema as long as it\n            // doesn't have matching keys with a conflicting type. To do this we use an\n            // \"anyOf\" with an array of requires. This augmentation expresses that the\n            // schema should match if any of the keys in the schema are present on the\n            // object and pass validation.\n            //\n            // Create an \"anyOf\" schema that requires at least one of the keys in the\n            // \"properties\" object\n            const requiresAnyOf = {\n                anyOf: Object.keys(option[PROPERTIES_KEY]).map((key) => ({\n                    required: [key],\n                })),\n            };\n            let augmentedSchema;\n            // If the \"anyOf\" keyword already exists, wrap the augmentation in an \"allOf\"\n            if (option.anyOf) {\n                // Create a shallow clone of the option\n                const { ...shallowClone } = option;\n                if (!shallowClone.allOf) {\n                    shallowClone.allOf = [];\n                }\n                else {\n                    // If \"allOf\" already exists, shallow clone the array\n                    shallowClone.allOf = shallowClone.allOf.slice();\n                }\n                shallowClone.allOf.push(requiresAnyOf);\n                augmentedSchema = shallowClone;\n            }\n            else {\n                augmentedSchema = Object.assign({}, option, requiresAnyOf);\n            }\n            // Remove the \"required\" field as it's likely that not all fields have\n            // been filled in yet, which will mean that the schema is not valid\n            delete augmentedSchema.required;\n            if (validator.isValid(augmentedSchema, formData, rootSchema)) {\n                return i;\n            }\n        }\n        else if (validator.isValid(option, formData, rootSchema)) {\n            return i;\n        }\n    }\n    return 0;\n}\n//# sourceMappingURL=getMatchingOption.js.map","import getMatchingOption from './getMatchingOption';\n/** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n * Always returns the first option if there is nothing that matches.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the first matched option or 0 if none is available\n */\nexport default function getFirstMatchingOption(validator, formData, options, rootSchema, discriminatorField) {\n    return getMatchingOption(validator, formData, options, rootSchema, discriminatorField);\n}\n//# sourceMappingURL=getFirstMatchingOption.js.map","import get from 'lodash/get';\nimport isString from 'lodash/isString';\n/** Returns the `discriminator.propertyName` when defined in the `schema` if it is a string. A warning is generated when\n * it is not a string. Returns `undefined` when a valid discriminator is not present.\n *\n * @param schema - The schema from which the discriminator is potentially obtained\n * @returns - The `discriminator.propertyName` if it exists in the schema, otherwise `undefined`\n */\nexport default function getDiscriminatorFieldFromSchema(schema) {\n    let discriminator;\n    const maybeString = get(schema, 'discriminator.propertyName', undefined);\n    if (isString(maybeString)) {\n        discriminator = maybeString;\n    }\n    else if (maybeString !== undefined) {\n        console.warn(`Expecting discriminator to be a string, got \"${typeof maybeString}\" instead`);\n    }\n    return discriminator;\n}\n//# sourceMappingURL=getDiscriminatorFieldFromSchema.js.map","/** Given a specific `value` attempts to guess the type of a schema element. In the case where we have to implicitly\n *  create a schema, it is useful to know what type to use based on the data we are defining.\n *\n * @param value - The value from which to guess the type\n * @returns - The best guess for the object type\n */\nexport default function guessType(value) {\n    if (Array.isArray(value)) {\n        return 'array';\n    }\n    if (typeof value === 'string') {\n        return 'string';\n    }\n    if (value == null) {\n        return 'null';\n    }\n    if (typeof value === 'boolean') {\n        return 'boolean';\n    }\n    if (!isNaN(value)) {\n        return 'number';\n    }\n    if (typeof value === 'object') {\n        return 'object';\n    }\n    // Default to string if we can't figure it out\n    return 'string';\n}\n//# sourceMappingURL=guessType.js.map","import guessType from './guessType';\n/** Gets the type of a given `schema`. If the type is not explicitly defined, then an attempt is made to infer it from\n * other elements of the schema as follows:\n * - schema.const: Returns the `guessType()` of that value\n * - schema.enum: Returns `string`\n * - schema.properties: Returns `object`\n * - schema.additionalProperties: Returns `object`\n * - type is an array with a length of 2 and one type is 'null': Returns the other type\n *\n * @param schema - The schema for which to get the type\n * @returns - The type of the schema\n */\nexport default function getSchemaType(schema) {\n    let { type } = schema;\n    if (!type && schema.const) {\n        return guessType(schema.const);\n    }\n    if (!type && schema.enum) {\n        return 'string';\n    }\n    if (!type && (schema.properties || schema.additionalProperties)) {\n        return 'object';\n    }\n    if (Array.isArray(type)) {\n        if (type.length === 2 && type.includes('null')) {\n            type = type.find((type) => type !== 'null');\n        }\n        else {\n            type = type[0];\n        }\n    }\n    return type;\n}\n//# sourceMappingURL=getSchemaType.js.map","import union from 'lodash/union';\nimport { REQUIRED_KEY } from './constants';\nimport getSchemaType from './getSchemaType';\nimport isObject from './isObject';\n/** Recursively merge deeply nested schemas. The difference between `mergeSchemas` and `mergeObjects` is that\n * `mergeSchemas` only concats arrays for values under the 'required' keyword, and when it does, it doesn't include\n * duplicate values.\n *\n * @param obj1 - The first schema object to merge\n * @param obj2 - The second schema object to merge\n * @returns - The merged schema object\n */\nexport default function mergeSchemas(obj1, obj2) {\n    const acc = Object.assign({}, obj1); // Prevent mutation of source object.\n    return Object.keys(obj2).reduce((acc, key) => {\n        const left = obj1 ? obj1[key] : {}, right = obj2[key];\n        if (obj1 && key in obj1 && isObject(right)) {\n            acc[key] = mergeSchemas(left, right);\n        }\n        else if (obj1 &&\n            obj2 &&\n            (getSchemaType(obj1) === 'object' || getSchemaType(obj2) === 'object') &&\n            key === REQUIRED_KEY &&\n            Array.isArray(left) &&\n            Array.isArray(right)) {\n            // Don't include duplicate values when merging 'required' fields.\n            acc[key] = union(left, right);\n        }\n        else {\n            acc[key] = right;\n        }\n        return acc;\n    }, acc);\n}\n//# sourceMappingURL=mergeSchemas.js.map","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport set from 'lodash/set';\nimport times from 'lodash/times';\nimport transform from 'lodash/transform';\nimport merge from 'lodash/merge';\nimport flattenDeep from 'lodash/flattenDeep';\nimport uniq from 'lodash/uniq';\nimport mergeAllOf from 'json-schema-merge-allof';\nimport { ADDITIONAL_PROPERTIES_KEY, ADDITIONAL_PROPERTY_FLAG, ALL_OF_KEY, ANY_OF_KEY, DEPENDENCIES_KEY, IF_KEY, ONE_OF_KEY, REF_KEY, PROPERTIES_KEY, ITEMS_KEY, } from '../constants';\nimport findSchemaDefinition, { splitKeyElementFromObject } from '../findSchemaDefinition';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport guessType from '../guessType';\nimport isObject from '../isObject';\nimport mergeSchemas from '../mergeSchemas';\nimport getFirstMatchingOption from './getFirstMatchingOption';\n/** Retrieves an expanded schema that has had all of its conditions, additional properties, references and dependencies\n * resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData` that is used to do the\n * potentially recursive resolution.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n */\nexport default function retrieveSchema(validator, schema, rootSchema = {}, rawFormData) {\n    return retrieveSchemaInternal(validator, schema, rootSchema, rawFormData)[0];\n}\n/** Resolves a conditional block (if/else/then) by removing the condition and merging the appropriate conditional branch\n * with the rest of the schema. If `expandAllBranches` is true, then the `retrieveSchemaInteral()` results for both\n * conditions will be returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that is used to detect valid schema conditions\n * @param schema - The schema for which resolving a condition is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and\n *          dependencies as a list of schemas\n * @param recurseList - The list of recursive references already processed\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - A list of schemas with the appropriate conditions resolved, possibly with all branches expanded\n */\nexport function resolveCondition(validator, schema, rootSchema, expandAllBranches, recurseList, formData) {\n    const { if: expression, then, else: otherwise, ...resolvedSchemaLessConditional } = schema;\n    const conditionValue = validator.isValid(expression, formData || {}, rootSchema);\n    let resolvedSchemas = [resolvedSchemaLessConditional];\n    let schemas = [];\n    if (expandAllBranches) {\n        if (then && typeof then !== 'boolean') {\n            schemas = schemas.concat(retrieveSchemaInternal(validator, then, rootSchema, formData, expandAllBranches, recurseList));\n        }\n        if (otherwise && typeof otherwise !== 'boolean') {\n            schemas = schemas.concat(retrieveSchemaInternal(validator, otherwise, rootSchema, formData, expandAllBranches, recurseList));\n        }\n    }\n    else {\n        const conditionalSchema = conditionValue ? then : otherwise;\n        if (conditionalSchema && typeof conditionalSchema !== 'boolean') {\n            schemas = schemas.concat(retrieveSchemaInternal(validator, conditionalSchema, rootSchema, formData, expandAllBranches, recurseList));\n        }\n    }\n    if (schemas.length) {\n        resolvedSchemas = schemas.map((s) => mergeSchemas(resolvedSchemaLessConditional, s));\n    }\n    return resolvedSchemas.flatMap((s) => retrieveSchemaInternal(validator, s, rootSchema, formData, expandAllBranches, recurseList));\n}\n/** Given a list of lists of allOf, anyOf or oneOf values, create a list of lists of all permutations of the values. The\n * `listOfLists` is expected to be all resolved values of the 1st...nth schemas within an `allOf`, `anyOf` or `oneOf`.\n * From those lists, build a matrix for each `xxxOf` where there is more than one schema for a row in the list of lists.\n *\n * For example:\n * - If there are three xxxOf rows (A, B, C) and they have been resolved such that there is only one A, two B and three\n *   C schemas then:\n *   - The permutation for the first row is `[[A]]`\n *   - The permutations for the second row are `[[A,B1], [A,B2]]`\n *   - The permutations for the third row are `[[A,B1,C1], [A,B1,C2], [A,B1,C3], [A,B2,C1], [A,B2,C2], [A,B2,C3]]`\n *\n * @param listOfLists - The list of lists of elements that represent the allOf, anyOf or oneOf resolved values in order\n * @returns - The list of all permutations of schemas for a set of `xxxOf`s\n */\nexport function getAllPermutationsOfXxxOf(listOfLists) {\n    const allPermutations = listOfLists.reduce((permutations, list) => {\n        // When there are more than one set of schemas for a row, duplicate the set of permutations and add in the values\n        if (list.length > 1) {\n            return list.flatMap((element) => times(permutations.length, (i) => [...permutations[i]].concat(element)));\n        }\n        // Otherwise just push in the single value into the current set of permutations\n        permutations.forEach((permutation) => permutation.push(list[0]));\n        return permutations;\n    }, [[]] // Start with an empty list\n    );\n    return allPermutations;\n}\n/** Resolves references and dependencies within a schema and its 'allOf' children. Passes the `expandAllBranches` flag\n * down to the `retrieveSchemaInternal()`, `resolveReference()` and `resolveDependencies()` helper calls. If\n * `expandAllBranches` is true, then all possible dependencies and/or allOf branches are returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param recurseList - The list of recursive references already processed\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list of schemas having its references, dependencies and allOf schemas resolved\n */\nexport function resolveSchema(validator, schema, rootSchema, expandAllBranches, recurseList, formData) {\n    const updatedSchemas = resolveReference(validator, schema, rootSchema, expandAllBranches, recurseList, formData);\n    if (updatedSchemas.length > 1 || updatedSchemas[0] !== schema) {\n        // return the updatedSchemas array if it has either multiple schemas within it\n        // OR the first schema is not the same as the original schema\n        return updatedSchemas;\n    }\n    if (DEPENDENCIES_KEY in schema) {\n        const resolvedSchemas = resolveDependencies(validator, schema, rootSchema, expandAllBranches, recurseList, formData);\n        return resolvedSchemas.flatMap((s) => {\n            return retrieveSchemaInternal(validator, s, rootSchema, formData, expandAllBranches, recurseList);\n        });\n    }\n    if (ALL_OF_KEY in schema && Array.isArray(schema.allOf)) {\n        const allOfSchemaElements = schema.allOf.map((allOfSubschema) => retrieveSchemaInternal(validator, allOfSubschema, rootSchema, formData, expandAllBranches, recurseList));\n        const allPermutations = getAllPermutationsOfXxxOf(allOfSchemaElements);\n        return allPermutations.map((permutation) => ({ ...schema, allOf: permutation }));\n    }\n    // No $ref or dependencies or allOf attribute was found, returning the original schema.\n    return [schema];\n}\n/** Resolves all references within a schema and then returns the `retrieveSchemaInternal()` if the resolved schema is\n * actually different than the original. Passes the `expandAllBranches` flag down to the `retrieveSchemaInternal()`\n * helper call.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a reference is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param recurseList - The list of recursive references already processed\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list schemas retrieved after having all references resolved\n */\nexport function resolveReference(validator, schema, rootSchema, expandAllBranches, recurseList, formData) {\n    const updatedSchema = resolveAllReferences(schema, rootSchema, recurseList);\n    if (updatedSchema !== schema) {\n        // Only call this if the schema was actually changed by the `resolveAllReferences()` function\n        return retrieveSchemaInternal(validator, updatedSchema, rootSchema, formData, expandAllBranches, recurseList);\n    }\n    return [schema];\n}\n/** Resolves all references within the schema itself as well as any of its properties and array items.\n *\n * @param schema - The schema for which resolving all references is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param recurseList - List of $refs already resolved to prevent recursion\n * @returns - given schema will all references resolved or the original schema if no internal `$refs` were resolved\n */\nexport function resolveAllReferences(schema, rootSchema, recurseList) {\n    if (!isObject(schema)) {\n        return schema;\n    }\n    let resolvedSchema = schema;\n    // resolve top level ref\n    if (REF_KEY in resolvedSchema) {\n        const { $ref, ...localSchema } = resolvedSchema;\n        // Check for a recursive reference and stop the loop\n        if (recurseList.includes($ref)) {\n            return resolvedSchema;\n        }\n        recurseList.push($ref);\n        // Retrieve the referenced schema definition.\n        const refSchema = findSchemaDefinition($ref, rootSchema);\n        resolvedSchema = { ...refSchema, ...localSchema };\n    }\n    if (PROPERTIES_KEY in resolvedSchema) {\n        const childrenLists = [];\n        const updatedProps = transform(resolvedSchema[PROPERTIES_KEY], (result, value, key) => {\n            const childList = [...recurseList];\n            result[key] = resolveAllReferences(value, rootSchema, childList);\n            childrenLists.push(childList);\n        }, {});\n        merge(recurseList, uniq(flattenDeep(childrenLists)));\n        resolvedSchema = { ...resolvedSchema, [PROPERTIES_KEY]: updatedProps };\n    }\n    if (ITEMS_KEY in resolvedSchema &&\n        !Array.isArray(resolvedSchema.items) &&\n        typeof resolvedSchema.items !== 'boolean') {\n        resolvedSchema = {\n            ...resolvedSchema,\n            items: resolveAllReferences(resolvedSchema.items, rootSchema, recurseList),\n        };\n    }\n    return isEqual(schema, resolvedSchema) ? schema : resolvedSchema;\n}\n/** Creates new 'properties' items for each key in the `formData`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the existing additional properties is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s * @param validator\n * @param [aFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The updated schema with additional properties stubbed\n */\nexport function stubExistingAdditionalProperties(validator, theSchema, rootSchema, aFormData) {\n    // Clone the schema so that we don't ruin the consumer's original\n    const schema = {\n        ...theSchema,\n        properties: { ...theSchema.properties },\n    };\n    // make sure formData is an object\n    const formData = aFormData && isObject(aFormData) ? aFormData : {};\n    Object.keys(formData).forEach((key) => {\n        if (key in schema.properties) {\n            // No need to stub, our schema already has the property\n            return;\n        }\n        let additionalProperties = {};\n        if (typeof schema.additionalProperties !== 'boolean') {\n            if (REF_KEY in schema.additionalProperties) {\n                additionalProperties = retrieveSchema(validator, { $ref: get(schema.additionalProperties, [REF_KEY]) }, rootSchema, formData);\n            }\n            else if ('type' in schema.additionalProperties) {\n                additionalProperties = { ...schema.additionalProperties };\n            }\n            else if (ANY_OF_KEY in schema.additionalProperties || ONE_OF_KEY in schema.additionalProperties) {\n                additionalProperties = {\n                    type: 'object',\n                    ...schema.additionalProperties,\n                };\n            }\n            else {\n                additionalProperties = { type: guessType(get(formData, [key])) };\n            }\n        }\n        else {\n            additionalProperties = { type: guessType(get(formData, [key])) };\n        }\n        // The type of our new key should match the additionalProperties value;\n        schema.properties[key] = additionalProperties;\n        // Set our additional property flag so we know it was dynamically added\n        set(schema.properties, [key, ADDITIONAL_PROPERTY_FLAG], true);\n    });\n    return schema;\n}\n/** Internal handler that retrieves an expanded schema that has had all of its conditions, additional properties,\n * references and dependencies resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData`\n * that is used to do the potentially recursive resolution. If `expandAllBranches` is true, then all possible branches\n * of the schema and its references, conditions and dependencies are returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @param [expandAllBranches=false] - Flag, if true, will return all possible branches of conditions, any/oneOf and\n *          dependencies as a list of schemas\n * @param [recurseList=[]] - The optional, list of recursive references already processed\n * @returns - The schema(s) resulting from having its conditions, additional properties, references and dependencies\n *          resolved. Multiple schemas may be returned if `expandAllBranches` is true.\n */\nexport function retrieveSchemaInternal(validator, schema, rootSchema, rawFormData, expandAllBranches = false, recurseList = []) {\n    if (!isObject(schema)) {\n        return [{}];\n    }\n    const resolvedSchemas = resolveSchema(validator, schema, rootSchema, expandAllBranches, recurseList, rawFormData);\n    return resolvedSchemas.flatMap((s) => {\n        let resolvedSchema = s;\n        if (IF_KEY in resolvedSchema) {\n            return resolveCondition(validator, resolvedSchema, rootSchema, expandAllBranches, recurseList, rawFormData);\n        }\n        if (ALL_OF_KEY in resolvedSchema) {\n            // resolve allOf schemas\n            if (expandAllBranches) {\n                const { allOf, ...restOfSchema } = resolvedSchema;\n                return [...allOf, restOfSchema];\n            }\n            try {\n                resolvedSchema = mergeAllOf(resolvedSchema, {\n                    deep: false,\n                });\n            }\n            catch (e) {\n                console.warn('could not merge subschemas in allOf:\\n', e);\n                const { allOf, ...resolvedSchemaWithoutAllOf } = resolvedSchema;\n                return resolvedSchemaWithoutAllOf;\n            }\n        }\n        const hasAdditionalProperties = ADDITIONAL_PROPERTIES_KEY in resolvedSchema && resolvedSchema.additionalProperties !== false;\n        if (hasAdditionalProperties) {\n            return stubExistingAdditionalProperties(validator, resolvedSchema, rootSchema, rawFormData);\n        }\n        return resolvedSchema;\n    });\n}\n/** Resolves an `anyOf` or `oneOf` within a schema (if present) to the list of schemas returned from\n * `retrieveSchemaInternal()` for the best matching option. If `expandAllBranches` is true, then a list of schemas for ALL\n * options are retrieved and returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema, defaults to an empty object\n * @returns - Either an array containing the best matching option or all options if `expandAllBranches` is true\n */\nexport function resolveAnyOrOneOfSchemas(validator, schema, rootSchema, expandAllBranches, rawFormData) {\n    let anyOrOneOf;\n    const { oneOf, anyOf, ...remaining } = schema;\n    if (Array.isArray(oneOf)) {\n        anyOrOneOf = oneOf;\n    }\n    else if (Array.isArray(anyOf)) {\n        anyOrOneOf = anyOf;\n    }\n    if (anyOrOneOf) {\n        // Ensure that during expand all branches we pass an object rather than undefined so that all options are interrogated\n        const formData = rawFormData === undefined && expandAllBranches ? {} : rawFormData;\n        const discriminator = getDiscriminatorFieldFromSchema(schema);\n        anyOrOneOf = anyOrOneOf.map((s) => {\n            // Due to anyOf/oneOf possibly using the same $ref we always pass a fresh recurse list array so that each option\n            // can resolve recursive references independently\n            return resolveAllReferences(s, rootSchema, []);\n        });\n        // Call this to trigger the set of isValid() calls that the schema parser will need\n        const option = getFirstMatchingOption(validator, formData, anyOrOneOf, rootSchema, discriminator);\n        if (expandAllBranches) {\n            return anyOrOneOf.map((item) => mergeSchemas(remaining, item));\n        }\n        schema = mergeSchemas(remaining, anyOrOneOf[option]);\n    }\n    return [schema];\n}\n/** Resolves dependencies within a schema and its 'anyOf/oneOf' children. Passes the `expandAllBranches` flag down to\n * the `resolveAnyOrOneOfSchema()` and `processDependencies()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependency is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param recurseList - The list of recursive references already processed\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list of schemas with their dependencies resolved\n */\nexport function resolveDependencies(validator, schema, rootSchema, expandAllBranches, recurseList, formData) {\n    // Drop the dependencies from the source schema.\n    const { dependencies, ...remainingSchema } = schema;\n    const resolvedSchemas = resolveAnyOrOneOfSchemas(validator, remainingSchema, rootSchema, expandAllBranches, formData);\n    return resolvedSchemas.flatMap((resolvedSchema) => processDependencies(validator, dependencies, resolvedSchema, rootSchema, expandAllBranches, recurseList, formData));\n}\n/** Processes all the `dependencies` recursively into the list of `resolvedSchema`s as needed. Passes the\n * `expandAllBranches` flag down to the `withDependentSchema()` and the recursive `processDependencies()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param dependencies - The set of dependencies that needs to be processed\n * @param resolvedSchema - The schema for which processing dependencies is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param recurseList - The list of recursive references already processed\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with the `dependencies` resolved into it\n */\nexport function processDependencies(validator, dependencies, resolvedSchema, rootSchema, expandAllBranches, recurseList, formData) {\n    let schemas = [resolvedSchema];\n    // Process dependencies updating the local schema properties as appropriate.\n    for (const dependencyKey in dependencies) {\n        // Skip this dependency if its trigger property is not present.\n        if (!expandAllBranches && get(formData, [dependencyKey]) === undefined) {\n            continue;\n        }\n        // Skip this dependency if it is not included in the schema (such as when dependencyKey is itself a hidden dependency.)\n        if (resolvedSchema.properties && !(dependencyKey in resolvedSchema.properties)) {\n            continue;\n        }\n        const [remainingDependencies, dependencyValue] = splitKeyElementFromObject(dependencyKey, dependencies);\n        if (Array.isArray(dependencyValue)) {\n            schemas[0] = withDependentProperties(resolvedSchema, dependencyValue);\n        }\n        else if (isObject(dependencyValue)) {\n            schemas = withDependentSchema(validator, resolvedSchema, rootSchema, dependencyKey, dependencyValue, expandAllBranches, recurseList, formData);\n        }\n        return schemas.flatMap((schema) => processDependencies(validator, remainingDependencies, schema, rootSchema, expandAllBranches, recurseList, formData));\n    }\n    return schemas;\n}\n/** Updates a schema with additionally required properties added\n *\n * @param schema - The schema for which resolving a dependent properties is desired\n * @param [additionallyRequired] - An optional array of additionally required names\n * @returns - The schema with the additional required values merged in\n */\nexport function withDependentProperties(schema, additionallyRequired) {\n    if (!additionallyRequired) {\n        return schema;\n    }\n    const required = Array.isArray(schema.required)\n        ? Array.from(new Set([...schema.required, ...additionallyRequired]))\n        : additionallyRequired;\n    return { ...schema, required: required };\n}\n/** Merges a dependent schema into the `schema` dealing with oneOfs and references. Passes the `expandAllBranches` flag\n * down to the `retrieveSchemaInternal()`, `resolveReference()` and `withExactlyOneSubschema()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependent schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the dependency\n * @param dependencyValue - The potentially dependent schema\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param recurseList - The list of recursive references already processed\n * @param [formData]- The current formData to assist retrieving a schema\n * @returns - The list of schemas with the dependent schema resolved into them\n */\nexport function withDependentSchema(validator, schema, rootSchema, dependencyKey, dependencyValue, expandAllBranches, recurseList, formData) {\n    const dependentSchemas = retrieveSchemaInternal(validator, dependencyValue, rootSchema, formData, expandAllBranches, recurseList);\n    return dependentSchemas.flatMap((dependent) => {\n        const { oneOf, ...dependentSchema } = dependent;\n        schema = mergeSchemas(schema, dependentSchema);\n        // Since it does not contain oneOf, we return the original schema.\n        if (oneOf === undefined) {\n            return schema;\n        }\n        // Resolve $refs inside oneOf.\n        const resolvedOneOfs = oneOf.map((subschema) => {\n            if (typeof subschema === 'boolean' || !(REF_KEY in subschema)) {\n                return [subschema];\n            }\n            return resolveReference(validator, subschema, rootSchema, expandAllBranches, recurseList, formData);\n        });\n        const allPermutations = getAllPermutationsOfXxxOf(resolvedOneOfs);\n        return allPermutations.flatMap((resolvedOneOf) => withExactlyOneSubschema(validator, schema, rootSchema, dependencyKey, resolvedOneOf, expandAllBranches, recurseList, formData));\n    });\n}\n/** Returns a list of `schema`s with the best choice from the `oneOf` options merged into it. If `expandAllBranches` is\n * true, then a list of schemas for ALL options are retrieved and returned. Passes the `expandAllBranches` flag down to\n * the `retrieveSchemaInternal()` helper call.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used to validate oneOf options\n * @param schema - The schema for which resolving a oneOf subschema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the oneOf dependency\n * @param oneOf - The list of schemas representing the oneOf options\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param recurseList - The list of recursive references already processed\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - Either an array containing the best matching option or all options if `expandAllBranches` is true\n */\nexport function withExactlyOneSubschema(validator, schema, rootSchema, dependencyKey, oneOf, expandAllBranches, recurseList, formData) {\n    const validSubschemas = oneOf.filter((subschema) => {\n        if (typeof subschema === 'boolean' || !subschema || !subschema.properties) {\n            return false;\n        }\n        const { [dependencyKey]: conditionPropertySchema } = subschema.properties;\n        if (conditionPropertySchema) {\n            const conditionSchema = {\n                type: 'object',\n                properties: {\n                    [dependencyKey]: conditionPropertySchema,\n                },\n            };\n            return validator.isValid(conditionSchema, formData, rootSchema) || expandAllBranches;\n        }\n        return false;\n    });\n    if (!expandAllBranches && validSubschemas.length !== 1) {\n        console.warn(\"ignoring oneOf in dependencies because there isn't exactly one subschema that is valid\");\n        return [schema];\n    }\n    return validSubschemas.flatMap((s) => {\n        const subschema = s;\n        const [dependentSubschema] = splitKeyElementFromObject(dependencyKey, subschema.properties);\n        const dependentSchema = { ...subschema, properties: dependentSubschema };\n        const schemas = retrieveSchemaInternal(validator, dependentSchema, rootSchema, formData, expandAllBranches, recurseList);\n        return schemas.map((s) => mergeSchemas(schema, s));\n    });\n}\n//# sourceMappingURL=retrieveSchema.js.map","import get from 'lodash/get';\nimport has from 'lodash/has';\nimport isNumber from 'lodash/isNumber';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport reduce from 'lodash/reduce';\nimport times from 'lodash/times';\nimport getFirstMatchingOption from './getFirstMatchingOption';\nimport retrieveSchema, { resolveAllReferences } from './retrieveSchema';\nimport { ONE_OF_KEY, REF_KEY, JUNK_OPTION_ID, ANY_OF_KEY } from '../constants';\nimport guessType from '../guessType';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport getOptionMatchingSimpleDiscriminator from '../getOptionMatchingSimpleDiscriminator';\n/** A junk option used to determine when the getFirstMatchingOption call really matches an option rather than returning\n * the first item\n */\nexport const JUNK_OPTION = {\n    type: 'object',\n    $id: JUNK_OPTION_ID,\n    properties: {\n        __not_really_there__: {\n            type: 'number',\n        },\n    },\n};\n/** Recursive function that calculates the score of a `formData` against the given `schema`. The computation is fairly\n * simple. Initially the total score is 0. When `schema.properties` object exists, then all the `key/value` pairs within\n * the object are processed as follows after obtaining the formValue from `formData` using the `key`:\n * - If the `value` contains a `$ref`, `calculateIndexScore()` is called recursively with the formValue and the new\n *   schema that is the result of the ref in the schema being resolved and that sub-schema's resulting score is added to\n *   the total.\n * - If the `value` contains a `oneOf` and there is a formValue, then score based on the index returned from calling\n *   `getClosestMatchingOption()` of that oneOf.\n * - If the type of the `value` is 'object', `calculateIndexScore()` is called recursively with the formValue and the\n *   `value` itself as the sub-schema, and the score is added to the total.\n * - If the type of the `value` matches the guessed-type of the `formValue`, the score is incremented by 1, UNLESS the\n *   value has a `default` or `const`. In those case, if the `default` or `const` and the `formValue` match, the score\n *   is incremented by another 1 otherwise it is decremented by 1.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param schema - The schema for which the score is being calculated\n * @param formData - The form data associated with the schema, used to calculate the score\n * @returns - The score a schema against the formData\n */\nexport function calculateIndexScore(validator, rootSchema, schema, formData = {}) {\n    let totalScore = 0;\n    if (schema) {\n        if (isObject(schema.properties)) {\n            totalScore += reduce(schema.properties, (score, value, key) => {\n                const formValue = get(formData, key);\n                if (typeof value === 'boolean') {\n                    return score;\n                }\n                if (has(value, REF_KEY)) {\n                    const newSchema = retrieveSchema(validator, value, rootSchema, formValue);\n                    return score + calculateIndexScore(validator, rootSchema, newSchema, formValue || {});\n                }\n                if ((has(value, ONE_OF_KEY) || has(value, ANY_OF_KEY)) && formValue) {\n                    const key = has(value, ONE_OF_KEY) ? ONE_OF_KEY : ANY_OF_KEY;\n                    const discriminator = getDiscriminatorFieldFromSchema(value);\n                    return (score +\n                        getClosestMatchingOption(validator, rootSchema, formValue, get(value, key), -1, discriminator));\n                }\n                if (value.type === 'object') {\n                    return score + calculateIndexScore(validator, rootSchema, value, formValue || {});\n                }\n                if (value.type === guessType(formValue)) {\n                    // If the types match, then we bump the score by one\n                    let newScore = score + 1;\n                    if (value.default) {\n                        // If the schema contains a readonly default value score the value that matches the default higher and\n                        // any non-matching value lower\n                        newScore += formValue === value.default ? 1 : -1;\n                    }\n                    else if (value.const) {\n                        // If the schema contains a const value score the value that matches the default higher and\n                        // any non-matching value lower\n                        newScore += formValue === value.const ? 1 : -1;\n                    }\n                    // TODO eventually, deal with enums/arrays\n                    return newScore;\n                }\n                return score;\n            }, 0);\n        }\n        else if (isString(schema.type) && schema.type === guessType(formData)) {\n            totalScore += 1;\n        }\n    }\n    return totalScore;\n}\n/** Determines which of the given `options` provided most closely matches the `formData`. Using\n * `getFirstMatchingOption()` to match two schemas that differ only by the readOnly, default or const value of a field\n * based on the `formData` and returns 0 when there is no match. Rather than passing in all the `options` at once to\n * this utility, instead an array of valid option indexes is created by iterating over the list of options, call\n * `getFirstMatchingOptions` with a list of one junk option and one good option, seeing if the good option is considered\n * matched.\n *\n * Once the list of valid indexes is created, if there is only one valid index, just return it. Otherwise, if there are\n * no valid indexes, then fill the valid indexes array with the indexes of all the options. Next, the index of the\n * option with the highest score is determined by iterating over the list of valid options, calling\n * `calculateIndexScore()` on each, comparing it against the current best score, and returning the index of the one that\n * eventually has the best score.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param formData - The form data associated with the schema\n * @param options - The list of options that can be selected from\n * @param [selectedOption=-1] - The index of the currently selected option, defaulted to -1 if not specified\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n */\nexport default function getClosestMatchingOption(validator, rootSchema, formData, options, selectedOption = -1, discriminatorField) {\n    // First resolve any refs in the options\n    const resolvedOptions = options.map((option) => {\n        return resolveAllReferences(option, rootSchema, []);\n    });\n    const simpleDiscriminatorMatch = getOptionMatchingSimpleDiscriminator(formData, options, discriminatorField);\n    if (isNumber(simpleDiscriminatorMatch)) {\n        return simpleDiscriminatorMatch;\n    }\n    // Reduce the array of options down to a list of the indexes that are considered matching options\n    const allValidIndexes = resolvedOptions.reduce((validList, option, index) => {\n        const testOptions = [JUNK_OPTION, option];\n        const match = getFirstMatchingOption(validator, formData, testOptions, rootSchema, discriminatorField);\n        // The match is the real option, so add its index to list of valid indexes\n        if (match === 1) {\n            validList.push(index);\n        }\n        return validList;\n    }, []);\n    // There is only one valid index, so return it!\n    if (allValidIndexes.length === 1) {\n        return allValidIndexes[0];\n    }\n    if (!allValidIndexes.length) {\n        // No indexes were valid, so we'll score all the options, add all the indexes\n        times(resolvedOptions.length, (i) => allValidIndexes.push(i));\n    }\n    const scoreCount = new Set();\n    // Score all the options in the list of valid indexes and return the index with the best score\n    const { bestIndex } = allValidIndexes.reduce((scoreData, index) => {\n        const { bestScore } = scoreData;\n        const option = resolvedOptions[index];\n        const score = calculateIndexScore(validator, rootSchema, option, formData);\n        scoreCount.add(score);\n        if (score > bestScore) {\n            return { bestIndex: index, bestScore: score };\n        }\n        return scoreData;\n    }, { bestIndex: selectedOption, bestScore: 0 });\n    // if all scores are the same go with selectedOption\n    if (scoreCount.size === 1 && selectedOption >= 0) {\n        return selectedOption;\n    }\n    return bestIndex;\n}\n//# sourceMappingURL=getClosestMatchingOption.js.map","import isObject from './isObject';\n/** Detects whether the given `schema` contains fixed items. This is the case when `schema.items` is a non-empty array\n * that only contains objects.\n *\n * @param schema - The schema in which to check for fixed items\n * @returns - True if there are fixed items in the schema, false otherwise\n */\nexport default function isFixedItems(schema) {\n    return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every((item) => isObject(item));\n}\n//# sourceMappingURL=isFixedItems.js.map","import get from 'lodash/get';\nimport isObject from './isObject';\n/** Merges the `defaults` object of type `T` into the `formData` of type `T`\n *\n * When merging defaults and form data, we want to merge in this specific way:\n * - objects are deeply merged\n * - arrays are merged in such a way that:\n *   - when the array is set in form data, only array entries set in form data\n *     are deeply merged; additional entries from the defaults are ignored unless `mergeExtraArrayDefaults` is true, in\n *     which case the extras are appended onto the end of the form data\n *   - when the array is not set in form data, the default is copied over\n * - scalars are overwritten/set by form data\n *\n * @param [defaults] - The defaults to merge\n * @param [formData] - The form data into which the defaults will be merged\n * @param [mergeExtraArrayDefaults=false] - If true, any additional default array entries are appended onto the formData\n * @returns - The resulting merged form data with defaults\n */\nexport default function mergeDefaultsWithFormData(defaults, formData, mergeExtraArrayDefaults = false) {\n    if (Array.isArray(formData)) {\n        const defaultsArray = Array.isArray(defaults) ? defaults : [];\n        const mapped = formData.map((value, idx) => {\n            if (defaultsArray[idx]) {\n                return mergeDefaultsWithFormData(defaultsArray[idx], value, mergeExtraArrayDefaults);\n            }\n            return value;\n        });\n        // Merge any extra defaults when mergeExtraArrayDefaults is true\n        if (mergeExtraArrayDefaults && mapped.length < defaultsArray.length) {\n            mapped.push(...defaultsArray.slice(mapped.length));\n        }\n        return mapped;\n    }\n    if (isObject(formData)) {\n        const acc = Object.assign({}, defaults); // Prevent mutation of source object.\n        return Object.keys(formData).reduce((acc, key) => {\n            acc[key] = mergeDefaultsWithFormData(defaults ? get(defaults, key) : {}, get(formData, key), mergeExtraArrayDefaults);\n            return acc;\n        }, acc);\n    }\n    return formData;\n}\n//# sourceMappingURL=mergeDefaultsWithFormData.js.map","import isObject from './isObject';\n/** Recursively merge deeply nested objects.\n *\n * @param obj1 - The first object to merge\n * @param obj2 - The second object to merge\n * @param [concatArrays=false] - Optional flag that, when true, will cause arrays to be concatenated. Use\n *          \"preventDuplicates\" to merge arrays in a manner that prevents any duplicate entries from being merged.\n *          NOTE: Uses shallow comparison for the duplicate checking.\n * @returns - A new object that is the merge of the two given objects\n */\nexport default function mergeObjects(obj1, obj2, concatArrays = false) {\n    return Object.keys(obj2).reduce((acc, key) => {\n        const left = obj1 ? obj1[key] : {}, right = obj2[key];\n        if (obj1 && key in obj1 && isObject(right)) {\n            acc[key] = mergeObjects(left, right, concatArrays);\n        }\n        else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {\n            let toMerge = right;\n            if (concatArrays === 'preventDuplicates') {\n                toMerge = right.reduce((result, value) => {\n                    if (!left.includes(value)) {\n                        result.push(value);\n                    }\n                    return result;\n                }, []);\n            }\n            acc[key] = left.concat(toMerge);\n        }\n        else {\n            acc[key] = right;\n        }\n        return acc;\n    }, Object.assign({}, obj1)); // Prevent mutation of source object.\n}\n//# sourceMappingURL=mergeObjects.js.map","import { CONST_KEY } from './constants';\n/** This function checks if the given `schema` matches a single constant value. This happens when either the schema has\n * an `enum` array with a single value or there is a `const` defined.\n *\n * @param schema - The schema for a field\n * @returns - True if the `schema` has a single constant value, false otherwise\n */\nexport default function isConstant(schema) {\n    return (Array.isArray(schema.enum) && schema.enum.length === 1) || CONST_KEY in schema;\n}\n//# sourceMappingURL=isConstant.js.map","import isConstant from '../isConstant';\nimport retrieveSchema from './retrieveSchema';\n/** Checks to see if the `schema` combination represents a select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which check for a select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a select, otherwise false\n */\nexport default function isSelect(validator, theSchema, rootSchema = {}) {\n    const schema = retrieveSchema(validator, theSchema, rootSchema, undefined);\n    const altSchemas = schema.oneOf || schema.anyOf;\n    if (Array.isArray(schema.enum)) {\n        return true;\n    }\n    if (Array.isArray(altSchemas)) {\n        return altSchemas.every((altSchemas) => typeof altSchemas !== 'boolean' && isConstant(altSchemas));\n    }\n    return false;\n}\n//# sourceMappingURL=isSelect.js.map","import isSelect from './isSelect';\n/** Checks to see if the `schema` combination represents a multi-select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for a multi-select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a multi-select, otherwise false\n */\nexport default function isMultiSelect(validator, schema, rootSchema) {\n    if (!schema.uniqueItems || !schema.items || typeof schema.items === 'boolean') {\n        return false;\n    }\n    return isSelect(validator, schema.items, rootSchema);\n}\n//# sourceMappingURL=isMultiSelect.js.map","import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport { ANY_OF_KEY, DEFAULT_KEY, DEPENDENCIES_KEY, PROPERTIES_KEY, ONE_OF_KEY, REF_KEY, ALL_OF_KEY, } from '../constants';\nimport findSchemaDefinition from '../findSchemaDefinition';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport getSchemaType from '../getSchemaType';\nimport isObject from '../isObject';\nimport isFixedItems from '../isFixedItems';\nimport mergeDefaultsWithFormData from '../mergeDefaultsWithFormData';\nimport mergeObjects from '../mergeObjects';\nimport mergeSchemas from '../mergeSchemas';\nimport isMultiSelect from './isMultiSelect';\nimport retrieveSchema, { resolveDependencies } from './retrieveSchema';\n/** Enum that indicates how `schema.additionalItems` should be handled by the `getInnerSchemaForArrayItem()` function.\n */\nexport var AdditionalItemsHandling;\n(function (AdditionalItemsHandling) {\n    AdditionalItemsHandling[AdditionalItemsHandling[\"Ignore\"] = 0] = \"Ignore\";\n    AdditionalItemsHandling[AdditionalItemsHandling[\"Invert\"] = 1] = \"Invert\";\n    AdditionalItemsHandling[AdditionalItemsHandling[\"Fallback\"] = 2] = \"Fallback\";\n})(AdditionalItemsHandling || (AdditionalItemsHandling = {}));\n/** Given a `schema` will return an inner schema that for an array item. This is computed differently based on the\n * `additionalItems` enum and the value of `idx`. There are four possible returns:\n * 1. If `idx` is >= 0, then if `schema.items` is an array the `idx`th element of the array is returned if it is a valid\n *    index and not a boolean, otherwise it falls through to 3.\n * 2. If `schema.items` is not an array AND truthy and not a boolean, then `schema.items` is returned since it actually\n *    is a schema, otherwise it falls through to 3.\n * 3. If `additionalItems` is not `AdditionalItemsHandling.Ignore` and `schema.additionalItems` is an object, then\n *    `schema.additionalItems` is returned since it actually is a schema, otherwise it falls through to 4.\n * 4. {} is returned representing an empty schema\n *\n * @param schema - The schema from which to get the particular item\n * @param [additionalItems=AdditionalItemsHandling.Ignore] - How do we want to handle additional items?\n * @param [idx=-1] - Index, if non-negative, will be used to return the idx-th element in a `schema.items` array\n * @returns - The best fit schema object from the `schema` given the `additionalItems` and `idx` modifiers\n */\nexport function getInnerSchemaForArrayItem(schema, additionalItems = AdditionalItemsHandling.Ignore, idx = -1) {\n    if (idx >= 0) {\n        if (Array.isArray(schema.items) && idx < schema.items.length) {\n            const item = schema.items[idx];\n            if (typeof item !== 'boolean') {\n                return item;\n            }\n        }\n    }\n    else if (schema.items && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n        return schema.items;\n    }\n    if (additionalItems !== AdditionalItemsHandling.Ignore && isObject(schema.additionalItems)) {\n        return schema.additionalItems;\n    }\n    return {};\n}\n/** Either add `computedDefault` at `key` into `obj` or not add it based on its value, the value of\n * `includeUndefinedValues`, the value of `emptyObjectFields` and if its parent field is required. Generally undefined\n * `computedDefault` values are added only when `includeUndefinedValues` is either true/\"excludeObjectChildren\". If `\n * includeUndefinedValues` is false and `emptyObjectFields` is not \"skipDefaults\", then non-undefined and non-empty-object\n * values will be added based on certain conditions.\n *\n * @param obj - The object into which the computed default may be added\n * @param key - The key into the object at which the computed default may be added\n * @param computedDefault - The computed default value that maybe should be added to the obj\n * @param includeUndefinedValues - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties. If \"allowEmptyObject\", prevents undefined\n *          values in this object while allow the object itself to be empty and passing `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param isParentRequired - The optional boolean that indicates whether the parent field is required\n * @param requiredFields - The list of fields that are required\n * @param experimental_defaultFormStateBehavior - Optional configuration object, if provided, allows users to override\n *        default form state behavior\n */\nfunction maybeAddDefaultToObject(obj, key, computedDefault, includeUndefinedValues, isParentRequired, requiredFields = [], experimental_defaultFormStateBehavior = {}) {\n    const { emptyObjectFields = 'populateAllDefaults' } = experimental_defaultFormStateBehavior;\n    if (includeUndefinedValues) {\n        obj[key] = computedDefault;\n    }\n    else if (emptyObjectFields !== 'skipDefaults') {\n        if (isObject(computedDefault)) {\n            // If isParentRequired is undefined, then we are at the root level of the schema so defer to the requiredness of\n            // the field key itself in the `requiredField` list\n            const isSelfOrParentRequired = isParentRequired === undefined ? requiredFields.includes(key) : isParentRequired;\n            // Store computedDefault if it's a non-empty object(e.g. not {}) and satisfies certain conditions\n            // Condition 1: If computedDefault is not empty or if the key is a required field\n            // Condition 2: If the parent object is required or emptyObjectFields is not 'populateRequiredDefaults'\n            if ((!isEmpty(computedDefault) || requiredFields.includes(key)) &&\n                (isSelfOrParentRequired || emptyObjectFields !== 'populateRequiredDefaults')) {\n                obj[key] = computedDefault;\n            }\n        }\n        else if (\n        // Store computedDefault if it's a defined primitive (e.g., true) and satisfies certain conditions\n        // Condition 1: computedDefault is not undefined\n        // Condition 2: If emptyObjectFields is 'populateAllDefaults' or if the key is a required field\n        computedDefault !== undefined &&\n            (emptyObjectFields === 'populateAllDefaults' || requiredFields.includes(key))) {\n            obj[key] = computedDefault;\n        }\n    }\n}\n/** Computes the defaults for the current `schema` given the `rawFormData` and `parentDefaults` if any. This drills into\n * each level of the schema, recursively, to fill out every level of defaults provided by the schema.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be used when necessary\n * @param rawSchema - The schema for which the default state is desired\n * @param [props] - Optional props for this function\n * @param [props.parentDefaults] - Any defaults provided by the parent field in the schema\n * @param [props.rootSchema] - The options root schema, used to primarily to look up `$ref`s\n * @param [props.rawFormData] - The current formData, if any, onto which to provide any missing defaults\n * @param [props.includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param [props._recurseList=[]] - The list of ref names currently being recursed, used to prevent infinite recursion\n * @param [props.experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @param [props.required] - Optional flag, if true, indicates this schema was required in the parent schema.\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport function computeDefaults(validator, rawSchema, { parentDefaults, rawFormData, rootSchema = {}, includeUndefinedValues = false, _recurseList = [], experimental_defaultFormStateBehavior = undefined, required, } = {}) {\n    var _a, _b;\n    const formData = (isObject(rawFormData) ? rawFormData : {});\n    const schema = isObject(rawSchema) ? rawSchema : {};\n    // Compute the defaults recursively: give highest priority to deepest nodes.\n    let defaults = parentDefaults;\n    // If we get a new schema, then we need to recompute defaults again for the new schema found.\n    let schemaToCompute = null;\n    let updatedRecurseList = _recurseList;\n    if (isObject(defaults) && isObject(schema.default)) {\n        // For object defaults, only override parent defaults that are defined in\n        // schema.default.\n        defaults = mergeObjects(defaults, schema.default);\n    }\n    else if (DEFAULT_KEY in schema) {\n        defaults = schema.default;\n    }\n    else if (REF_KEY in schema) {\n        const refName = schema[REF_KEY];\n        // Use referenced schema defaults for this node.\n        if (!_recurseList.includes(refName)) {\n            updatedRecurseList = _recurseList.concat(refName);\n            schemaToCompute = findSchemaDefinition(refName, rootSchema);\n        }\n    }\n    else if (DEPENDENCIES_KEY in schema) {\n        const resolvedSchema = resolveDependencies(validator, schema, rootSchema, false, [], formData);\n        schemaToCompute = resolvedSchema[0]; // pick the first element from resolve dependencies\n    }\n    else if (isFixedItems(schema)) {\n        defaults = schema.items.map((itemSchema, idx) => computeDefaults(validator, itemSchema, {\n            rootSchema,\n            includeUndefinedValues,\n            _recurseList,\n            experimental_defaultFormStateBehavior,\n            parentDefaults: Array.isArray(parentDefaults) ? parentDefaults[idx] : undefined,\n            rawFormData: formData,\n            required,\n        }));\n    }\n    else if (ONE_OF_KEY in schema) {\n        const { oneOf, ...remaining } = schema;\n        if (oneOf.length === 0) {\n            return undefined;\n        }\n        const discriminator = getDiscriminatorFieldFromSchema(schema);\n        schemaToCompute = oneOf[getClosestMatchingOption(validator, rootSchema, isEmpty(formData) ? undefined : formData, oneOf, 0, discriminator)];\n        schemaToCompute = mergeSchemas(remaining, schemaToCompute);\n    }\n    else if (ANY_OF_KEY in schema) {\n        const { anyOf, ...remaining } = schema;\n        if (anyOf.length === 0) {\n            return undefined;\n        }\n        const discriminator = getDiscriminatorFieldFromSchema(schema);\n        schemaToCompute = anyOf[getClosestMatchingOption(validator, rootSchema, isEmpty(formData) ? undefined : formData, anyOf, 0, discriminator)];\n        schemaToCompute = mergeSchemas(remaining, schemaToCompute);\n    }\n    if (schemaToCompute) {\n        return computeDefaults(validator, schemaToCompute, {\n            rootSchema,\n            includeUndefinedValues,\n            _recurseList: updatedRecurseList,\n            experimental_defaultFormStateBehavior,\n            parentDefaults: defaults,\n            rawFormData: formData,\n            required,\n        });\n    }\n    // No defaults defined for this node, fallback to generic typed ones.\n    if (defaults === undefined) {\n        defaults = schema.default;\n    }\n    switch (getSchemaType(schema)) {\n        // We need to recurse for object schema inner default values.\n        case 'object': {\n            // This is a custom addition that fixes this issue:\n            // https://github.com/rjsf-team/react-jsonschema-form/issues/3832\n            const retrievedSchema = (experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.allOf) === 'populateDefaults' && ALL_OF_KEY in schema\n                ? retrieveSchema(validator, schema, rootSchema, formData)\n                : schema;\n            const objectDefaults = Object.keys(retrievedSchema.properties || {}).reduce((acc, key) => {\n                var _a;\n                // Compute the defaults for this node, with the parent defaults we might\n                // have from a previous run: defaults[key].\n                const computedDefault = computeDefaults(validator, get(retrievedSchema, [PROPERTIES_KEY, key]), {\n                    rootSchema,\n                    _recurseList,\n                    experimental_defaultFormStateBehavior,\n                    includeUndefinedValues: includeUndefinedValues === true,\n                    parentDefaults: get(defaults, [key]),\n                    rawFormData: get(formData, [key]),\n                    required: (_a = retrievedSchema.required) === null || _a === void 0 ? void 0 : _a.includes(key),\n                });\n                maybeAddDefaultToObject(acc, key, computedDefault, includeUndefinedValues, required, retrievedSchema.required, experimental_defaultFormStateBehavior);\n                return acc;\n            }, {});\n            if (retrievedSchema.additionalProperties) {\n                // as per spec additionalProperties may be either schema or boolean\n                const additionalPropertiesSchema = isObject(retrievedSchema.additionalProperties)\n                    ? retrievedSchema.additionalProperties\n                    : {};\n                const keys = new Set();\n                if (isObject(defaults)) {\n                    Object.keys(defaults)\n                        .filter((key) => !retrievedSchema.properties || !retrievedSchema.properties[key])\n                        .forEach((key) => keys.add(key));\n                }\n                const formDataRequired = [];\n                Object.keys(formData)\n                    .filter((key) => !retrievedSchema.properties || !retrievedSchema.properties[key])\n                    .forEach((key) => {\n                    keys.add(key);\n                    formDataRequired.push(key);\n                });\n                keys.forEach((key) => {\n                    var _a;\n                    const computedDefault = computeDefaults(validator, additionalPropertiesSchema, {\n                        rootSchema,\n                        _recurseList,\n                        experimental_defaultFormStateBehavior,\n                        includeUndefinedValues: includeUndefinedValues === true,\n                        parentDefaults: get(defaults, [key]),\n                        rawFormData: get(formData, [key]),\n                        required: (_a = retrievedSchema.required) === null || _a === void 0 ? void 0 : _a.includes(key),\n                    });\n                    // Since these are additional properties we don't need to add the `experimental_defaultFormStateBehavior` prop\n                    maybeAddDefaultToObject(objectDefaults, key, computedDefault, includeUndefinedValues, required, formDataRequired);\n                });\n            }\n            return objectDefaults;\n        }\n        case 'array': {\n            const neverPopulate = ((_a = experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.arrayMinItems) === null || _a === void 0 ? void 0 : _a.populate) === 'never';\n            const ignoreMinItemsFlagSet = ((_b = experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.arrayMinItems) === null || _b === void 0 ? void 0 : _b.populate) === 'requiredOnly';\n            // Inject defaults into existing array defaults\n            if (Array.isArray(defaults)) {\n                defaults = defaults.map((item, idx) => {\n                    const schemaItem = getInnerSchemaForArrayItem(schema, AdditionalItemsHandling.Fallback, idx);\n                    return computeDefaults(validator, schemaItem, {\n                        rootSchema,\n                        _recurseList,\n                        experimental_defaultFormStateBehavior,\n                        parentDefaults: item,\n                        required,\n                    });\n                });\n            }\n            // Deeply inject defaults into already existing form data\n            if (Array.isArray(rawFormData)) {\n                const schemaItem = getInnerSchemaForArrayItem(schema);\n                if (neverPopulate) {\n                    defaults = rawFormData;\n                }\n                else {\n                    defaults = rawFormData.map((item, idx) => {\n                        return computeDefaults(validator, schemaItem, {\n                            rootSchema,\n                            _recurseList,\n                            experimental_defaultFormStateBehavior,\n                            rawFormData: item,\n                            parentDefaults: get(defaults, [idx]),\n                            required,\n                        });\n                    });\n                }\n            }\n            if (neverPopulate) {\n                return defaults !== null && defaults !== void 0 ? defaults : [];\n            }\n            if (ignoreMinItemsFlagSet && !required) {\n                // If no form data exists or defaults are set leave the field empty/non-existent, otherwise\n                // return form data/defaults\n                return defaults ? defaults : undefined;\n            }\n            const defaultsLength = Array.isArray(defaults) ? defaults.length : 0;\n            if (!schema.minItems ||\n                isMultiSelect(validator, schema, rootSchema) ||\n                schema.minItems <= defaultsLength) {\n                return defaults ? defaults : [];\n            }\n            const defaultEntries = (defaults || []);\n            const fillerSchema = getInnerSchemaForArrayItem(schema, AdditionalItemsHandling.Invert);\n            const fillerDefault = fillerSchema.default;\n            // Calculate filler entries for remaining items (minItems - existing raw data/defaults)\n            const fillerEntries = new Array(schema.minItems - defaultsLength).fill(computeDefaults(validator, fillerSchema, {\n                parentDefaults: fillerDefault,\n                rootSchema,\n                _recurseList,\n                experimental_defaultFormStateBehavior,\n                required,\n            }));\n            // then fill up the rest with either the item default or empty, up to minItems\n            return defaultEntries.concat(fillerEntries);\n        }\n    }\n    return defaults;\n}\n/** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n * computed to have defaults provided in the `schema`.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the default state is desired\n * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport default function getDefaultFormState(validator, theSchema, formData, rootSchema, includeUndefinedValues = false, experimental_defaultFormStateBehavior) {\n    if (!isObject(theSchema)) {\n        throw new Error('Invalid schema: ' + theSchema);\n    }\n    const schema = retrieveSchema(validator, theSchema, rootSchema, formData);\n    const defaults = computeDefaults(validator, schema, {\n        rootSchema,\n        includeUndefinedValues,\n        experimental_defaultFormStateBehavior,\n        rawFormData: formData,\n    });\n    if (formData === undefined || formData === null || (typeof formData === 'number' && isNaN(formData))) {\n        // No form data? Use schema defaults.\n        return defaults;\n    }\n    const { mergeExtraDefaults } = (experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.arrayMinItems) || {};\n    if (isObject(formData)) {\n        return mergeDefaultsWithFormData(defaults, formData, mergeExtraDefaults);\n    }\n    if (Array.isArray(formData)) {\n        return mergeDefaultsWithFormData(defaults, formData, mergeExtraDefaults);\n    }\n    return formData;\n}\n//# sourceMappingURL=getDefaultFormState.js.map","import getUiOptions from './getUiOptions';\n/** Checks to see if the `uiSchema` contains the `widget` field and that the widget is not `hidden`\n *\n * @param uiSchema - The UI Schema from which to detect if it is customized\n * @returns - True if the `uiSchema` describes a custom widget, false otherwise\n */\nexport default function isCustomWidget(uiSchema = {}) {\n    return (\n    // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.\n    // https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/#hidden-widgets\n    'widget' in getUiOptions(uiSchema) && getUiOptions(uiSchema)['widget'] !== 'hidden');\n}\n//# sourceMappingURL=isCustomWidget.js.map","import { UI_WIDGET_KEY } from '../constants';\nimport retrieveSchema from './retrieveSchema';\n/** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for array of files flag is desired\n * @param [uiSchema={}] - The UI schema from which to check the widget\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema/uiSchema contains an array of files, otherwise false\n */\nexport default function isFilesArray(validator, schema, uiSchema = {}, rootSchema) {\n    if (uiSchema[UI_WIDGET_KEY] === 'files') {\n        return true;\n    }\n    if (schema.items) {\n        const itemsSchema = retrieveSchema(validator, schema.items, rootSchema);\n        return itemsSchema.type === 'string' && itemsSchema.format === 'data-url';\n    }\n    return false;\n}\n//# sourceMappingURL=isFilesArray.js.map","import { UI_FIELD_KEY, UI_WIDGET_KEY } from '../constants';\nimport getSchemaType from '../getSchemaType';\nimport getUiOptions from '../getUiOptions';\nimport isCustomWidget from '../isCustomWidget';\nimport isFilesArray from './isFilesArray';\nimport isMultiSelect from './isMultiSelect';\n/** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n * should be displayed in a UI.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the display label flag is desired\n * @param [uiSchema={}] - The UI schema from which to derive potentially displayable information\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - True if the label should be displayed or false if it should not\n */\nexport default function getDisplayLabel(validator, schema, uiSchema = {}, rootSchema, globalOptions) {\n    const uiOptions = getUiOptions(uiSchema, globalOptions);\n    const { label = true } = uiOptions;\n    let displayLabel = !!label;\n    const schemaType = getSchemaType(schema);\n    if (schemaType === 'array') {\n        displayLabel =\n            isMultiSelect(validator, schema, rootSchema) ||\n                isFilesArray(validator, schema, uiSchema, rootSchema) ||\n                isCustomWidget(uiSchema);\n    }\n    if (schemaType === 'object') {\n        displayLabel = false;\n    }\n    if (schemaType === 'boolean' && !uiSchema[UI_WIDGET_KEY]) {\n        displayLabel = false;\n    }\n    if (uiSchema[UI_FIELD_KEY]) {\n        displayLabel = false;\n    }\n    return displayLabel;\n}\n//# sourceMappingURL=getDisplayLabel.js.map","import isEmpty from 'lodash/isEmpty';\nimport mergeObjects from '../mergeObjects';\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `validator.toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validator - The validator used to convert an ErrorSchema to a list of errors\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n *        removed in the next major release.\n */\nexport default function mergeValidationData(validator, validationData, additionalErrorSchema) {\n    if (!additionalErrorSchema) {\n        return validationData;\n    }\n    const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n    let errors = validator.toErrorList(additionalErrorSchema);\n    let errorSchema = additionalErrorSchema;\n    if (!isEmpty(oldErrorSchema)) {\n        errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true);\n        errors = [...oldErrors].concat(errors);\n    }\n    return { errorSchema, errors };\n}\n//# sourceMappingURL=mergeValidationData.js.map","import get from 'lodash/get';\nimport has from 'lodash/has';\nimport { PROPERTIES_KEY, REF_KEY } from '../constants';\nimport retrieveSchema from './retrieveSchema';\nconst NO_VALUE = Symbol('no Value');\n/** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the new\n * schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the nature\n * of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the old schema\n * that are non-existent in the new schema are set to `undefined`. The data sanitization process has the following flow:\n *\n * - If the new schema is an object that contains a `properties` object then:\n *   - Create a `removeOldSchemaData` object, setting each key in the `oldSchema.properties` having `data` to undefined\n *   - Create an empty `nestedData` object for use in the key filtering below:\n *   - Iterate over each key in the `newSchema.properties` as follows:\n *     - Get the `formValue` of the key from the `data`\n *     - Get the `oldKeySchema` and `newKeyedSchema` for the key, defaulting to `{}` when it doesn't exist\n *     - Retrieve the schema for any refs within each `oldKeySchema` and/or `newKeySchema`\n *     - Get the types of the old and new keyed schemas and if the old doesn't exist or the old & new are the same then:\n *       - If `removeOldSchemaData` has an entry for the key, delete it since the new schema has the same property\n *       - If type of the key in the new schema is `object`:\n *         - Store the value from the recursive `sanitizeDataForNewSchema` call in `nestedData[key]`\n *       - Otherwise, check for default or const values:\n *         - Get the old and new `default` values from the schema and check:\n *           - If the new `default` value does not match the form value:\n *             - If the old `default` value DOES match the form value, then:\n *               - Replace `removeOldSchemaData[key]` with the new `default`\n *               - Otherwise, if the new schema is `readOnly` then replace `removeOldSchemaData[key]` with undefined\n *         - Get the old and new `const` values from the schema and check:\n *           - If the new `const` value does not match the form value:\n *           - If the old `const` value DOES match the form value, then:\n *             - Replace `removeOldSchemaData[key]` with the new `const`\n *             - Otherwise, replace `removeOldSchemaData[key]` with undefined\n *   - Once all keys have been processed, return an object built as follows:\n *     - `{ ...removeOldSchemaData, ...nestedData, ...pick(data, keysToKeep) }`\n * - If the new and old schema types are array and the `data` is an array then:\n *   - If the type of the old and new schema `items` are a non-array objects:\n *     - Retrieve the schema for any refs within each `oldKeySchema.items` and/or `newKeySchema.items`\n *     - If the `type`s of both items are the same (or the old does not have a type):\n *       - If the type is \"object\", then:\n *         - For each element in the `data` recursively sanitize the data, stopping at `maxItems` if specified\n *       - Otherwise, just return the `data` removing any values after `maxItems` if it is set\n *   - If the type of the old and new schema `items` are booleans of the same value, return `data` as is\n * - Otherwise return `undefined`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param [newSchema] - The new schema for which the data is being sanitized\n * @param [oldSchema] - The old schema from which the data originated\n * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n * @returns - The new form data, with all the fields uniquely associated with the old schema set\n *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n */\nexport default function sanitizeDataForNewSchema(validator, rootSchema, newSchema, oldSchema, data = {}) {\n    // By default, we will clear the form data\n    let newFormData;\n    // If the new schema is of type object and that object contains a list of properties\n    if (has(newSchema, PROPERTIES_KEY)) {\n        // Create an object containing root-level keys in the old schema, setting each key to undefined to remove the data\n        const removeOldSchemaData = {};\n        if (has(oldSchema, PROPERTIES_KEY)) {\n            const properties = get(oldSchema, PROPERTIES_KEY, {});\n            Object.keys(properties).forEach((key) => {\n                if (has(data, key)) {\n                    removeOldSchemaData[key] = undefined;\n                }\n            });\n        }\n        const keys = Object.keys(get(newSchema, PROPERTIES_KEY, {}));\n        // Create a place to store nested data that will be a side-effect of the filter\n        const nestedData = {};\n        keys.forEach((key) => {\n            const formValue = get(data, key);\n            let oldKeyedSchema = get(oldSchema, [PROPERTIES_KEY, key], {});\n            let newKeyedSchema = get(newSchema, [PROPERTIES_KEY, key], {});\n            // Resolve the refs if they exist\n            if (has(oldKeyedSchema, REF_KEY)) {\n                oldKeyedSchema = retrieveSchema(validator, oldKeyedSchema, rootSchema, formValue);\n            }\n            if (has(newKeyedSchema, REF_KEY)) {\n                newKeyedSchema = retrieveSchema(validator, newKeyedSchema, rootSchema, formValue);\n            }\n            // Now get types and see if they are the same\n            const oldSchemaTypeForKey = get(oldKeyedSchema, 'type');\n            const newSchemaTypeForKey = get(newKeyedSchema, 'type');\n            // Check if the old option has the same key with the same type\n            if (!oldSchemaTypeForKey || oldSchemaTypeForKey === newSchemaTypeForKey) {\n                if (has(removeOldSchemaData, key)) {\n                    // SIDE-EFFECT: remove the undefined value for a key that has the same type between the old and new schemas\n                    delete removeOldSchemaData[key];\n                }\n                // If it is an object, we'll recurse and store the resulting sanitized data for the key\n                if (newSchemaTypeForKey === 'object' || (newSchemaTypeForKey === 'array' && Array.isArray(formValue))) {\n                    // SIDE-EFFECT: process the new schema type of object recursively to save iterations\n                    const itemData = sanitizeDataForNewSchema(validator, rootSchema, newKeyedSchema, oldKeyedSchema, formValue);\n                    if (itemData !== undefined || newSchemaTypeForKey === 'array') {\n                        // only put undefined values for the array type and not the object type\n                        nestedData[key] = itemData;\n                    }\n                }\n                else {\n                    // Ok, the non-object types match, let's make sure that a default or a const of a different value is replaced\n                    // with the new default or const. This allows the case where two schemas differ that only by the default/const\n                    // value to be properly selected\n                    const newOptionDefault = get(newKeyedSchema, 'default', NO_VALUE);\n                    const oldOptionDefault = get(oldKeyedSchema, 'default', NO_VALUE);\n                    if (newOptionDefault !== NO_VALUE && newOptionDefault !== formValue) {\n                        if (oldOptionDefault === formValue) {\n                            // If the old default matches the formValue, we'll update the new value to match the new default\n                            removeOldSchemaData[key] = newOptionDefault;\n                        }\n                        else if (get(newKeyedSchema, 'readOnly') === true) {\n                            // If the new schema has the default set to read-only, treat it like a const and remove the value\n                            removeOldSchemaData[key] = undefined;\n                        }\n                    }\n                    const newOptionConst = get(newKeyedSchema, 'const', NO_VALUE);\n                    const oldOptionConst = get(oldKeyedSchema, 'const', NO_VALUE);\n                    if (newOptionConst !== NO_VALUE && newOptionConst !== formValue) {\n                        // Since this is a const, if the old value matches, replace the value with the new const otherwise clear it\n                        removeOldSchemaData[key] = oldOptionConst === formValue ? newOptionConst : undefined;\n                    }\n                }\n            }\n        });\n        newFormData = {\n            ...(typeof data == 'string' || Array.isArray(data) ? undefined : data),\n            ...removeOldSchemaData,\n            ...nestedData,\n        };\n        // First apply removing the old schema data, then apply the nested data, then apply the old data keys to keep\n    }\n    else if (get(oldSchema, 'type') === 'array' && get(newSchema, 'type') === 'array' && Array.isArray(data)) {\n        let oldSchemaItems = get(oldSchema, 'items');\n        let newSchemaItems = get(newSchema, 'items');\n        // If any of the array types `items` are arrays (remember arrays are objects) then we'll just drop the data\n        // Eventually, we may want to deal with when either of the `items` are arrays since those tuple validations\n        if (typeof oldSchemaItems === 'object' &&\n            typeof newSchemaItems === 'object' &&\n            !Array.isArray(oldSchemaItems) &&\n            !Array.isArray(newSchemaItems)) {\n            if (has(oldSchemaItems, REF_KEY)) {\n                oldSchemaItems = retrieveSchema(validator, oldSchemaItems, rootSchema, data);\n            }\n            if (has(newSchemaItems, REF_KEY)) {\n                newSchemaItems = retrieveSchema(validator, newSchemaItems, rootSchema, data);\n            }\n            // Now get types and see if they are the same\n            const oldSchemaType = get(oldSchemaItems, 'type');\n            const newSchemaType = get(newSchemaItems, 'type');\n            // Check if the old option has the same key with the same type\n            if (!oldSchemaType || oldSchemaType === newSchemaType) {\n                const maxItems = get(newSchema, 'maxItems', -1);\n                if (newSchemaType === 'object') {\n                    newFormData = data.reduce((newValue, aValue) => {\n                        const itemValue = sanitizeDataForNewSchema(validator, rootSchema, newSchemaItems, oldSchemaItems, aValue);\n                        if (itemValue !== undefined && (maxItems < 0 || newValue.length < maxItems)) {\n                            newValue.push(itemValue);\n                        }\n                        return newValue;\n                    }, []);\n                }\n                else {\n                    newFormData = maxItems > 0 && data.length > maxItems ? data.slice(0, maxItems) : data;\n                }\n            }\n        }\n        else if (typeof oldSchemaItems === 'boolean' &&\n            typeof newSchemaItems === 'boolean' &&\n            oldSchemaItems === newSchemaItems) {\n            // If they are both booleans and have the same value just return the data as is otherwise fall-thru to undefined\n            newFormData = data;\n        }\n        // Also probably want to deal with `prefixItems` as tuples with the latest 2020 draft\n    }\n    return newFormData;\n}\n//# sourceMappingURL=sanitizeDataForNewSchema.js.map","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { ALL_OF_KEY, DEPENDENCIES_KEY, ID_KEY, ITEMS_KEY, PROPERTIES_KEY, REF_KEY } from '../constants';\nimport isObject from '../isObject';\nimport retrieveSchema from './retrieveSchema';\nimport getSchemaType from '../getSchemaType';\n/** An internal helper that generates an `IdSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param idPrefix - The prefix to use for the id\n * @param idSeparator - The separator to use for the path segments in the id\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `IdSchema` object for the `schema`\n */\nfunction toIdSchemaInternal(validator, schema, idPrefix, idSeparator, id, rootSchema, formData, _recurseList = []) {\n    if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n        const _schema = retrieveSchema(validator, schema, rootSchema, formData);\n        const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n        if (sameSchemaIndex === -1) {\n            return toIdSchemaInternal(validator, _schema, idPrefix, idSeparator, id, rootSchema, formData, _recurseList.concat(_schema));\n        }\n    }\n    if (ITEMS_KEY in schema && !get(schema, [ITEMS_KEY, REF_KEY])) {\n        return toIdSchemaInternal(validator, get(schema, ITEMS_KEY), idPrefix, idSeparator, id, rootSchema, formData, _recurseList);\n    }\n    const $id = id || idPrefix;\n    const idSchema = { $id };\n    if (getSchemaType(schema) === 'object' && PROPERTIES_KEY in schema) {\n        for (const name in schema.properties) {\n            const field = get(schema, [PROPERTIES_KEY, name]);\n            const fieldId = idSchema[ID_KEY] + idSeparator + name;\n            idSchema[name] = toIdSchemaInternal(validator, isObject(field) ? field : {}, idPrefix, idSeparator, fieldId, rootSchema, \n            // It's possible that formData is not an object -- this can happen if an\n            // array item has just been added, but not populated with data yet\n            get(formData, [name]), _recurseList);\n        }\n    }\n    return idSchema;\n}\n/** Generates an `IdSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [idPrefix='root'] - The prefix to use for the id\n * @param [idSeparator='_'] - The separator to use for the path segments in the id\n * @returns - The `IdSchema` object for the `schema`\n */\nexport default function toIdSchema(validator, schema, id, rootSchema, formData, idPrefix = 'root', idSeparator = '_') {\n    return toIdSchemaInternal(validator, schema, idPrefix, idSeparator, id, rootSchema, formData);\n}\n//# sourceMappingURL=toIdSchema.js.map","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport set from 'lodash/set';\nimport { ALL_OF_KEY, ANY_OF_KEY, ADDITIONAL_PROPERTIES_KEY, DEPENDENCIES_KEY, ITEMS_KEY, NAME_KEY, ONE_OF_KEY, PROPERTIES_KEY, REF_KEY, RJSF_ADDITONAL_PROPERTIES_FLAG, } from '../constants';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport retrieveSchema from './retrieveSchema';\n/** An internal helper that generates an `PathSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `PathSchema` object for the `schema`\n */\nfunction toPathSchemaInternal(validator, schema, name, rootSchema, formData, _recurseList = []) {\n    if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n        const _schema = retrieveSchema(validator, schema, rootSchema, formData);\n        const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n        if (sameSchemaIndex === -1) {\n            return toPathSchemaInternal(validator, _schema, name, rootSchema, formData, _recurseList.concat(_schema));\n        }\n    }\n    let pathSchema = {\n        [NAME_KEY]: name.replace(/^\\./, ''),\n    };\n    if (ONE_OF_KEY in schema || ANY_OF_KEY in schema) {\n        const xxxOf = ONE_OF_KEY in schema ? schema.oneOf : schema.anyOf;\n        const discriminator = getDiscriminatorFieldFromSchema(schema);\n        const index = getClosestMatchingOption(validator, rootSchema, formData, xxxOf, 0, discriminator);\n        const _schema = xxxOf[index];\n        pathSchema = {\n            ...pathSchema,\n            ...toPathSchemaInternal(validator, _schema, name, rootSchema, formData, _recurseList),\n        };\n    }\n    if (ADDITIONAL_PROPERTIES_KEY in schema && schema[ADDITIONAL_PROPERTIES_KEY] !== false) {\n        set(pathSchema, RJSF_ADDITONAL_PROPERTIES_FLAG, true);\n    }\n    if (ITEMS_KEY in schema && Array.isArray(formData)) {\n        const { items: schemaItems, additionalItems: schemaAdditionalItems } = schema;\n        if (Array.isArray(schemaItems)) {\n            formData.forEach((element, i) => {\n                if (schemaItems[i]) {\n                    pathSchema[i] = toPathSchemaInternal(validator, schemaItems[i], `${name}.${i}`, rootSchema, element, _recurseList);\n                }\n                else if (schemaAdditionalItems) {\n                    pathSchema[i] = toPathSchemaInternal(validator, schemaAdditionalItems, `${name}.${i}`, rootSchema, element, _recurseList);\n                }\n                else {\n                    console.warn(`Unable to generate path schema for \"${name}.${i}\". No schema defined for it`);\n                }\n            });\n        }\n        else {\n            formData.forEach((element, i) => {\n                pathSchema[i] = toPathSchemaInternal(validator, schemaItems, `${name}.${i}`, rootSchema, element, _recurseList);\n            });\n        }\n    }\n    else if (PROPERTIES_KEY in schema) {\n        for (const property in schema.properties) {\n            const field = get(schema, [PROPERTIES_KEY, property]);\n            pathSchema[property] = toPathSchemaInternal(validator, field, `${name}.${property}`, rootSchema, \n            // It's possible that formData is not an object -- this can happen if an\n            // array item has just been added, but not populated with data yet\n            get(formData, [property]), _recurseList);\n        }\n    }\n    return pathSchema;\n}\n/** Generates an `PathSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The `PathSchema` object for the `schema`\n */\nexport default function toPathSchema(validator, schema, name = '', rootSchema, formData) {\n    return toPathSchemaInternal(validator, schema, name, rootSchema, formData);\n}\n//# sourceMappingURL=toPathSchema.js.map","import deepEquals from './deepEquals';\nimport { getDefaultFormState, getDisplayLabel, getClosestMatchingOption, getFirstMatchingOption, getMatchingOption, isFilesArray, isMultiSelect, isSelect, mergeValidationData, retrieveSchema, sanitizeDataForNewSchema, toIdSchema, toPathSchema, } from './schema';\n/** The `SchemaUtils` class provides a wrapper around the publicly exported APIs in the `utils/schema` directory such\n * that one does not have to explicitly pass the `validator`, `rootSchema`, or `experimental_defaultFormStateBehavior` to each method.\n * Since these generally do not change across a `Form`, this allows for providing a simplified set of APIs to the\n * `@rjsf/core` components and the various themes as well. This class implements the `SchemaUtilsType` interface.\n */\nclass SchemaUtils {\n    /** Constructs the `SchemaUtils` instance with the given `validator` and `rootSchema` stored as instance variables\n     *\n     * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n     * @param rootSchema - The root schema that will be forwarded to all the APIs\n     * @param experimental_defaultFormStateBehavior - Configuration flags to allow users to override default form state behavior\n     */\n    constructor(validator, rootSchema, experimental_defaultFormStateBehavior) {\n        this.rootSchema = rootSchema;\n        this.validator = validator;\n        this.experimental_defaultFormStateBehavior = experimental_defaultFormStateBehavior;\n    }\n    /** Returns the `ValidatorType` in the `SchemaUtilsType`\n     *\n     * @returns - The `ValidatorType`\n     */\n    getValidator() {\n        return this.validator;\n    }\n    /** Determines whether either the `validator` and `rootSchema` differ from the ones associated with this instance of\n     * the `SchemaUtilsType`. If either `validator` or `rootSchema` are falsy, then return false to prevent the creation\n     * of a new `SchemaUtilsType` with incomplete properties.\n     *\n     * @param validator - An implementation of the `ValidatorType` interface that will be compared against the current one\n     * @param rootSchema - The root schema that will be compared against the current one\n     * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n     * @returns - True if the `SchemaUtilsType` differs from the given `validator` or `rootSchema`\n     */\n    doesSchemaUtilsDiffer(validator, rootSchema, experimental_defaultFormStateBehavior = {}) {\n        if (!validator || !rootSchema) {\n            return false;\n        }\n        return (this.validator !== validator ||\n            !deepEquals(this.rootSchema, rootSchema) ||\n            !deepEquals(this.experimental_defaultFormStateBehavior, experimental_defaultFormStateBehavior));\n    }\n    /** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n     * computed to have defaults provided in the `schema`.\n     *\n     * @param schema - The schema for which the default state is desired\n     * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n     * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n     *          If \"excludeObjectChildren\", pass `includeUndefinedValues` as false when computing defaults for any nested\n     *          object properties.\n     * @returns - The resulting `formData` with all the defaults provided\n     */\n    getDefaultFormState(schema, formData, includeUndefinedValues = false) {\n        return getDefaultFormState(this.validator, schema, formData, this.rootSchema, includeUndefinedValues, this.experimental_defaultFormStateBehavior);\n    }\n    /** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n     * should be displayed in a UI.\n     *\n     * @param schema - The schema for which the display label flag is desired\n     * @param [uiSchema] - The UI schema from which to derive potentially displayable information\n     * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n     * @returns - True if the label should be displayed or false if it should not\n     */\n    getDisplayLabel(schema, uiSchema, globalOptions) {\n        return getDisplayLabel(this.validator, schema, uiSchema, this.rootSchema, globalOptions);\n    }\n    /** Determines which of the given `options` provided most closely matches the `formData`.\n     * Returns the index of the option that is valid and is the closest match, or 0 if there is no match.\n     *\n     * The closest match is determined using the number of matching properties, and more heavily favors options with\n     * matching readOnly, default, or const values.\n     *\n     * @param formData - The form data associated with the schema\n     * @param options - The list of options that can be selected from\n     * @param [selectedOption] - The index of the currently selected option, defaulted to -1 if not specified\n     * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n     *          determine which option is selected\n     * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n     */\n    getClosestMatchingOption(formData, options, selectedOption, discriminatorField) {\n        return getClosestMatchingOption(this.validator, this.rootSchema, formData, options, selectedOption, discriminatorField);\n    }\n    /** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n     * Always returns the first option if there is nothing that matches.\n     *\n     * @param formData - The current formData, if any, used to figure out a match\n     * @param options - The list of options to find a matching options from\n     * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n     *          determine which option is selected\n     * @returns - The firstindex of the matched option or 0 if none is available\n     */\n    getFirstMatchingOption(formData, options, discriminatorField) {\n        return getFirstMatchingOption(this.validator, formData, options, this.rootSchema, discriminatorField);\n    }\n    /** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n     * Deprecated, use `getFirstMatchingOption()` instead.\n     *\n     * @param formData - The current formData, if any, onto which to provide any missing defaults\n     * @param options - The list of options to find a matching options from\n     * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n     *          determine which option is selected\n     * @returns - The index of the matched option or 0 if none is available\n     * @deprecated\n     */\n    getMatchingOption(formData, options, discriminatorField) {\n        return getMatchingOption(this.validator, formData, options, this.rootSchema, discriminatorField);\n    }\n    /** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n     *\n     * @param schema - The schema for which check for array of files flag is desired\n     * @param [uiSchema] - The UI schema from which to check the widget\n     * @returns - True if schema/uiSchema contains an array of files, otherwise false\n     */\n    isFilesArray(schema, uiSchema) {\n        return isFilesArray(this.validator, schema, uiSchema, this.rootSchema);\n    }\n    /** Checks to see if the `schema` combination represents a multi-select\n     *\n     * @param schema - The schema for which check for a multi-select flag is desired\n     * @returns - True if schema contains a multi-select, otherwise false\n     */\n    isMultiSelect(schema) {\n        return isMultiSelect(this.validator, schema, this.rootSchema);\n    }\n    /** Checks to see if the `schema` combination represents a select\n     *\n     * @param schema - The schema for which check for a select flag is desired\n     * @returns - True if schema contains a select, otherwise false\n     */\n    isSelect(schema) {\n        return isSelect(this.validator, schema, this.rootSchema);\n    }\n    /** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in\n     * the two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n     * `getValidator().toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed,\n     * then `validationData` is returned.\n     *\n     * @param validationData - The current `ValidationData` into which to merge the additional errors\n     * @param [additionalErrorSchema] - The additional set of errors\n     * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n     * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n     *        removed in the next major release.\n     */\n    mergeValidationData(validationData, additionalErrorSchema) {\n        return mergeValidationData(this.validator, validationData, additionalErrorSchema);\n    }\n    /** Retrieves an expanded schema that has had all of its conditions, additional properties, references and\n     * dependencies resolved and merged into the `schema` given a `rawFormData` that is used to do the potentially\n     * recursive resolution.\n     *\n     * @param schema - The schema for which retrieving a schema is desired\n     * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n     * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n     */\n    retrieveSchema(schema, rawFormData) {\n        return retrieveSchema(this.validator, schema, this.rootSchema, rawFormData);\n    }\n    /** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the\n     * new schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the\n     * nature of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the\n     * old schemas that are non-existent in the new schema are set to `undefined`.\n     *\n     * @param [newSchema] - The new schema for which the data is being sanitized\n     * @param [oldSchema] - The old schema from which the data originated\n     * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n     * @returns - The new form data, with all the fields uniquely associated with the old schema set\n     *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n     */\n    sanitizeDataForNewSchema(newSchema, oldSchema, data) {\n        return sanitizeDataForNewSchema(this.validator, this.rootSchema, newSchema, oldSchema, data);\n    }\n    /** Generates an `IdSchema` object for the `schema`, recursively\n     *\n     * @param schema - The schema for which the display label flag is desired\n     * @param [id] - The base id for the schema\n     * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n     * @param [idPrefix='root'] - The prefix to use for the id\n     * @param [idSeparator='_'] - The separator to use for the path segments in the id\n     * @returns - The `IdSchema` object for the `schema`\n     */\n    toIdSchema(schema, id, formData, idPrefix = 'root', idSeparator = '_') {\n        return toIdSchema(this.validator, schema, id, this.rootSchema, formData, idPrefix, idSeparator);\n    }\n    /** Generates an `PathSchema` object for the `schema`, recursively\n     *\n     * @param schema - The schema for which the display label flag is desired\n     * @param [name] - The base name for the schema\n     * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n     * @returns - The `PathSchema` object for the `schema`\n     */\n    toPathSchema(schema, name, formData) {\n        return toPathSchema(this.validator, schema, name, this.rootSchema, formData);\n    }\n}\n/** Creates a `SchemaUtilsType` interface that is based around the given `validator` and `rootSchema` parameters. The\n * resulting interface implementation will forward the `validator` and `rootSchema` to all the wrapped APIs.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @returns - An implementation of a `SchemaUtilsType` interface\n */\nexport default function createSchemaUtils(validator, rootSchema, experimental_defaultFormStateBehavior = {}) {\n    return new SchemaUtils(validator, rootSchema, experimental_defaultFormStateBehavior);\n}\n//# sourceMappingURL=createSchemaUtils.js.map","/** Given the `FileReader.readAsDataURL()` based `dataURI` extracts that data into an actual Blob along with the name\n * of that Blob if provided in the URL. If no name is provided, then the name falls back to `unknown`.\n *\n * @param dataURI - The `DataUrl` potentially containing name and raw data to be converted to a Blob\n * @returns - an object containing a Blob and its name, extracted from the URI\n */\nexport default function dataURItoBlob(dataURI) {\n    // Split metadata from data\n    const splitted = dataURI.split(',');\n    // Split params\n    const params = splitted[0].split(';');\n    // Get mime-type from params\n    const type = params[0].replace('data:', '');\n    // Filter the name property from params\n    const properties = params.filter((param) => {\n        return param.split('=')[0] === 'name';\n    });\n    // Look for the name and use unknown if no name property.\n    let name;\n    if (properties.length !== 1) {\n        name = 'unknown';\n    }\n    else {\n        // Because we filtered out the other property,\n        // we only have the name case here, which we decode to make it human-readable\n        name = decodeURI(properties[0].split('=')[1]);\n    }\n    // Built the Uint8Array Blob parameter from the base64 string.\n    try {\n        const binary = atob(splitted[1]);\n        const array = [];\n        for (let i = 0; i < binary.length; i++) {\n            array.push(binary.charCodeAt(i));\n        }\n        // Create the blob object\n        const blob = new window.Blob([new Uint8Array(array)], { type });\n        return { blob, name };\n    }\n    catch (error) {\n        return { blob: { size: 0, type: error.message }, name: dataURI };\n    }\n}\n//# sourceMappingURL=dataURItoBlob.js.map","/** Potentially substitutes all replaceable parameters with the associated value(s) from the `params` if available. When\n * a `params` array is provided, each value in the array is used to replace any of the replaceable parameters in the\n * `inputString` using the `%1`, `%2`, etc. replacement specifiers.\n *\n * @param inputString - The string which will be potentially updated with replacement parameters\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The updated string with any replacement specifiers replaced\n */\nexport default function replaceStringParameters(inputString, params) {\n    let output = inputString;\n    if (Array.isArray(params)) {\n        const parts = output.split(/(%\\d)/);\n        params.forEach((param, index) => {\n            const partIndex = parts.findIndex((part) => part === `%${index + 1}`);\n            if (partIndex >= 0) {\n                parts[partIndex] = param;\n            }\n        });\n        output = parts.join('');\n    }\n    return output;\n}\n//# sourceMappingURL=replaceStringParameters.js.map","import replaceStringParameters from './replaceStringParameters';\n/** Translates a `TranslatableString` value `stringToTranslate` into english. When a `params` array is provided, each\n * value in the array is used to replace any of the replaceable parameters in the `stringToTranslate` using the `%1`,\n * `%2`, etc. replacement specifiers.\n *\n * @param stringToTranslate - The `TranslatableString` value to convert to english\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The `stringToTranslate` itself with any replaceable parameter values substituted\n */\nexport default function englishStringTranslator(stringToTranslate, params) {\n    return replaceStringParameters(stringToTranslate, params);\n}\n//# sourceMappingURL=englishStringTranslator.js.map","/** Returns the value(s) from `allEnumOptions` at the index(es) provided by `valueIndex`. If `valueIndex` is not an\n * array AND the index is not valid for `allEnumOptions`, `emptyValue` is returned. If `valueIndex` is an array, AND it\n * contains an invalid index, the returned array will have the resulting undefined values filtered out, leaving only\n * valid values or in the worst case, an empty array.\n *\n * @param valueIndex - The index(es) of the value(s) that should be returned\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [emptyValue] - The value to return when the non-array `valueIndex` does not refer to a real option\n * @returns - The single or list of values specified by the single or list of indexes if they are valid. Otherwise,\n *        `emptyValue` or an empty list.\n */\nexport default function enumOptionsValueForIndex(valueIndex, allEnumOptions = [], emptyValue) {\n    if (Array.isArray(valueIndex)) {\n        return valueIndex.map((index) => enumOptionsValueForIndex(index, allEnumOptions)).filter((val) => val);\n    }\n    // So Number(null) and Number('') both return 0, so use emptyValue for those two values\n    const index = valueIndex === '' || valueIndex === null ? -1 : Number(valueIndex);\n    const option = allEnumOptions[index];\n    return option ? option.value : emptyValue;\n}\n//# sourceMappingURL=enumOptionsValueForIndex.js.map","import isEqual from 'lodash/isEqual';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n/** Removes the enum option value at the `valueIndex` from the currently `selected` (list of) value(s). If `selected` is\n * a list, then that list is updated to remove the enum option value with the `valueIndex` in `allEnumOptions`. If it is\n * a single value, then if the enum option value with the `valueIndex` in `allEnumOptions` matches `selected`, undefined\n * is returned, otherwise the `selected` value is returned.\n *\n * @param valueIndex - The index of the value to be removed from the selected list or single value\n * @param selected - The current (list of) selected value(s)\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated `selected` with the enum option value at `valueIndex` in `allEnumOptions` removed from it,\n *        unless `selected` is a single value. In that case, if the `valueIndex` value matches `selected`, returns\n *        undefined, otherwise `selected`.\n */\nexport default function enumOptionsDeselectValue(valueIndex, selected, allEnumOptions = []) {\n    const value = enumOptionsValueForIndex(valueIndex, allEnumOptions);\n    if (Array.isArray(selected)) {\n        return selected.filter((v) => !isEqual(v, value));\n    }\n    return isEqual(value, selected) ? undefined : selected;\n}\n//# sourceMappingURL=enumOptionsDeselectValue.js.map","import isEqual from 'lodash/isEqual';\n/** Determines whether the given `value` is (one of) the `selected` value(s).\n *\n * @param value - The value being checked to see if it is selected\n * @param selected - The current selected value or list of values\n * @returns - true if the `value` is one of the `selected` ones, false otherwise\n */\nexport default function enumOptionsIsSelected(value, selected) {\n    if (Array.isArray(selected)) {\n        return selected.some((sel) => isEqual(sel, value));\n    }\n    return isEqual(selected, value);\n}\n//# sourceMappingURL=enumOptionsIsSelected.js.map","import enumOptionsIsSelected from './enumOptionsIsSelected';\n/** Returns the index(es) of the options in `allEnumOptions` whose value(s) match the ones in `value`. All the\n * `enumOptions` are filtered based on whether they are a \"selected\" `value` and the index of each selected one is then\n * stored in an array. If `multiple` is true, that array is returned, otherwise the first element in the array is\n * returned.\n *\n * @param value - The single value or list of values for which indexes are desired\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [multiple=false] - Optional flag, if true will return a list of index, otherwise a single one\n * @returns - A single string index for the first `value` in `allEnumOptions`, if not `multiple`. Otherwise, the list\n *        of indexes for (each of) the value(s) in `value`.\n */\nexport default function enumOptionsIndexForValue(value, allEnumOptions = [], multiple = false) {\n    const selectedIndexes = allEnumOptions\n        .map((opt, index) => (enumOptionsIsSelected(opt.value, value) ? String(index) : undefined))\n        .filter((opt) => typeof opt !== 'undefined');\n    if (!multiple) {\n        return selectedIndexes[0];\n    }\n    return selectedIndexes;\n}\n//# sourceMappingURL=enumOptionsIndexForValue.js.map","import enumOptionsValueForIndex from './enumOptionsValueForIndex';\nimport isNil from 'lodash/isNil';\n/** Add the enum option value at the `valueIndex` to the list of `selected` values in the proper order as defined by\n * `allEnumOptions`\n *\n * @param valueIndex - The index of the value that should be selected\n * @param selected - The current list of selected values\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated list of selected enum values with enum value at the `valueIndex` added to it\n */\nexport default function enumOptionsSelectValue(valueIndex, selected, allEnumOptions = []) {\n    const value = enumOptionsValueForIndex(valueIndex, allEnumOptions);\n    if (!isNil(value)) {\n        const index = allEnumOptions.findIndex((opt) => value === opt.value);\n        const all = allEnumOptions.map(({ value: val }) => val);\n        const updated = selected.slice(0, index).concat(value, selected.slice(index));\n        // As inserting values at predefined index positions doesn't work with empty\n        // arrays, we need to reorder the updated selection to match the initial order\n        return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n    }\n    return selected;\n}\n//# sourceMappingURL=enumOptionsSelectValue.js.map","import cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport { ERRORS_KEY } from './constants';\n/** The `ErrorSchemaBuilder<T>` is used to build an `ErrorSchema<T>` since the definition of the `ErrorSchema` type is\n * designed for reading information rather than writing it. Use this class to add, replace or clear errors in an error\n * schema by using either dotted path or an array of path names. Once you are done building the `ErrorSchema`, you can\n * get the result and/or reset all the errors back to an initial set and start again.\n */\nexport default class ErrorSchemaBuilder {\n    /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.\n     *\n     * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n     */\n    constructor(initialSchema) {\n        /** The error schema being built\n         *\n         * @private\n         */\n        this.errorSchema = {};\n        this.resetAllErrors(initialSchema);\n    }\n    /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`\n     */\n    get ErrorSchema() {\n        return this.errorSchema;\n    }\n    /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.\n     *\n     * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n     * @returns - The error block for the given `pathOfError` or the root if not provided\n     * @private\n     */\n    getOrCreateErrorBlock(pathOfError) {\n        const hasPath = (Array.isArray(pathOfError) && pathOfError.length > 0) || typeof pathOfError === 'string';\n        let errorBlock = hasPath ? get(this.errorSchema, pathOfError) : this.errorSchema;\n        if (!errorBlock && pathOfError) {\n            errorBlock = {};\n            set(this.errorSchema, pathOfError, errorBlock);\n        }\n        return errorBlock;\n    }\n    /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.\n     *\n     * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n     * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n     */\n    resetAllErrors(initialSchema) {\n        this.errorSchema = initialSchema ? cloneDeep(initialSchema) : {};\n        return this;\n    }\n    /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within\n     * the schema described by the `pathOfError`. For more information about how to specify the path see the\n     * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n     *\n     * @param errorOrList - The error or list of errors to add into the `ErrorSchema`\n     * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n     * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n     */\n    addErrors(errorOrList, pathOfError) {\n        const errorBlock = this.getOrCreateErrorBlock(pathOfError);\n        let errorsList = get(errorBlock, ERRORS_KEY);\n        if (!Array.isArray(errorsList)) {\n            errorsList = [];\n            errorBlock[ERRORS_KEY] = errorsList;\n        }\n        if (Array.isArray(errorOrList)) {\n            errorsList.push(...errorOrList);\n        }\n        else {\n            errorsList.push(errorOrList);\n        }\n        return this;\n    }\n    /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location\n     * within the schema described by the `pathOfError`. For more information about how to specify the path see the\n     * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n     *\n     * @param errorOrList - The error or list of errors to set into the `ErrorSchema`\n     * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)\n     * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n     */\n    setErrors(errorOrList, pathOfError) {\n        const errorBlock = this.getOrCreateErrorBlock(pathOfError);\n        // Effectively clone the array being given to prevent accidental outside manipulation of the given list\n        const listToAdd = Array.isArray(errorOrList) ? [...errorOrList] : [errorOrList];\n        set(errorBlock, ERRORS_KEY, listToAdd);\n        return this;\n    }\n    /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by\n     * the `pathOfError`. For more information about how to specify the path see the\n     * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n     *\n     * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)\n     * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n     */\n    clearErrors(pathOfError) {\n        const errorBlock = this.getOrCreateErrorBlock(pathOfError);\n        set(errorBlock, ERRORS_KEY, []);\n        return this;\n    }\n}\n//# sourceMappingURL=ErrorSchemaBuilder.js.map","/** Extracts the range spec information `{ step?: number, min?: number, max?: number }` that can be spread onto an HTML\n * input from the range analog in the schema `{ multipleOf?: number, minimum?: number, maximum?: number }`.\n *\n * @param schema - The schema from which to extract the range spec\n * @returns - A range specification from the schema\n */\nexport default function rangeSpec(schema) {\n    const spec = {};\n    if (schema.multipleOf) {\n        spec.step = schema.multipleOf;\n    }\n    if (schema.minimum || schema.minimum === 0) {\n        spec.min = schema.minimum;\n    }\n    if (schema.maximum || schema.maximum === 0) {\n        spec.max = schema.maximum;\n    }\n    return spec;\n}\n//# sourceMappingURL=rangeSpec.js.map","import rangeSpec from './rangeSpec';\n/** Using the `schema`, `defaultType` and `options`, extract out the props for the <input> element that make sense.\n *\n * @param schema - The schema for the field provided by the widget\n * @param [defaultType] - The default type, if any, for the field provided by the widget\n * @param [options={}] - The UI Options for the field provided by the widget\n * @param [autoDefaultStepAny=true] - Determines whether to auto-default step=any when the type is number and no step\n * @returns - The extracted `InputPropsType` object\n */\nexport default function getInputProps(schema, defaultType, options = {}, autoDefaultStepAny = true) {\n    const inputProps = {\n        type: defaultType || 'text',\n        ...rangeSpec(schema),\n    };\n    // If options.inputType is set use that as the input type\n    if (options.inputType) {\n        inputProps.type = options.inputType;\n    }\n    else if (!defaultType) {\n        // If the schema is of type number or integer, set the input type to number\n        if (schema.type === 'number') {\n            inputProps.type = 'number';\n            // Only add step if one isn't already defined and we are auto-defaulting the \"any\" step\n            if (autoDefaultStepAny && inputProps.step === undefined) {\n                // Setting step to 'any' fixes a bug in Safari where decimals are not\n                // allowed in number inputs\n                inputProps.step = 'any';\n            }\n        }\n        else if (schema.type === 'integer') {\n            inputProps.type = 'number';\n            // Only add step if one isn't already defined\n            if (inputProps.step === undefined) {\n                // Since this is integer, you always want to step up or down in multiples of 1\n                inputProps.step = 1;\n            }\n        }\n    }\n    if (options.autocomplete) {\n        inputProps.autoComplete = options.autocomplete;\n    }\n    return inputProps;\n}\n//# sourceMappingURL=getInputProps.js.map","import { SUBMIT_BTN_OPTIONS_KEY } from './constants';\nimport getUiOptions from './getUiOptions';\n/** The default submit button options, exported for testing purposes\n */\nexport const DEFAULT_OPTIONS = {\n    props: {\n        disabled: false,\n    },\n    submitText: 'Submit',\n    norender: false,\n};\n/** Extracts any `ui:submitButtonOptions` from the `uiSchema` and merges them onto the `DEFAULT_OPTIONS`\n *\n * @param [uiSchema={}] - the UI Schema from which to extract submit button props\n * @returns - The merging of the `DEFAULT_OPTIONS` with any custom ones\n */\nexport default function getSubmitButtonOptions(uiSchema = {}) {\n    const uiOptions = getUiOptions(uiSchema);\n    if (uiOptions && uiOptions[SUBMIT_BTN_OPTIONS_KEY]) {\n        const options = uiOptions[SUBMIT_BTN_OPTIONS_KEY];\n        return { ...DEFAULT_OPTIONS, ...options };\n    }\n    return DEFAULT_OPTIONS;\n}\n//# sourceMappingURL=getSubmitButtonOptions.js.map","/** Returns the template with the given `name` from either the `uiSchema` if it is defined or from the `registry`\n * otherwise. NOTE, since `ButtonTemplates` are not overridden in `uiSchema` only those in the `registry` are returned.\n *\n * @param name - The name of the template to fetch, restricted to the keys of `TemplatesType`\n * @param registry - The `Registry` from which to read the template\n * @param [uiOptions={}] - The `UIOptionsType` from which to read an alternate template\n * @returns - The template from either the `uiSchema` or `registry` for the `name`\n */\nexport default function getTemplate(name, registry, uiOptions = {}) {\n    const { templates } = registry;\n    if (name === 'ButtonTemplates') {\n        return templates[name];\n    }\n    return (\n    // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent\n    // To avoid that, we cast uiOptions to `any` before accessing the name field\n    uiOptions[name] || templates[name]);\n}\n//# sourceMappingURL=getTemplate.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createElement } from 'react';\nimport ReactIs from 'react-is';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport getSchemaType from './getSchemaType';\n/** The map of schema types to widget type to widget name\n */\nconst widgetMap = {\n    boolean: {\n        checkbox: 'CheckboxWidget',\n        radio: 'RadioWidget',\n        select: 'SelectWidget',\n        hidden: 'HiddenWidget',\n    },\n    string: {\n        text: 'TextWidget',\n        password: 'PasswordWidget',\n        email: 'EmailWidget',\n        hostname: 'TextWidget',\n        ipv4: 'TextWidget',\n        ipv6: 'TextWidget',\n        uri: 'URLWidget',\n        'data-url': 'FileWidget',\n        radio: 'RadioWidget',\n        select: 'SelectWidget',\n        textarea: 'TextareaWidget',\n        hidden: 'HiddenWidget',\n        date: 'DateWidget',\n        datetime: 'DateTimeWidget',\n        'date-time': 'DateTimeWidget',\n        'alt-date': 'AltDateWidget',\n        'alt-datetime': 'AltDateTimeWidget',\n        time: 'TimeWidget',\n        color: 'ColorWidget',\n        file: 'FileWidget',\n    },\n    number: {\n        text: 'TextWidget',\n        select: 'SelectWidget',\n        updown: 'UpDownWidget',\n        range: 'RangeWidget',\n        radio: 'RadioWidget',\n        hidden: 'HiddenWidget',\n    },\n    integer: {\n        text: 'TextWidget',\n        select: 'SelectWidget',\n        updown: 'UpDownWidget',\n        range: 'RangeWidget',\n        radio: 'RadioWidget',\n        hidden: 'HiddenWidget',\n    },\n    array: {\n        select: 'SelectWidget',\n        checkboxes: 'CheckboxesWidget',\n        files: 'FileWidget',\n        hidden: 'HiddenWidget',\n    },\n};\n/** Wraps the given widget with stateless functional component that will merge any `defaultProps.options` with the\n * `options` that are provided in the props. It will add the wrapper component as a `MergedWidget` property onto the\n * `Widget` so that future attempts to wrap `AWidget` will return the already existing wrapper.\n *\n * @param AWidget - A widget that will be wrapped or one that is already wrapped\n * @returns - The wrapper widget\n */\nfunction mergeWidgetOptions(AWidget) {\n    let MergedWidget = get(AWidget, 'MergedWidget');\n    // cache return value as property of widget for proper react reconciliation\n    if (!MergedWidget) {\n        const defaultOptions = (AWidget.defaultProps && AWidget.defaultProps.options) || {};\n        MergedWidget = ({ options, ...props }) => {\n            return _jsx(AWidget, { options: { ...defaultOptions, ...options }, ...props });\n        };\n        set(AWidget, 'MergedWidget', MergedWidget);\n    }\n    return MergedWidget;\n}\n/** Given a schema representing a field to render and either the name or actual `Widget` implementation, returns the\n * React component that is used to render the widget. If the `widget` is already a React component, then it is wrapped\n * with a `MergedWidget`. Otherwise an attempt is made to look up the widget inside of the `registeredWidgets` map based\n * on the schema type and `widget` name. If no widget component can be found an `Error` is thrown.\n *\n * @param schema - The schema for the field\n * @param [widget] - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - The `Widget` component to use\n * @throws - An error if there is no `Widget` component that can be returned\n */\nexport default function getWidget(schema, widget, registeredWidgets = {}) {\n    const type = getSchemaType(schema);\n    if (typeof widget === 'function' ||\n        (widget && ReactIs.isForwardRef(createElement(widget))) ||\n        ReactIs.isMemo(widget)) {\n        return mergeWidgetOptions(widget);\n    }\n    if (typeof widget !== 'string') {\n        throw new Error(`Unsupported widget definition: ${typeof widget}`);\n    }\n    if (widget in registeredWidgets) {\n        const registeredWidget = registeredWidgets[widget];\n        return getWidget(schema, registeredWidget, registeredWidgets);\n    }\n    if (typeof type === 'string') {\n        if (!(type in widgetMap)) {\n            throw new Error(`No widget for type '${type}'`);\n        }\n        if (widget in widgetMap[type]) {\n            const registeredWidget = registeredWidgets[widgetMap[type][widget]];\n            return getWidget(schema, registeredWidget, registeredWidgets);\n        }\n    }\n    throw new Error(`No widget '${widget}' for type '${type}'`);\n}\n//# sourceMappingURL=getWidget.js.map","/** JS has no built-in hashing function, so rolling our own\n *  based on Java's hashing fn:\n *  http://www.java2s.com/example/nodejs-utility-method/string-hash/hashcode-4dc2b.html\n *\n * @param string - The string for which to get the hash\n * @returns - The resulting hash of the string in hex format\n */\nfunction hashString(string) {\n    let hash = 0;\n    for (let i = 0; i < string.length; i += 1) {\n        const chr = string.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString(16);\n}\n/** Stringifies the schema and returns the hash of the resulting string. Sorts schema fields\n * in consistent order before stringify to prevent different hash ids for the same schema.\n *\n * @param schema - The schema for which the hash is desired\n * @returns - The string obtained from the hash of the stringified schema\n */\nexport default function hashForSchema(schema) {\n    const allKeys = new Set();\n    // solution source: https://stackoverflow.com/questions/16167581/sort-object-properties-and-json-stringify/53593328#53593328\n    JSON.stringify(schema, (key, value) => (allKeys.add(key), value));\n    return hashString(JSON.stringify(schema, Array.from(allKeys).sort()));\n}\n//# sourceMappingURL=hashForSchema.js.map","import getWidget from './getWidget';\n/** Detects whether the `widget` exists for the `schema` with the associated `registryWidgets` and returns true if it\n * does, or false if it doesn't.\n *\n * @param schema - The schema for the field\n * @param widget - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - True if the widget exists, false otherwise\n */\nexport default function hasWidget(schema, widget, registeredWidgets = {}) {\n    try {\n        getWidget(schema, widget, registeredWidgets);\n        return true;\n    }\n    catch (e) {\n        const err = e;\n        if (err.message && (err.message.startsWith('No widget') || err.message.startsWith('Unsupported widget'))) {\n            return false;\n        }\n        throw e;\n    }\n}\n//# sourceMappingURL=hasWidget.js.map","import isString from 'lodash/isString';\nimport { ID_KEY } from './constants';\n/** Generates a consistent `id` pattern for a given `id` and a `suffix`\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param suffix - The suffix to append to the id\n */\nfunction idGenerator(id, suffix) {\n    const theId = isString(id) ? id : id[ID_KEY];\n    return `${theId}__${suffix}`;\n}\n/** Return a consistent `id` for the field description element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field description element from the given `id`\n */\nexport function descriptionId(id) {\n    return idGenerator(id, 'description');\n}\n/** Return a consistent `id` for the field error element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field error element from the given `id`\n */\nexport function errorId(id) {\n    return idGenerator(id, 'error');\n}\n/** Return a consistent `id` for the field examples element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field examples element from the given `id`\n */\nexport function examplesId(id) {\n    return idGenerator(id, 'examples');\n}\n/** Return a consistent `id` for the field help element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field help element from the given `id`\n */\nexport function helpId(id) {\n    return idGenerator(id, 'help');\n}\n/** Return a consistent `id` for the field title element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field title element from the given `id`\n */\nexport function titleId(id) {\n    return idGenerator(id, 'title');\n}\n/** Return a list of element ids that contain additional information about the field that can be used to as the aria\n * description of the field. This is correctly omitting `titleId` which would be \"labeling\" rather than \"describing\" the\n * element.\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param [includeExamples=false] - Optional flag, if true, will add the `examplesId` into the list\n * @returns - The string containing the list of ids for use in an `aria-describedBy` attribute\n */\nexport function ariaDescribedByIds(id, includeExamples = false) {\n    const examples = includeExamples ? ` ${examplesId(id)}` : '';\n    return `${errorId(id)} ${descriptionId(id)} ${helpId(id)}${examples}`;\n}\n/** Return a consistent `id` for the `optionIndex`s of a `Radio` or `Checkboxes` widget\n *\n * @param id - The id of the parent component for the option\n * @param optionIndex - The index of the option for which the id is desired\n * @returns - An id for the option index based on the parent `id`\n */\nexport function optionId(id, optionIndex) {\n    return `${id}-${optionIndex}`;\n}\n//# sourceMappingURL=idGenerators.js.map","export default function labelValue(label, hideLabel, fallback) {\n    return hideLabel ? fallback : label;\n}\n//# sourceMappingURL=labelValue.js.map","/** Converts a local Date string into a UTC date string\n *\n * @param dateString - The string representation of a date as accepted by the `Date()` constructor\n * @returns - A UTC date string if `dateString` is truthy, otherwise undefined\n */\nexport default function localToUTC(dateString) {\n    return dateString ? new Date(dateString).toJSON() : undefined;\n}\n//# sourceMappingURL=localToUTC.js.map","import { CONST_KEY, ENUM_KEY } from './constants';\n/** Returns the constant value from the schema when it is either a single value enum or has a const key. Otherwise\n * throws an error.\n *\n * @param schema - The schema from which to obtain the constant value\n * @returns - The constant value for the schema\n * @throws - Error when the schema does not have a constant value\n */\nexport default function toConstant(schema) {\n    if (ENUM_KEY in schema && Array.isArray(schema.enum) && schema.enum.length === 1) {\n        return schema.enum[0];\n    }\n    if (CONST_KEY in schema) {\n        return schema.const;\n    }\n    throw new Error('schema cannot be inferred as a constant');\n}\n//# sourceMappingURL=toConstant.js.map","import toConstant from './toConstant';\n/** Gets the list of options from the schema. If the schema has an enum list, then those enum values are returned. The\n * labels for the options will be extracted from the non-standard, RJSF-deprecated `enumNames` if it exists, otherwise\n * the label will be the same as the `value`. If the schema has a `oneOf` or `anyOf`, then the value is the list of\n * `const` values from the schema and the label is either the `schema.title` or the value.\n *\n * @param schema - The schema from which to extract the options list\n * @returns - The list of options from the schema\n */\nexport default function optionsList(schema) {\n    // enumNames was deprecated in v5 and is intentionally omitted from the RJSFSchema type.\n    // Cast the type to include enumNames so the feature still works.\n    const schemaWithEnumNames = schema;\n    if (schemaWithEnumNames.enumNames && process.env.NODE_ENV !== 'production') {\n        console.warn('The enumNames property is deprecated and may be removed in a future major release.');\n    }\n    if (schema.enum) {\n        return schema.enum.map((value, i) => {\n            const label = (schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i]) || String(value);\n            return { label, value };\n        });\n    }\n    const altSchemas = schema.oneOf || schema.anyOf;\n    return (altSchemas &&\n        altSchemas.map((aSchemaDef) => {\n            const aSchema = aSchemaDef;\n            const value = toConstant(aSchema);\n            const label = aSchema.title || String(value);\n            return {\n                schema: aSchema,\n                label,\n                value,\n            };\n        }));\n}\n//# sourceMappingURL=optionsList.js.map","/** Given a list of `properties` and an `order` list, returns a list that contains the `properties` ordered correctly.\n * If `order` is not an array, then the untouched `properties` list is returned. Otherwise `properties` is ordered per\n * the `order` list. If `order` contains a '*' then any `properties` that are not mentioned explicity in `order` will be\n * places in the location of the `*`.\n *\n * @param properties - The list of property keys to be ordered\n * @param order - An array of property keys to be ordered first, with an optional '*' property\n * @returns - A list with the `properties` ordered\n * @throws - Error when the properties cannot be ordered correctly\n */\nexport default function orderProperties(properties, order) {\n    if (!Array.isArray(order)) {\n        return properties;\n    }\n    const arrayToHash = (arr) => arr.reduce((prev, curr) => {\n        prev[curr] = true;\n        return prev;\n    }, {});\n    const errorPropList = (arr) => arr.length > 1 ? `properties '${arr.join(\"', '\")}'` : `property '${arr[0]}'`;\n    const propertyHash = arrayToHash(properties);\n    const orderFiltered = order.filter((prop) => prop === '*' || propertyHash[prop]);\n    const orderHash = arrayToHash(orderFiltered);\n    const rest = properties.filter((prop) => !orderHash[prop]);\n    const restIndex = orderFiltered.indexOf('*');\n    if (restIndex === -1) {\n        if (rest.length) {\n            throw new Error(`uiSchema order list does not contain ${errorPropList(rest)}`);\n        }\n        return orderFiltered;\n    }\n    if (restIndex !== orderFiltered.lastIndexOf('*')) {\n        throw new Error('uiSchema order list contains more than one wildcard item');\n    }\n    const complete = [...orderFiltered];\n    complete.splice(restIndex, 1, ...rest);\n    return complete;\n}\n//# sourceMappingURL=orderProperties.js.map","/** Returns a string representation of the `num` that is padded with leading \"0\"s if necessary\n *\n * @param num - The number to pad\n * @param width - The width of the string at which no lead padding is necessary\n * @returns - The number converted to a string with leading zero padding if the number of digits is less than `width`\n */\nexport default function pad(num, width) {\n    let s = String(num);\n    while (s.length < width) {\n        s = '0' + s;\n    }\n    return s;\n}\n//# sourceMappingURL=pad.js.map","/** Parses the `dateString` into a `DateObject`, including the time information when `includeTime` is true\n *\n * @param dateString - The date string to parse into a DateObject\n * @param [includeTime=true] - Optional flag, if false, will not include the time data into the object\n * @returns - The date string converted to a `DateObject`\n * @throws - Error when the date cannot be parsed from the string\n */\nexport default function parseDateString(dateString, includeTime = true) {\n    if (!dateString) {\n        return {\n            year: -1,\n            month: -1,\n            day: -1,\n            hour: includeTime ? -1 : 0,\n            minute: includeTime ? -1 : 0,\n            second: includeTime ? -1 : 0,\n        };\n    }\n    const date = new Date(dateString);\n    if (Number.isNaN(date.getTime())) {\n        throw new Error('Unable to parse date ' + dateString);\n    }\n    return {\n        year: date.getUTCFullYear(),\n        month: date.getUTCMonth() + 1,\n        day: date.getUTCDate(),\n        hour: includeTime ? date.getUTCHours() : 0,\n        minute: includeTime ? date.getUTCMinutes() : 0,\n        second: includeTime ? date.getUTCSeconds() : 0,\n    };\n}\n//# sourceMappingURL=parseDateString.js.map","/** Check to see if a `schema` specifies that a value must be true. This happens when:\n * - `schema.const` is truthy\n * - `schema.enum` == `[true]`\n * - `schema.anyOf` or `schema.oneOf` has a single value which recursively returns true\n * - `schema.allOf` has at least one value which recursively returns true\n *\n * @param schema - The schema to check\n * @returns - True if the schema specifies a value that must be true, false otherwise\n */\nexport default function schemaRequiresTrueValue(schema) {\n    // Check if const is a truthy value\n    if (schema.const) {\n        return true;\n    }\n    // Check if an enum has a single value of true\n    if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {\n        return true;\n    }\n    // If anyOf has a single value, evaluate the subschema\n    if (schema.anyOf && schema.anyOf.length === 1) {\n        return schemaRequiresTrueValue(schema.anyOf[0]);\n    }\n    // If oneOf has a single value, evaluate the subschema\n    if (schema.oneOf && schema.oneOf.length === 1) {\n        return schemaRequiresTrueValue(schema.oneOf[0]);\n    }\n    // Evaluate each subschema in allOf, to see if one of them requires a true value\n    if (schema.allOf) {\n        const schemaSome = (subSchema) => schemaRequiresTrueValue(subSchema);\n        return schema.allOf.some(schemaSome);\n    }\n    return false;\n}\n//# sourceMappingURL=schemaRequiresTrueValue.js.map","import deepEquals from './deepEquals';\n/** Determines whether the given `component` should be rerendered by comparing its current set of props and state\n * against the next set. If either of those two sets are not the same, then the component should be rerendered.\n *\n * @param component - A React component being checked\n * @param nextProps - The next set of props against which to check\n * @param nextState - The next set of state against which to check\n * @returns - True if the component should be re-rendered, false otherwise\n */\nexport default function shouldRender(component, nextProps, nextState) {\n    const { props, state } = component;\n    return !deepEquals(props, nextProps) || !deepEquals(state, nextState);\n}\n//# sourceMappingURL=shouldRender.js.map","/** Returns a UTC date string for the given `dateObject`. If `time` is false, then the time portion of the string is\n * removed.\n *\n * @param dateObject - The `DateObject` to convert to a date string\n * @param [time=true] - Optional flag used to remove the time portion of the date string if false\n * @returns - The UTC date string\n */\nexport default function toDateString(dateObject, time = true) {\n    const { year, month, day, hour = 0, minute = 0, second = 0 } = dateObject;\n    const utcTime = Date.UTC(year, month - 1, day, hour, minute, second);\n    const datetime = new Date(utcTime).toJSON();\n    return time ? datetime : datetime.slice(0, 10);\n}\n//# sourceMappingURL=toDateString.js.map","import isPlainObject from 'lodash/isPlainObject';\nimport { ERRORS_KEY } from './constants';\n/** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n *\n * @param errorSchema - The `ErrorSchema` instance to convert\n * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n * @returns - The list of `RJSFValidationErrors` extracted from the `errorSchema`\n */\nexport default function toErrorList(errorSchema, fieldPath = []) {\n    if (!errorSchema) {\n        return [];\n    }\n    let errorList = [];\n    if (ERRORS_KEY in errorSchema) {\n        errorList = errorList.concat(errorSchema[ERRORS_KEY].map((message) => {\n            const property = `.${fieldPath.join('.')}`;\n            return {\n                property,\n                message,\n                stack: `${property} ${message}`,\n            };\n        }));\n    }\n    return Object.keys(errorSchema).reduce((acc, key) => {\n        if (key !== ERRORS_KEY) {\n            const childSchema = errorSchema[key];\n            if (isPlainObject(childSchema)) {\n                acc = acc.concat(toErrorList(childSchema, [...fieldPath, key]));\n            }\n        }\n        return acc;\n    }, errorList);\n}\n//# sourceMappingURL=toErrorList.js.map","import toPath from 'lodash/toPath';\nimport ErrorSchemaBuilder from './ErrorSchemaBuilder';\n/** Transforms a rjsf validation errors list:\n * [\n *   {property: '.level1.level2[2].level3', message: 'err a'},\n *   {property: '.level1.level2[2].level3', message: 'err b'},\n *   {property: '.level1.level2[4].level3', message: 'err b'},\n * ]\n * Into an error tree:\n * {\n *   level1: {\n *     level2: {\n *       2: {level3: {errors: ['err a', 'err b']}},\n *       4: {level3: {errors: ['err b']}},\n *     }\n *   }\n * };\n *\n * @param errors - The list of RJSFValidationError objects\n * @returns - The `ErrorSchema` built from the list of `RJSFValidationErrors`\n */\nexport default function toErrorSchema(errors) {\n    const builder = new ErrorSchemaBuilder();\n    if (errors.length) {\n        errors.forEach((error) => {\n            const { property, message } = error;\n            // When the property is the root element, just use an empty array for the path\n            const path = property === '.' ? [] : toPath(property);\n            // If the property is at the root (.level1) then toPath creates\n            // an empty array element at the first index. Remove it.\n            if (path.length > 0 && path[0] === '') {\n                path.splice(0, 1);\n            }\n            if (message) {\n                builder.addErrors(message, path);\n            }\n        });\n    }\n    return builder.ErrorSchema;\n}\n//# sourceMappingURL=toErrorSchema.js.map","import isPlainObject from 'lodash/isPlainObject';\n/** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError()` functions from it\n *\n * @param errorHandler - The `FormValidation` error handling structure\n * @returns - The `ErrorSchema` resulting from the stripping of the `addError()` function\n */\nexport default function unwrapErrorHandler(errorHandler) {\n    return Object.keys(errorHandler).reduce((acc, key) => {\n        if (key === 'addError') {\n            return acc;\n        }\n        else {\n            const childSchema = errorHandler[key];\n            if (isPlainObject(childSchema)) {\n                return {\n                    ...acc,\n                    [key]: unwrapErrorHandler(childSchema),\n                };\n            }\n            return { ...acc, [key]: childSchema };\n        }\n    }, {});\n}\n//# sourceMappingURL=unwrapErrorHandler.js.map","import pad from './pad';\n/** Converts a UTC date string into a local Date format\n *\n * @param jsonDate - A UTC date string\n * @returns - An empty string when `jsonDate` is falsey, otherwise a date string in local format\n */\nexport default function utcToLocal(jsonDate) {\n    if (!jsonDate) {\n        return '';\n    }\n    // required format of `'yyyy-MM-ddThh:mm' followed by optional ':ss' or ':ss.SSS'\n    // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)\n    // > should be a _valid local date and time string_ (not GMT)\n    // Note - date constructor passed local ISO-8601 does not correctly\n    // change time to UTC in node pre-8\n    const date = new Date(jsonDate);\n    const yyyy = pad(date.getFullYear(), 4);\n    const MM = pad(date.getMonth() + 1, 2);\n    const dd = pad(date.getDate(), 2);\n    const hh = pad(date.getHours(), 2);\n    const mm = pad(date.getMinutes(), 2);\n    const ss = pad(date.getSeconds(), 2);\n    const SSS = pad(date.getMilliseconds(), 3);\n    return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;\n}\n//# sourceMappingURL=utcToLocal.js.map","import isEmpty from 'lodash/isEmpty';\nimport mergeObjects from './mergeObjects';\nimport toErrorList from './toErrorList';\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `toErrorList()` on the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The optional additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n */\nexport default function validationDataMerge(validationData, additionalErrorSchema) {\n    if (!additionalErrorSchema) {\n        return validationData;\n    }\n    const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n    let errors = toErrorList(additionalErrorSchema);\n    let errorSchema = additionalErrorSchema;\n    if (!isEmpty(oldErrorSchema)) {\n        errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true);\n        errors = [...oldErrors].concat(errors);\n    }\n    return { errorSchema, errors };\n}\n//# sourceMappingURL=validationDataMerge.js.map","import { REF_KEY, ROOT_SCHEMA_PREFIX } from './constants';\nimport isObject from 'lodash/isObject';\n/** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixObject(node) {\n    for (const key in node) {\n        const realObj = node;\n        const value = realObj[key];\n        if (key === REF_KEY && typeof value === 'string' && value.startsWith('#')) {\n            realObj[key] = ROOT_SCHEMA_PREFIX + value;\n        }\n        else {\n            realObj[key] = withIdRefPrefix(value);\n        }\n    }\n    return node;\n}\n/** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixArray(node) {\n    for (let i = 0; i < node.length; i++) {\n        node[i] = withIdRefPrefix(node[i]);\n    }\n    return node;\n}\n/** Recursively prefixes all `$ref`s in a schema with the value of the `ROOT_SCHEMA_PREFIX` constant.\n * This is used in isValid to make references to the rootSchema\n *\n * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n * @returns - A copy of the `schemaNode` with updated `$ref`s\n */\nexport default function withIdRefPrefix(schemaNode) {\n    if (Array.isArray(schemaNode)) {\n        return withIdRefPrefixArray([...schemaNode]);\n    }\n    if (isObject(schemaNode)) {\n        return withIdRefPrefixObject({ ...schemaNode });\n    }\n    return schemaNode;\n}\n//# sourceMappingURL=withIdRefPrefix.js.map","/** An enumeration of all the translatable strings used by `@rjsf/core` and its themes. The value of each of the\n * enumeration keys is expected to be the actual english string. Some strings contain replaceable parameter values\n * as indicated by `%1`, `%2`, etc. The number after the `%` indicates the order of the parameter. The ordering of\n * parameters is important because some languages may choose to put the second parameter before the first in its\n * translation. Also, some strings are rendered using `markdown-to-jsx` and thus support markdown and inline html.\n */\nexport var TranslatableString;\n(function (TranslatableString) {\n    /** Fallback title of an array item, used by ArrayField */\n    TranslatableString[\"ArrayItemTitle\"] = \"Item\";\n    /** Missing items reason, used by ArrayField */\n    TranslatableString[\"MissingItems\"] = \"Missing items definition\";\n    /** Yes label, used by BooleanField */\n    TranslatableString[\"YesLabel\"] = \"Yes\";\n    /** No label, used by BooleanField */\n    TranslatableString[\"NoLabel\"] = \"No\";\n    /** Close label, used by ErrorList */\n    TranslatableString[\"CloseLabel\"] = \"Close\";\n    /** Errors label, used by ErrorList */\n    TranslatableString[\"ErrorsLabel\"] = \"Errors\";\n    /** New additionalProperties string default value, used by ObjectField */\n    TranslatableString[\"NewStringDefault\"] = \"New Value\";\n    /** Add button title, used by AddButton */\n    TranslatableString[\"AddButton\"] = \"Add\";\n    /** Add button title, used by AddButton */\n    TranslatableString[\"AddItemButton\"] = \"Add Item\";\n    /** Copy button title, used by IconButton */\n    TranslatableString[\"CopyButton\"] = \"Copy\";\n    /** Move down button title, used by IconButton */\n    TranslatableString[\"MoveDownButton\"] = \"Move down\";\n    /** Move up button title, used by IconButton */\n    TranslatableString[\"MoveUpButton\"] = \"Move up\";\n    /** Remove button title, used by IconButton */\n    TranslatableString[\"RemoveButton\"] = \"Remove\";\n    /** Now label, used by AltDateWidget */\n    TranslatableString[\"NowLabel\"] = \"Now\";\n    /** Clear label, used by AltDateWidget */\n    TranslatableString[\"ClearLabel\"] = \"Clear\";\n    /** Aria date label, used by DateWidget */\n    TranslatableString[\"AriaDateLabel\"] = \"Select a date\";\n    /** File preview label, used by FileWidget */\n    TranslatableString[\"PreviewLabel\"] = \"Preview\";\n    /** Decrement button aria label, used by UpDownWidget */\n    TranslatableString[\"DecrementAriaLabel\"] = \"Decrease value by 1\";\n    /** Increment button aria label, used by UpDownWidget */\n    TranslatableString[\"IncrementAriaLabel\"] = \"Increase value by 1\";\n    // Strings with replaceable parameters\n    /** Unknown field type reason, where %1 will be replaced with the type as provided by SchemaField */\n    TranslatableString[\"UnknownFieldType\"] = \"Unknown field type %1\";\n    /** Option prefix, where %1 will be replaced with the option index as provided by MultiSchemaField */\n    TranslatableString[\"OptionPrefix\"] = \"Option %1\";\n    /** Option prefix, where %1 and %2 will be replaced by the schema title and option index, respectively as provided by\n     * MultiSchemaField\n     */\n    TranslatableString[\"TitleOptionPrefix\"] = \"%1 option %2\";\n    /** Key label, where %1 will be replaced by the label as provided by WrapIfAdditionalTemplate */\n    TranslatableString[\"KeyLabel\"] = \"%1 Key\";\n    // Strings with replaceable parameters AND/OR that support markdown and html\n    /** Invalid object field configuration as provided by the ObjectField */\n    TranslatableString[\"InvalidObjectField\"] = \"Invalid \\\"%1\\\" object field configuration: <em>%2</em>.\";\n    /** Unsupported field schema, used by UnsupportedField */\n    TranslatableString[\"UnsupportedField\"] = \"Unsupported field schema.\";\n    /** Unsupported field schema, where %1 will be replaced by the idSchema.$id as provided by UnsupportedField */\n    TranslatableString[\"UnsupportedFieldWithId\"] = \"Unsupported field schema for field <code>%1</code>.\";\n    /** Unsupported field schema, where %1 will be replaced by the reason string as provided by UnsupportedField */\n    TranslatableString[\"UnsupportedFieldWithReason\"] = \"Unsupported field schema: <em>%1</em>.\";\n    /** Unsupported field schema, where %1 and %2 will be replaced by the idSchema.$id and reason strings, respectively,\n     * as provided by UnsupportedField\n     */\n    TranslatableString[\"UnsupportedFieldWithIdAndReason\"] = \"Unsupported field schema for field <code>%1</code>: <em>%2</em>.\";\n    /** File name, type and size info, where %1, %2 and %3 will be replaced by the file name, file type and file size as\n     * provided by FileWidget\n     */\n    TranslatableString[\"FilesInfo\"] = \"<strong>%1</strong> (%2, %3 bytes)\";\n})(TranslatableString || (TranslatableString = {}));\n//# sourceMappingURL=enums.js.map","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { ID_KEY } from '../constants';\nimport hashForSchema from '../hashForSchema';\n/** An implementation of the `ValidatorType` interface that is designed for use in capturing schemas used by the\n * `isValid()` function. The rest of the implementation of the interface throws errors when it is attempted to be used.\n * An instance of the object allows the caller to capture the schemas used in calls to the `isValid()` function. These\n * captured schema, along with the root schema used to construct the object are stored in the map of schemas keyed by\n * the hashed value of the schema. NOTE: After hashing the schema, an $id with the hash value is added to the\n * schema IF that schema doesn't already have an $id, prior to putting the schema into the map.\n */\nexport default class ParserValidator {\n    /** Construct the ParserValidator for the given `rootSchema`. This `rootSchema` will be stashed in the `schemaMap`\n     * first.\n     *\n     * @param rootSchema - The root schema against which this validator will be executed\n     */\n    constructor(rootSchema) {\n        /** The map of schemas encountered by the ParserValidator */\n        this.schemaMap = {};\n        this.rootSchema = rootSchema;\n        this.addSchema(rootSchema, hashForSchema(rootSchema));\n    }\n    /** Adds the given `schema` to the `schemaMap` keyed by the `hash` or `ID_KEY` if present on the `schema`. If the\n     * schema does not have an `ID_KEY`, then the `hash` will be added as the `ID_KEY` to allow the schema to be\n     * associated with it's `hash` for future use (by a schema compiler).\n     *\n     * @param schema - The schema which is to be added to the map\n     * @param hash - The hash value at which to map the schema\n     */\n    addSchema(schema, hash) {\n        const key = get(schema, ID_KEY, hash);\n        const identifiedSchema = { ...schema, [ID_KEY]: key };\n        const existing = this.schemaMap[key];\n        if (!existing) {\n            this.schemaMap[key] = identifiedSchema;\n        }\n        else if (!isEqual(existing, identifiedSchema)) {\n            console.error('existing schema:', JSON.stringify(existing, null, 2));\n            console.error('new schema:', JSON.stringify(identifiedSchema, null, 2));\n            throw new Error(`Two different schemas exist with the same key ${key}! What a bad coincidence. If possible, try adding an $id to one of the schemas`);\n        }\n    }\n    /** Returns the current `schemaMap` to the caller\n     */\n    getSchemaMap() {\n        return this.schemaMap;\n    }\n    /** Implements the `ValidatorType` `isValid()` method to capture the `schema` in the `schemaMap`. Throws an error when\n     * the `rootSchema` is not the same as the root schema provided during construction.\n     *\n     * @param schema - The schema to record in the `schemaMap`\n     * @param _formData - The formData parameter that is ignored\n     * @param rootSchema - The root schema associated with the schema\n     * @throws - Error when the given `rootSchema` differs from the root schema provided during construction\n     */\n    isValid(schema, _formData, rootSchema) {\n        if (!isEqual(rootSchema, this.rootSchema)) {\n            throw new Error('Unexpectedly calling isValid() with a rootSchema that differs from the construction rootSchema');\n        }\n        this.addSchema(schema, hashForSchema(schema));\n        return false;\n    }\n    /** Implements the `ValidatorType` `rawValidation()` method to throw an error since it is never supposed to be called\n     *\n     * @param _schema - The schema parameter that is ignored\n     * @param _formData - The formData parameter that is ignored\n     */\n    rawValidation(_schema, _formData) {\n        throw new Error('Unexpectedly calling the `rawValidation()` method during schema parsing');\n    }\n    /** Implements the `ValidatorType` `toErrorList()` method to throw an error since it is never supposed to be called\n     *\n     * @param _errorSchema - The error schema parameter that is ignored\n     * @param _fieldPath - The field path parameter that is ignored\n     */\n    toErrorList(_errorSchema, _fieldPath) {\n        throw new Error('Unexpectedly calling the `toErrorList()` method during schema parsing');\n    }\n    /** Implements the `ValidatorType` `validateFormData()` method to throw an error since it is never supposed to be\n     * called\n     *\n     * @param _formData - The formData parameter that is ignored\n     * @param _schema - The schema parameter that is ignored\n     * @param _customValidate - The customValidate parameter that is ignored\n     * @param _transformErrors - The transformErrors parameter that is ignored\n     * @param _uiSchema - The uiSchema parameter that is ignored\n     */\n    validateFormData(_formData, _schema, _customValidate, _transformErrors, _uiSchema) {\n        throw new Error('Unexpectedly calling the `validateFormData()` method during schema parsing');\n    }\n}\n//# sourceMappingURL=ParserValidator.js.map","import forEach from 'lodash/forEach';\nimport isEqual from 'lodash/isEqual';\nimport { PROPERTIES_KEY, ITEMS_KEY } from '../constants';\nimport ParserValidator from './ParserValidator';\nimport { retrieveSchemaInternal, resolveAnyOrOneOfSchemas } from '../schema/retrieveSchema';\n/** Recursive function used to parse the given `schema` belonging to the `rootSchema`. The `validator` is used to\n * capture the sub-schemas that the `isValid()` function is called with. For each schema returned by the\n * `retrieveSchemaInternal()`, the `resolveAnyOrOneOfSchemas()` function is called. For each of the schemas returned\n * from THAT call have `properties`, then each of the sub-schema property objects are then recursively parsed.\n *\n * @param validator - The `ParserValidator` implementation used to capture `isValid()` calls during parsing\n * @param recurseList - The list of schemas returned from the `retrieveSchemaInternal`, preventing infinite recursion\n * @param rootSchema - The root schema from which the schema parsing began\n * @param schema - The current schema element being parsed\n */\nfunction parseSchema(validator, recurseList, rootSchema, schema) {\n    const schemas = retrieveSchemaInternal(validator, schema, rootSchema, undefined, true);\n    schemas.forEach((schema) => {\n        const sameSchemaIndex = recurseList.findIndex((item) => isEqual(item, schema));\n        if (sameSchemaIndex === -1) {\n            recurseList.push(schema);\n            const allOptions = resolveAnyOrOneOfSchemas(validator, schema, rootSchema, true);\n            allOptions.forEach((s) => {\n                if (PROPERTIES_KEY in s && s[PROPERTIES_KEY]) {\n                    forEach(schema[PROPERTIES_KEY], (value) => {\n                        parseSchema(validator, recurseList, rootSchema, value);\n                    });\n                }\n            });\n            if (ITEMS_KEY in schema && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n                parseSchema(validator, recurseList, rootSchema, schema.items);\n            }\n        }\n    });\n}\n/** Parses the given `rootSchema` to extract out all the sub-schemas that maybe contained within it. Returns a map of\n * the hash of the schema to schema/sub-schema.\n *\n * @param rootSchema - The root schema to parse for sub-schemas used by `isValid()` calls\n * @returns - The `SchemaMap` of all schemas that were parsed\n */\nexport default function schemaParser(rootSchema) {\n    const validator = new ParserValidator(rootSchema);\n    const recurseList = [];\n    parseSchema(validator, recurseList, rootSchema, rootSchema);\n    return validator.getSchemaMap();\n}\n//# sourceMappingURL=schemaParser.js.map","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","import Ajv from 'ajv';\nimport addFormats from 'ajv-formats';\nimport isObject from 'lodash/isObject';\nimport { ADDITIONAL_PROPERTY_FLAG, RJSF_ADDITONAL_PROPERTIES_FLAG } from '@rjsf/utils';\nexport const AJV_CONFIG = {\n    allErrors: true,\n    multipleOfPrecision: 8,\n    strict: false,\n    verbose: true,\n};\nexport const COLOR_FORMAT_REGEX = /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX = /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n * @param [AjvClass] - The `Ajv` class to use when creating the validator instance\n */\nexport default function createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides = {}, ajvFormatOptions, AjvClass = Ajv) {\n    const ajv = new AjvClass({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n    if (ajvFormatOptions) {\n        addFormats(ajv, ajvFormatOptions);\n    }\n    else if (ajvFormatOptions !== false) {\n        addFormats(ajv);\n    }\n    // add custom formats\n    ajv.addFormat('data-url', DATA_URL_FORMAT_REGEX);\n    ajv.addFormat('color', COLOR_FORMAT_REGEX);\n    // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.\n    ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);\n    ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);\n    // add more schemas to validate against\n    if (Array.isArray(additionalMetaSchemas)) {\n        ajv.addMetaSchema(additionalMetaSchemas);\n    }\n    // add more custom formats to validate against\n    if (isObject(customFormats)) {\n        Object.keys(customFormats).forEach((formatName) => {\n            ajv.addFormat(formatName, customFormats[formatName]);\n        });\n    }\n    return ajv;\n}\n//# sourceMappingURL=createAjvInstance.js.map","import get from 'lodash/get';\nimport { createErrorHandler, getDefaultFormState, getUiOptions, PROPERTIES_KEY, toErrorSchema, unwrapErrorHandler, validationDataMerge, } from '@rjsf/utils';\n/** Transforming the error output from ajv to format used by @rjsf/utils.\n * At some point, components should be updated to support ajv.\n *\n * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n */\nexport function transformRJSFValidationErrors(errors = [], uiSchema) {\n    return errors.map((e) => {\n        const { instancePath, keyword, params, schemaPath, parentSchema, ...rest } = e;\n        let { message = '' } = rest;\n        let property = instancePath.replace(/\\//g, '.');\n        let stack = `${property} ${message}`.trim();\n        if ('missingProperty' in params) {\n            property = property ? `${property}.${params.missingProperty}` : params.missingProperty;\n            const currentProperty = params.missingProperty;\n            const uiSchemaTitle = getUiOptions(get(uiSchema, `${property.replace(/^\\./, '')}`)).title;\n            if (uiSchemaTitle) {\n                message = message.replace(currentProperty, uiSchemaTitle);\n            }\n            else {\n                const parentSchemaTitle = get(parentSchema, [PROPERTIES_KEY, currentProperty, 'title']);\n                if (parentSchemaTitle) {\n                    message = message.replace(currentProperty, parentSchemaTitle);\n                }\n            }\n            stack = message;\n        }\n        else {\n            const uiSchemaTitle = getUiOptions(get(uiSchema, `${property.replace(/^\\./, '')}`)).title;\n            if (uiSchemaTitle) {\n                stack = `'${uiSchemaTitle}' ${message}`.trim();\n            }\n            else {\n                const parentSchemaTitle = parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.title;\n                if (parentSchemaTitle) {\n                    stack = `'${parentSchemaTitle}' ${message}`.trim();\n                }\n            }\n        }\n        // put data in expected format\n        return {\n            name: keyword,\n            property,\n            message,\n            params,\n            stack,\n            schemaPath,\n        };\n    });\n}\n/** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n * transform them in what ever way it chooses.\n *\n * @param validator - The `ValidatorType` implementation used for the `getDefaultFormState()` call\n * @param rawErrors - The list of raw `ErrorObject`s to process\n * @param formData - The form data to validate\n * @param schema - The schema against which to validate the form data\n * @param [customValidate] - An optional function that is used to perform custom validation\n * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n */\nexport default function processRawValidationErrors(validator, rawErrors, formData, schema, customValidate, transformErrors, uiSchema) {\n    const { validationError: invalidSchemaError } = rawErrors;\n    let errors = transformRJSFValidationErrors(rawErrors.errors, uiSchema);\n    if (invalidSchemaError) {\n        errors = [...errors, { stack: invalidSchemaError.message }];\n    }\n    if (typeof transformErrors === 'function') {\n        errors = transformErrors(errors, uiSchema);\n    }\n    let errorSchema = toErrorSchema(errors);\n    if (invalidSchemaError) {\n        errorSchema = {\n            ...errorSchema,\n            $schema: {\n                __errors: [invalidSchemaError.message],\n            },\n        };\n    }\n    if (typeof customValidate !== 'function') {\n        return { errors, errorSchema };\n    }\n    // Include form data with undefined values, which is required for custom validation.\n    const newFormData = getDefaultFormState(validator, schema, formData, schema, true);\n    const errorHandler = customValidate(newFormData, createErrorHandler(newFormData), uiSchema);\n    const userErrorSchema = unwrapErrorHandler(errorHandler);\n    return validationDataMerge({ errors, errorSchema }, userErrorSchema);\n}\n//# sourceMappingURL=processRawValidationErrors.js.map","import { ID_KEY, ROOT_SCHEMA_PREFIX, toErrorList, withIdRefPrefix, hashForSchema, } from '@rjsf/utils';\nimport createAjvInstance from './createAjvInstance';\nimport processRawValidationErrors from './processRawValidationErrors';\n/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.\n */\nexport default class AJV8Validator {\n    /** Constructs an `AJV8Validator` instance using the `options`\n     *\n     * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n     * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n     */\n    constructor(options, localizer) {\n        const { additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass } = options;\n        this.ajv = createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass);\n        this.localizer = localizer;\n    }\n    /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n     *\n     * @param errorSchema - The `ErrorSchema` instance to convert\n     * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n     * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in\n     *        the next major release.\n     */\n    toErrorList(errorSchema, fieldPath = []) {\n        return toErrorList(errorSchema, fieldPath);\n    }\n    /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n     * by the playground. Returns the `errors` from the validation\n     *\n     * @param schema - The schema against which to validate the form data   * @param schema\n     * @param formData - The form data to validate\n     */\n    rawValidation(schema, formData) {\n        let compilationError = undefined;\n        let compiledValidator;\n        if (schema[ID_KEY]) {\n            compiledValidator = this.ajv.getSchema(schema[ID_KEY]);\n        }\n        try {\n            if (compiledValidator === undefined) {\n                compiledValidator = this.ajv.compile(schema);\n            }\n            compiledValidator(formData);\n        }\n        catch (err) {\n            compilationError = err;\n        }\n        let errors;\n        if (compiledValidator) {\n            if (typeof this.localizer === 'function') {\n                this.localizer(compiledValidator.errors);\n            }\n            errors = compiledValidator.errors || undefined;\n            // Clear errors to prevent persistent errors, see #1104\n            compiledValidator.errors = null;\n        }\n        return {\n            errors: errors,\n            validationError: compilationError,\n        };\n    }\n    /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n     * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n     * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n     * transform them in what ever way it chooses.\n     *\n     * @param formData - The form data to validate\n     * @param schema - The schema against which to validate the form data\n     * @param [customValidate] - An optional function that is used to perform custom validation\n     * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n     * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n     */\n    validateFormData(formData, schema, customValidate, transformErrors, uiSchema) {\n        const rawErrors = this.rawValidation(schema, formData);\n        return processRawValidationErrors(this, rawErrors, formData, schema, customValidate, transformErrors, uiSchema);\n    }\n    /** Validates data against a schema, returning true if the data is valid, or\n     * false otherwise. If the schema is invalid, then this function will return\n     * false.\n     *\n     * @param schema - The schema against which to validate the form data\n     * @param formData - The form data to validate\n     * @param rootSchema - The root schema used to provide $ref resolutions\n     */\n    isValid(schema, formData, rootSchema) {\n        var _a, _b;\n        const rootSchemaId = (_a = rootSchema[ID_KEY]) !== null && _a !== void 0 ? _a : ROOT_SCHEMA_PREFIX;\n        try {\n            // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n            // then rewrite the schema ref's to point to the rootSchema\n            // this accounts for the case where schema have references to models\n            // that lives in the rootSchema but not in the schema in question.\n            // if (this.ajv.getSchema(rootSchemaId) === undefined) {\n            // TODO restore the commented out `if` above when the TODO in the `finally` is completed\n            this.ajv.addSchema(rootSchema, rootSchemaId);\n            // }\n            const schemaWithIdRefPrefix = withIdRefPrefix(schema);\n            const schemaId = (_b = schemaWithIdRefPrefix[ID_KEY]) !== null && _b !== void 0 ? _b : hashForSchema(schemaWithIdRefPrefix);\n            let compiledValidator;\n            compiledValidator = this.ajv.getSchema(schemaId);\n            if (compiledValidator === undefined) {\n                // Add schema by an explicit ID so it can be fetched later\n                // Fall back to using compile if necessary\n                // https://ajv.js.org/guide/managing-schemas.html#pre-adding-all-schemas-vs-adding-on-demand\n                compiledValidator =\n                    this.ajv.addSchema(schemaWithIdRefPrefix, schemaId).getSchema(schemaId) ||\n                        this.ajv.compile(schemaWithIdRefPrefix);\n            }\n            const result = compiledValidator(formData);\n            return result;\n        }\n        catch (e) {\n            console.warn('Error encountered compiling schema:', e);\n            return false;\n        }\n        finally {\n            // TODO: A function should be called if the root schema changes so we don't have to remove and recompile the schema every run.\n            // make sure we remove the rootSchema from the global ajv instance\n            this.ajv.removeSchema(rootSchemaId);\n        }\n    }\n}\n//# sourceMappingURL=validator.js.map","import AJV8Validator from './validator';\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided. If a `localizer` is provided, it is used to translate the messages generated by the underlying AJV\n * validation.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n * @returns - The custom validator implementation resulting from the set of parameters provided\n */\nexport default function customizeValidator(options = {}, localizer) {\n    return new AJV8Validator(options, localizer);\n}\n//# sourceMappingURL=customizeValidator.js.map","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { hashForSchema, ID_KEY, JUNK_OPTION_ID, toErrorList, retrieveSchema, } from '@rjsf/utils';\nimport processRawValidationErrors from './processRawValidationErrors';\n/** `ValidatorType` implementation that uses an AJV 8 precompiled validator as created by the\n * `compileSchemaValidators()` function provided by the `@rjsf/validator-ajv8` library.\n */\nexport default class AJV8PrecompiledValidator {\n    /** Constructs an `AJV8PrecompiledValidator` instance using the `validateFns` and `rootSchema`\n     *\n     * @param validateFns - The map of the validation functions that are generated by the `schemaCompile()` function\n     * @param rootSchema - The root schema that was used with the `compileSchema()` function\n     * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n     * @throws - Error when the base schema of the precompiled validator does not have a matching validator function\n     */\n    constructor(validateFns, rootSchema, localizer) {\n        this.rootSchema = rootSchema;\n        this.validateFns = validateFns;\n        this.localizer = localizer;\n        this.mainValidator = this.getValidator(rootSchema);\n    }\n    /** Returns the precompiled validator associated with the given `schema` from the map of precompiled validator\n     * functions.\n     *\n     * @param schema - The schema for which a precompiled validator function is desired\n     * @returns - The precompiled validator function associated with this schema\n     */\n    getValidator(schema) {\n        const key = get(schema, ID_KEY) || hashForSchema(schema);\n        const validator = this.validateFns[key];\n        if (!validator) {\n            throw new Error(`No precompiled validator function was found for the given schema for \"${key}\"`);\n        }\n        return validator;\n    }\n    /** Ensures that the validator is using the same schema as the root schema used to construct the precompiled\n     * validator. It first compares the given `schema` against the root schema and if they aren't the same, then it\n     * checks against the resolved root schema, on the chance that a resolved version of the root schema was passed in\n     * instead of the raw root schema.\n     *\n     * @param schema - The schema against which to validate the form data\n     * @param [formData] - The form data to validate if any\n     */\n    ensureSameRootSchema(schema, formData) {\n        if (!isEqual(schema, this.rootSchema)) {\n            // Resolve the root schema with the passed in form data since that may affect the resolution\n            const resolvedRootSchema = retrieveSchema(this, this.rootSchema, this.rootSchema, formData);\n            if (!isEqual(schema, resolvedRootSchema)) {\n                throw new Error('The schema associated with the precompiled validator differs from the rootSchema provided for validation');\n            }\n        }\n        return true;\n    }\n    /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n     *\n     * @param errorSchema - The `ErrorSchema` instance to convert\n     * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n     * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in\n     *        the next major release.\n     */\n    toErrorList(errorSchema, fieldPath = []) {\n        return toErrorList(errorSchema, fieldPath);\n    }\n    /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n     * by the playground. Returns the `errors` from the validation\n     *\n     * @param schema - The schema against which to validate the form data\n     * @param [formData] - The form data to validate, if any\n     * @throws - Error when the schema provided does not match the base schema of the precompiled validator\n     */\n    rawValidation(schema, formData) {\n        this.ensureSameRootSchema(schema, formData);\n        this.mainValidator(formData);\n        if (typeof this.localizer === 'function') {\n            this.localizer(this.mainValidator.errors);\n        }\n        const errors = this.mainValidator.errors || undefined;\n        // Clear errors to prevent persistent errors, see #1104\n        this.mainValidator.errors = null;\n        return { errors: errors };\n    }\n    /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n     * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n     * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n     * transform them in what ever way it chooses.\n     *\n     * @param formData - The form data to validate\n     * @param schema - The schema against which to validate the form data\n     * @param [customValidate] - An optional function that is used to perform custom validation\n     * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n     * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n     */\n    validateFormData(formData, schema, customValidate, transformErrors, uiSchema) {\n        const rawErrors = this.rawValidation(schema, formData);\n        return processRawValidationErrors(this, rawErrors, formData, schema, customValidate, transformErrors, uiSchema);\n    }\n    /** Validates data against a schema, returning true if the data is valid, or false otherwise. If the schema is\n     * invalid, then this function will return false.\n     *\n     * @param schema - The schema against which to validate the form data\n     * @param formData - The form data to validate\n     * @param rootSchema - The root schema used to provide $ref resolutions\n     * @returns - true if the formData validates against the schema, false otherwise\n     * @throws - Error when the schema provided does not match the base schema of the precompiled validator OR if there\n     *        isn't a precompiled validator function associated with the schema\n     */\n    isValid(schema, formData, rootSchema) {\n        this.ensureSameRootSchema(rootSchema, formData);\n        if (get(schema, ID_KEY) === JUNK_OPTION_ID) {\n            return false;\n        }\n        const validator = this.getValidator(schema);\n        return validator(formData);\n    }\n}\n//# sourceMappingURL=precompiledValidator.js.map","import AJV8PrecompiledValidator from './precompiledValidator';\n/** Creates and returns a `ValidatorType` interface that is implemented with a precompiled validator. If a `localizer`\n * is provided, it is used to translate the messages generated by the underlying AJV validation.\n *\n * NOTE: The `validateFns` parameter is an object obtained by importing from a precompiled validation file created via\n * the `compileSchemaValidators()` function.\n *\n * @param validateFns - The map of the validation functions that are created by the `compileSchemaValidators()` function\n * @param rootSchema - The root schema that was used with the `compileSchemaValidators()` function\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n * @returns - The precompiled validator implementation resulting from the set of parameters provided\n */\nexport default function createPrecompiledValidator(validateFns, rootSchema, localizer) {\n    return new AJV8PrecompiledValidator(validateFns, rootSchema, localizer);\n}\n//# sourceMappingURL=createPrecompiledValidator.js.map","import customizeValidator from './customizeValidator';\nimport createPrecompiledValidator from './createPrecompiledValidator';\nexport { customizeValidator, createPrecompiledValidator };\nexport * from './types';\nexport default customizeValidator();\n//# sourceMappingURL=index.js.map"],"names":["generateRowId","generateKeyedFormData","formData","item","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","props","schema","registry","schemaUtils","itemSchema","event","index","onChange","errorSchema","newErrorSchema","idx","i","newKeyedFormDataRow","newKeyedFormData","_","newIndex","reOrderArray","_newKeyedFormData","value","id","newFormData","idSchema","nextProps","prevState","nextFormData","previousKeyedFormData","previousKeyedFormDatum","translateString","formItems","uiSchema","addable","uiOptions","UnsupportedFieldTemplate","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","itemsSchema","canAdd","arrayProps","key","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","Template","_a","hideError","placeholder","items","widgets","globalUiOptions","widget","uiTitle","options","Widget","label","displayLabel","enumOptions","itemSchemas","additionalSchema","additional","itemUiSchema","canRemove","canMoveUp","canMoveDown","itemData","totalItems","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","copyable","has","BooleanField","_b","yes","no","option","o","schemaWithEnumNames","enums","v","AnyOfField","selectedOption","retrievedOptions","intOption","newOption","oldOption","opt","prevProps","newState","matchingOption","discriminator","fields","_SchemaField","autocomplete","fieldErrorSchema","optionSchema","translateEnum","translateParams","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","StringField","handleChange","processed","re","ObjectField","addedByAdditionalProperties","copiedFormData","preferredKey","duplicateKeySuffixSeparator","newKey","oldValue","newKeys","keyValues","renamedObj","type","apSchema","_c","rawSchema","schemaProperties","description","orderedProperties","properties","err","templateProps","fieldUiSchema","hidden","fieldIdSchema","COMPONENT_TYPES","getFieldComponent","field","schemaType","schemaId","componentName","SchemaFieldRender","_schema","_idSchema","onKeyChange","onDropPropertyClick","wasPropertyKeyModified","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","handleFieldComponentChange","FieldComponent","uiSchemaHideError","__errors","richDescription","help","classNames","helpComponent","errorsComponent","fieldProps","_AnyOfField","_OneOfField","isReplacingAnyOrOneOf","format","defaultWidget","NullField","MultiSchemaField","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","children","className","hasToolbar","hasMoveDown","hasMoveUp","hasRemove","hasCopy","onCopyIndexClick","onDropIndexClick","onReorderClick","CopyButton","MoveDownButton","MoveUpButton","RemoveButton","btnStyle","ArrayFieldTemplate","onAddClick","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","BaseInputTemplate","onChangeOverride","hideLabel","rest","inputProps","inputValue","_onChange","_onBlur","_onFocus","example","SubmitButton","submitText","norender","submitButtonProps","IconButton","iconType","icon","otherProps","onClick","buttonTemplates","DescriptionField","ErrorList","errors","error","REQUIRED_FIELD_SYMBOL","Label","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","TitleField","UnsupportedField","reason","style","templates","keyLabel","ButtonTemplates","rangeOptions","start","stop","readyForChange","state","dateElementProps","time","yearsRange","year","month","day","hour","minute","second","data","DateElement","range","select","rootId","SelectWidget","AltDateWidget","setState","action","stateValue","property","handleSetNow","nextState","handleClear","elemProps","AltDateTimeWidget","CheckboxWidget","handleBlur","handleFocus","CheckboxesWidget","inline","enumDisabled","emptyValue","checkboxesValues","checked","itemDisabled","disabledCls","checkbox","ColorWidget","DateWidget","DateTimeWidget","EmailWidget","addNameToDataURL","dataURL","processFile","file","size","resolve","reject","reader","processFiles","files","FileInfoPreview","fileInfo","FilesInfo","filesInfo","preview","extractFileInfo","dataURLs","blob","FileWidget","multiple","setFilesInfo","filesInfoEvent","newValue","HiddenWidget","PasswordWidget","RadioWidget","radio","RangeWidget","getValue","optEmptyVal","selectedIndexes","TextareaWidget","TextWidget","TimeWidget","URLWidget","UpDownWidget","getDefaultRegistry","pathSchema","getAllPaths","_obj","acc","paths","newPaths","path","formValue","val","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","retrievedSchema","mustValidate","_retrievedSchema","fieldNames","schemaValidation","schemaValidationErrors","schemaValidationErrorSchema","merged","onSubmit","shouldUpdate","snapshot","inputFormData","edit","rootSchema","experimental_defaultFormStateBehavior","getCurrentErrors","currentErrors","altSchemaUtils","customValidate","transformErrors","resolvedSchema","ErrorListTemplate","customTranslateString","elementId","extraErrorsBlockSubmit","focusOnFirstError","onError","prevErrors","hasError","tagName","method","target","autoComplete","enctype","acceptcharset","noHtml5Validate","showErrorList","_internalFormWrapper","as","FormTag","submitOptions","submitUiSchema","withTheme","themeProps","directProps","ref","Add","Grid","Box","Paper","TYPES_THAT_SHRINK_LABEL","InputLabelProps","textFieldProps","step","min","max","DisplayInputLabelProps","TextField","Typography","List","ListItem","ListItemIcon","Error","ListItemText","MuiIconButton","color","ArrowDownward","ArrowUpward","Remove","FormHelperText","rawDescription","FormControl","element","Button","Divider","generateTemplates","FormControlLabel","Checkbox","FormLabel","FormGroup","row","selectedIndex","RadioGroup","Radio","sliderProps","Slider","isEmpty","MenuItem","rows","generateWidgets","generateTheme","generateForm","isObject","thing","allowAdditionalItems","asNumber","n","ADDITIONAL_PROPERTY_FLAG","ADDITIONAL_PROPERTIES_KEY","ALL_OF_KEY","ANY_OF_KEY","CONST_KEY","DEFAULT_KEY","DEFINITIONS_KEY","DEPENDENCIES_KEY","ENUM_KEY","ERRORS_KEY","IF_KEY","JUNK_OPTION_ID","NAME_KEY","ONE_OF_KEY","REQUIRED_KEY","SUBMIT_BTN_OPTIONS_KEY","REF_KEY","RJSF_ADDITONAL_PROPERTIES_FLAG","ROOT_SCHEMA_PREFIX","UI_FIELD_KEY","UI_WIDGET_KEY","UI_OPTIONS_KEY","UI_GLOBAL_OPTIONS_KEY","getUiOptions","globalOptions","canExpand","expandable","createErrorHandler","handler","message","formObject","deepEquals","a","b","obj","other","splitKeyElementFromObject","object","findSchemaDefinition","$ref","current","jsonpointer","remaining","theRef","subSchema","getOptionMatchingSimpleDiscriminator","discriminatorField","getMatchingOption","validator","simpleDiscriminatorMatch","requiresAnyOf","augmentedSchema","shallowClone","getFirstMatchingOption","getDiscriminatorFieldFromSchema","maybeString","guessType","getSchemaType","mergeSchemas","obj1","obj2","left","right","retrieveSchema","rawFormData","resolveCondition","expandAllBranches","recurseList","expression","then","otherwise","resolvedSchemaLessConditional","conditionValue","resolvedSchemas","schemas","conditionalSchema","s","getAllPermutationsOfXxxOf","listOfLists","permutations","list","permutation","resolveSchema","updatedSchemas","resolveReference","resolveDependencies","allOfSchemaElements","allOfSubschema","updatedSchema","resolveAllReferences","localSchema","childrenLists","updatedProps","result","childList","stubExistingAdditionalProperties","theSchema","aFormData","additionalProperties","allOf","restOfSchema","e","resolvedSchemaWithoutAllOf","anyOrOneOf","oneOf","anyOf","dependencies","remainingSchema","processDependencies","dependencyKey","remainingDependencies","dependencyValue","withDependentProperties","withDependentSchema","additionallyRequired","dependent","dependentSchema","resolvedOneOfs","subschema","resolvedOneOf","withExactlyOneSubschema","validSubschemas","conditionPropertySchema","conditionSchema","dependentSubschema","JUNK_OPTION","calculateIndexScore","totalScore","score","newSchema","getClosestMatchingOption","newScore","resolvedOptions","allValidIndexes","validList","scoreCount","bestIndex","scoreData","bestScore","isFixedItems","mergeDefaultsWithFormData","defaults","mergeExtraArrayDefaults","defaultsArray","mapped","mergeObjects","concatArrays","toMerge","isConstant","isSelect","altSchemas","isMultiSelect","AdditionalItemsHandling","getInnerSchemaForArrayItem","additionalItems","maybeAddDefaultToObject","computedDefault","includeUndefinedValues","isParentRequired","requiredFields","emptyObjectFields","isSelfOrParentRequired","computeDefaults","parentDefaults","_recurseList","schemaToCompute","updatedRecurseList","refName","objectDefaults","additionalPropertiesSchema","keys","formDataRequired","neverPopulate","ignoreMinItemsFlagSet","schemaItem","defaultsLength","defaultEntries","fillerSchema","fillerDefault","fillerEntries","getDefaultFormState","mergeExtraDefaults","isCustomWidget","isFilesArray","getDisplayLabel","mergeValidationData","validationData","additionalErrorSchema","oldErrors","oldErrorSchema","NO_VALUE","sanitizeDataForNewSchema","oldSchema","removeOldSchemaData","nestedData","oldKeyedSchema","newKeyedSchema","oldSchemaTypeForKey","newSchemaTypeForKey","newOptionDefault","oldOptionDefault","newOptionConst","oldOptionConst","oldSchemaItems","newSchemaItems","oldSchemaType","newSchemaType","maxItems","aValue","itemValue","toIdSchemaInternal","toIdSchema","toPathSchemaInternal","xxxOf","schemaItems","schemaAdditionalItems","toPathSchema","SchemaUtils","createSchemaUtils","dataURItoBlob","dataURI","splitted","params","param","binary","array","replaceStringParameters","inputString","output","parts","partIndex","part","englishStringTranslator","stringToTranslate","enumOptionsValueForIndex","valueIndex","allEnumOptions","enumOptionsDeselectValue","selected","enumOptionsIsSelected","sel","enumOptionsIndexForValue","enumOptionsSelectValue","all","ErrorSchemaBuilder","initialSchema","pathOfError","errorBlock","errorOrList","errorsList","listToAdd","rangeSpec","spec","getInputProps","defaultType","autoDefaultStepAny","DEFAULT_OPTIONS","getSubmitButtonOptions","getTemplate","widgetMap","mergeWidgetOptions","AWidget","MergedWidget","defaultOptions","getWidget","registeredWidgets","registeredWidget","hashString","string","hash","chr","allKeys","hasWidget","idGenerator","suffix","descriptionId","errorId","examplesId","helpId","titleId","ariaDescribedByIds","includeExamples","examples","optionId","optionIndex","labelValue","fallback","localToUTC","dateString","toConstant","optionsList","aSchemaDef","aSchema","orderProperties","order","arrayToHash","arr","prev","curr","errorPropList","propertyHash","orderFiltered","orderHash","restIndex","complete","pad","num","width","parseDateString","includeTime","date","schemaRequiresTrueValue","schemaSome","shouldRender","component","toDateString","dateObject","utcTime","datetime","toErrorList","fieldPath","errorList","childSchema","toErrorSchema","builder","unwrapErrorHandler","errorHandler","utcToLocal","jsonDate","yyyy","MM","dd","hh","mm","ss","SSS","validationDataMerge","withIdRefPrefixObject","node","realObj","withIdRefPrefix","withIdRefPrefixArray","schemaNode","TranslatableString","identifiedSchema","existing","_formData","_errorSchema","_fieldPath","_customValidate","_transformErrors","_uiSchema","parseSchema","schemaParser","c","d","f","g","h","k","l","m","p","q","t","u","r","exports","module","AJV_CONFIG","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","createAjvInstance","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajvFormatOptions","AjvClass","ajv","formatName","transformRJSFValidationErrors","instancePath","keyword","schemaPath","parentSchema","stack","currentProperty","uiSchemaTitle","parentSchemaTitle","invalidSchemaError","userErrorSchema","AJV8Validator","localizer","compilationError","compiledValidator","rootSchemaId","schemaWithIdRefPrefix","customizeValidator","validateFns","resolvedRootSchema","createPrecompiledValidator"],"sourceRoot":""}