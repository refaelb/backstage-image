{"version":3,"file":"static/react-syntax-highlighter_languages_highlight_gams.73d9111e.chunk.js","mappings":"8EASA,SAASA,EAAOC,EAAI,CAClB,OAAKA,EACD,OAAOA,GAAO,SAAiBA,EAE5BA,EAAG,OAHM,IAIlB,CAMA,SAASC,EAAiBD,EAAI,CAC5B,OAAOE,EAAO,IAAKF,EAAI,IAAI,CAC7B,CAMA,SAASE,KAAUC,EAAM,CAEvB,OADeA,EAAK,IAAKC,GAAML,EAAOK,CAAC,CAAC,EAAE,KAAK,EAAE,CAEnD,CAGA,SAASC,EAAKC,EAAM,CAClB,MAAMC,EAAW,CACf,QACE,oVAKF,QACE,aACF,SACE,q3BAcJ,EACMC,EAAS,CACb,UAAW,SACX,MAAO,KACP,IAAK,KACL,aAAc,GACd,WAAY,EACd,EACMC,EAAU,CACd,UAAW,SACX,SAAU,CACR,CACE,MAAO,YACT,EACA,CACE,MAAO,IACT,CACF,CACF,EACMC,EAAO,CACX,UAAW,UACX,SAAU,CACR,CACE,MAAO,IACP,IAAK,GACP,EACA,CACE,MAAO,IACP,IAAK,GACP,CACF,EACA,QAAS,MACT,SAAU,CAACJ,EAAK,gBAAgB,CAClC,EACMK,EAAa,CACjB,MAAO,IACP,IAAK,IACL,SAAUJ,EACV,SAAU,CACRG,EACAJ,EAAK,oBACLA,EAAK,qBACLA,EAAK,kBACLA,EAAK,iBACLA,EAAK,aACP,CACF,EACMM,EAAe,uCACfC,EAAW,CACf,MAAO,2CACP,aAAc,GACd,IAAK,IACL,eAAgB,GAChB,SAAU,CACRH,EACAC,EACA,CACE,UAAW,UAEX,MAAOT,EACLU,EAEAX,EAAiBC,EAAO,OAAQU,CAAY,CAAC,CAC/C,EACA,UAAW,CACb,CACF,CACF,EAEA,MAAO,CACL,KAAM,OACN,QAAS,CAAC,KAAK,EACf,iBAAkB,GAClB,SAAUL,EACV,SAAU,CACRD,EAAK,QAAQ,YAAa,YAAY,EACtC,CACE,UAAW,OACX,MAAO,gBACP,IAAK,IACL,YAAa,GACb,SAAU,CACR,CACE,UAAW,eACX,MAAO,eACT,CACF,CACF,EACAA,EAAK,QAAQ,OAAQ,GAAG,EACxBA,EAAK,oBACLA,EAAK,qBACLA,EAAK,kBACLA,EAAK,iBAEL,CACE,cACE,qFAEF,IAAK,IACL,SAAU,CACRA,EAAK,QAAQ,OAAQ,GAAG,EACxBA,EAAK,oBACLA,EAAK,qBACLA,EAAK,kBACLA,EAAK,iBACLK,EACAE,CACF,CACF,EACA,CACE,cAAe,QACf,IAAK,IACL,YAAa,GACb,SAAU,CACR,CACE,cAAe,QACf,IAAK,IACL,SAAU,CAACA,CAAQ,CACrB,EACAP,EAAK,QAAQ,OAAQ,GAAG,EACxBA,EAAK,oBACLA,EAAK,qBACLA,EAAK,kBACLA,EAAK,iBACLA,EAAK,aAEP,CACF,EAEA,CACE,UAAW,WACX,MAAO,iCACP,YAAa,GACb,SAAU,CACR,CACE,UAAW,QACX,MAAO,aACT,EACAE,EACAC,CACF,CACF,EACAH,EAAK,cACLG,CACF,CACF,CACF,CAEAK,EAAO,QAAUT,C","sources":["webpack://app/../../node_modules/highlight.js/lib/languages/gams.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction anyNumberOfTimes(re) {\n  return concat('(', re, ')*');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/** @type LanguageFn */\nfunction gams(hljs) {\n  const KEYWORDS = {\n    keyword:\n      'abort acronym acronyms alias all and assign binary card diag display ' +\n      'else eq file files for free ge gt if integer le loop lt maximizing ' +\n      'minimizing model models ne negative no not option options or ord ' +\n      'positive prod put putpage puttl repeat sameas semicont semiint smax ' +\n      'smin solve sos1 sos2 sum system table then until using while xor yes',\n    literal:\n      'eps inf na',\n    built_in:\n      'abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy ' +\n      'cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact ' +\n      'floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max ' +\n      'min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power ' +\n      'randBinomial randLinear randTriangle round rPower sigmoid sign ' +\n      'signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt ' +\n      'tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp ' +\n      'bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt ' +\n      'rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear ' +\n      'jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion ' +\n      'handleCollect handleDelete handleStatus handleSubmit heapFree ' +\n      'heapLimit heapSize jobHandle jobKill jobStatus jobTerminate ' +\n      'licenseLevel licenseStatus maxExecError sleep timeClose timeComp ' +\n      'timeElapsed timeExec timeStart'\n  };\n  const PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true\n  };\n  const SYMBOLS = {\n    className: 'symbol',\n    variants: [\n      {\n        begin: /=[lgenxc]=/\n      },\n      {\n        begin: /\\$/\n      }\n    ]\n  };\n  const QSTR = { // One-line quoted comment string\n    className: 'comment',\n    variants: [\n      {\n        begin: '\\'',\n        end: '\\''\n      },\n      {\n        begin: '\"',\n        end: '\"'\n      }\n    ],\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  const ASSIGNMENT = {\n    begin: '/',\n    end: '/',\n    keywords: KEYWORDS,\n    contains: [\n      QSTR,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.C_NUMBER_MODE\n    ]\n  };\n  const COMMENT_WORD = /[a-z0-9&#*=?@\\\\><:,()$[\\]_.{}!+%^-]+/;\n  const DESCTEXT = { // Parameter/set/variable description text\n    begin: /[a-z][a-z0-9_]*(\\([a-z0-9_, ]*\\))?[ \\t]+/,\n    excludeBegin: true,\n    end: '$',\n    endsWithParent: true,\n    contains: [\n      QSTR,\n      ASSIGNMENT,\n      {\n        className: 'comment',\n        // one comment word, then possibly more\n        begin: concat(\n          COMMENT_WORD,\n          // [ ] because \\s would be too broad (matching newlines)\n          anyNumberOfTimes(concat(/[ ]+/, COMMENT_WORD))\n        ),\n        relevance: 0\n      }\n    ]\n  };\n\n  return {\n    name: 'GAMS',\n    aliases: ['gms'],\n    case_insensitive: true,\n    keywords: KEYWORDS,\n    contains: [\n      hljs.COMMENT(/^\\$ontext/, /^\\$offtext/),\n      {\n        className: 'meta',\n        begin: '^\\\\$[a-z0-9]+',\n        end: '$',\n        returnBegin: true,\n        contains: [\n          {\n            className: 'meta-keyword',\n            begin: '^\\\\$[a-z0-9]+'\n          }\n        ]\n      },\n      hljs.COMMENT('^\\\\*', '$'),\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      // Declarations\n      {\n        beginKeywords:\n          'set sets parameter parameters variable variables ' +\n          'scalar scalars equation equations',\n        end: ';',\n        contains: [\n          hljs.COMMENT('^\\\\*', '$'),\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          ASSIGNMENT,\n          DESCTEXT\n        ]\n      },\n      { // table environment\n        beginKeywords: 'table',\n        end: ';',\n        returnBegin: true,\n        contains: [\n          { // table header row\n            beginKeywords: 'table',\n            end: '$',\n            contains: [DESCTEXT]\n          },\n          hljs.COMMENT('^\\\\*', '$'),\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          hljs.C_NUMBER_MODE\n          // Table does not contain DESCTEXT or ASSIGNMENT\n        ]\n      },\n      // Function definitions\n      {\n        className: 'function',\n        begin: /^[a-z][a-z0-9_,\\-+' ()$]+\\.{2}/,\n        returnBegin: true,\n        contains: [\n          { // Function title\n            className: 'title',\n            begin: /^[a-z0-9_]+/\n          },\n          PARAMS,\n          SYMBOLS\n        ]\n      },\n      hljs.C_NUMBER_MODE,\n      SYMBOLS\n    ]\n  };\n}\n\nmodule.exports = gams;\n"],"names":["source","re","anyNumberOfTimes","concat","args","x","gams","hljs","KEYWORDS","PARAMS","SYMBOLS","QSTR","ASSIGNMENT","COMMENT_WORD","DESCTEXT","module"],"sourceRoot":""}