"use strict";(()=>{var is=Object.defineProperty;var as=(F,P,b)=>P in F?is(F,P,{enumerable:!0,configurable:!0,writable:!0,value:b}):F[P]=b;var I=(F,P,b)=>(as(F,typeof P!="symbol"?P+"":P,b),b),Lr=(F,P,b)=>{if(!P.has(F))throw TypeError("Cannot "+b)};var t=(F,P,b)=>(Lr(F,P,"read from private field"),b?b.call(F):P.get(F)),y=(F,P,b)=>{if(P.has(F))throw TypeError("Cannot add the same private member more than once");P instanceof WeakSet?P.add(F):P.set(F,b)},f=(F,P,b,X)=>(Lr(F,P,"write to private field"),X?X.call(F,b):P.set(F,b),b),Rr=(F,P,b,X)=>({set _(z){f(F,P,z,b)},get _(){return t(F,P,X)}}),w=(F,P,b)=>(Lr(F,P,"access private method"),b);(self.webpackChunkapp=self.webpackChunkapp||[]).push([[1410],{69292:(F,P,b)=>{var Vr,nr,le,se,Te,pe,ar,x,ue,H,D,G,Z,te,J,B,de,N,Ge,ke,ge,Ee,Ue,ee,Tr,jr,xe,ye,Er,oe,Sr,Nr,He,cr,wr,we,De,fe,Ce,fr,qr,lr,Fr,pr,Ur,U,C,_r,Wr,Be,br;b.d(P,{i:()=>ns});var X=b(7502),z=b(85219),Ie=b(23531),ie=b.n(Ie),ve=b(91346),Le=b(29928),Ve=b.n(Le);const ur=Ve()(r=>console.warn(r)),Ne=Ve()(r=>console.warn(r));class dr extends Error{constructor(e,s,o){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=s;let n;"headers"in o&&typeof o.headers!="undefined"&&(n=o.headers),"response"in o&&(this.response=o.response,n=o.response.headers);const a=Object.assign({},o.request);o.request.headers.authorization&&(a.headers=Object.assign({},o.request.headers,{authorization:o.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),a.url=a.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=a,Object.defineProperty(this,"code",{get(){return ur(new ve.$("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),s}}),Object.defineProperty(this,"headers",{get(){return Ne(new ve.$("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),n||{}}})}}var je="2.0.6";function Me(r){const e=r.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(e.baseUrl)?"https://github.com":e.baseUrl.replace("/api/v3","")}async function re(r,e,s){const o={baseUrl:Me(r),headers:{accept:"application/json"},...s},n=await r(e,o);if("error"in n.data){const a=new dr(`${n.data.error_description} (${n.data.error}, ${n.data.error_uri})`,400,{request:r.endpoint.merge(e,o),headers:n.headers});throw a.response=n,a}return n}function Se({request:r=defaultRequest,...e}){const s=Me(r);return oauthAuthorizationUrl({...e,baseUrl:s})}async function he(r){const e=r.request||z.W,s=await re(e,"POST /login/oauth/access_token",{client_id:r.clientId,client_secret:r.clientSecret,code:r.code,redirect_uri:r.redirectUrl}),o={clientType:r.clientType,clientId:r.clientId,clientSecret:r.clientSecret,token:s.data.access_token,scopes:s.data.scope.split(/\s+/).filter(Boolean)};if(r.clientType==="github-app"){if("refresh_token"in s.data){const n=new Date(s.headers.date).getTime();o.refreshToken=s.data.refresh_token,o.expiresAt=Pe(n,s.data.expires_in),o.refreshTokenExpiresAt=Pe(n,s.data.refresh_token_expires_in)}delete o.scopes}return{...s,authentication:o}}function Pe(r,e){return new Date(r+e*1e3).toISOString()}async function gr(r){const e=r.request||z.W,s={client_id:r.clientId};return"scopes"in r&&Array.isArray(r.scopes)&&(s.scope=r.scopes.join(" ")),re(e,"POST /login/device/code",s)}async function Ke(r){const e=r.request||z.W,s=await re(e,"POST /login/oauth/access_token",{client_id:r.clientId,device_code:r.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),o={clientType:r.clientType,clientId:r.clientId,token:s.data.access_token,scopes:s.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in r&&(o.clientSecret=r.clientSecret),r.clientType==="github-app"){if("refresh_token"in s.data){const n=new Date(s.headers.date).getTime();o.refreshToken=s.data.refresh_token,o.expiresAt=Je(n,s.data.expires_in),o.refreshTokenExpiresAt=Je(n,s.data.refresh_token_expires_in)}delete o.scopes}return{...s,authentication:o}}function Je(r,e){return new Date(r+e*1e3).toISOString()}async function Ye(r){const s=await(r.request||z.W)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${ie()(`${r.clientId}:${r.clientSecret}`)}`},client_id:r.clientId,access_token:r.token}),o={clientType:r.clientType,clientId:r.clientId,clientSecret:r.clientSecret,token:r.token,scopes:s.data.scopes};return s.data.expires_at&&(o.expiresAt=s.data.expires_at),r.clientType==="github-app"&&delete o.scopes,{...s,authentication:o}}async function Xe(r){const e=r.request||z.W,s=await re(e,"POST /login/oauth/access_token",{client_id:r.clientId,client_secret:r.clientSecret,grant_type:"refresh_token",refresh_token:r.refreshToken}),o=new Date(s.headers.date).getTime(),n={clientType:"github-app",clientId:r.clientId,clientSecret:r.clientSecret,token:s.data.access_token,refreshToken:s.data.refresh_token,expiresAt:be(o,s.data.expires_in),refreshTokenExpiresAt:be(o,s.data.refresh_token_expires_in)};return{...s,authentication:n}}function be(r,e){return new Date(r+e*1e3).toISOString()}async function Gr(r){const{request:e,clientType:s,clientId:o,clientSecret:n,token:a,...p}=r,T=await(e||defaultRequest7)("POST /applications/{client_id}/token/scoped",{headers:{authorization:`basic ${btoa2(`${o}:${n}`)}`},client_id:o,access_token:a,...p}),R=Object.assign({clientType:s,clientId:o,clientSecret:n,token:T.data.token},T.data.expires_at?{expiresAt:T.data.expires_at}:{});return{...T,authentication:R}}async function Ze(r){const e=r.request||z.W,s=ie()(`${r.clientId}:${r.clientSecret}`),o=await e("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${s}`},client_id:r.clientId,access_token:r.token}),n={clientType:r.clientType,clientId:r.clientId,clientSecret:r.clientSecret,token:o.data.token,scopes:o.data.scopes};return o.data.expires_at&&(n.expiresAt=o.data.expires_at),r.clientType==="github-app"&&delete n.scopes,{...o,authentication:n}}async function hr(r){const e=r.request||z.W,s=ie()(`${r.clientId}:${r.clientSecret}`);return e("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${s}`},client_id:r.clientId,access_token:r.token})}async function mr(r){const e=r.request||z.W,s=ie()(`${r.clientId}:${r.clientSecret}`);return e("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${s}`},client_id:r.clientId,access_token:r.token})}async function Oe(r,e){const s=Qe(r,e.auth);if(s)return s;const{data:o}=await gr({clientType:r.clientType,clientId:r.clientId,request:e.request||r.request,scopes:e.auth.scopes||r.scopes});await r.onVerification(o);const n=await er(e.request||r.request,r.clientId,r.clientType,o);return r.authentication=n,n}function Qe(r,e){if(e.refresh===!0||!r.authentication)return!1;if(r.clientType==="github-app")return r.authentication;const s=r.authentication,o=("scopes"in e&&e.scopes||r.scopes).join(" "),n=s.scopes.join(" ");return o===n?s:!1}async function Re(r){await new Promise(e=>setTimeout(e,r*1e3))}async function er(r,e,s,o){try{const n={clientId:e,request:r,code:o.device_code},{authentication:a}=s==="oauth-app"?await Ke({...n,clientType:"oauth-app"}):await Ke({...n,clientType:"github-app"});return{type:"token",tokenType:"oauth",...a}}catch(n){if(!n.response)throw n;const a=n.response.data.error;if(a==="authorization_pending")return await Re(o.interval),er(r,e,s,o);if(a==="slow_down")return await Re(o.interval+5),er(r,e,s,o);throw n}}async function rr(r,e){return Oe(r,{auth:e})}async function kr(r,e,s,o){let n=e.endpoint.merge(s,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return e(n);const{token:a}=await Oe(r,{request:e,auth:{type:"oauth"}});return n.headers.authorization=`token ${a}`,e(n)}var sr="4.0.5";function me(r){const e=r.request||z.W.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${sr} ${(0,X.i)()}`}}),{request:s=e,...o}=r,n=r.clientType==="github-app"?{...o,clientType:"github-app",request:s}:{...o,clientType:"oauth-app",request:s,scopes:r.scopes||[]};if(!r.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!r.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(rr.bind(null,n),{hook:kr.bind(null,n)})}var tr="2.1.2";async function or(r){if("code"in r.strategyOptions){const{authentication:e}=await he({clientId:r.clientId,clientSecret:r.clientSecret,clientType:r.clientType,onTokenCreated:r.onTokenCreated,...r.strategyOptions,request:r.request});return{type:"token",tokenType:"oauth",...e}}if("onVerification"in r.strategyOptions){const s=await me({clientType:r.clientType,clientId:r.clientId,onTokenCreated:r.onTokenCreated,...r.strategyOptions,request:r.request})({type:"oauth"});return{clientSecret:r.clientSecret,...s}}if("token"in r.strategyOptions)return{type:"token",tokenType:"oauth",clientId:r.clientId,clientSecret:r.clientSecret,clientType:r.clientType,onTokenCreated:r.onTokenCreated,...r.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function ae(r,e={}){var o,n;if(r.authentication||(r.authentication=r.clientType==="oauth-app"?await or(r):await or(r)),r.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const s=r.authentication;if("expiresAt"in s&&(e.type==="refresh"||new Date(s.expiresAt)<new Date)){const{authentication:a}=await Xe({clientType:"github-app",clientId:r.clientId,clientSecret:r.clientSecret,refreshToken:s.refreshToken,request:r.request});r.authentication={tokenType:"oauth",type:"token",...a}}if(e.type==="refresh"){if(r.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!s.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing");await((o=r.onTokenCreated)==null?void 0:o.call(r,r.authentication,{type:e.type}))}if(e.type==="check"||e.type==="reset"){const a=e.type==="check"?Ye:Ze;try{const{authentication:p}=await a({clientType:r.clientType,clientId:r.clientId,clientSecret:r.clientSecret,token:r.authentication.token,request:r.request});return r.authentication={tokenType:"oauth",type:"token",...p},e.type==="reset"&&await((n=r.onTokenCreated)==null?void 0:n.call(r,r.authentication,{type:e.type})),r.authentication}catch(p){throw p.status===404&&(p.message="[@octokit/auth-oauth-user] Token is invalid",r.authentication.invalid=!0),p}}if(e.type==="delete"||e.type==="deleteAuthorization"){const a=e.type==="delete"?hr:mr;try{await a({clientType:r.clientType,clientId:r.clientId,clientSecret:r.clientSecret,token:r.authentication.token,request:r.request})}catch(p){if(p.status!==404)throw p}return r.authentication.invalid=!0,r.authentication}return r.authentication}var qe=/\/applications\/[^/]+\/(token|grant)s?/;function Fe(r){return r&&qe.test(r)}async function We(r,e,s,o={}){const n=e.endpoint.merge(s,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return e(n);if(Fe(n.url)){const p=ie()(`${r.clientId}:${r.clientSecret}`);return n.headers.authorization=`basic ${p}`,e(n)}const{token:a}=r.clientType==="oauth-app"?await ae({...r,request:e}):await ae({...r,request:e});return n.headers.authorization="token "+a,e(n)}function ze({clientId:r,clientSecret:e,clientType:s="oauth-app",request:o=z.W.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${tr} ${(0,X.i)()}`}}),onTokenCreated:n,...a}){const p=Object.assign({clientType:s,clientId:r,clientSecret:e,onTokenCreated:n,strategyOptions:a,request:o});return Object.assign(ae.bind(null,p),{hook:We.bind(null,p)})}ze.VERSION=tr;async function l(r,e){if(e.type==="oauth-app")return{type:"oauth-app",clientId:r.clientId,clientSecret:r.clientSecret,clientType:r.clientType,headers:{authorization:`basic ${ie()(`${r.clientId}:${r.clientSecret}`)}`}};if("factory"in e){const{type:n,...a}={...e,...r};return e.factory(a)}const s={clientId:r.clientId,clientSecret:r.clientSecret,request:r.request,...e};return(r.clientType==="oauth-app"?await ze({...s,clientType:r.clientType}):await ze({...s,clientType:r.clientType}))()}async function m(r,e,s,o){let n=e.endpoint.merge(s,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return e(n);if(r.clientType==="github-app"&&!Fe(n.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${n.method} ${n.url}" is not supported.`);const a=ie()(`${r.clientId}:${r.clientSecret}`);n.headers.authorization=`basic ${a}`;try{return await e(n)}catch(p){throw p.status!==401||(p.message=`[@octokit/auth-oauth-app] "${n.method} ${n.url}" does not support clientId/clientSecret basic authentication.`),p}}var g="5.0.6";function i(r){const e=Object.assign({request:z.W.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${g} ${(0,X.i)()}`}}),clientType:"oauth-app"},r);return Object.assign(l.bind(null,e),{hook:m.bind(null,e)})}var c=b(6990),u=b(34406);const d=typeof performance=="object"&&performance&&typeof performance.now=="function"?performance:Date,h=new Set,_=typeof u=="object"&&u?u:{},k=(r,e,s,o)=>{typeof _.emitWarning=="function"?_.emitWarning(r,e,s,o):console.error(`[${s}] ${e}: ${r}`)};let v=globalThis.AbortController,$=globalThis.AbortSignal;if(typeof v=="undefined"){$=class{constructor(){I(this,"onabort");I(this,"_onabort",[]);I(this,"reason");I(this,"aborted",!1)}addEventListener(o,n){this._onabort.push(n)}},v=class{constructor(){I(this,"signal",new $);e()}abort(o){var n,a;if(!this.signal.aborted){this.signal.reason=o,this.signal.aborted=!0;for(const p of this.signal._onabort)p(o);(a=(n=this.signal).onabort)==null||a.call(n,o)}}};let r=((Vr=_.env)==null?void 0:Vr.LRU_CACHE_IGNORE_AC_WARNING)!=="1";const e=()=>{r&&(r=!1,k("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",e))}}const V=r=>!h.has(r),$e=Symbol("type"),ce=r=>r&&r===Math.floor(r)&&r>0&&isFinite(r),zr=r=>ce(r)?r<=Math.pow(2,8)?Uint8Array:r<=Math.pow(2,16)?Uint16Array:r<=Math.pow(2,32)?Uint32Array:r<=Number.MAX_SAFE_INTEGER?yr:null:null;class yr extends Array{constructor(e){super(e),this.fill(0)}}const ir=class{constructor(e,s){I(this,"heap");I(this,"length");if(!t(ir,nr))throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new s(e),this.length=0}static create(e){const s=zr(e);if(!s)return[];f(ir,nr,!0);const o=new ir(e,s);return f(ir,nr,!1),o}push(e){this.heap[this.length++]=e}pop(){return this.heap[--this.length]}};let Ar=ir;nr=new WeakMap,y(Ar,nr,!1);const Cr=class{constructor(e){y(this,Tr);y(this,Sr);y(this,we);y(this,fe);y(this,fr);y(this,lr);y(this,pr);y(this,U);y(this,_r);y(this,Be);y(this,le,void 0);y(this,se,void 0);y(this,Te,void 0);y(this,pe,void 0);y(this,ar,void 0);I(this,"ttl");I(this,"ttlResolution");I(this,"ttlAutopurge");I(this,"updateAgeOnGet");I(this,"updateAgeOnHas");I(this,"allowStale");I(this,"noDisposeOnSet");I(this,"noUpdateTTL");I(this,"maxEntrySize");I(this,"sizeCalculation");I(this,"noDeleteOnFetchRejection");I(this,"noDeleteOnStaleGet");I(this,"allowStaleOnFetchAbort");I(this,"allowStaleOnFetchRejection");I(this,"ignoreFetchAbort");y(this,x,void 0);y(this,ue,void 0);y(this,H,void 0);y(this,D,void 0);y(this,G,void 0);y(this,Z,void 0);y(this,te,void 0);y(this,J,void 0);y(this,B,void 0);y(this,de,void 0);y(this,N,void 0);y(this,Ge,void 0);y(this,ke,void 0);y(this,ge,void 0);y(this,Ee,void 0);y(this,Ue,void 0);y(this,ee,void 0);y(this,xe,()=>{});y(this,ye,()=>{});y(this,Er,()=>{});y(this,oe,()=>!1);y(this,He,e=>{});y(this,cr,(e,s,o)=>{});y(this,wr,(e,s,o,n)=>{if(o||n)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0});const{max:s=0,ttl:o,ttlResolution:n=1,ttlAutopurge:a,updateAgeOnGet:p,updateAgeOnHas:E,allowStale:T,dispose:R,disposeAfter:j,noDisposeOnSet:S,noUpdateTTL:M,maxSize:Q=0,maxEntrySize:ne=0,sizeCalculation:A,fetchMethod:L,noDeleteOnFetchRejection:O,noDeleteOnStaleGet:q,allowStaleOnFetchRejection:K,allowStaleOnFetchAbort:W,ignoreFetchAbort:Y}=e;if(s!==0&&!ce(s))throw new TypeError("max option must be a nonnegative integer");const Ae=s?zr(s):Array;if(!Ae)throw new Error("invalid max value: "+s);if(f(this,le,s),f(this,se,Q),this.maxEntrySize=ne||t(this,se),this.sizeCalculation=A,this.sizeCalculation){if(!t(this,se)&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if(typeof this.sizeCalculation!="function")throw new TypeError("sizeCalculation set to non-function")}if(L!==void 0&&typeof L!="function")throw new TypeError("fetchMethod must be a function if specified");if(f(this,ar,L),f(this,Ue,!!L),f(this,H,new Map),f(this,D,new Array(s).fill(void 0)),f(this,G,new Array(s).fill(void 0)),f(this,Z,new Ae(s)),f(this,te,new Ae(s)),f(this,J,0),f(this,B,0),f(this,de,Ar.create(s)),f(this,x,0),f(this,ue,0),typeof R=="function"&&f(this,Te,R),typeof j=="function"?(f(this,pe,j),f(this,N,[])):(f(this,pe,void 0),f(this,N,void 0)),f(this,Ee,!!t(this,Te)),f(this,ee,!!t(this,pe)),this.noDisposeOnSet=!!S,this.noUpdateTTL=!!M,this.noDeleteOnFetchRejection=!!O,this.allowStaleOnFetchRejection=!!K,this.allowStaleOnFetchAbort=!!W,this.ignoreFetchAbort=!!Y,this.maxEntrySize!==0){if(t(this,se)!==0&&!ce(t(this,se)))throw new TypeError("maxSize must be a positive integer if specified");if(!ce(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");w(this,Sr,Nr).call(this)}if(this.allowStale=!!T,this.noDeleteOnStaleGet=!!q,this.updateAgeOnGet=!!p,this.updateAgeOnHas=!!E,this.ttlResolution=ce(n)||n===0?n:1,this.ttlAutopurge=!!a,this.ttl=o||0,this.ttl){if(!ce(this.ttl))throw new TypeError("ttl must be a positive integer if specified");w(this,Tr,jr).call(this)}if(t(this,le)===0&&this.ttl===0&&t(this,se)===0)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!t(this,le)&&!t(this,se)){const _e="LRU_CACHE_UNBOUNDED";V(_e)&&(h.add(_e),k("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",_e,Cr))}}static unsafeExposeInternals(e){return{starts:t(e,ke),ttls:t(e,ge),sizes:t(e,Ge),keyMap:t(e,H),keyList:t(e,D),valList:t(e,G),next:t(e,Z),prev:t(e,te),get head(){return t(e,J)},get tail(){return t(e,B)},free:t(e,de),isBackgroundFetch:s=>{var o;return w(o=e,U,C).call(o,s)},backgroundFetch:(s,o,n,a)=>{var p;return w(p=e,pr,Ur).call(p,s,o,n,a)},moveToTail:s=>{var o;return w(o=e,Be,br).call(o,s)},indexes:s=>{var o;return w(o=e,we,De).call(o,s)},rindexes:s=>{var o;return w(o=e,fe,Ce).call(o,s)},isStale:s=>{var o;return t(o=e,oe).call(o,s)}}}get max(){return t(this,le)}get maxSize(){return t(this,se)}get calculatedSize(){return t(this,ue)}get size(){return t(this,x)}get fetchMethod(){return t(this,ar)}get dispose(){return t(this,Te)}get disposeAfter(){return t(this,pe)}getRemainingTTL(e){return t(this,H).has(e)?1/0:0}*entries(){for(const e of w(this,we,De).call(this))t(this,G)[e]!==void 0&&t(this,D)[e]!==void 0&&!w(this,U,C).call(this,t(this,G)[e])&&(yield[t(this,D)[e],t(this,G)[e]])}*rentries(){for(const e of w(this,fe,Ce).call(this))t(this,G)[e]!==void 0&&t(this,D)[e]!==void 0&&!w(this,U,C).call(this,t(this,G)[e])&&(yield[t(this,D)[e],t(this,G)[e]])}*keys(){for(const e of w(this,we,De).call(this)){const s=t(this,D)[e];s!==void 0&&!w(this,U,C).call(this,t(this,G)[e])&&(yield s)}}*rkeys(){for(const e of w(this,fe,Ce).call(this)){const s=t(this,D)[e];s!==void 0&&!w(this,U,C).call(this,t(this,G)[e])&&(yield s)}}*values(){for(const e of w(this,we,De).call(this))t(this,G)[e]!==void 0&&!w(this,U,C).call(this,t(this,G)[e])&&(yield t(this,G)[e])}*rvalues(){for(const e of w(this,fe,Ce).call(this))t(this,G)[e]!==void 0&&!w(this,U,C).call(this,t(this,G)[e])&&(yield t(this,G)[e])}[Symbol.iterator](){return this.entries()}find(e,s={}){for(const o of w(this,we,De).call(this)){const n=t(this,G)[o],a=w(this,U,C).call(this,n)?n.__staleWhileFetching:n;if(a!==void 0&&e(a,t(this,D)[o],this))return this.get(t(this,D)[o],s)}}forEach(e,s=this){for(const o of w(this,we,De).call(this)){const n=t(this,G)[o],a=w(this,U,C).call(this,n)?n.__staleWhileFetching:n;a!==void 0&&e.call(s,a,t(this,D)[o],this)}}rforEach(e,s=this){for(const o of w(this,fe,Ce).call(this)){const n=t(this,G)[o],a=w(this,U,C).call(this,n)?n.__staleWhileFetching:n;a!==void 0&&e.call(s,a,t(this,D)[o],this)}}purgeStale(){let e=!1;for(const s of w(this,fe,Ce).call(this,{allowStale:!0}))t(this,oe).call(this,s)&&(this.delete(t(this,D)[s]),e=!0);return e}dump(){const e=[];for(const s of w(this,we,De).call(this,{allowStale:!0})){const o=t(this,D)[s],n=t(this,G)[s],a=w(this,U,C).call(this,n)?n.__staleWhileFetching:n;if(a===void 0||o===void 0)continue;const p={value:a};if(t(this,ge)&&t(this,ke)){p.ttl=t(this,ge)[s];const E=d.now()-t(this,ke)[s];p.start=Math.floor(Date.now()-E)}t(this,Ge)&&(p.size=t(this,Ge)[s]),e.unshift([o,p])}return e}load(e){this.clear();for(const[s,o]of e){if(o.start){const n=Date.now()-o.start;o.start=d.now()-n}this.set(s,o.value,o)}}set(e,s,o={}){var M,Q,ne;if(s===void 0)return this.delete(e),this;const{ttl:n=this.ttl,start:a,noDisposeOnSet:p=this.noDisposeOnSet,sizeCalculation:E=this.sizeCalculation,status:T}=o;let{noUpdateTTL:R=this.noUpdateTTL}=o;const j=t(this,wr).call(this,e,s,o.size||0,E);if(this.maxEntrySize&&j>this.maxEntrySize)return T&&(T.set="miss",T.maxEntrySizeExceeded=!0),this.delete(e),this;let S=t(this,x)===0?void 0:t(this,H).get(e);if(S===void 0)S=t(this,x)===0?t(this,B):t(this,de).length!==0?t(this,de).pop():t(this,x)===t(this,le)?w(this,lr,Fr).call(this,!1):t(this,x),t(this,D)[S]=e,t(this,G)[S]=s,t(this,H).set(e,S),t(this,Z)[t(this,B)]=S,t(this,te)[S]=t(this,B),f(this,B,S),Rr(this,x)._++,t(this,cr).call(this,S,j,T),T&&(T.set="add"),R=!1;else{w(this,Be,br).call(this,S);const A=t(this,G)[S];if(s!==A){if(t(this,Ue)&&w(this,U,C).call(this,A)?A.__abortController.abort(new Error("replaced")):p||(t(this,Ee)&&((M=t(this,Te))==null||M.call(this,A,e,"set")),t(this,ee)&&((Q=t(this,N))==null||Q.push([A,e,"set"]))),t(this,He).call(this,S),t(this,cr).call(this,S,j,T),t(this,G)[S]=s,T){T.set="replace";const L=A&&w(this,U,C).call(this,A)?A.__staleWhileFetching:A;L!==void 0&&(T.oldValue=L)}}else T&&(T.set="update")}if(n!==0&&!t(this,ge)&&w(this,Tr,jr).call(this),t(this,ge)&&(R||t(this,Er).call(this,S,n,a),T&&t(this,ye).call(this,T,S)),!p&&t(this,ee)&&t(this,N)){const A=t(this,N);let L;for(;L=A==null?void 0:A.shift();)(ne=t(this,pe))==null||ne.call(this,...L)}return this}pop(){var e;try{for(;t(this,x);){const s=t(this,G)[t(this,J)];if(w(this,lr,Fr).call(this,!0),w(this,U,C).call(this,s)){if(s.__staleWhileFetching)return s.__staleWhileFetching}else if(s!==void 0)return s}}finally{if(t(this,ee)&&t(this,N)){const s=t(this,N);let o;for(;o=s==null?void 0:s.shift();)(e=t(this,pe))==null||e.call(this,...o)}}}has(e,s={}){const{updateAgeOnHas:o=this.updateAgeOnHas,status:n}=s,a=t(this,H).get(e);if(a!==void 0){const p=t(this,G)[a];if(w(this,U,C).call(this,p)&&p.__staleWhileFetching===void 0)return!1;if(t(this,oe).call(this,a))n&&(n.has="stale",t(this,ye).call(this,n,a));else return o&&t(this,xe).call(this,a),n&&(n.has="hit",t(this,ye).call(this,n,a)),!0}else n&&(n.has="miss");return!1}peek(e,s={}){const{allowStale:o=this.allowStale}=s,n=t(this,H).get(e);if(n!==void 0&&(o||!t(this,oe).call(this,n))){const a=t(this,G)[n];return w(this,U,C).call(this,a)?a.__staleWhileFetching:a}}async fetch(e,s={}){const{allowStale:o=this.allowStale,updateAgeOnGet:n=this.updateAgeOnGet,noDeleteOnStaleGet:a=this.noDeleteOnStaleGet,ttl:p=this.ttl,noDisposeOnSet:E=this.noDisposeOnSet,size:T=0,sizeCalculation:R=this.sizeCalculation,noUpdateTTL:j=this.noUpdateTTL,noDeleteOnFetchRejection:S=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:M=this.allowStaleOnFetchRejection,ignoreFetchAbort:Q=this.ignoreFetchAbort,allowStaleOnFetchAbort:ne=this.allowStaleOnFetchAbort,context:A,forceRefresh:L=!1,status:O,signal:q}=s;if(!t(this,Ue))return O&&(O.fetch="get"),this.get(e,{allowStale:o,updateAgeOnGet:n,noDeleteOnStaleGet:a,status:O});const K={allowStale:o,updateAgeOnGet:n,noDeleteOnStaleGet:a,ttl:p,noDisposeOnSet:E,size:T,sizeCalculation:R,noUpdateTTL:j,noDeleteOnFetchRejection:S,allowStaleOnFetchRejection:M,allowStaleOnFetchAbort:ne,ignoreFetchAbort:Q,status:O,signal:q};let W=t(this,H).get(e);if(W===void 0){O&&(O.fetch="miss");const Y=w(this,pr,Ur).call(this,e,W,K,A);return Y.__returned=Y}else{const Y=t(this,G)[W];if(w(this,U,C).call(this,Y)){const Or=o&&Y.__staleWhileFetching!==void 0;return O&&(O.fetch="inflight",Or&&(O.returnedStale=!0)),Or?Y.__staleWhileFetching:Y.__returned=Y}const Ae=t(this,oe).call(this,W);if(!L&&!Ae)return O&&(O.fetch="hit"),w(this,Be,br).call(this,W),n&&t(this,xe).call(this,W),O&&t(this,ye).call(this,O,W),Y;const _e=w(this,pr,Ur).call(this,e,W,K,A),Pr=_e.__staleWhileFetching!==void 0&&o;return O&&(O.fetch=Ae?"stale":"refresh",Pr&&Ae&&(O.returnedStale=!0)),Pr?_e.__staleWhileFetching:_e.__returned=_e}}get(e,s={}){const{allowStale:o=this.allowStale,updateAgeOnGet:n=this.updateAgeOnGet,noDeleteOnStaleGet:a=this.noDeleteOnStaleGet,status:p}=s,E=t(this,H).get(e);if(E!==void 0){const T=t(this,G)[E],R=w(this,U,C).call(this,T);return p&&t(this,ye).call(this,p,E),t(this,oe).call(this,E)?(p&&(p.get="stale"),R?(p&&o&&T.__staleWhileFetching!==void 0&&(p.returnedStale=!0),o?T.__staleWhileFetching:void 0):(a||this.delete(e),p&&o&&(p.returnedStale=!0),o?T:void 0)):(p&&(p.get="hit"),R?T.__staleWhileFetching:(w(this,Be,br).call(this,E),n&&t(this,xe).call(this,E),T))}else p&&(p.get="miss")}delete(e){var o,n,a,p;let s=!1;if(t(this,x)!==0){const E=t(this,H).get(e);if(E!==void 0)if(s=!0,t(this,x)===1)this.clear();else{t(this,He).call(this,E);const T=t(this,G)[E];w(this,U,C).call(this,T)?T.__abortController.abort(new Error("deleted")):(t(this,Ee)||t(this,ee))&&(t(this,Ee)&&((o=t(this,Te))==null||o.call(this,T,e,"delete")),t(this,ee)&&((n=t(this,N))==null||n.push([T,e,"delete"]))),t(this,H).delete(e),t(this,D)[E]=void 0,t(this,G)[E]=void 0,E===t(this,B)?f(this,B,t(this,te)[E]):E===t(this,J)?f(this,J,t(this,Z)[E]):(t(this,Z)[t(this,te)[E]]=t(this,Z)[E],t(this,te)[t(this,Z)[E]]=t(this,te)[E]),Rr(this,x)._--,t(this,de).push(E)}}if(t(this,ee)&&((a=t(this,N))!=null&&a.length)){const E=t(this,N);let T;for(;T=E==null?void 0:E.shift();)(p=t(this,pe))==null||p.call(this,...T)}return s}clear(){var e,s,o;for(const n of w(this,fe,Ce).call(this,{allowStale:!0})){const a=t(this,G)[n];if(w(this,U,C).call(this,a))a.__abortController.abort(new Error("deleted"));else{const p=t(this,D)[n];t(this,Ee)&&((e=t(this,Te))==null||e.call(this,a,p,"delete")),t(this,ee)&&((s=t(this,N))==null||s.push([a,p,"delete"]))}}if(t(this,H).clear(),t(this,G).fill(void 0),t(this,D).fill(void 0),t(this,ge)&&t(this,ke)&&(t(this,ge).fill(0),t(this,ke).fill(0)),t(this,Ge)&&t(this,Ge).fill(0),f(this,J,0),f(this,B,0),t(this,de).length=0,f(this,ue,0),f(this,x,0),t(this,ee)&&t(this,N)){const n=t(this,N);let a;for(;a=n==null?void 0:n.shift();)(o=t(this,pe))==null||o.call(this,...a)}}};let Dr=Cr;le=new WeakMap,se=new WeakMap,Te=new WeakMap,pe=new WeakMap,ar=new WeakMap,x=new WeakMap,ue=new WeakMap,H=new WeakMap,D=new WeakMap,G=new WeakMap,Z=new WeakMap,te=new WeakMap,J=new WeakMap,B=new WeakMap,de=new WeakMap,N=new WeakMap,Ge=new WeakMap,ke=new WeakMap,ge=new WeakMap,Ee=new WeakMap,Ue=new WeakMap,ee=new WeakMap,Tr=new WeakSet,jr=function(){const e=new yr(t(this,le)),s=new yr(t(this,le));f(this,ge,e),f(this,ke,s),f(this,Er,(a,p,E=d.now())=>{if(s[a]=p!==0?E:0,e[a]=p,p!==0&&this.ttlAutopurge){const T=setTimeout(()=>{t(this,oe).call(this,a)&&this.delete(t(this,D)[a])},p+1);T.unref&&T.unref()}}),f(this,xe,a=>{s[a]=e[a]!==0?d.now():0}),f(this,ye,(a,p)=>{if(e[p]){const E=e[p],T=s[p];a.ttl=E,a.start=T,a.now=o||n();const R=a.now-T;a.remainingTTL=E-R}});let o=0;const n=()=>{const a=d.now();if(this.ttlResolution>0){o=a;const p=setTimeout(()=>o=0,this.ttlResolution);p.unref&&p.unref()}return a};this.getRemainingTTL=a=>{const p=t(this,H).get(a);if(p===void 0)return 0;const E=e[p],T=s[p];if(E===0||T===0)return 1/0;const R=(o||n())-T;return E-R},f(this,oe,a=>e[a]!==0&&s[a]!==0&&(o||n())-s[a]>e[a])},xe=new WeakMap,ye=new WeakMap,Er=new WeakMap,oe=new WeakMap,Sr=new WeakSet,Nr=function(){const e=new yr(t(this,le));f(this,ue,0),f(this,Ge,e),f(this,He,s=>{f(this,ue,t(this,ue)-e[s]),e[s]=0}),f(this,wr,(s,o,n,a)=>{if(w(this,U,C).call(this,o))return 0;if(!ce(n))if(a){if(typeof a!="function")throw new TypeError("sizeCalculation must be a function");if(n=a(o,s),!ce(n))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");return n}),f(this,cr,(s,o,n)=>{if(e[s]=o,t(this,se)){const a=t(this,se)-e[s];for(;t(this,ue)>a;)w(this,lr,Fr).call(this,!0)}f(this,ue,t(this,ue)+e[s]),n&&(n.entrySize=o,n.totalCalculatedSize=t(this,ue))})},He=new WeakMap,cr=new WeakMap,wr=new WeakMap,we=new WeakSet,De=function*({allowStale:e=this.allowStale}={}){if(t(this,x))for(let s=t(this,B);!(!w(this,fr,qr).call(this,s)||((e||!t(this,oe).call(this,s))&&(yield s),s===t(this,J)));)s=t(this,te)[s]},fe=new WeakSet,Ce=function*({allowStale:e=this.allowStale}={}){if(t(this,x))for(let s=t(this,J);!(!w(this,fr,qr).call(this,s)||((e||!t(this,oe).call(this,s))&&(yield s),s===t(this,B)));)s=t(this,Z)[s]},fr=new WeakSet,qr=function(e){return e!==void 0&&t(this,H).get(t(this,D)[e])===e},lr=new WeakSet,Fr=function(e){var a,p;const s=t(this,J),o=t(this,D)[s],n=t(this,G)[s];return t(this,Ue)&&w(this,U,C).call(this,n)?n.__abortController.abort(new Error("evicted")):(t(this,Ee)||t(this,ee))&&(t(this,Ee)&&((a=t(this,Te))==null||a.call(this,n,o,"evict")),t(this,ee)&&((p=t(this,N))==null||p.push([n,o,"evict"]))),t(this,He).call(this,s),e&&(t(this,D)[s]=void 0,t(this,G)[s]=void 0,t(this,de).push(s)),t(this,x)===1?(f(this,J,f(this,B,0)),t(this,de).length=0):f(this,J,t(this,Z)[s]),t(this,H).delete(o),Rr(this,x)._--,s},pr=new WeakSet,Ur=function(e,s,o,n){const a=s===void 0?void 0:t(this,G)[s];if(w(this,U,C).call(this,a))return a;const p=new v,{signal:E}=o;E==null||E.addEventListener("abort",()=>p.abort(E.reason),{signal:p.signal});const T={signal:p.signal,options:o,context:n},R=(A,L=!1)=>{const{aborted:O}=p.signal,q=o.ignoreFetchAbort&&A!==void 0;if(o.status&&(O&&!L?(o.status.fetchAborted=!0,o.status.fetchError=p.signal.reason,q&&(o.status.fetchAbortIgnored=!0)):o.status.fetchResolved=!0),O&&!q&&!L)return S(p.signal.reason);const K=Q;return t(this,G)[s]===Q&&(A===void 0?K.__staleWhileFetching?t(this,G)[s]=K.__staleWhileFetching:this.delete(e):(o.status&&(o.status.fetchUpdated=!0),this.set(e,A,T.options))),A},j=A=>(o.status&&(o.status.fetchRejected=!0,o.status.fetchError=A),S(A)),S=A=>{const{aborted:L}=p.signal,O=L&&o.allowStaleOnFetchAbort,q=O||o.allowStaleOnFetchRejection,K=q||o.noDeleteOnFetchRejection,W=Q;if(t(this,G)[s]===Q&&(!K||W.__staleWhileFetching===void 0?this.delete(e):O||(t(this,G)[s]=W.__staleWhileFetching)),q)return o.status&&W.__staleWhileFetching!==void 0&&(o.status.returnedStale=!0),W.__staleWhileFetching;if(W.__returned===W)throw A},M=(A,L)=>{var q;const O=(q=t(this,ar))==null?void 0:q.call(this,e,a,T);O&&O instanceof Promise&&O.then(K=>A(K),L),p.signal.addEventListener("abort",()=>{(!o.ignoreFetchAbort||o.allowStaleOnFetchAbort)&&(A(),o.allowStaleOnFetchAbort&&(A=K=>R(K,!0)))})};o.status&&(o.status.fetchDispatched=!0);const Q=new Promise(M).then(R,j),ne=Object.assign(Q,{__abortController:p,__staleWhileFetching:a,__returned:void 0});return s===void 0?(this.set(e,ne,{...T.options,status:void 0}),s=t(this,H).get(e)):t(this,G)[s]=ne,ne},U=new WeakSet,C=function(e){if(!t(this,Ue))return!1;const s=e;return!!s&&s instanceof Promise&&s.hasOwnProperty("__staleWhileFetching")&&s.__abortController instanceof v},_r=new WeakSet,Wr=function(e,s){t(this,te)[s]=e,t(this,Z)[e]=s},Be=new WeakSet,br=function(e){e!==t(this,B)&&(e===t(this,J)?f(this,J,t(this,Z)[e]):w(this,_r,Wr).call(this,t(this,te)[e],t(this,Z)[e]),w(this,_r,Wr).call(this,t(this,B),e),f(this,B,e))};async function vr({appId:r,privateKey:e,timeDifference:s}){try{const o=await(0,c.C)({id:+r,privateKey:e,now:s&&Math.floor(Date.now()/1e3)+s});return{type:"app",token:o.token,appId:o.appId,expiresAt:new Date(o.expiration*1e3).toISOString()}}catch(o){throw e==="-----BEGIN RSA PRIVATE KEY-----"?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):o}}function Mr(){return new Dr({max:15e3,ttl:1e3*60*59})}async function Kr(r,e){const s=$r(e),o=await r.get(s);if(!o)return;const[n,a,p,E,T,R]=o.split("|"),j=e.permissions||T.split(/,/).reduce((S,M)=>(/!$/.test(M)?S[M.slice(0,-1)]="write":S[M]="read",S),{});return{token:n,createdAt:a,expiresAt:p,permissions:j,repositoryIds:e.repositoryIds,repositoryNames:e.repositoryNames,singleFileName:R,repositorySelection:E}}async function Jr(r,e,s){const o=$r(e),n=e.permissions?"":Object.keys(s.permissions).map(p=>`${p}${s.permissions[p]==="write"?"!":""}`).join(","),a=[s.token,s.createdAt,s.expiresAt,s.repositorySelection,n,s.singleFileName].join("|");await r.set(o,a)}function $r({installationId:r,permissions:e={},repositoryIds:s=[],repositoryNames:o=[]}){const n=Object.keys(e).sort().map(E=>e[E]==="read"?E:`${E}!`).join(","),a=s.sort().join(","),p=o.join(",");return[r,a,p,n].filter(Boolean).join("|")}function xr({installationId:r,token:e,createdAt:s,expiresAt:o,repositorySelection:n,permissions:a,repositoryIds:p,repositoryNames:E,singleFileName:T}){return Object.assign({type:"token",tokenType:"installation",token:e,installationId:r,permissions:a,createdAt:s,expiresAt:o,repositorySelection:n},p?{repositoryIds:p}:null,E?{repositoryNames:E}:null,T?{singleFileName:T}:null)}async function Hr(r,e,s){const o=Number(e.installationId||r.installationId);if(!o)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(e.factory){const{type:q,factory:K,oauthApp:W,...Y}={...r,...e};return K(Y)}const n=Object.assign({installationId:o},e);if(!e.refresh){const q=await Kr(r.cache,n);if(q){const{token:K,createdAt:W,expiresAt:Y,permissions:Ae,repositoryIds:_e,repositoryNames:Ir,singleFileName:Pr,repositorySelection:Or}=q;return xr({installationId:o,token:K,createdAt:W,expiresAt:Y,permissions:Ae,repositorySelection:Or,repositoryIds:_e,repositoryNames:Ir,singleFileName:Pr})}}const a=await vr(r),p=s||r.request,{data:{token:E,expires_at:T,repositories:R,permissions:j,repository_selection:S,single_file:M}}=await p("POST /app/installations/{installation_id}/access_tokens",{installation_id:o,repository_ids:e.repositoryIds,repositories:e.repositoryNames,permissions:e.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${a.token}`}}),Q=j||{},ne=S||"all",A=R?R.map(q=>q.id):void 0,L=R?R.map(q=>q.name):void 0,O=new Date().toISOString();return await Jr(r.cache,n,{token:E,createdAt:O,expiresAt:T,repositorySelection:ne,permissions:Q,repositoryIds:A,repositoryNames:L,singleFileName:M}),xr({installationId:o,token:E,createdAt:O,expiresAt:T,repositorySelection:ne,permissions:Q,repositoryIds:A,repositoryNames:L,singleFileName:M})}async function Yr(r,e){switch(e.type){case"app":return vr(r);case"oauth":r.log.warn(new ve.$('[@octokit/auth-app] {type: "oauth"} is deprecated. Use {type: "oauth-app"} instead'));case"oauth-app":return r.oauthApp({type:"oauth-app"});case"installation":return Hr(r,{...e,type:"installation"});case"oauth-user":return r.oauthApp(e);default:throw new Error(`Invalid auth type: ${e.type}`)}}var Xr=["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"];function Zr(r){const s=`^(?:${r.map(o=>o.split("/").map(n=>n.startsWith("{")?"(?:.+?)":n).join("/")).map(o=>`(?:${o})`).join("|")})$`;return new RegExp(s,"i")}var Qr=Zr(Xr);function es(r){return!!r&&Qr.test(r.split("?")[0])}var rs=5*1e3;function ss(r){return!(r.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||r.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}async function ts(r,e,s,o){const n=e.endpoint.merge(s,o),a=n.url;if(/\/login\/oauth\/access_token$/.test(a))return e(n);if(es(a.replace(e.endpoint.DEFAULTS.baseUrl,""))){const{token:T}=await vr(r);n.headers.authorization=`bearer ${T}`;let R;try{R=await e(n)}catch(j){if(ss(j)||typeof j.response.headers.date=="undefined")throw j;const S=Math.floor((Date.parse(j.response.headers.date)-Date.parse(new Date().toString()))/1e3);r.log.warn(j.message),r.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${S} seconds. Retrying request with the difference accounted for.`);const{token:M}=await vr({...r,timeDifference:S});return n.headers.authorization=`bearer ${M}`,e(n)}return R}if(Fe(a)){const T=await r.oauthApp({type:"oauth-app"});return n.headers.authorization=T.headers.authorization,e(n)}const{token:p,createdAt:E}=await Hr(r,{},e);return n.headers.authorization=`token ${p}`,Br(r,e,n,E)}async function Br(r,e,s,o,n=0){const a=+new Date-+new Date(o);try{return await e(s)}catch(p){if(p.status!==401)throw p;if(a>=rs)throw n>0&&(p.message=`After ${n} retries within ${a/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),p;++n;const E=n*1e3;return r.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${n}, wait: ${E/1e3}s)`),await new Promise(T=>setTimeout(T,E)),Br(r,e,s,o,n)}}var os="4.0.13";function ns(r){if(!r.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!Number.isFinite(+r.appId))throw new Error("[@octokit/auth-app] appId option must be a number or numeric string");if(!r.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in r&&!r.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");const e=Object.assign({warn:console.warn.bind(console)},r.log),s=r.request||z.W.defaults({headers:{"user-agent":`octokit-auth-app.js/${os} ${(0,X.i)()}`}}),o=Object.assign({request:s,cache:Mr()},r,r.installationId?{installationId:Number(r.installationId)}:{},{log:e,oauthApp:i({clientType:"github-app",clientId:r.clientId||"",clientSecret:r.clientSecret||"",request:s})});return Object.assign(Yr.bind(null,o),{hook:ts.bind(null,o)})}},85219:(F,P,b)=>{b.d(P,{W:()=>ze});var X=b(66439),z=b(7502);function Ie(l){return l?Object.keys(l).reduce((m,g)=>(m[g.toLowerCase()]=l[g],m),{}):{}}function ie(l,m){const g=Object.assign({},l);return Object.keys(m).forEach(i=>{(0,X.P)(m[i])?i in l?g[i]=ie(l[i],m[i]):Object.assign(g,{[i]:m[i]}):Object.assign(g,{[i]:m[i]})}),g}function ve(l){for(const m in l)l[m]===void 0&&delete l[m];return l}function Le(l,m,g){if(typeof m=="string"){let[c,u]=m.split(" ");g=Object.assign(u?{method:c,url:u}:{url:c},g)}else g=Object.assign({},m);g.headers=Ie(g.headers),ve(g),ve(g.headers);const i=ie(l||{},g);return l&&l.mediaType.previews.length&&(i.mediaType.previews=l.mediaType.previews.filter(c=>!i.mediaType.previews.includes(c)).concat(i.mediaType.previews)),i.mediaType.previews=i.mediaType.previews.map(c=>c.replace(/-preview/,"")),i}function Ve(l,m){const g=/\?/.test(l)?"&":"?",i=Object.keys(m);return i.length===0?l:l+g+i.map(c=>c==="q"?"q="+m.q.split("+").map(encodeURIComponent).join("+"):`${c}=${encodeURIComponent(m[c])}`).join("&")}var ur=/\{[^}]+\}/g;function Ne(l){return l.replace(/^\W+|\W+$/g,"").split(/,/)}function dr(l){const m=l.match(ur);return m?m.map(Ne).reduce((g,i)=>g.concat(i),[]):[]}function je(l,m){return Object.keys(l).filter(g=>!m.includes(g)).reduce((g,i)=>(g[i]=l[i],g),{})}function Me(l){return l.split(/(%[0-9A-Fa-f]{2})/g).map(function(m){return/%[0-9A-Fa-f]/.test(m)||(m=encodeURI(m).replace(/%5B/g,"[").replace(/%5D/g,"]")),m}).join("")}function re(l){return encodeURIComponent(l).replace(/[!'()*]/g,function(m){return"%"+m.charCodeAt(0).toString(16).toUpperCase()})}function Se(l,m,g){return m=l==="+"||l==="#"?Me(m):re(m),g?re(g)+"="+m:m}function he(l){return l!=null}function Pe(l){return l===";"||l==="&"||l==="?"}function gr(l,m,g,i){var c=l[g],u=[];if(he(c)&&c!=="")if(typeof c=="string"||typeof c=="number"||typeof c=="boolean")c=c.toString(),i&&i!=="*"&&(c=c.substring(0,parseInt(i,10))),u.push(Se(m,c,Pe(m)?g:""));else if(i==="*")Array.isArray(c)?c.filter(he).forEach(function(d){u.push(Se(m,d,Pe(m)?g:""))}):Object.keys(c).forEach(function(d){he(c[d])&&u.push(Se(m,c[d],d))});else{const d=[];Array.isArray(c)?c.filter(he).forEach(function(h){d.push(Se(m,h))}):Object.keys(c).forEach(function(h){he(c[h])&&(d.push(re(h)),d.push(Se(m,c[h].toString())))}),Pe(m)?u.push(re(g)+"="+d.join(",")):d.length!==0&&u.push(d.join(","))}else m===";"?he(c)&&u.push(re(g)):c===""&&(m==="&"||m==="?")?u.push(re(g)+"="):c===""&&u.push("");return u}function Ke(l){return{expand:Je.bind(null,l)}}function Je(l,m){var g=["+","#",".","/",";","?","&"];return l.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(i,c,u){if(c){let h="";const _=[];if(g.indexOf(c.charAt(0))!==-1&&(h=c.charAt(0),c=c.substr(1)),c.split(/,/g).forEach(function(k){var v=/([^:\*]*)(?::(\d+)|(\*))?/.exec(k);_.push(gr(m,h,v[1],v[2]||v[3]))}),h&&h!=="+"){var d=",";return h==="?"?d="&":h!=="#"&&(d=h),(_.length!==0?h:"")+_.join(d)}else return _.join(",")}else return Me(u)})}function Ye(l){let m=l.method.toUpperCase(),g=(l.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),i=Object.assign({},l.headers),c,u=je(l,["method","baseUrl","url","headers","request","mediaType"]);const d=dr(g);g=Ke(g).expand(u),/^http/.test(g)||(g=l.baseUrl+g);const h=Object.keys(l).filter(v=>d.includes(v)).concat("baseUrl"),_=je(u,h);if(!/application\/octet-stream/i.test(i.accept)&&(l.mediaType.format&&(i.accept=i.accept.split(/,/).map(v=>v.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${l.mediaType.format}`)).join(",")),l.mediaType.previews.length)){const v=i.accept.match(/[\w-]+(?=-preview)/g)||[];i.accept=v.concat(l.mediaType.previews).map($=>{const V=l.mediaType.format?`.${l.mediaType.format}`:"+json";return`application/vnd.github.${$}-preview${V}`}).join(",")}return["GET","HEAD"].includes(m)?g=Ve(g,_):"data"in _?c=_.data:Object.keys(_).length&&(c=_),!i["content-type"]&&typeof c!="undefined"&&(i["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(m)&&typeof c=="undefined"&&(c=""),Object.assign({method:m,url:g,headers:i},typeof c!="undefined"?{body:c}:null,l.request?{request:l.request}:null)}function Xe(l,m,g){return Ye(Le(l,m,g))}function be(l,m){const g=Le(l,m),i=Xe.bind(null,g);return Object.assign(i,{DEFAULTS:g,defaults:be.bind(null,g),merge:Le.bind(null,g),parse:Ye})}var Gr="7.0.6",Ze=`octokit-endpoint.js/${Gr} ${(0,z.i)()}`,hr={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Ze},mediaType:{format:"",previews:[]}},mr=be(null,hr),Oe=b(34911),Qe=b.n(Oe),Re=b(91346),er=b(29928),rr=b.n(er);const kr=rr()(l=>console.warn(l)),sr=rr()(l=>console.warn(l));class me extends Error{constructor(m,g,i){super(m),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=g;let c;"headers"in i&&typeof i.headers!="undefined"&&(c=i.headers),"response"in i&&(this.response=i.response,c=i.response.headers);const u=Object.assign({},i.request);i.request.headers.authorization&&(u.headers=Object.assign({},i.request.headers,{authorization:i.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),u.url=u.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=u,Object.defineProperty(this,"code",{get(){return kr(new Re.$("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),g}}),Object.defineProperty(this,"headers",{get(){return sr(new Re.$("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),c||{}}})}}var tr="6.2.8";function or(l){return l.arrayBuffer()}function ae(l){const m=l.request&&l.request.log?l.request.log:console;((0,X.P)(l.body)||Array.isArray(l.body))&&(l.body=JSON.stringify(l.body));let g={},i,c;return(l.request&&l.request.fetch||globalThis.fetch||Qe())(l.url,Object.assign({method:l.method,body:l.body,headers:l.headers,redirect:l.redirect,...l.body&&{duplex:"half"}},l.request)).then(async d=>{c=d.url,i=d.status;for(const h of d.headers)g[h[0]]=h[1];if("deprecation"in g){const h=g.link&&g.link.match(/<([^>]+)>; rel="deprecation"/),_=h&&h.pop();m.warn(`[@octokit/request] "${l.method} ${l.url}" is deprecated. It is scheduled to be removed on ${g.sunset}${_?`. See ${_}`:""}`)}if(!(i===204||i===205)){if(l.method==="HEAD"){if(i<400)return;throw new me(d.statusText,i,{response:{url:c,status:i,headers:g,data:void 0},request:l})}if(i===304)throw new me("Not modified",i,{response:{url:c,status:i,headers:g,data:await qe(d)},request:l});if(i>=400){const h=await qe(d);throw new me(Fe(h),i,{response:{url:c,status:i,headers:g,data:h},request:l})}return qe(d)}}).then(d=>({status:i,url:c,headers:g,data:d})).catch(d=>{throw d instanceof me||d.name==="AbortError"?d:new me(d.message,500,{request:l})})}async function qe(l){const m=l.headers.get("content-type");return/application\/json/.test(m)?l.json():!m||/^text\/|charset=utf-8$/.test(m)?l.text():or(l)}function Fe(l){return typeof l=="string"?l:"message"in l?Array.isArray(l.errors)?`${l.message}: ${l.errors.map(JSON.stringify).join(", ")}`:l.message:`Unknown error: ${JSON.stringify(l)}`}function We(l,m){const g=l.defaults(m);return Object.assign(function(c,u){const d=g.merge(c,u);if(!d.request||!d.request.hook)return ae(g.parse(d));const h=(_,k)=>ae(g.parse(g.merge(_,k)));return Object.assign(h,{endpoint:g,defaults:We.bind(null,g)}),d.request.hook(h,d)},{endpoint:g,defaults:We.bind(null,g)})}var ze=We(mr,{headers:{"user-agent":`octokit-request.js/${tr} ${(0,z.i)()}`}})},87195:(F,P,b)=>{b.d(P,{v:()=>g});var X=b(7502),z=b(93222),Ie=b(85219),ie="5.0.6";function ve(i){return`Request failed due to following response errors:
`+i.errors.map(c=>` - ${c.message}`).join(`
`)}var Le=class extends Error{constructor(i,c,u){super(ve(u)),this.request=i,this.headers=c,this.response=u,this.name="GraphqlResponseError",this.errors=u.errors,this.data=u.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Ve=["method","baseUrl","url","headers","request","query","mediaType"],ur=["query","method","url"],Ne=/\/api\/v3\/?$/;function dr(i,c,u){if(u){if(typeof c=="string"&&"query"in u)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const k in u)if(ur.includes(k))return Promise.reject(new Error(`[@octokit/graphql] "${k}" cannot be used as variable name`))}const d=typeof c=="string"?Object.assign({query:c},u):c,h=Object.keys(d).reduce((k,v)=>Ve.includes(v)?(k[v]=d[v],k):(k.variables||(k.variables={}),k.variables[v]=d[v],k),{}),_=d.baseUrl||i.endpoint.DEFAULTS.baseUrl;return Ne.test(_)&&(h.url=_.replace(Ne,"/api/graphql")),i(h).then(k=>{if(k.data.errors){const v={};for(const $ of Object.keys(k.headers))v[$]=k.headers[$];throw new Le(h,v,k.data)}return k.data.data})}function je(i,c){const u=i.defaults(c);return Object.assign((h,_)=>dr(u,h,_),{defaults:je.bind(null,u),endpoint:u.endpoint})}var Me=je(Ie.W,{headers:{"user-agent":`octokit-graphql.js/${ie} ${(0,X.i)()}`},method:"POST",url:"/graphql"});function re(i){return je(i,{method:"POST",url:"/graphql"})}var Se=/^v1\./,he=/^ghs_/,Pe=/^ghu_/;async function gr(i){const c=i.split(/\./).length===3,u=Se.test(i)||he.test(i),d=Pe.test(i);return{type:"token",token:i,tokenType:c?"app":u?"installation":d?"user-to-server":"oauth"}}function Ke(i){return i.split(/\./).length===3?`bearer ${i}`:`token ${i}`}async function Je(i,c,u,d){const h=c.endpoint.merge(u,d);return h.headers.authorization=Ke(i),c(h)}var Ye=function(c){if(!c)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof c!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return c=c.replace(/^(token|bearer) +/i,""),Object.assign(gr.bind(null,c),{hook:Je.bind(null,c)})},Xe="4.2.4",be=class{static defaults(i){return class extends this{constructor(...u){const d=u[0]||{};if(typeof i=="function"){super(i(d));return}super(Object.assign({},i,d,d.userAgent&&i.userAgent?{userAgent:`${d.userAgent} ${i.userAgent}`}:null))}}}static plugin(...i){var c;const u=this.plugins;return c=class extends this{},c.plugins=u.concat(i.filter(h=>!u.includes(h))),c}constructor(i={}){const c=new z.Collection,u={baseUrl:Ie.W.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},i.request,{hook:c.bind(null,"request")}),mediaType:{previews:[],format:""}};if(u.headers["user-agent"]=[i.userAgent,`octokit-core.js/${Xe} ${(0,X.i)()}`].filter(Boolean).join(" "),i.baseUrl&&(u.baseUrl=i.baseUrl),i.previews&&(u.mediaType.previews=i.previews),i.timeZone&&(u.headers["time-zone"]=i.timeZone),this.request=Ie.W.defaults(u),this.graphql=re(this.request).defaults(u),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},i.log),this.hook=c,i.authStrategy){const{authStrategy:h,..._}=i,k=h(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:_},i.auth));c.wrap("request",k.hook),this.auth=k}else if(!i.auth)this.auth=async()=>({type:"unauthenticated"});else{const h=Ye(i.auth);c.wrap("request",h.hook),this.auth=h}this.constructor.plugins.forEach(h=>{Object.assign(this,h(this,i))})}};be.VERSION=Xe,be.plugins=[];const Gr="1.0.4";function Ze(i){i.hook.wrap("request",(c,u)=>{i.log.debug("request",u);const d=Date.now(),h=i.request.endpoint.parse(u),_=h.url.replace(u.baseUrl,"");return c(u).then(k=>(i.log.info(`${h.method} ${_} - ${k.status} in ${Date.now()-d}ms`),k)).catch(k=>{throw i.log.info(`${h.method} ${_} - ${k.status} in ${Date.now()-d}ms`),k})})}Ze.VERSION=Gr;var hr="6.1.2";function mr(i){if(!i.data)return{...i,data:[]};if(!("total_count"in i.data&&!("url"in i.data)))return i;const u=i.data.incomplete_results,d=i.data.repository_selection,h=i.data.total_count;delete i.data.incomplete_results,delete i.data.repository_selection,delete i.data.total_count;const _=Object.keys(i.data)[0],k=i.data[_];return i.data=k,typeof u!="undefined"&&(i.data.incomplete_results=u),typeof d!="undefined"&&(i.data.repository_selection=d),i.data.total_count=h,i}function Oe(i,c,u){const d=typeof c=="function"?c.endpoint(u):i.request.endpoint(c,u),h=typeof c=="function"?c:i.request,_=d.method,k=d.headers;let v=d.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!v)return{done:!0};try{const $=await h({method:_,url:v,headers:k}),V=mr($);return v=((V.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:V}}catch($){if($.status!==409)throw $;return v="",{value:{status:200,headers:{},data:[]}}}}})}}function Qe(i,c,u,d){return typeof u=="function"&&(d=u,u=void 0),Re(i,[],Oe(i,c,u)[Symbol.asyncIterator](),d)}function Re(i,c,u,d){return u.next().then(h=>{if(h.done)return c;let _=!1;function k(){_=!0}return c=c.concat(d?d(h.value,k):h.value.data),_?c:Re(i,c,u,d)})}var er=Object.assign(Qe,{iterator:Oe}),rr=null;function kr(i){return typeof i=="string"?rr.includes(i):!1}function sr(i){return{paginate:Object.assign(Qe.bind(null,i),{iterator:Oe.bind(null,i)})}}sr.VERSION=hr;var me="7.2.3",tr={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],addSelectedRepoToRequiredWorkflow:["PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repositories/{repository_id}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createRequiredWorkflow:["POST /orgs/{org}/actions/required_workflows"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteRequiredWorkflow:["DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoRequiredWorkflow:["GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}"],getRepoRequiredWorkflowUsage:["GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getRequiredWorkflow:["GET /orgs/{org}/actions/required_workflows/{required_workflow_id}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repositories/{repository_id}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoRequiredWorkflows:["GET /repos/{org}/{repo}/actions/required_workflows"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRequiredWorkflowRuns:["GET /repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs"],listRequiredWorkflows:["GET /orgs/{org}/actions/required_workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelectedRepositoriesRequiredWorkflow:["GET /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],removeSelectedRepoFromRequiredWorkflow:["DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedReposToRequiredWorkflow:["PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"],updateRequiredWorkflow:["PATCH /orgs/{org}/actions/required_workflows/{required_workflow_id}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteCodespacesBillingUsers:["DELETE /orgs/{org}/codespaces/billing/selected_users"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setCodespacesBilling:["PUT /orgs/{org}/codespaces/billing"],setCodespacesBillingUsers:["POST /orgs/{org}/codespaces/billing/selected_users"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /organizations/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /organizations/{org}/personal-access-token-requests"],listPatGrants:["GET /organizations/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /organizations/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /organizations/{org}/personal-access-token-requests"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /organizations/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /organizations/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployment"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disableLfsForRepo:["DELETE /repos/{owner}/{repo}/lfs"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enableLfsForRepo:["PUT /repos/{owner}/{repo}/lfs"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},or=tr,ae=new Map;for(const[i,c]of Object.entries(or))for(const[u,d]of Object.entries(c)){const[h,_,k]=d,[v,$]=h.split(/ /),V=Object.assign({method:v,url:$},_);ae.has(i)||ae.set(i,new Map),ae.get(i).set(u,{scope:i,methodName:u,endpointDefaults:V,decorations:k})}var qe={get({octokit:i,scope:c,cache:u},d){if(u[d])return u[d];const{decorations:h,endpointDefaults:_}=ae.get(c).get(d);return h?u[d]=We(i,c,d,_,h):u[d]=i.request.defaults(_),u[d]}};function Fe(i){const c={};for(const u of ae.keys())c[u]=new Proxy({octokit:i,scope:u,cache:{}},qe);return c}function We(i,c,u,d,h){const _=i.request.defaults(d);function k(...v){let $=_.endpoint.merge(...v);if(h.mapToData)return $=Object.assign({},$,{data:$[h.mapToData],[h.mapToData]:void 0}),_($);if(h.renamed){const[V,$e]=h.renamed;i.log.warn(`octokit.${c}.${u}() has been renamed to octokit.${V}.${$e}()`)}if(h.deprecated&&i.log.warn(h.deprecated),h.renamedParameters){const V=_.endpoint.merge(...v);for(const[$e,ce]of Object.entries(h.renamedParameters))$e in V&&(i.log.warn(`"${$e}" parameter is deprecated for "octokit.${c}.${u}()". Use "${ce}" instead`),ce in V||(V[ce]=V[$e]),delete V[$e]);return _(V)}return _(...v)}return Object.assign(k,_)}function ze(i){return{rest:Fe(i)}}ze.VERSION=me;function l(i){const c=Fe(i);return{...c,rest:c}}l.VERSION=me;var m="19.0.13",g=be.plugin(Ze,l,sr).defaults({userAgent:`octokit-rest.js/${m}`})}}]);})();

//# sourceMappingURL=module-octokit.6660c342.js.map