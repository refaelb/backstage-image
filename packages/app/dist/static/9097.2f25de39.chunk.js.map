{"version":3,"file":"static/9097.2f25de39.chunk.js","mappings":"+FAGA,IAAIA,EAAY,UAAY,CAI3B,GAAI,OAAO,MAAS,YAAe,OAAO,KAC1C,GAAI,OAAO,QAAW,YAAe,OAAO,OAC5C,GAAI,OAAOC,GAAW,YAAe,OAAOA,EAC5C,MAAM,IAAI,MAAM,gCAAgC,CACjD,EAEIA,EAASD,EAAU,EAEvBE,EAAO,QAAUC,EAAUF,EAAO,MAG9BA,EAAO,QACVE,EAAA,QAAkBF,EAAO,MAAM,KAAKA,CAAM,GAG3CE,EAAQ,QAAUF,EAAO,QACzBE,EAAQ,QAAUF,EAAO,QACzBE,EAAQ,SAAWF,EAAO,Q","sources":["webpack://app/../../node_modules/@asyncapi/parser/node_modules/node-fetch/browser.js"],"sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nif (global.fetch) {\n\texports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;"],"names":["getGlobal","global","module","exports"],"sourceRoot":""}