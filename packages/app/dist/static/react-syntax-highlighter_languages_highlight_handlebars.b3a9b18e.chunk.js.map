{"version":3,"file":"static/react-syntax-highlighter_languages_highlight_handlebars.b3a9b18e.chunk.js","mappings":"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","sources":["webpack://app/../../node_modules/highlight.js/lib/languages/handlebars.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction anyNumberOfTimes(re) {\n  return concat('(', re, ')*');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: Handlebars\nRequires: xml.js\nAuthor: Robin Ward <robin.ward@gmail.com>\nDescription: Matcher for Handlebars as well as EmberJS additions.\nWebsite: https://handlebarsjs.com\nCategory: template\n*/\n\nfunction handlebars(hljs) {\n  const BUILT_INS = {\n    'builtin-name': [\n      'action',\n      'bindattr',\n      'collection',\n      'component',\n      'concat',\n      'debugger',\n      'each',\n      'each-in',\n      'get',\n      'hash',\n      'if',\n      'in',\n      'input',\n      'link-to',\n      'loc',\n      'log',\n      'lookup',\n      'mut',\n      'outlet',\n      'partial',\n      'query-params',\n      'render',\n      'template',\n      'textarea',\n      'unbound',\n      'unless',\n      'view',\n      'with',\n      'yield'\n    ]\n  };\n\n  const LITERALS = {\n    literal: [\n      'true',\n      'false',\n      'undefined',\n      'null'\n    ]\n  };\n\n  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\n  // like a/b, ./abc/cde, and abc.bcd\n\n  const DOUBLE_QUOTED_ID_REGEX = /\"\"|\"[^\"]+\"/;\n  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\n  const BRACKET_QUOTED_ID_REGEX = /\\[\\]|\\[[^\\]]+\\]/;\n  const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n  const PATH_DELIMITER_REGEX = /(\\.|\\/)/;\n  const ANY_ID = either(\n    DOUBLE_QUOTED_ID_REGEX,\n    SINGLE_QUOTED_ID_REGEX,\n    BRACKET_QUOTED_ID_REGEX,\n    PLAIN_ID_REGEX\n    );\n\n  const IDENTIFIER_REGEX = concat(\n    optional(/\\.|\\.\\/|\\//), // relative or absolute path\n    ANY_ID,\n    anyNumberOfTimes(concat(\n      PATH_DELIMITER_REGEX,\n      ANY_ID\n    ))\n  );\n\n  // identifier followed by a equal-sign (without the equal sign)\n  const HASH_PARAM_REGEX = concat(\n    '(',\n    BRACKET_QUOTED_ID_REGEX, '|',\n    PLAIN_ID_REGEX,\n    ')(?==)'\n  );\n\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\n    begin: IDENTIFIER_REGEX,\n    lexemes: /[\\w.\\/]+/\n  };\n\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: LITERALS\n  });\n\n  const SUB_EXPRESSION = {\n    begin: /\\(/,\n    end: /\\)/\n    // the \"contains\" is added below when all necessary sub-modes are defined\n  };\n\n  const HASH = {\n    // fka \"attribute-assignment\", parameters of the form 'key=value'\n    className: 'attr',\n    begin: HASH_PARAM_REGEX,\n    relevance: 0,\n    starts: {\n      begin: /=/,\n      end: /=/,\n      starts: {\n        contains: [\n          hljs.NUMBER_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          HELPER_PARAMETER,\n          SUB_EXPRESSION\n        ]\n      }\n    }\n  };\n\n  const BLOCK_PARAMS = {\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\n    begin: /as\\s+\\|/,\n    keywords: {\n      keyword: 'as'\n    },\n    end: /\\|/,\n    contains: [\n      {\n        // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n        begin: /\\w+/\n      }\n    ]\n  };\n\n  const HELPER_PARAMETERS = {\n    contains: [\n      hljs.NUMBER_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      BLOCK_PARAMS,\n      HASH,\n      HELPER_PARAMETER,\n      SUB_EXPRESSION\n    ],\n    returnEnd: true\n    // the property \"end\" is defined through inheritance when the mode is used. If depends\n    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n    // end-token of the surrounding mode)\n  };\n\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\)/\n    })\n  });\n\n  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\n\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name',\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name'\n  });\n\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\{\\{/,\n    skip: true\n  };\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\\\(?=\\{\\{)/,\n    skip: true\n  };\n\n  return {\n    name: 'Handlebars',\n    aliases: [\n      'hbs',\n      'html.hbs',\n      'html.handlebars',\n      'htmlbars'\n    ],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\n      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\n      hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/),\n      hljs.COMMENT(/\\{\\{!/, /\\}\\}/),\n      {\n        // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{(?!\\/)/,\n        end: /\\}\\}\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n        starts: {\n          end: /\\{\\{\\{\\{\\//,\n          returnEnd: true,\n          subLanguage: 'xml'\n        }\n      },\n      {\n        // close raw block\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{\\//,\n        end: /\\}\\}\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // open block statement\n        className: 'template-tag',\n        begin: /\\{\\{#/,\n        end: /\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else\\}\\})/,\n        end: /\\}\\}/,\n        keywords: 'else'\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else if)/,\n        end: /\\}\\}/,\n        keywords: 'else if'\n      },\n      {\n        // closing block statement\n        className: 'template-tag',\n        begin: /\\{\\{\\//,\n        end: /\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is NOT html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{\\{/,\n        end: /\\}\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{/,\n        end: /\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      }\n    ]\n  };\n}\n\nmodule.exports = handlebars;\n"],"names":["source","re","anyNumberOfTimes","concat","optional","args","x","either","handlebars","hljs","BUILT_INS","LITERALS","DOUBLE_QUOTED_ID_REGEX","SINGLE_QUOTED_ID_REGEX","BRACKET_QUOTED_ID_REGEX","PLAIN_ID_REGEX","PATH_DELIMITER_REGEX","ANY_ID","IDENTIFIER_REGEX","HASH_PARAM_REGEX","HELPER_NAME_OR_PATH_EXPRESSION","HELPER_PARAMETER","SUB_EXPRESSION","HASH","BLOCK_PARAMS","HELPER_PARAMETERS","SUB_EXPRESSION_CONTENTS","OPENING_BLOCK_MUSTACHE_CONTENTS","CLOSING_BLOCK_MUSTACHE_CONTENTS","BASIC_MUSTACHE_CONTENTS","module"],"sourceRoot":""}