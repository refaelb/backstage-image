type ResponseBodyTypes = Record<string, unknown> | Record<string, unknown>[] | ReadableStream | Blob | string | string[] | number | void;
interface FormattedResponse<T extends ResponseBodyTypes = ResponseBodyTypes> {
    body: T;
    headers: Record<string, string>;
    status: number;
}
interface RequesterType {
    get<T extends ResponseBodyTypes>(endpoint: string, options?: Record<string, unknown>): Promise<FormattedResponse<T>>;
    post<T extends ResponseBodyTypes>(endpoint: string, options?: Record<string, unknown>): Promise<FormattedResponse<T>>;
    put<T extends ResponseBodyTypes>(endpoint: string, options?: Record<string, unknown>): Promise<FormattedResponse<T>>;
    patch<T extends ResponseBodyTypes>(endpoint: string, options?: Record<string, unknown>): Promise<FormattedResponse<T>>;
    delete<T extends ResponseBodyTypes>(endpoint: string, options?: Record<string, unknown>): Promise<FormattedResponse<T>>;
}
interface Constructable<T = any> {
    new (...args: any[]): T;
}
type DefaultResourceOptions = {
    headers: {
        [header: string]: string;
    };
    requestTimeout: number;
    url: string;
    rejectUnauthorized: boolean;
};
type DefaultRequestOptions = {
    body?: FormData | Record<string, unknown>;
    searchParams?: Record<string, unknown>;
    sudo?: string;
    method?: string;
    asStream?: boolean;
};
type RequestOptions = {
    headers: Record<string, string>;
    timeout?: number;
    method: string;
    searchParams?: string;
    prefixUrl: string;
    body?: string | FormData;
    asStream?: boolean;
};
declare function formatQuery(params?: Record<string, unknown>): string;
type OptionsHandlerFn = (serviceOptions: DefaultResourceOptions, requestOptions: DefaultRequestOptions) => Promise<RequestOptions>;
declare function defaultOptionsHandler(resourceOptions: DefaultResourceOptions, { body, searchParams, sudo, asStream, method }?: DefaultRequestOptions): Promise<RequestOptions>;
type RequestHandlerFn<T extends ResponseBodyTypes = ResponseBodyTypes> = (endpoint: string, options?: Record<string, unknown>) => Promise<FormattedResponse<T>>;
declare function createRequesterFn(optionsHandler: OptionsHandlerFn, requestHandler: RequestHandlerFn): (serviceOptions: DefaultResourceOptions) => RequesterType;
declare function presetResourceArguments<T extends Record<string, Constructable>>(resources: T, customConfig?: Record<string, unknown>): T;

interface BaseResourceOptions<C> {
    oauthToken?: string;
    token?: string;
    jobToken?: string;
    host?: string;
    prefixUrl?: string;
    rejectUnauthorized?: boolean;
    camelize?: C;
    requesterFn?: (resourceOptions: DefaultResourceOptions) => RequesterType;
    requestTimeout?: number;
    profileToken?: string;
    sudo?: string | number;
    profileMode?: 'execution' | 'memory';
}
declare class BaseResource<C extends boolean = false> {
    readonly url: string;
    readonly requester: RequesterType;
    readonly requestTimeout: number;
    readonly headers: {
        [header: string]: string;
    };
    readonly camelize: C | undefined;
    readonly rejectUnauthorized: boolean;
    constructor({ token, jobToken, oauthToken, sudo, profileToken, requesterFn, camelize, profileMode, host, prefixUrl, rejectUnauthorized, requestTimeout, }?: BaseResourceOptions<C>);
}

export { BaseResource, BaseResourceOptions, Constructable, DefaultRequestOptions, DefaultResourceOptions, FormattedResponse, OptionsHandlerFn, RequestHandlerFn, RequestOptions, RequesterType, ResponseBodyTypes, createRequesterFn, defaultOptionsHandler, formatQuery, presetResourceArguments };
