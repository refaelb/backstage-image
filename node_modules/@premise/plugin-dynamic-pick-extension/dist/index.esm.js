import { useApi, configApiRef, createPlugin } from '@backstage/core-plugin-api';
import { makeFieldSchemaFromZod, scaffolderPlugin } from '@backstage/plugin-scaffolder';
import { createScaffolderFieldExtension } from '@backstage/plugin-scaffolder-react';
import React, { useState } from 'react';
import { TextField } from '@material-ui/core';
import { z } from 'zod';
import { useAsync } from 'react-use';
import Autocomplete from '@material-ui/lab/Autocomplete';

const DynamicPickExtensionWithOptionsFieldSchema = makeFieldSchemaFromZod(
  z.string(),
  z.object({
    form_data: z.string().describe("Endpoint from form-data plugin to fill the select"),
    external_data: z.string().describe("External endpoint to fill the select. Needs to return a JSON array of strings."),
    no_options_text: z.string().default("No options").describe("Text to show when there are no options available")
  })
);
const DynamicPickExtensionWithOptionsSchema = DynamicPickExtensionWithOptionsFieldSchema.schema;
const DynamicPickExtension = ({
  onChange,
  rawErrors,
  required,
  formData,
  idSchema,
  schema: { title, description },
  uiSchema: { "ui:options": options }
}) => {
  const config = useApi(configApiRef);
  const backendUrl = config.getString("backend.baseUrl");
  const [loading, setLoading] = useState(true);
  const [formDataOptions, setFormDataOptions] = useState([]);
  useAsync(async () => {
    if (options == null ? void 0 : options.external_data) {
      setFormDataOptions(await (await fetch(options == null ? void 0 : options.external_data)).json());
      setLoading(false);
    } else if (options == null ? void 0 : options.form_data) {
      setFormDataOptions(await (await fetch(`${backendUrl}/api/form-data/${options == null ? void 0 : options.form_data}`)).json());
      setLoading(false);
    }
  });
  return /* @__PURE__ */ React.createElement(
    Autocomplete,
    {
      id: idSchema == null ? void 0 : idSchema.$id,
      loading,
      value: formData != null ? formData : null,
      renderInput: (params) => /* @__PURE__ */ React.createElement(
        TextField,
        {
          ...params,
          label: title,
          variant: "standard",
          required,
          error: (rawErrors == null ? void 0 : rawErrors.length) > 0 && !formData,
          helperText: description
        }
      ),
      options: formDataOptions,
      onChange: (_, value) => onChange(value),
      getOptionSelected: (option, value) => option === value,
      noOptionsText: options == null ? void 0 : options.no_options_text,
      disableClearable: true
    }
  );
};

const dynamicPickExtensionPlugin = createPlugin({
  id: "dynamic-pick-extension"
});
const DynamicPickFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension({
    name: "DynamicPickExtension",
    component: DynamicPickExtension,
    schema: DynamicPickExtensionWithOptionsSchema
  })
);

export { DynamicPickFieldExtension, dynamicPickExtensionPlugin };
//# sourceMappingURL=index.esm.js.map
