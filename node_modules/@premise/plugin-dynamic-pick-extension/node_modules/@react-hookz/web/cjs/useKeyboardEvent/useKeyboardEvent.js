"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useKeyboardEvent = void 0;
var react_1 = require("react");
var useSyncedRef_1 = require("../useSyncedRef/useSyncedRef");
var useEventListener_1 = require("../useEventListener/useEventListener");
var const_1 = require("../util/const");
var misc_1 = require("../util/misc");
var createKeyPredicate = function (keyFilter) {
    if (typeof keyFilter === 'function')
        return keyFilter;
    if (typeof keyFilter === 'string')
        return function (ev) { return ev.key === keyFilter; };
    return keyFilter ? misc_1.yieldTrue : misc_1.yieldFalse;
};
var WINDOW_OR_NULL = const_1.isBrowser ? window : null;
/**
 * Invokes a callback when a keyboard event occurs on the chosen target element.
 *
 * @param keyOrPredicate Filters key presses on which `callback` is invoked.
 * @param callback Function to call when a key is pressed and `keyOrPredicate` matches positive.
 * @param deps Dependencies list that is passed to the underlying `useMemo`.
 * @param options Hook options.
 */
function useKeyboardEvent(keyOrPredicate, callback, deps, options) {
    if (options === void 0) { options = {}; }
    var _a = options.event, event = _a === void 0 ? 'keydown' : _a, _b = options.target, target = _b === void 0 ? WINDOW_OR_NULL : _b, eventOptions = options.eventOptions;
    var cbRef = (0, useSyncedRef_1.useSyncedRef)(callback);
    var handler = (0, react_1.useMemo)(function () {
        var predicate = createKeyPredicate(keyOrPredicate);
        return function kbEventHandler(ev) {
            if (predicate(ev)) {
                cbRef.current.call(this, ev);
            }
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, deps);
    (0, useEventListener_1.useEventListener)(target, event, handler, eventOptions);
}
exports.useKeyboardEvent = useKeyboardEvent;
