"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTimeoutEffect = void 0;
var react_1 = require("react");
var useSyncedRef_1 = require("../useSyncedRef/useSyncedRef");
var cancelTimeout = function (id) {
    if (id) {
        clearTimeout(id);
    }
};
/**
 * Like `setTimeout` but in the form of a react hook.
 *
 * @param callback Callback to be called after the timeout. Changing this
 * will not reset the timeout.
 * @param ms Timeout delay in milliseconds. `undefined` disables the timeout.
 * Keep in mind, that changing this parameter will re-set timeout, meaning
 * that it will be set as new after the change.
 */
function useTimeoutEffect(callback, ms) {
    var cbRef = (0, useSyncedRef_1.useSyncedRef)(callback);
    var msRef = (0, useSyncedRef_1.useSyncedRef)(ms);
    var timeoutIdRef = (0, react_1.useRef)(null);
    var cancel = (0, react_1.useCallback)(function () {
        cancelTimeout(timeoutIdRef.current);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var reset = (0, react_1.useCallback)(function () {
        if (msRef.current === undefined)
            return;
        cancel();
        timeoutIdRef.current = setTimeout(function () { return cbRef.current(); }, msRef.current);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    (0, react_1.useEffect)(function () {
        reset();
        return cancel;
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [ms]);
    return [cancel, reset];
}
exports.useTimeoutEffect = useTimeoutEffect;
