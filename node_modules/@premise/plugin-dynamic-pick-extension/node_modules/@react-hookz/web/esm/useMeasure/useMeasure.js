import { useResizeObserver, } from "../useResizeObserver/useResizeObserver.js";
import { useHookableRef } from "../useHookableRef/useHookableRef.js";
import { useRafCallback } from "../useRafCallback/useRafCallback.js";
import { useSafeState } from "../useSafeState/useSafeState.js";
/**
 * Uses ResizeObserver to track element dimensions and re-render component when they change.
 *
 * @param enabled Whether resize observer is enabled or not.
 */
export function useMeasure(enabled) {
    if (enabled === void 0) { enabled = true; }
    var _a = useSafeState(null), element = _a[0], setElement = _a[1];
    var elementRef = useHookableRef(null, function (v) {
        setElement(v);
        return v;
    });
    var _b = useSafeState(), measures = _b[0], setMeasures = _b[1];
    var observerHandler = useRafCallback(function (entry) {
        return setMeasures({ width: entry.contentRect.width, height: entry.contentRect.height });
    })[0];
    useResizeObserver(element, observerHandler, enabled);
    return [measures, elementRef];
}
