import { useEffect, useState } from 'react';
import { isBrowser } from "../util/const.js";
var queriesMap = new Map();
var createQueryEntry = function (query) {
    var mql = matchMedia(query);
    var dispatchers = new Set();
    var listener = function () {
        dispatchers.forEach(function (d) { return d(mql.matches); });
    };
    if (mql.addEventListener)
        mql.addEventListener('change', listener, { passive: true });
    else
        mql.addListener(listener);
    return {
        mql: mql,
        dispatchers: dispatchers,
        listener: listener,
    };
};
var querySubscribe = function (query, setState) {
    var entry = queriesMap.get(query);
    if (!entry) {
        entry = createQueryEntry(query);
        queriesMap.set(query, entry);
    }
    entry.dispatchers.add(setState);
    setState(entry.mql.matches);
};
var queryUnsubscribe = function (query, setState) {
    var entry = queriesMap.get(query);
    // else path is impossible to test in normal situation
    /* istanbul ignore else */
    if (entry) {
        var mql = entry.mql, dispatchers = entry.dispatchers, listener = entry.listener;
        dispatchers.delete(setState);
        if (!dispatchers.size) {
            queriesMap.delete(query);
            if (mql.removeEventListener)
                mql.removeEventListener('change', listener);
            else
                mql.removeListener(listener);
        }
    }
};
/**
 * Tracks the state of CSS media query.
 *
 * @param query CSS media query to track.
 * @param options Hook options:
 * `initializeWithValue` (default: `true`) - Determine media query match state on first render. Setting
 * this to false will make the hook yield `undefined` on first render.
 */
export function useMediaQuery(query, options) {
    if (options === void 0) { options = {}; }
    var _a = options.initializeWithValue, initializeWithValue = _a === void 0 ? true : _a;
    if (!isBrowser) {
        initializeWithValue = false;
    }
    var _b = useState(function () {
        if (initializeWithValue) {
            var entry = queriesMap.get(query);
            if (!entry) {
                entry = createQueryEntry(query);
                queriesMap.set(query, entry);
            }
            return entry.mql.matches;
        }
    }), state = _b[0], setState = _b[1];
    useEffect(function () {
        querySubscribe(query, setState);
        return function () { return queryUnsubscribe(query, setState); };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [query]);
    return state;
}
