"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyProp = applyProp;
exports.deleteIn = deleteIn;
exports.existsIn = existsIn;
exports.getIn = getIn;
exports.insertAt = insertAt;
exports.setIn = setIn;
exports.shallowClone = shallowClone;
exports.transform = transform;
exports.updateIn = updateIn;
var _typeguards = require("./typeguards.js");
var _utils = require("./utils.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Immutability helpers
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * inspiration:
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * https://www.npmjs.com/package/seamless-immutable
                                                                                                                                                                                                                                                                                                                                                                                               * https://www.npmjs.com/package/ih
                                                                                                                                                                                                                                                                                                                                                                                               * https://www.npmjs.com/package/mutatis
                                                                                                                                                                                                                                                                                                                                                                                               * https://github.com/mariocasciaro/object-path-immutable
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * Shallow clone of an Object, Array, or value
 * Symbols are cloned too.
 */
function shallowClone(value) {
  if ((0, _typeguards.isJSONArray)(value)) {
    // copy array items
    var copy = value.slice();

    // copy all symbols
    Object.getOwnPropertySymbols(value).forEach(function (symbol) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      copy[symbol] = value[symbol];
    });
    return copy;
  } else if ((0, _typeguards.isJSONObject)(value)) {
    // copy object properties
    var _copy = _objectSpread({}, value);

    // copy all symbols
    Object.getOwnPropertySymbols(value).forEach(function (symbol) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      _copy[symbol] = value[symbol];
    });
    return _copy;
  } else {
    return value;
  }
}

/**
 * Update a value in an object in an immutable way.
 * If the value is unchanged, the original object will be returned
 */
function applyProp(object, key, value) {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  if (object[key] === value) {
    // return original object unchanged when the new value is identical to the old one
    return object;
  } else {
    var updatedObject = shallowClone(object);
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    updatedObject[key] = value;
    return updatedObject;
  }
}

/**
 * helper function to get a nested property in an object or array
 *
 * @return Returns the field when found, or undefined when the path doesn't exist
 */
function getIn(object, path) {
  var value = object;
  var i = 0;
  while (i < path.length) {
    if ((0, _typeguards.isJSONObject)(value)) {
      value = value[path[i]];
    } else if ((0, _typeguards.isJSONArray)(value)) {
      value = value[parseInt(path[i])];
    } else {
      value = undefined;
    }
    i++;
  }
  return value;
}

/**
 * helper function to replace a nested property in an object with a new value
 * without mutating the object itself.
 *
 * @param object
 * @param path
 * @param value
 * @param [createPath=false]
 *                    If true, `path` will be created when (partly) missing in
 *                    the object. For correctly creating nested Arrays or
 *                    Objects, the function relies on `path` containing number
 *                    in case of array indexes.
 *                    If false (default), an error will be thrown when the
 *                    path doesn't exist.
 * @return Returns a new, updated object or array
 */
function setIn(object, path, value) {
  var createPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (path.length === 0) {
    return value;
  }
  var key = path[0];
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  var updatedValue = setIn(object ? object[key] : undefined, path.slice(1), value, createPath);
  if ((0, _typeguards.isJSONObject)(object) || (0, _typeguards.isJSONArray)(object)) {
    return applyProp(object, key, updatedValue);
  } else {
    if (createPath) {
      var newObject = IS_INTEGER_REGEX.test(key) ? [] : {};
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      newObject[key] = updatedValue;
      return newObject;
    } else {
      throw new Error('Path does not exist');
    }
  }
}
var IS_INTEGER_REGEX = /^\d+$/;

/**
 * helper function to replace a nested property in an object with a new value
 * without mutating the object itself.
 *
 * @return  Returns a new, updated object or array
 */
function updateIn(object, path, callback) {
  if (path.length === 0) {
    return callback(object);
  }
  if (!(0, _utils.isObjectOrArray)(object)) {
    throw new Error('Path doesn\'t exist');
  }
  var key = path[0];
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  var updatedValue = updateIn(object[key], path.slice(1), callback);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  return applyProp(object, key, updatedValue);
}

/**
 * helper function to delete a nested property in an object
 * without mutating the object itself.
 *
 * @return Returns a new, updated object or array
 */
function deleteIn(object, path) {
  if (path.length === 0) {
    return object;
  }
  if (!(0, _utils.isObjectOrArray)(object)) {
    throw new Error('Path does not exist');
  }
  if (path.length === 1) {
    var _key = path[0];
    if (!(_key in object)) {
      // key doesn't exist. return object unchanged
      return object;
    } else {
      var updatedObject = shallowClone(object);
      if ((0, _typeguards.isJSONArray)(updatedObject)) {
        updatedObject.splice(parseInt(_key), 1);
      }
      if ((0, _typeguards.isJSONObject)(updatedObject)) {
        delete updatedObject[_key];
      }
      return updatedObject;
    }
  }
  var key = path[0];
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  var updatedValue = deleteIn(object[key], path.slice(1));
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  return applyProp(object, key, updatedValue);
}

/**
 * Insert a new item in an array at a specific index.
 * Example usage:
 *
 *     insertAt({arr: [1,2,3]}, ['arr', '2'], 'inserted')  // [1,2,'inserted',3]
 */
function insertAt(document, path, value) {
  var parentPath = path.slice(0, path.length - 1);
  var index = path[path.length - 1];
  return updateIn(document, parentPath, function (items) {
    if (!Array.isArray(items)) {
      throw new TypeError('Array expected at path ' + JSON.stringify(parentPath));
    }
    var updatedItems = shallowClone(items);
    updatedItems.splice(parseInt(index), 0, value);
    return updatedItems;
  });
}

/**
 * Transform a JSON object, traverse over the whole object,
 * and allow replacing Objects/Arrays/values.
 */
function transform(document, callback) {
  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var updated1 = callback(document, path);
  if ((0, _typeguards.isJSONArray)(updated1)) {
    // array
    var updated2;
    for (var i = 0; i < updated1.length; i++) {
      var before = updated1[i];
      // we stringify the index here, so the path only contains strings and can be safely
      // stringified/parsed to JSONPointer without loosing information.
      // We do not want to rely on path keys being numeric/string.
      var after = transform(before, callback, path.concat(i + ''));
      if (after !== before) {
        if (!updated2) {
          updated2 = shallowClone(updated1);
        }
        updated2[i] = after;
      }
    }
    return updated2 || updated1;
  } else if ((0, _typeguards.isJSONObject)(updated1)) {
    // object
    var _updated;
    for (var key in updated1) {
      if (Object.hasOwnProperty.call(updated1, key)) {
        var _before = updated1[key];
        var _after = transform(_before, callback, path.concat(key));
        if (_after !== _before) {
          if (!_updated) {
            _updated = shallowClone(updated1);
          }
          _updated[key] = _after;
        }
      }
    }
    return _updated || updated1;
  } else {
    // number, string, boolean, null
    return updated1;
  }
}

/**
 * Test whether a path exists in a JSON object
 * @return Returns true if the path exists, else returns false
 */
function existsIn(document, path) {
  if (document === undefined) {
    return false;
  }
  if (path.length === 0) {
    return true;
  }
  if (document === null) {
    return false;
  }

  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  return existsIn(document[path[0]], path.slice(1));
}
//# sourceMappingURL=immutabilityHelpers.js.map