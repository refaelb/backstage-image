import type { JSONArray, JSONValue, JSONObject, JSONPath } from './types';
/**
 * Shallow clone of an Object, Array, or value
 * Symbols are cloned too.
 */
export declare function shallowClone<T extends JSONValue>(value: T): T;
/**
 * Update a value in an object in an immutable way.
 * If the value is unchanged, the original object will be returned
 */
export declare function applyProp<T extends JSONObject | JSONArray>(object: T, key: string | number, value: JSONValue): T;
/**
 * helper function to get a nested property in an object or array
 *
 * @return Returns the field when found, or undefined when the path doesn't exist
 */
export declare function getIn(object: JSONValue, path: JSONPath): JSONValue | undefined;
/**
 * helper function to replace a nested property in an object with a new value
 * without mutating the object itself.
 *
 * @param object
 * @param path
 * @param value
 * @param [createPath=false]
 *                    If true, `path` will be created when (partly) missing in
 *                    the object. For correctly creating nested Arrays or
 *                    Objects, the function relies on `path` containing number
 *                    in case of array indexes.
 *                    If false (default), an error will be thrown when the
 *                    path doesn't exist.
 * @return Returns a new, updated object or array
 */
export declare function setIn(object: JSONValue, path: JSONPath, value: JSONValue, createPath?: boolean): JSONValue;
/**
 * helper function to replace a nested property in an object with a new value
 * without mutating the object itself.
 *
 * @return  Returns a new, updated object or array
 */
export declare function updateIn(object: JSONValue, path: JSONPath, callback: (value: JSONValue) => JSONValue): JSONValue;
/**
 * helper function to delete a nested property in an object
 * without mutating the object itself.
 *
 * @return Returns a new, updated object or array
 */
export declare function deleteIn<T extends JSONValue>(object: T, path: JSONPath): T;
/**
 * Insert a new item in an array at a specific index.
 * Example usage:
 *
 *     insertAt({arr: [1,2,3]}, ['arr', '2'], 'inserted')  // [1,2,'inserted',3]
 */
export declare function insertAt(document: JSONObject | JSONArray, path: JSONPath, value: JSONValue): JSONValue;
/**
 * Transform a JSON object, traverse over the whole object,
 * and allow replacing Objects/Arrays/values.
 */
export declare function transform(document: JSONValue, callback: (document: JSONValue, path: JSONPath) => JSONValue, path?: JSONPath): JSONValue;
/**
 * Test whether a path exists in a JSON object
 * @return Returns true if the path exists, else returns false
 */
export declare function existsIn(document: JSONValue, path: JSONPath): boolean;
//# sourceMappingURL=immutabilityHelpers.d.ts.map