import { JSONArray, JSONValue, JSONObject, JSONPatchDocument, JSONPatchOperation, JSONPatchOptions, JSONPath, JSONPointer } from './types';
/**
 * Apply a patch to a JSON object
 * The original JSON object will not be changed,
 * instead, the patch is applied in an immutable way
 */
export declare function immutableJSONPatch(document: JSONValue, operations: JSONPatchDocument, options?: JSONPatchOptions): JSONValue;
/**
 * Replace an existing item
 */
export declare function replace(document: JSONValue, path: JSONPath, value: JSONValue): JSONValue;
/**
 * Remove an item or property
 */
export declare function remove<T extends JSONArray | JSONObject>(document: T, path: JSONPath): T;
/**
 * Add an item or property
 */
export declare function add(document: JSONValue, path: JSONPath, value: JSONValue): JSONValue;
/**
 * Copy a value
 */
export declare function copy(document: JSONValue, path: JSONPath, from: JSONPath): JSONValue;
/**
 * Move a value
 */
export declare function move(document: JSONValue, path: JSONPath, from: JSONPath): JSONValue;
/**
 * Test whether the data contains the provided value at the specified path.
 * Throws an error when the test fails
 */
export declare function test(document: JSONValue, path: JSONPath, value: JSONValue): void;
export declare function isArrayItem(document: JSONValue, path: JSONPath): document is JSONArray;
/**
 * Resolve the path index of an array, resolves indexes '-'
 * @returns Returns the resolved path
 */
export declare function resolvePathIndex(document: JSONValue, path: JSONPath): JSONPath;
/**
 * Validate a JSONPatch operation.
 * Throws an error when there is an issue
 */
export declare function validateJSONPatchOperation(operation: JSONPatchOperation): void;
export declare function parsePath(document: JSONValue, pointer: JSONPointer): JSONPath;
export declare function parseFrom(fromPointer: JSONPointer): JSONPath;
//# sourceMappingURL=immutableJSONPatch.d.ts.map