import * as _backstage_plugin_permission_common from '@backstage/plugin-permission-common';
import { PermissionCondition, PermissionCriteria, AllOfCriteria, AnyOfCriteria, NotCriteria, Permission, PermissionRuleParam, PermissionRuleParams } from '@backstage/plugin-permission-common';
import { z } from 'zod';
import { CompoundEntityRef } from '@backstage/catalog-model';

/** @public */
declare const PolicyDefaultName = "Untitled policy";
/** @public */
declare const BackstageUserPlaceholder = ":backstageUser";
/** @public */
type RBACPermissionCondition = Omit<PermissionCondition, 'resourceType'>;
/** @public */
declare const PermissionConditionParser: z.ZodSchema<RBACPermissionCondition>;
/** @public */
declare const ConditionalDecisionParser: z.ZodObject<{
    pluginId: z.ZodString;
    resourceType: z.ZodString;
    conditions: z.ZodType<PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, PermissionCriteria<RBACPermissionCondition>>;
}, "strip", z.ZodTypeAny, {
    pluginId: string;
    conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
    resourceType: string;
}, {
    pluginId: string;
    conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
    resourceType: string;
}>;
/** @public */
declare const LiteralDecisionParser: z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>;
/** @public */
declare const PermissionDecisionParser: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
    pluginId: z.ZodString;
    resourceType: z.ZodString;
    conditions: z.ZodType<PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, PermissionCriteria<RBACPermissionCondition>>;
}, "strip", z.ZodTypeAny, {
    pluginId: string;
    conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
    resourceType: string;
}, {
    pluginId: string;
    conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
    resourceType: string;
}>]>;
/** @public */
declare const PermissionMatchParser: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    resourceType: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    actions?: string[] | undefined;
    resourceType?: string | undefined;
}, {
    name?: string | undefined;
    actions?: string[] | undefined;
    resourceType?: string | undefined;
}>]>;
/** @public */
declare const RolePermissionParser: z.ZodEffects<z.ZodObject<{
    id: z.ZodDefault<z.ZodString>;
    match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        resourceType: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }, {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }>]>;
    decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
        pluginId: z.ZodString;
        resourceType: z.ZodString;
        conditions: z.ZodType<PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, PermissionCriteria<RBACPermissionCondition>>;
    }, "strip", z.ZodTypeAny, {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    }, {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    id: string;
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
}, {
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
    id?: string | undefined;
}>, {
    id: string;
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
}, {
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
    id?: string | undefined;
}>;
/** @public */
declare const RolePermissionsParser: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
    id: z.ZodDefault<z.ZodString>;
    match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        resourceType: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }, {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }>]>;
    decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
        pluginId: z.ZodString;
        resourceType: z.ZodString;
        conditions: z.ZodType<PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, PermissionCriteria<RBACPermissionCondition>>;
    }, "strip", z.ZodTypeAny, {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    }, {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    id: string;
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
}, {
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
    id?: string | undefined;
}>, {
    id: string;
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
}, {
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
    id?: string | undefined;
}>, "many">, {
    id: string;
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
}[], {
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
    id?: string | undefined;
}[]>;
/** @public */
declare const RoleParser: z.ZodObject<{
    name: z.ZodString;
    id: z.ZodDefault<z.ZodString>;
    members: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">]>;
    permissions: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        id: z.ZodDefault<z.ZodString>;
        match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            resourceType: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }, {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }>]>;
        decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
            pluginId: z.ZodString;
            resourceType: z.ZodString;
            conditions: z.ZodType<PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, PermissionCriteria<RBACPermissionCondition>>;
        }, "strip", z.ZodTypeAny, {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        }, {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
    }, {
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        id?: string | undefined;
    }>, {
        id: string;
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
    }, {
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        id?: string | undefined;
    }>, "many">, {
        id: string;
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
    }[], {
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        id?: string | undefined;
    }[]>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    members: (string[] | "*") & (string[] | "*" | undefined);
    permissions: {
        id: string;
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
    }[];
}, {
    name: string;
    members: (string[] | "*") & (string[] | "*" | undefined);
    permissions: {
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        id?: string | undefined;
    }[];
    id?: string | undefined;
}>;
/** @public */
declare const RolesParser: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
    name: z.ZodString;
    id: z.ZodDefault<z.ZodString>;
    members: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">]>;
    permissions: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
        id: z.ZodDefault<z.ZodString>;
        match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            resourceType: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }, {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }>]>;
        decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
            pluginId: z.ZodString;
            resourceType: z.ZodString;
            conditions: z.ZodType<PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, PermissionCriteria<RBACPermissionCondition>>;
        }, "strip", z.ZodTypeAny, {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        }, {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
    }, {
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        id?: string | undefined;
    }>, {
        id: string;
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
    }, {
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        id?: string | undefined;
    }>, "many">, {
        id: string;
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
    }[], {
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        id?: string | undefined;
    }[]>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    members: (string[] | "*") & (string[] | "*" | undefined);
    permissions: {
        id: string;
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
    }[];
}, {
    name: string;
    members: (string[] | "*") & (string[] | "*" | undefined);
    permissions: {
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        id?: string | undefined;
    }[];
    id?: string | undefined;
}>, "many">>, {
    id: string;
    name: string;
    members: (string[] | "*") & (string[] | "*" | undefined);
    permissions: {
        id: string;
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
    }[];
}[], {
    name: string;
    members: (string[] | "*") & (string[] | "*" | undefined);
    permissions: {
        match: ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        }) & ("*" | {
            name?: string | undefined;
            actions?: string[] | undefined;
            resourceType?: string | undefined;
        } | undefined);
        decision: ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        id?: string | undefined;
    }[];
    id?: string | undefined;
}[] | undefined>;
/** @public */
declare const RoleDecisionParser: z.ZodObject<{
    decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
        pluginId: z.ZodString;
        resourceType: z.ZodString;
        conditions: z.ZodType<PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, PermissionCriteria<RBACPermissionCondition>>;
    }, "strip", z.ZodTypeAny, {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    }, {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    }>]>;
    roleId: z.ZodDefault<z.ZodString>;
    rolePermissionId: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
    roleId: string;
    rolePermissionId: string;
}, {
    decision: ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
    roleId?: string | undefined;
    rolePermissionId?: string | undefined;
}>;
/** @public */
declare const PolicyTitleParser: z.ZodDefault<z.ZodString>;
/** @public */
declare const PolicyRoleResolutionStrategyParser: z.ZodUnion<[z.ZodLiteral<"first-match">, z.ZodLiteral<"any-allow">]>;
/** @public */
declare const PolicyConfigOptionsParser: z.ZodDefault<z.ZodObject<{
    resolutionStrategy: z.ZodUnion<[z.ZodLiteral<"first-match">, z.ZodLiteral<"any-allow">]>;
}, "strip", z.ZodTypeAny, {
    resolutionStrategy: "first-match" | "any-allow";
}, {
    resolutionStrategy: "first-match" | "any-allow";
}>>;
/** @public */
declare const PolicyConfigParser: z.ZodObject<{
    name: z.ZodDefault<z.ZodString>;
    options: z.ZodDefault<z.ZodObject<{
        resolutionStrategy: z.ZodUnion<[z.ZodLiteral<"first-match">, z.ZodLiteral<"any-allow">]>;
    }, "strip", z.ZodTypeAny, {
        resolutionStrategy: "first-match" | "any-allow";
    }, {
        resolutionStrategy: "first-match" | "any-allow";
    }>>;
    roles: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        id: z.ZodDefault<z.ZodString>;
        members: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">]>;
        permissions: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
            id: z.ZodDefault<z.ZodString>;
            match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                resourceType: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }, {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }>]>;
            decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
                pluginId: z.ZodString;
                resourceType: z.ZodString;
                conditions: z.ZodType<PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, PermissionCriteria<RBACPermissionCondition>>;
            }, "strip", z.ZodTypeAny, {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            }, {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }, {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }>, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }, {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }>, "many">, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[], {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }, {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }>, "many">>, {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }[], {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }[] | undefined>;
}, "strip", z.ZodTypeAny, {
    name: string;
    options: {
        resolutionStrategy: "first-match" | "any-allow";
    };
    roles: {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }[];
}, {
    name?: string | undefined;
    options?: {
        resolutionStrategy: "first-match" | "any-allow";
    } | undefined;
    roles?: {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }[] | undefined;
}>;
/** @public */
declare const DefaultingPolicyConfigParser: z.ZodDefault<z.ZodObject<{
    name: z.ZodDefault<z.ZodString>;
    options: z.ZodDefault<z.ZodObject<{
        resolutionStrategy: z.ZodUnion<[z.ZodLiteral<"first-match">, z.ZodLiteral<"any-allow">]>;
    }, "strip", z.ZodTypeAny, {
        resolutionStrategy: "first-match" | "any-allow";
    }, {
        resolutionStrategy: "first-match" | "any-allow";
    }>>;
    roles: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        id: z.ZodDefault<z.ZodString>;
        members: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">]>;
        permissions: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
            id: z.ZodDefault<z.ZodString>;
            match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                resourceType: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }, {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }>]>;
            decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
                pluginId: z.ZodString;
                resourceType: z.ZodString;
                conditions: z.ZodType<PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, PermissionCriteria<RBACPermissionCondition>>;
            }, "strip", z.ZodTypeAny, {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            }, {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }, {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }>, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }, {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }>, "many">, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[], {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }, {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }>, "many">>, {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }[], {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }[] | undefined>;
}, "strip", z.ZodTypeAny, {
    name: string;
    options: {
        resolutionStrategy: "first-match" | "any-allow";
    };
    roles: {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }[];
}, {
    name?: string | undefined;
    options?: {
        resolutionStrategy: "first-match" | "any-allow";
    } | undefined;
    roles?: {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }[] | undefined;
}>>;
/** @public */
declare function isConditionalDecision(decision: PermissionDecision): decision is ConditionalDecision;
/** @public */
declare function isAllOfPermissionCriteria(conditions: PermissionCriteria<RBACPermissionCondition>): conditions is AllOfCriteria<RBACPermissionCondition>;
/** @public */
declare function isAnyOfPermissionCriteria(conditions: PermissionCriteria<RBACPermissionCondition>): conditions is AnyOfCriteria<RBACPermissionCondition>;
/** @public */
declare function isNotPermissionCriteria(conditions: PermissionCriteria<RBACPermissionCondition>): conditions is NotCriteria<RBACPermissionCondition>;
/** @public  */
declare const PolicyParser: z.ZodObject<{
    name: z.ZodDefault<z.ZodString>;
    options: z.ZodDefault<z.ZodObject<{
        resolutionStrategy: z.ZodUnion<[z.ZodLiteral<"first-match">, z.ZodLiteral<"any-allow">]>;
    }, "strip", z.ZodTypeAny, {
        resolutionStrategy: "first-match" | "any-allow";
    }, {
        resolutionStrategy: "first-match" | "any-allow";
    }>>;
    roles: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        id: z.ZodDefault<z.ZodString>;
        members: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">]>;
        permissions: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
            id: z.ZodDefault<z.ZodString>;
            match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                resourceType: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }, {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }>]>;
            decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
                pluginId: z.ZodString;
                resourceType: z.ZodString;
                conditions: z.ZodType<PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, PermissionCriteria<RBACPermissionCondition>>;
            }, "strip", z.ZodTypeAny, {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            }, {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }, {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }>, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }, {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }>, "many">, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[], {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }, {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }>, "many">>, {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }[], {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }[] | undefined>;
    id: z.ZodString;
    createdAt: z.ZodString;
    createdBy: z.ZodString;
    updatedAt: z.ZodString;
    updatedBy: z.ZodString;
    description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    lastPublishedAt: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    lastPublishedBy: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    status: z.ZodEnum<["draft", "active", "inactive"]>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    status: "active" | "inactive" | "draft";
    createdBy: string;
    updatedBy: string;
    options: {
        resolutionStrategy: "first-match" | "any-allow";
    };
    roles: {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }[];
    createdAt: string;
    updatedAt: string;
    description?: string | null | undefined;
    lastPublishedAt?: string | null | undefined;
    lastPublishedBy?: string | null | undefined;
}, {
    id: string;
    status: "active" | "inactive" | "draft";
    createdBy: string;
    updatedBy: string;
    createdAt: string;
    updatedAt: string;
    name?: string | undefined;
    options?: {
        resolutionStrategy: "first-match" | "any-allow";
    } | undefined;
    roles?: {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: PermissionCriteria<RBACPermissionCondition> & (PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }[] | undefined;
    description?: string | null | undefined;
    lastPublishedAt?: string | null | undefined;
    lastPublishedBy?: string | null | undefined;
}>;
/** @public */
type Policy = z.infer<typeof PolicyParser>;
/** @public */
type ConditionalDecision = z.infer<typeof ConditionalDecisionParser>;
/** @public */
type LiteralDecision = z.infer<typeof LiteralDecisionParser>;
/** @public */
type PermissionDecision = z.infer<typeof PermissionDecisionParser>;
/** @public */
type PermissionMatch = z.infer<typeof PermissionMatchParser>;
/** @public */
type RolePermission = z.infer<typeof RolePermissionParser>;
/** @public */
type RolePermissions = z.infer<typeof RolePermissionsParser>;
/** @public */
type RawRole = z.input<typeof RoleParser>;
/** @public */
type Role = z.infer<typeof RoleParser>;
/** @public */
type RoleDecision = z.infer<typeof RoleDecisionParser>;
/** @public */
type RawPolicyConfig = z.input<typeof PolicyConfigParser>;
/** @public */
type PolicyConfig = z.infer<typeof PolicyConfigParser>;
/** @public */
type PolicyRoleResolutionStrategy = z.infer<typeof PolicyRoleResolutionStrategyParser>;
/** @public */
type PolicyConfigOptions = z.infer<typeof PolicyConfigOptionsParser>;

/** @public */
declare const CreateDraftRequestParser: z.ZodObject<{
    name: z.ZodDefault<z.ZodString>;
    options: z.ZodDefault<z.ZodObject<{
        resolutionStrategy: z.ZodUnion<[z.ZodLiteral<"first-match">, z.ZodLiteral<"any-allow">]>;
    }, "strip", z.ZodTypeAny, {
        resolutionStrategy: "first-match" | "any-allow";
    }, {
        resolutionStrategy: "first-match" | "any-allow";
    }>>;
    roles: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        id: z.ZodDefault<z.ZodString>;
        members: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">]>;
        permissions: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
            id: z.ZodDefault<z.ZodString>;
            match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                resourceType: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }, {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }>]>;
            decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
                pluginId: z.ZodString;
                resourceType: z.ZodString;
                conditions: z.ZodType<_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>>;
            }, "strip", z.ZodTypeAny, {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            }, {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }, {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }>, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }, {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }>, "many">, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[], {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }, {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }>, "many">>, {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }[], {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }[] | undefined>;
}, "strip", z.ZodTypeAny, {
    name: string;
    options: {
        resolutionStrategy: "first-match" | "any-allow";
    };
    roles: {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }[];
}, {
    name?: string | undefined;
    options?: {
        resolutionStrategy: "first-match" | "any-allow";
    } | undefined;
    roles?: {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }[] | undefined;
}>;
/** @public */
declare const UpdateDraftRequestParser: z.ZodObject<{
    name: z.ZodOptional<z.ZodDefault<z.ZodString>>;
    options: z.ZodOptional<z.ZodDefault<z.ZodObject<{
        resolutionStrategy: z.ZodUnion<[z.ZodLiteral<"first-match">, z.ZodLiteral<"any-allow">]>;
    }, "strip", z.ZodTypeAny, {
        resolutionStrategy: "first-match" | "any-allow";
    }, {
        resolutionStrategy: "first-match" | "any-allow";
    }>>>;
    roles: z.ZodOptional<z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        id: z.ZodDefault<z.ZodString>;
        members: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">]>;
        permissions: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
            id: z.ZodDefault<z.ZodString>;
            match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                resourceType: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }, {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }>]>;
            decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
                pluginId: z.ZodString;
                resourceType: z.ZodString;
                conditions: z.ZodType<_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>>;
            }, "strip", z.ZodTypeAny, {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            }, {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }, {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }>, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }, {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }>, "many">, {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[], {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }, {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }>, "many">>, {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }[], {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }[] | undefined>>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    options?: {
        resolutionStrategy: "first-match" | "any-allow";
    } | undefined;
    roles?: {
        id: string;
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            id: string;
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
        }[];
    }[] | undefined;
}, {
    name?: string | undefined;
    options?: {
        resolutionStrategy: "first-match" | "any-allow";
    } | undefined;
    roles?: {
        name: string;
        members: (string[] | "*") & (string[] | "*" | undefined);
        permissions: {
            match: ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            }) & ("*" | {
                name?: string | undefined;
                actions?: string[] | undefined;
                resourceType?: string | undefined;
            } | undefined);
            decision: ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny") & ("allow" | {
                pluginId: string;
                conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                resourceType: string;
            } | "deny" | undefined);
            id?: string | undefined;
        }[];
        id?: string | undefined;
    }[] | undefined;
}>;
/** @public */
declare const PublishVersionRequestParser: z.ZodObject<{
    description: z.ZodOptional<z.ZodString>;
    update: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodDefault<z.ZodString>>;
        options: z.ZodOptional<z.ZodDefault<z.ZodObject<{
            resolutionStrategy: z.ZodUnion<[z.ZodLiteral<"first-match">, z.ZodLiteral<"any-allow">]>;
        }, "strip", z.ZodTypeAny, {
            resolutionStrategy: "first-match" | "any-allow";
        }, {
            resolutionStrategy: "first-match" | "any-allow";
        }>>>;
        roles: z.ZodOptional<z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            id: z.ZodDefault<z.ZodString>;
            members: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">]>;
            permissions: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
                id: z.ZodDefault<z.ZodString>;
                match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    resourceType: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }, {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }>]>;
                decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
                    pluginId: z.ZodString;
                    resourceType: z.ZodString;
                    conditions: z.ZodType<_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>>;
                }, "strip", z.ZodTypeAny, {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                }, {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }, {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }>, {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }, {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }>, "many">, {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[], {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }, {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }>, "many">>, {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }[], {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }[] | undefined>>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        options?: {
            resolutionStrategy: "first-match" | "any-allow";
        } | undefined;
        roles?: {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }[] | undefined;
    }, {
        name?: string | undefined;
        options?: {
            resolutionStrategy: "first-match" | "any-allow";
        } | undefined;
        roles?: {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    description?: string | undefined;
    update?: {
        name?: string | undefined;
        options?: {
            resolutionStrategy: "first-match" | "any-allow";
        } | undefined;
        roles?: {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }[] | undefined;
    } | undefined;
}, {
    description?: string | undefined;
    update?: {
        name?: string | undefined;
        options?: {
            resolutionStrategy: "first-match" | "any-allow";
        } | undefined;
        roles?: {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }[] | undefined;
    } | undefined;
}>;
/** @public */
declare const TestPolicyDecisionResponseParser: z.ZodObject<{
    decision: z.ZodUnion<[z.ZodObject<{
        result: z.ZodUnion<[z.ZodLiteral<_backstage_plugin_permission_common.AuthorizeResult.ALLOW>, z.ZodLiteral<_backstage_plugin_permission_common.AuthorizeResult.DENY>]>;
    }, "strip", z.ZodTypeAny, {
        result: _backstage_plugin_permission_common.AuthorizeResult.DENY | _backstage_plugin_permission_common.AuthorizeResult.ALLOW;
    }, {
        result: _backstage_plugin_permission_common.AuthorizeResult.DENY | _backstage_plugin_permission_common.AuthorizeResult.ALLOW;
    }>, z.ZodObject<{
        pluginId: z.ZodString;
        resourceType: z.ZodString;
        result: z.ZodLiteral<_backstage_plugin_permission_common.AuthorizeResult.CONDITIONAL>;
        conditions: z.ZodType<_backstage_plugin_permission_common.PermissionCriteria<_backstage_plugin_permission_common.PermissionCondition>, z.ZodTypeDef, _backstage_plugin_permission_common.PermissionCriteria<_backstage_plugin_permission_common.PermissionCondition>>;
    }, "strip", z.ZodTypeAny, {
        pluginId: string;
        result: _backstage_plugin_permission_common.AuthorizeResult.CONDITIONAL;
        conditions: _backstage_plugin_permission_common.PermissionCriteria<_backstage_plugin_permission_common.PermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<_backstage_plugin_permission_common.PermissionCondition> | undefined);
        resourceType: string;
    }, {
        pluginId: string;
        result: _backstage_plugin_permission_common.AuthorizeResult.CONDITIONAL;
        conditions: _backstage_plugin_permission_common.PermissionCriteria<_backstage_plugin_permission_common.PermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<_backstage_plugin_permission_common.PermissionCondition> | undefined);
        resourceType: string;
    }>]>;
    decisionOrigin: z.ZodArray<z.ZodObject<{
        decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
            pluginId: z.ZodString;
            resourceType: z.ZodString;
            conditions: z.ZodType<_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>>;
        }, "strip", z.ZodTypeAny, {
            pluginId: string;
            conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        }, {
            pluginId: string;
            conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        }>]>;
        roleId: z.ZodDefault<z.ZodString>;
        rolePermissionId: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        decision: ("allow" | {
            pluginId: string;
            conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        roleId: string;
        rolePermissionId: string;
    }, {
        decision: ("allow" | {
            pluginId: string;
            conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        roleId?: string | undefined;
        rolePermissionId?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    decision: {
        result: _backstage_plugin_permission_common.AuthorizeResult.DENY | _backstage_plugin_permission_common.AuthorizeResult.ALLOW;
    } | {
        pluginId: string;
        result: _backstage_plugin_permission_common.AuthorizeResult.CONDITIONAL;
        conditions: _backstage_plugin_permission_common.PermissionCriteria<_backstage_plugin_permission_common.PermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<_backstage_plugin_permission_common.PermissionCondition> | undefined);
        resourceType: string;
    };
    decisionOrigin: {
        decision: ("allow" | {
            pluginId: string;
            conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        roleId: string;
        rolePermissionId: string;
    }[];
}, {
    decision: {
        result: _backstage_plugin_permission_common.AuthorizeResult.DENY | _backstage_plugin_permission_common.AuthorizeResult.ALLOW;
    } | {
        pluginId: string;
        result: _backstage_plugin_permission_common.AuthorizeResult.CONDITIONAL;
        conditions: _backstage_plugin_permission_common.PermissionCriteria<_backstage_plugin_permission_common.PermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<_backstage_plugin_permission_common.PermissionCondition> | undefined);
        resourceType: string;
    };
    decisionOrigin: {
        decision: ("allow" | {
            pluginId: string;
            conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny") & ("allow" | {
            pluginId: string;
            conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
            resourceType: string;
        } | "deny" | undefined);
        roleId?: string | undefined;
        rolePermissionId?: string | undefined;
    }[];
}>;
/** @public */
declare const TestPolicyDecisionRequestParser: z.ZodObject<{
    permission: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"basic">;
        name: z.ZodString;
        attributes: z.ZodType<_backstage_plugin_permission_common.PermissionAttributes, z.ZodTypeDef, _backstage_plugin_permission_common.PermissionAttributes>;
    }, "strip", z.ZodTypeAny, {
        attributes: _backstage_plugin_permission_common.PermissionAttributes;
        name: string;
        type: "basic";
    }, {
        attributes: _backstage_plugin_permission_common.PermissionAttributes;
        name: string;
        type: "basic";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        name: z.ZodString;
        attributes: z.ZodType<_backstage_plugin_permission_common.PermissionAttributes, z.ZodTypeDef, _backstage_plugin_permission_common.PermissionAttributes>;
        resourceType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        attributes: _backstage_plugin_permission_common.PermissionAttributes;
        name: string;
        type: "resource";
        resourceType: string;
    }, {
        attributes: _backstage_plugin_permission_common.PermissionAttributes;
        name: string;
        type: "resource";
        resourceType: string;
    }>]>;
    policyConfig: z.ZodObject<{
        name: z.ZodDefault<z.ZodString>;
        options: z.ZodDefault<z.ZodObject<{
            resolutionStrategy: z.ZodUnion<[z.ZodLiteral<"first-match">, z.ZodLiteral<"any-allow">]>;
        }, "strip", z.ZodTypeAny, {
            resolutionStrategy: "first-match" | "any-allow";
        }, {
            resolutionStrategy: "first-match" | "any-allow";
        }>>;
        roles: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            id: z.ZodDefault<z.ZodString>;
            members: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">]>;
            permissions: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
                id: z.ZodDefault<z.ZodString>;
                match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    resourceType: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }, {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }>]>;
                decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
                    pluginId: z.ZodString;
                    resourceType: z.ZodString;
                    conditions: z.ZodType<_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>>;
                }, "strip", z.ZodTypeAny, {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                }, {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }, {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }>, {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }, {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }>, "many">, {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[], {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }, {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }>, "many">>, {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }[], {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }[] | undefined>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        options: {
            resolutionStrategy: "first-match" | "any-allow";
        };
        roles: {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }[];
    }, {
        name?: string | undefined;
        options?: {
            resolutionStrategy: "first-match" | "any-allow";
        } | undefined;
        roles?: {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }[] | undefined;
    }>;
    roleIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    permission: {
        attributes: _backstage_plugin_permission_common.PermissionAttributes;
        name: string;
        type: "basic";
    } | {
        attributes: _backstage_plugin_permission_common.PermissionAttributes;
        name: string;
        type: "resource";
        resourceType: string;
    };
    policyConfig: {
        name: string;
        options: {
            resolutionStrategy: "first-match" | "any-allow";
        };
        roles: {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }[];
    };
    roleIds: string[];
}, {
    permission: {
        attributes: _backstage_plugin_permission_common.PermissionAttributes;
        name: string;
        type: "basic";
    } | {
        attributes: _backstage_plugin_permission_common.PermissionAttributes;
        name: string;
        type: "resource";
        resourceType: string;
    };
    policyConfig: {
        name?: string | undefined;
        options?: {
            resolutionStrategy: "first-match" | "any-allow";
        } | undefined;
        roles?: {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }[] | undefined;
    };
    roleIds: string[];
}>;
/** @public */
type CreateDraftRequest = z.input<typeof CreateDraftRequestParser>;
/** @public */
declare const DraftResponseParser: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
/** @public */
type DraftResponse = z.input<typeof DraftResponseParser>;
/** @public */
type UpdateDraftRequest = z.input<typeof UpdateDraftRequestParser>;
/** @public */
type PublishVersionRequest = z.infer<typeof PublishVersionRequestParser>;
/** @public */
type TestPolicyDecisionResponse = z.infer<typeof TestPolicyDecisionResponseParser>;
/** @public */
type SearchMembersRequest = {
    query: string;
};
/** @public */
declare const AuthorizeResponseParser: z.ZodObject<{
    authorized: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    authorized: boolean;
}, {
    authorized: boolean;
}>;
/** @public */
type AuthorizeResponse = z.infer<typeof AuthorizeResponseParser>;
/** @public */
declare const MemberResponseParser: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<["user", "group", "all", "unknown"]>;
    entityRef: z.ZodString;
}, "strip", z.ZodTypeAny, {
    entityRef: string;
    type: "user" | "unknown" | "all" | "group";
    name?: string | undefined;
}, {
    entityRef: string;
    type: "user" | "unknown" | "all" | "group";
    name?: string | undefined;
}>;
/** @public */
type MemberResponse = z.infer<typeof MemberResponseParser>;
/** @public */
type PolicyMember = {
    policyId: string;
    members: MemberResponse[];
};
/** @public */
declare const SearchMemberResponseParser: z.ZodObject<{
    members: z.ZodArray<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        type: z.ZodEnum<["user", "group", "all", "unknown"]>;
        entityRef: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        entityRef: string;
        type: "user" | "unknown" | "all" | "group";
        name?: string | undefined;
    }, {
        entityRef: string;
        type: "user" | "unknown" | "all" | "group";
        name?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    members: {
        entityRef: string;
        type: "user" | "unknown" | "all" | "group";
        name?: string | undefined;
    }[];
}, {
    members: {
        entityRef: string;
        type: "user" | "unknown" | "all" | "group";
        name?: string | undefined;
    }[];
}>;
/** @public */
type SearchMembersResponse = z.infer<typeof SearchMemberResponseParser>;
/** @public */
type PaginatedResponse<T> = {
    items: T[];
    nextCursor?: string;
    prevCursor?: string;
    totalItems: number;
};
/** @public */
type PoliciesResponse = PaginatedResponse<Policy>;
/** @public */
declare const PolicyResponseParser: z.ZodObject<{
    items: z.ZodArray<z.ZodObject<{
        name: z.ZodDefault<z.ZodString>;
        options: z.ZodDefault<z.ZodObject<{
            resolutionStrategy: z.ZodUnion<[z.ZodLiteral<"first-match">, z.ZodLiteral<"any-allow">]>;
        }, "strip", z.ZodTypeAny, {
            resolutionStrategy: "first-match" | "any-allow";
        }, {
            resolutionStrategy: "first-match" | "any-allow";
        }>>;
        roles: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            id: z.ZodDefault<z.ZodString>;
            members: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, "many">]>;
            permissions: z.ZodEffects<z.ZodArray<z.ZodEffects<z.ZodObject<{
                id: z.ZodDefault<z.ZodString>;
                match: z.ZodUnion<[z.ZodLiteral<"*">, z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    actions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    resourceType: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }, {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }>]>;
                decision: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>, z.ZodObject<{
                    pluginId: z.ZodString;
                    resourceType: z.ZodString;
                    conditions: z.ZodType<_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>, z.ZodTypeDef, _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition>>;
                }, "strip", z.ZodTypeAny, {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                }, {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }, {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }>, {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }, {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }>, "many">, {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[], {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }, {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }>, "many">>, {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }[], {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }[] | undefined>;
        id: z.ZodString;
        createdAt: z.ZodString;
        createdBy: z.ZodString;
        updatedAt: z.ZodString;
        updatedBy: z.ZodString;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        lastPublishedAt: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        lastPublishedBy: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        status: z.ZodEnum<["draft", "active", "inactive"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        status: "active" | "inactive" | "draft";
        createdBy: string;
        updatedBy: string;
        options: {
            resolutionStrategy: "first-match" | "any-allow";
        };
        roles: {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }[];
        createdAt: string;
        updatedAt: string;
        description?: string | null | undefined;
        lastPublishedAt?: string | null | undefined;
        lastPublishedBy?: string | null | undefined;
    }, {
        id: string;
        status: "active" | "inactive" | "draft";
        createdBy: string;
        updatedBy: string;
        createdAt: string;
        updatedAt: string;
        name?: string | undefined;
        options?: {
            resolutionStrategy: "first-match" | "any-allow";
        } | undefined;
        roles?: {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }[] | undefined;
        description?: string | null | undefined;
        lastPublishedAt?: string | null | undefined;
        lastPublishedBy?: string | null | undefined;
    }>, "many">;
    nextCursor: z.ZodOptional<z.ZodString>;
    prevCursor: z.ZodOptional<z.ZodString>;
    totalItems: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    items: {
        id: string;
        name: string;
        status: "active" | "inactive" | "draft";
        createdBy: string;
        updatedBy: string;
        options: {
            resolutionStrategy: "first-match" | "any-allow";
        };
        roles: {
            id: string;
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                id: string;
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
            }[];
        }[];
        createdAt: string;
        updatedAt: string;
        description?: string | null | undefined;
        lastPublishedAt?: string | null | undefined;
        lastPublishedBy?: string | null | undefined;
    }[];
    totalItems: number;
    nextCursor?: string | undefined;
    prevCursor?: string | undefined;
}, {
    items: {
        id: string;
        status: "active" | "inactive" | "draft";
        createdBy: string;
        updatedBy: string;
        createdAt: string;
        updatedAt: string;
        name?: string | undefined;
        options?: {
            resolutionStrategy: "first-match" | "any-allow";
        } | undefined;
        roles?: {
            name: string;
            members: (string[] | "*") & (string[] | "*" | undefined);
            permissions: {
                match: ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                }) & ("*" | {
                    name?: string | undefined;
                    actions?: string[] | undefined;
                    resourceType?: string | undefined;
                } | undefined);
                decision: ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny") & ("allow" | {
                    pluginId: string;
                    conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
                    resourceType: string;
                } | "deny" | undefined);
                id?: string | undefined;
            }[];
            id?: string | undefined;
        }[] | undefined;
        description?: string | null | undefined;
        lastPublishedAt?: string | null | undefined;
        lastPublishedBy?: string | null | undefined;
    }[];
    totalItems: number;
    nextCursor?: string | undefined;
    prevCursor?: string | undefined;
}>;

/** @public */
declare const isMatchingPermission: (permission: Permission, match: PermissionMatch) => boolean;
/** @public */
declare const getMatchingRolePermissions: (role: Role, permission: Permission) => {
    id: string;
    match: ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    }) & ("*" | {
        name?: string | undefined;
        actions?: string[] | undefined;
        resourceType?: string | undefined;
    } | undefined);
    decision: ("allow" | {
        pluginId: string;
        conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny") & ("allow" | {
        pluginId: string;
        conditions: _backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> & (_backstage_plugin_permission_common.PermissionCriteria<RBACPermissionCondition> | undefined);
        resourceType: string;
    } | "deny" | undefined);
}[];
/**
 * Compares a user entity ref to an entry from a list of
 * policy members. The two refs must either match exactly,
 * or the policy member must be a wildcard (i.e. the result
 * of parsing the string "*" as an entityRef).
 *
 * @public
 */
declare const matchesEntityRef: (userClaim: CompoundEntityRef, policyMember: CompoundEntityRef) => boolean;

/** @public */
type MapParamsCallback = (param: PermissionRuleParam) => PermissionRuleParam;
/** @public */
declare function mapParams(params: PermissionRuleParams, cb: MapParamsCallback): PermissionRuleParams;

export { AuthorizeResponse, AuthorizeResponseParser, BackstageUserPlaceholder, ConditionalDecision, ConditionalDecisionParser, CreateDraftRequest, CreateDraftRequestParser, DefaultingPolicyConfigParser, DraftResponse, DraftResponseParser, LiteralDecision, LiteralDecisionParser, MapParamsCallback, MemberResponse, MemberResponseParser, PaginatedResponse, PermissionConditionParser, PermissionDecision, PermissionDecisionParser, PermissionMatch, PermissionMatchParser, PoliciesResponse, Policy, PolicyConfig, PolicyConfigOptions, PolicyConfigOptionsParser, PolicyConfigParser, PolicyDefaultName, PolicyMember, PolicyParser, PolicyResponseParser, PolicyRoleResolutionStrategy, PolicyRoleResolutionStrategyParser, PolicyTitleParser, PublishVersionRequest, PublishVersionRequestParser, RBACPermissionCondition, RawPolicyConfig, RawRole, Role, RoleDecision, RoleDecisionParser, RoleParser, RolePermission, RolePermissionParser, RolePermissions, RolePermissionsParser, RolesParser, SearchMemberResponseParser, SearchMembersRequest, SearchMembersResponse, TestPolicyDecisionRequestParser, TestPolicyDecisionResponse, TestPolicyDecisionResponseParser, UpdateDraftRequest, UpdateDraftRequestParser, getMatchingRolePermissions, isAllOfPermissionCriteria, isAnyOfPermissionCriteria, isConditionalDecision, isMatchingPermission, isNotPermissionCriteria, mapParams, matchesEntityRef };
