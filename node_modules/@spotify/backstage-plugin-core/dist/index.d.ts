import React from 'react';
export { default as invariant } from 'tiny-invariant';
import { FetchApi } from '@backstage/core-plugin-api';
import { LicenseValidationResponse } from '@spotify/backstage-plugin-core-common';

/** @public */
type SpotifyLicenseBannerProps = {
    backend: string;
    invalidLicenseMessage?: string;
    inline?: boolean;
};
/** @public */
declare const SpotifyLicenseBanner: ({ backend, invalidLicenseMessage, inline, }: SpotifyLicenseBannerProps) => React.JSX.Element | null;

/**
 * From https://www.figma.com/file/OWIRK4z6i5DvhXGXC0hSGy/%5BTEST%5D-Backstage-DataViz-2.0?node-id=0%3A1&t=Ekm1VKU8nLClme7D-0
 *
 * Usage guidelines:
 * https://docs.google.com/presentation/d/1Hopb7oxqHzyVuP2BhmCQay0MJMYP_beLDZmtmGVqDLE/
 *
 * @public
 */
declare const DATA_VIZ_LIGHT_THEME: string[];
/**
 * From https://www.figma.com/file/xbks1FKE2DulPy3ZZlJYjE/DataViz?type=design&node-id=607-85144&mode=design&t=boIusYz7LpV4mZeo-0
 *
 * Usage guidelines:
 * https://docs.google.com/presentation/d/1Hopb7oxqHzyVuP2BhmCQay0MJMYP_beLDZmtmGVqDLE/
 *
 * @public
 */
declare const DATA_VIZ_DARK_THEME: string[];

/** @public */
type SpotifyLicenseContext = {
    response: LicenseValidationResponse | undefined;
};
/** @public */
declare function useSpotifyLicense(options: {
    fetchApi: FetchApi;
    backend: string;
}): SpotifyLicenseContext;

/**
 * Converts a supplied timestamp to a string containing
 * that time relative to the current instant.
 *
 * @public
 */
declare function getRelativeTime(timestamp: string): string | null;
/**
 * React hook that provides a relative time string which
 * stays up to date as time passes.
 *
 * @public
 */
declare const useAutoUpdatingRelativeTime: (timestamp: string) => string | null;

export { DATA_VIZ_DARK_THEME, DATA_VIZ_LIGHT_THEME, SpotifyLicenseBanner, SpotifyLicenseBannerProps, SpotifyLicenseContext, getRelativeTime, useAutoUpdatingRelativeTime, useSpotifyLicense };
