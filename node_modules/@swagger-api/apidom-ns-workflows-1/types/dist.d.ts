/// <reference types="@swagger-api/apidom-core/types/minim" />
import * as _swagger_api_apidom_core from '@swagger-api/apidom-core';
import { MediaTypes, NamespacePluginOptions, StringElement, Element, Meta, Attributes, ObjectElement, ArrayElement, NumberElement, MemberElement } from '@swagger-api/apidom-core';
export { isArrayElement, isBooleanElement, isElement, isLinkElement as isLinkPrimitiveElement, isMemberElement, isNullElement, isNumberElement, isObjectElement, isRefElement, isStringElement } from '@swagger-api/apidom-core';
import * as minim from 'minim';
import * as stampit from 'stampit';
import stampit__default from 'stampit';
import { SchemaElement } from '@swagger-api/apidom-ns-openapi-3-1';

type Format = 'generic' | 'json' | 'yaml';
declare class WorkflowsMediaTypes extends MediaTypes<string> {
    filterByFormat(format?: Format): string[];
    findBy(version?: string, format?: Format): string;
    latest(format?: Format): string;
}
declare const mediaTypes: WorkflowsMediaTypes;

declare const workflows1: {
    namespace: (options: NamespacePluginOptions) => minim.Namespace;
};

declare const plugin: () => () => {
    visitor: {
        StringElement(element: StringElement, key: any, parent: any, path: any, ancestors: any[]): any;
    };
};

declare const refract: <T extends Element>(value: unknown, { specPath, plugins, }?: {
    specPath?: string[] | undefined;
    plugins?: never[] | undefined;
}) => T;
declare const createRefractor: (specPath: string[]) => (value: unknown, options?: {}) => Element;

declare const specification: {
    visitors: {
        value: stampit.default.Stamp<any>;
        document: {
            objects: {
                WorkflowsSpecification: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        workflowSpec: stampit.default.Stamp<any>;
                        info: {
                            $ref: string;
                        };
                        sourceDescriptions: stampit.default.Stamp<any>;
                        workflows: stampit.default.Stamp<any>;
                        components: {
                            $ref: string;
                        };
                    };
                };
                Info: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        title: {
                            $ref: string;
                        };
                        summary: {
                            $ref: string;
                        };
                        description: {
                            $ref: string;
                        };
                        version: stampit.default.Stamp<any>;
                    };
                };
                SourceDescription: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        name: {
                            $ref: string;
                        };
                        url: stampit.default.Stamp<any>;
                        type: {
                            $ref: string;
                        };
                    };
                };
                Workflow: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        workflowId: {
                            $ref: string;
                        };
                        summary: {
                            $ref: string;
                        };
                        description: {
                            $ref: string;
                        };
                        inputs: stampit.default.Stamp<any>;
                        steps: stampit.default.Stamp<any>;
                        outputs: stampit.default.Stamp<any>;
                    };
                };
                Step: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        description: {
                            $ref: string;
                        };
                        stepId: {
                            $ref: string;
                        };
                        operationId: {
                            $ref: string;
                        };
                        operationRef: {
                            $ref: string;
                        };
                        workflowId: {
                            $ref: string;
                        };
                        parameters: stampit.default.Stamp<any>;
                        dependsOn: stampit.default.Stamp<any>;
                        successCriteria: stampit.default.Stamp<any>;
                        onSuccess: stampit.default.Stamp<any>;
                        onFailure: stampit.default.Stamp<any>;
                        outputs: stampit.default.Stamp<any>;
                    };
                };
                Parameter: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        name: {
                            $ref: string;
                        };
                        in: {
                            $ref: string;
                        };
                        style: {
                            $ref: string;
                        };
                        target: {
                            $ref: string;
                        };
                        value: {
                            $ref: string;
                        };
                    };
                };
                SuccessAction: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        type: {
                            $ref: string;
                        };
                        workflowId: {
                            $ref: string;
                        };
                        stepId: {
                            $ref: string;
                        };
                        criteria: stampit.default.Stamp<any>;
                    };
                };
                FailureAction: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        type: {
                            $ref: string;
                        };
                        workflowId: {
                            $ref: string;
                        };
                        stepId: {
                            $ref: string;
                        };
                        retryAfter: {
                            $ref: string;
                        };
                        retryLimit: {
                            $ref: string;
                        };
                        criteria: stampit.default.Stamp<any>;
                    };
                };
                Components: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        inputs: stampit.default.Stamp<any>;
                        parameters: stampit.default.Stamp<any>;
                    };
                };
                Criterion: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        context: {
                            $ref: string;
                        };
                        condition: {
                            $ref: string;
                        };
                        type: {
                            $ref: string;
                        };
                    };
                };
                Reference: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        $ref: stampit.default.Stamp<any>;
                        value: {
                            $ref: string;
                        };
                    };
                };
                Schema: {
                    /**
                     * Internally the fixed field visitors are using references to `/document/objects/Schema`.
                     * Schema spec make sure it's pointing to our JSONSchema visitor and basically acts like
                     * an alias for it.
                     */
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: Omit<{
                        $schema: stampit.default.Stamp<any>;
                        $vocabulary: stampit.default.Stamp<any>;
                        $id: stampit.default.Stamp<any>;
                        $anchor: stampit.default.Stamp<any>;
                        $dynamicAnchor: stampit.default.Stamp<any>;
                        $dynamicRef: stampit.default.Stamp<any>;
                        $ref: stampit.default.Stamp<any>;
                        $defs: stampit.default.Stamp<any>;
                        $comment: stampit.default.Stamp<any>;
                        allOf: stampit.default.Stamp<any>;
                        anyOf: stampit.default.Stamp<any>;
                        oneOf: stampit.default.Stamp<any>;
                        not: {
                            $ref: string;
                        };
                        if: {
                            $ref: string;
                        };
                        then: {
                            $ref: string;
                        };
                        else: {
                            $ref: string;
                        };
                        dependentSchemas: stampit.default.Stamp<any>;
                        prefixItems: stampit.default.Stamp<any>;
                        items: {
                            $ref: string;
                        };
                        contains: {
                            $ref: string;
                        };
                        properties: stampit.default.Stamp<any>;
                        patternProperties: stampit.default.Stamp<any>;
                        additionalProperties: {
                            $ref: string;
                        };
                        propertyNames: {
                            $ref: string;
                        };
                        unevaluatedItems: {
                            $ref: string;
                        };
                        unevaluatedProperties: {
                            $ref: string;
                        };
                        type: stampit.default.Stamp<any>;
                        enum: stampit.default.Stamp<any>;
                        const: stampit.default.Stamp<any>;
                        multipleOf: stampit.default.Stamp<any>;
                        maximum: stampit.default.Stamp<any>;
                        exclusiveMaximum: stampit.default.Stamp<any>;
                        minimum: stampit.default.Stamp<any>;
                        exclusiveMinimum: stampit.default.Stamp<any>;
                        maxLength: stampit.default.Stamp<any>;
                        minLength: stampit.default.Stamp<any>;
                        pattern: stampit.default.Stamp<any>;
                        maxItems: stampit.default.Stamp<any>;
                        minItems: stampit.default.Stamp<any>;
                        uniqueItems: stampit.default.Stamp<any>;
                        maxContains: stampit.default.Stamp<any>;
                        minContains: stampit.default.Stamp<any>;
                        maxProperties: stampit.default.Stamp<any>;
                        minProperties: stampit.default.Stamp<any>;
                        required: stampit.default.Stamp<any>;
                        dependentRequired: stampit.default.Stamp<any>;
                        title: stampit.default.Stamp<any>;
                        description: stampit.default.Stamp<any>;
                        default: stampit.default.Stamp<any>;
                        deprecated: stampit.default.Stamp<any>;
                        readOnly: stampit.default.Stamp<any>;
                        writeOnly: stampit.default.Stamp<any>;
                        examples: stampit.default.Stamp<any>;
                        format: stampit.default.Stamp<any>;
                        contentEncoding: stampit.default.Stamp<any>;
                        contentMediaType: stampit.default.Stamp<any>;
                        contentSchema: {
                            $ref: string;
                        };
                        discriminator: {
                            $ref: string;
                        };
                        xml: {
                            $ref: string;
                        };
                        externalDocs: {
                            $ref: string;
                        };
                        example: stampit.default.Stamp<any>;
                    }, "discriminator" | "xml" | "externalDocs" | "example">;
                };
                JSONSchema: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: Omit<{
                        $schema: stampit.default.Stamp<any>;
                        $vocabulary: stampit.default.Stamp<any>;
                        $id: stampit.default.Stamp<any>;
                        $anchor: stampit.default.Stamp<any>;
                        $dynamicAnchor: stampit.default.Stamp<any>;
                        $dynamicRef: stampit.default.Stamp<any>;
                        $ref: stampit.default.Stamp<any>;
                        $defs: stampit.default.Stamp<any>;
                        $comment: stampit.default.Stamp<any>;
                        allOf: stampit.default.Stamp<any>;
                        anyOf: stampit.default.Stamp<any>;
                        oneOf: stampit.default.Stamp<any>;
                        not: {
                            $ref: string;
                        };
                        if: {
                            $ref: string;
                        };
                        then: {
                            $ref: string;
                        };
                        else: {
                            $ref: string;
                        };
                        dependentSchemas: stampit.default.Stamp<any>;
                        prefixItems: stampit.default.Stamp<any>;
                        items: {
                            $ref: string;
                        };
                        contains: {
                            $ref: string;
                        };
                        properties: stampit.default.Stamp<any>;
                        patternProperties: stampit.default.Stamp<any>;
                        additionalProperties: {
                            $ref: string;
                        };
                        propertyNames: {
                            $ref: string;
                        };
                        unevaluatedItems: {
                            $ref: string;
                        };
                        unevaluatedProperties: {
                            $ref: string;
                        };
                        type: stampit.default.Stamp<any>;
                        enum: stampit.default.Stamp<any>;
                        const: stampit.default.Stamp<any>;
                        multipleOf: stampit.default.Stamp<any>;
                        maximum: stampit.default.Stamp<any>;
                        exclusiveMaximum: stampit.default.Stamp<any>;
                        minimum: stampit.default.Stamp<any>;
                        exclusiveMinimum: stampit.default.Stamp<any>;
                        maxLength: stampit.default.Stamp<any>;
                        minLength: stampit.default.Stamp<any>;
                        pattern: stampit.default.Stamp<any>;
                        maxItems: stampit.default.Stamp<any>;
                        minItems: stampit.default.Stamp<any>;
                        uniqueItems: stampit.default.Stamp<any>;
                        maxContains: stampit.default.Stamp<any>;
                        minContains: stampit.default.Stamp<any>;
                        maxProperties: stampit.default.Stamp<any>;
                        minProperties: stampit.default.Stamp<any>;
                        required: stampit.default.Stamp<any>;
                        dependentRequired: stampit.default.Stamp<any>;
                        title: stampit.default.Stamp<any>;
                        description: stampit.default.Stamp<any>;
                        default: stampit.default.Stamp<any>;
                        deprecated: stampit.default.Stamp<any>;
                        readOnly: stampit.default.Stamp<any>;
                        writeOnly: stampit.default.Stamp<any>;
                        examples: stampit.default.Stamp<any>;
                        format: stampit.default.Stamp<any>;
                        contentEncoding: stampit.default.Stamp<any>;
                        contentMediaType: stampit.default.Stamp<any>;
                        contentSchema: {
                            $ref: string;
                        };
                        discriminator: {
                            $ref: string;
                        };
                        xml: {
                            $ref: string;
                        };
                        externalDocs: {
                            $ref: string;
                        };
                        example: stampit.default.Stamp<any>;
                    }, "discriminator" | "xml" | "externalDocs" | "example">;
                };
            };
            extension: {
                $visitor: stampit.default.Stamp<any>;
            };
        };
    };
};

declare class WorkflowsSpec extends StringElement {
    constructor(content?: string, meta?: Meta, attributes?: Attributes);
}

declare class Info extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get title(): StringElement | undefined;
    set title(title: StringElement | undefined);
    get summary(): StringElement | undefined;
    set summary(summary: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get version(): StringElement | undefined;
    set version(version: StringElement | undefined);
}

declare class Components extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get inputs(): ObjectElement | undefined;
    set inputs(inputs: ObjectElement | undefined);
    get parameters(): ObjectElement | undefined;
    set parameters(parameters: ObjectElement | undefined);
}

declare class WorkflowsSpecification1 extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get workflowsSpec(): WorkflowsSpec | undefined;
    set workflowsSpec(workflowsSpec: WorkflowsSpec | undefined);
    get info(): Info | undefined;
    set info(info: Info | undefined);
    get sourceDescriptions(): ArrayElement | undefined;
    set sourceDescriptions(sourceDescriptions: ArrayElement | undefined);
    get workflows(): ArrayElement | undefined;
    set workflows(workflows: ArrayElement | undefined);
    get components(): Components | undefined;
    set components(components: Components | undefined);
}

declare class SourceDescription extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get url(): StringElement | undefined;
    set url(url: StringElement | undefined);
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
}

declare class JSONSchema extends SchemaElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    /**
     * We're redefining the getters/setters here so that the following keywords
     * are not part of the OAS base vocabulary, but rather an arbitrary custom dialect.
     */
    get discriminator(): any;
    set discriminator(discriminator: any);
    get xml(): any;
    set xml(xml: any);
    get externalDocs(): any;
    set externalDocs(externalDocs: any);
    get example(): any;
    set example(example: any);
}

declare class Workflow extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get workflowId(): StringElement | undefined;
    set workflowId(workflowId: StringElement | undefined);
    get summary(): StringElement | undefined;
    set summary(summary: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get inputs(): JSONSchema | undefined;
    set inputs(inputs: JSONSchema | undefined);
    get steps(): ArrayElement | undefined;
    set steps(steps: ArrayElement | undefined);
    get outputs(): ObjectElement | undefined;
    set outputs(outputs: ObjectElement | undefined);
}

declare class Step extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get stepId(): StringElement | undefined;
    set stepId(stepId: StringElement | undefined);
    get operationId(): StringElement | undefined;
    set operationId(operationId: StringElement | undefined);
    get operationRef(): StringElement | undefined;
    set operationRef(operationRef: StringElement | undefined);
    get workflowId(): StringElement | undefined;
    set workflowId(workflowId: StringElement | undefined);
    get parameters(): ArrayElement | undefined;
    set parameters(parameters: ArrayElement | undefined);
    get dependsOn(): ArrayElement | undefined;
    set dependsOn(dependsOn: ArrayElement | undefined);
    get successCriteria(): ArrayElement | undefined;
    set successCriteria(successCriteria: ArrayElement | undefined);
    get onSuccess(): ArrayElement | undefined;
    set onSuccess(onSuccess: ArrayElement | undefined);
    get onFailure(): ArrayElement | undefined;
    set onFailure(onFailure: ArrayElement | undefined);
    get outputs(): ObjectElement | undefined;
    set outputs(outputs: ObjectElement | undefined);
}

declare class Parameter extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get in(): StringElement | undefined;
    set in(val: StringElement | undefined);
    get style(): StringElement | undefined;
    set style(style: StringElement | undefined);
    get target(): StringElement | undefined;
    set target(target: StringElement | undefined);
    get value(): Element | undefined;
    set value(value: Element | undefined);
}

declare class SuccessAction extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
    get workflowId(): StringElement | undefined;
    set workflowId(workflowId: StringElement | undefined);
    get stepId(): StringElement | undefined;
    set stepId(stepId: StringElement | undefined);
    get criteria(): ArrayElement | undefined;
    set criteria(criteria: ArrayElement | undefined);
}

declare class FailureAction extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
    get workflowId(): StringElement | undefined;
    set workflowId(workflowId: StringElement | undefined);
    get stepId(): StringElement | undefined;
    set stepId(stepId: StringElement | undefined);
    get retryAfter(): NumberElement | undefined;
    set retryAfter(retryAfter: NumberElement | undefined);
    get retryLimit(): NumberElement | undefined;
    set retryLimit(retryLimit: NumberElement | undefined);
    get criteria(): ArrayElement | undefined;
    set criteria(criteria: ArrayElement | undefined);
}

declare class Criterion extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get context(): StringElement | undefined;
    set context(context: StringElement | undefined);
    get condition(): StringElement | undefined;
    set condition(condition: StringElement | undefined);
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
}

declare class Reference extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get $ref(): StringElement | undefined;
    set $ref($ref: StringElement | undefined);
    get value(): StringElement | undefined;
    set value(value: StringElement | undefined);
}

declare class Workflows extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SourceDescriptions extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class WorkflowSteps extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class WorkflowOutputs extends ObjectElement {
    static primaryClass: string;
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class StepParameters extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class StepDependsOn extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class StepSuccessCriteria extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class StepOnSuccess extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class StepOnFailure extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class StepOutputs extends ObjectElement {
    static primaryClass: string;
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SuccessActionCriteria extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class FailureActionCriteria extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare const isWorkflowsSpecElement: _swagger_api_apidom_core.ElementPredicate<WorkflowsSpec>;
declare const isWorkflowsSpecification1Element: _swagger_api_apidom_core.ElementPredicate<WorkflowsSpecification1>;
declare const isInfoElement: _swagger_api_apidom_core.ElementPredicate<Info>;
declare const isSourceDescriptionElement: _swagger_api_apidom_core.ElementPredicate<SourceDescription>;
declare const isSourceDescriptionsElement: _swagger_api_apidom_core.ElementPredicate<SourceDescriptions>;
declare const isWorkflowStepsElement: _swagger_api_apidom_core.ElementPredicate<WorkflowSteps>;
declare const isWorkflowOutputsElement: _swagger_api_apidom_core.ElementPredicate<WorkflowOutputs>;
declare const isWorkflowElement: _swagger_api_apidom_core.ElementPredicate<Workflow>;
declare const isStepOnSuccessElement: _swagger_api_apidom_core.ElementPredicate<StepOnSuccess>;
declare const isStepOnFailureElement: _swagger_api_apidom_core.ElementPredicate<StepOnFailure>;
declare const isStepOutputsElement: _swagger_api_apidom_core.ElementPredicate<StepOutputs>;
declare const isStepElement: _swagger_api_apidom_core.ElementPredicate<Step>;
declare const isStepParametersElement: _swagger_api_apidom_core.ElementPredicate<StepParameters>;
declare const isStepDependsOnElement: _swagger_api_apidom_core.ElementPredicate<StepDependsOn>;
declare const isStepSuccessCriteriaElement: _swagger_api_apidom_core.ElementPredicate<StepSuccessCriteria>;
declare const isParameterElement: _swagger_api_apidom_core.ElementPredicate<Parameter>;
declare const isSuccessActionElement: _swagger_api_apidom_core.ElementPredicate<SuccessAction>;
declare const isComponentsElement: _swagger_api_apidom_core.ElementPredicate<Components>;
declare const isCriterionElement: _swagger_api_apidom_core.ElementPredicate<Criterion>;
declare const isReferenceElement: _swagger_api_apidom_core.ElementPredicate<Reference>;
declare const isSuccessActionCriteriaElement: _swagger_api_apidom_core.ElementPredicate<SuccessActionCriteria>;
declare const isFailureActionElement: _swagger_api_apidom_core.ElementPredicate<FailureAction>;
declare const isFailureActionCriteriaElement: _swagger_api_apidom_core.ElementPredicate<FailureActionCriteria>;
declare const isJSONSchemaElement: _swagger_api_apidom_core.ElementPredicate<JSONSchema>;

declare const isWorkflowsSpecificationExtension: (element: MemberElement) => boolean;

declare const FixedFieldsVisitor: stampit__default.Stamp<any>;

declare const MapVisitor: stampit__default.Stamp<any>;

declare const MixedFieldsVisitor: stampit__default.Stamp<any>;

/**
 * This visitor is responsible for falling back to current traversed element.
 * Given WorkflowsSpecificationVisitor expects ObjectElement to be traversed. If
 * different Element is provided FallBackVisitor is responsible to assigning
 * this Element as current element.
 */
declare const FallbackVisitor: stampit__default.Stamp<any>;

/**
 * This is a base Type for every visitor that does
 * internal look-ups to retrieve other child visitors.
 */
declare const SpecificationVisitor: stampit__default.Stamp<any>;

declare const Visitor: stampit__default.Stamp<any>;

declare const getNodeType: <T extends Element>(element: T) => string | undefined;
/**
 * Workflows Specification 1.0.0
 */
declare const keyMap: {
    ObjectElement: string[];
    ArrayElement: string[];
    MemberElement: string[];
    StringElement: never[];
    BooleanElement: never[];
    NumberElement: never[];
    NullElement: never[];
    RefElement: never[];
    LinkElement: never[];
    Annotation: never[];
    Comment: never[];
    ParseResultElement: string[];
    SourceMap: string[];
    WorkflowsSpecification1Element: string[];
    InfoElement: string[];
    SourceDescriptionElement: string[];
    WorkflowElement: string[];
    StepElement: string[];
    ParameterElement: string[];
    SuccessActionElement: string[];
    FailureActionElement: string[];
    ComponentsElement: string[];
    CriterionElement: string[];
    ReferenceElement: string[];
    JSONSchemaDraft202012Element: string[];
};

declare class ComponentsInputs extends ObjectElement {
    static primaryClass: string;
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class ComponentsParameters extends ObjectElement {
    static primaryClass: string;
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

export { Components as ComponentsElement, ComponentsParameters, ComponentsInputs as ComponentsSchemas, Criterion as CriterionElement, FailureActionCriteria as FailureActionCriteriaElement, FailureAction as FailureActionElement, FallbackVisitor, FixedFieldsVisitor, Info as InfoElement, JSONSchema as JSONSchemaElement, MapVisitor, MixedFieldsVisitor, Parameter as ParameterElement, Reference as ReferenceElement, SourceDescription as SourceDescriptionElement, SourceDescriptions as SourceDescriptionsElement, SpecificationVisitor, StepDependsOn as StepDependsOnElement, Step as StepElement, StepOnFailure as StepOnFailureElement, StepOnSuccess as StepOnSuccessElement, StepOutputs as StepOutputsElement, StepParameters as StepParametersElement, StepSuccessCriteria as StepSuccessCriteriaElement, SuccessActionCriteria as SuccessActionCriteriaElement, SuccessAction as SuccessActionElement, Visitor, Workflow as WorkflowElement, WorkflowOutputs as WorkflowOutputsElement, WorkflowSteps as WorkflowStepsElement, Workflows as WorkflowsElement, WorkflowsMediaTypes, WorkflowsSpec as WorkflowsSpecElement, WorkflowsSpecification1 as WorkflowsSpecification1Element, createRefractor, workflows1 as default, getNodeType, isComponentsElement, isCriterionElement, isFailureActionCriteriaElement, isFailureActionElement, isInfoElement, isJSONSchemaElement, isParameterElement, isReferenceElement, isSourceDescriptionElement, isSourceDescriptionsElement, isStepDependsOnElement, isStepElement, isStepOnFailureElement, isStepOnSuccessElement, isStepOutputsElement, isStepParametersElement, isStepSuccessCriteriaElement, isSuccessActionCriteriaElement, isSuccessActionElement, isWorkflowElement, isWorkflowOutputsElement, isWorkflowStepsElement, isWorkflowsSpecElement, isWorkflowsSpecification1Element, isWorkflowsSpecificationExtension, keyMap, mediaTypes, refract, plugin as refractorPluginReplaceEmptyElement, specification as specificationObj };
