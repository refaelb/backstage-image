{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../src/helpers/parser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAqE;AACrE,yEAAsE;AACtE,2EAAyE;AACzE,mEAAgE;AAIhE,0CAAsD;AAEtD,IAAM,cAAc,GAAG,IAAI,eAAc,EAAE,CAAC;AAC5C,cAAc,CAAC,oBAAoB,CAAC,IAAA,2CAAmB,GAAE,CAAC,CAAC;AAC3D,cAAc,CAAC,oBAAoB,CAAC,IAAA,qCAAgB,GAAE,CAAC,CAAC;AACxD,cAAc,CAAC,oBAAoB,CAAC,IAAA,8CAAqB,GAAE,CAAC,CAAC;AAE7D;IAAA;IAsCA,CAAC;IArCc,YAAK,GAAlB,UACE,OAAqB,EACrB,aAAmB;;;;;;;wBAGI,WAAM,cAAc,CAAC,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,EAAA;;wBAA/D,aAAa,CAAA,SAAkD,CAAA,SAAvD;wBAChB,WAAO,EAAE,QAAQ,EAAE,UAAQ,EAAE,EAAC;;;wBAE9B,WAAO,IAAI,CAAC,WAAW,CAAC,KAAkB,CAAC,EAAC;;;;;KAE/C;IAEY,mBAAY,GAAzB,UACE,GAA4B,EAC5B,aAAmB;;;;;;;wBAGX,UAAU,GAAG,IAAA,gBAAO,EACxB,cAAc,EACd,GAAG,CAAC,GAAG,EACP,GAAG,CAAC,cAAqB,CAC1B,CAAC;wBACmB,WAAM,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,EAAA;;wBAAlD,aAAa,CAAA,SAAqC,CAAA,SAA1C;wBAChB,WAAO,EAAE,QAAQ,EAAE,UAAQ,EAAE,EAAC;;;wBAE9B,WAAO,IAAI,CAAC,WAAW,CAAC,KAAkB,CAAC,EAAC;;;;;KAE/C;IAEc,kBAAW,GAAG,UAAC,GAAgB;QAC5C,IAAI,GAAG,CAAC,IAAI,KAAK,kCAAsB,EAAE;YACvC,OAAO;gBACL,KAAK,EAAE,GAAG;aACX,CAAC;SACH;QACD,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IACxB,CAAC,CAAC;IACJ,aAAC;CAAA,AAtCD,IAsCC;AAtCY,wBAAM","sourcesContent":["import { Parser as AsyncapiParser, fromURL } from '@asyncapi/parser';\nimport { OpenAPISchemaParser } from '@asyncapi/openapi-schema-parser';\nimport { ProtoBuffSchemaParser } from '@asyncapi/protobuf-schema-parser';\nimport { AvroSchemaParser } from '@asyncapi/avro-schema-parser';\n\nimport { ErrorObject, ParserReturn, FetchingSchemaInterface } from '../types';\n\nimport { VALIDATION_ERRORS_TYPE } from '../constants';\n\nconst asyncapiParser = new AsyncapiParser();\nasyncapiParser.registerSchemaParser(OpenAPISchemaParser());\nasyncapiParser.registerSchemaParser(AvroSchemaParser());\nasyncapiParser.registerSchemaParser(ProtoBuffSchemaParser());\n\nexport class Parser {\n  static async parse(\n    content: string | any,\n    parserOptions?: any,\n  ): Promise<ParserReturn> {\n    try {\n      const { document } = await asyncapiParser.parse(content, parserOptions);\n      return { asyncapi: document };\n    } catch (err) {\n      return this.handleError(err as ErrorObject);\n    }\n  }\n\n  static async parseFromUrl(\n    arg: FetchingSchemaInterface,\n    parserOptions?: any,\n  ): Promise<ParserReturn> {\n    try {\n      const fromResult = fromURL(\n        asyncapiParser,\n        arg.url,\n        arg.requestOptions as any,\n      );\n      const { document } = await fromResult.parse(parserOptions);\n      return { asyncapi: document };\n    } catch (err) {\n      return this.handleError(err as ErrorObject);\n    }\n  }\n\n  private static handleError = (err: ErrorObject): ParserReturn => {\n    if (err.type === VALIDATION_ERRORS_TYPE) {\n      return {\n        error: err,\n      };\n    }\n    return { error: err };\n  };\n}\n"]}