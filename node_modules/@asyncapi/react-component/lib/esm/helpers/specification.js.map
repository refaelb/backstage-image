{"version":3,"file":"specification.js","sourceRoot":"","sources":["../../../src/helpers/specification.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AsyncAPIDocumentInterface,\n  TagInterface,\n  isAsyncAPIDocument,\n  isOldAsyncAPIDocument,\n  toAsyncAPIDocument,\n  unstringify,\n} from '@asyncapi/parser';\nimport { isStringifiedDocument } from '@asyncapi/parser/cjs/document';\n\nexport class SpecificationHelpers {\n  /**\n   * Returns parsed AsyncAPI specification.\n   */\n  static retrieveParsedSpec(\n    schema: any,\n  ): AsyncAPIDocumentInterface | undefined {\n    if (!schema) {\n      return undefined;\n    }\n\n    if (isAsyncAPIDocument(schema)) {\n      return schema;\n    }\n\n    if (isOldAsyncAPIDocument(schema)) {\n      // Is from old parser\n      const parsedJSON = schema.json();\n      return toAsyncAPIDocument(parsedJSON);\n    }\n\n    // check if input is a string and try parse it\n    if (typeof schema === 'string') {\n      try {\n        schema = JSON.parse(schema);\n      } catch (e) {\n        return undefined;\n      }\n    }\n\n    // at the end check if schema is a parsed JS object (as output from AsyncAPI Parser)\n    if (isStringifiedDocument(schema)) {\n      return unstringify(schema);\n    }\n\n    return toAsyncAPIDocument(schema);\n  }\n\n  /**\n   * Check if given schema have one of the specified tags.\n   */\n  static containTags(\n    schema: any,\n    tags: TagInterface | TagInterface[],\n  ): boolean {\n    const tagsToCheck =\n      typeof schema.tags === 'function' ? schema.tags() : undefined;\n    if (tagsToCheck === undefined || !Array.isArray(tagsToCheck)) {\n      return false;\n    }\n    tags = Array.isArray(tags) ? tags : [tags];\n    return tagsToCheck.some((tag: TagInterface) =>\n      (tags as TagInterface[]).some(t => t.name() === tag.name()),\n    );\n  }\n\n  /**\n   * Return all tags from operations\n   */\n  static operationsTags(spec: AsyncAPIDocumentInterface) {\n    const tags = new Map<string, TagInterface>();\n    Object.entries(spec.operations().all()).forEach(([_, operation]) => {\n      if (operation?.tags().length > 0) {\n        operation\n          .tags()\n          .all()\n          .forEach(tag => tags.set(tag.name(), tag));\n      }\n    });\n    return Array.from(tags.values());\n  }\n\n  /**\n   * Return all tags from servers\n   */\n  static serversTags(spec: AsyncAPIDocumentInterface) {\n    const tags = {} as { string: string[] };\n    Object.entries(spec.servers()).forEach(([_, server]) => {\n      if (server.tags().length > 0) {\n        server\n          .tags()\n          .all()\n          .forEach(tag => {\n            if (tags[tag.name()]) {\n              tags[tag.name()] = [tags[tag.name()], _];\n            } else {\n              tags[tag.name()] = _;\n            }\n          });\n      }\n    });\n    return tags;\n  }\n}\n"]}