import { AsyncAPIDocumentInterface } from '@asyncapi/parser';
export declare type PropsSchema = string | FetchingSchemaInterface | AsyncAPIDocumentInterface | object;
export declare type NullableAsyncApi = AsyncAPIDocumentInterface | null;
export interface AsyncApiState {
    validatedSchema: NullableAsyncApi;
    error?: ErrorObject;
}
export declare function isFetchingSchemaInterface(schema: PropsSchema): schema is FetchingSchemaInterface;
export interface FetchingSchemaInterface {
    url: string;
    requestOptions?: RequestInit;
}
export interface ParserReturn {
    asyncapi?: AsyncAPIDocumentInterface;
    error?: ErrorObject;
}
export declare enum PayloadType {
    SEND = "send",
    RECEIVE = "receive",
    REQUEST = "request",
    REPLY = "reply"
}
export interface MessageExample {
    name?: string;
    summary?: string;
    example: any;
}
export interface ValidationError {
    title: string;
    location: {
        jsonPointer: string;
        startLine: number;
        startColumn: number;
        startOffset: number;
        endLine: number;
        endColumn: number;
        endOffset: number;
    };
}
export interface ErrorObject {
    type: string;
    title: string;
    detail?: string;
    parsedJSON?: any;
    validationErrors?: ValidationError[];
    location?: {
        startLine: number;
        startColumn: number;
        startOffset: number;
    };
    refs?: Array<{
        title: string;
        jsonPointer: string;
        startLine: number;
        startColumn: number;
        startOffset: number;
        endLine: number;
        endColumn: number;
        endOffset: number;
    }>;
}
//# sourceMappingURL=types.d.ts.map