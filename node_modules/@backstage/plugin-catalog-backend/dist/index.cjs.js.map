{"version":3,"file":"index.cjs.js","sources":["../src/modules/core/AnnotateScmSlugEntityProcessor.ts","../src/modules/core/LocationEntityProcessor.ts","../src/modules/core/transformLegacyPolicyToProcessor.ts","../src/search/DefaultCatalogCollator.ts","../src/deprecated.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport parseGitUrl from 'git-url-parse';\nimport { identity, merge, pickBy } from 'lodash';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { CatalogProcessor } from '@backstage/plugin-catalog-node';\n\nconst GITHUB_ACTIONS_ANNOTATION = 'github.com/project-slug';\nconst GITLAB_ACTIONS_ANNOTATION = 'gitlab.com/project-slug';\nconst AZURE_ACTIONS_ANNOTATION = 'dev.azure.com/project-repo';\n\n/** @public */\nexport class AnnotateScmSlugEntityProcessor implements CatalogProcessor {\n  constructor(\n    private readonly opts: {\n      scmIntegrationRegistry: ScmIntegrationRegistry;\n      kinds?: string[];\n    },\n  ) {}\n\n  getProcessorName(): string {\n    return 'AnnotateScmSlugEntityProcessor';\n  }\n\n  static fromConfig(\n    config: Config,\n    options?: { kinds?: string[] },\n  ): AnnotateScmSlugEntityProcessor {\n    return new AnnotateScmSlugEntityProcessor({\n      scmIntegrationRegistry: ScmIntegrations.fromConfig(config),\n      kinds: options?.kinds,\n    });\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n  ): Promise<Entity> {\n    const applicableKinds = (this.opts.kinds ?? ['Component']).map(k =>\n      k.toLocaleLowerCase('en-US'),\n    );\n    if (\n      !applicableKinds.includes(entity.kind.toLocaleLowerCase('en-US')) ||\n      location.type !== 'url'\n    ) {\n      return entity;\n    }\n\n    const scmIntegration = this.opts.scmIntegrationRegistry.byUrl(\n      location.target,\n    );\n\n    if (!scmIntegration) {\n      return entity;\n    }\n\n    let annotation;\n    switch (scmIntegration.type) {\n      case 'github':\n        annotation = GITHUB_ACTIONS_ANNOTATION;\n        break;\n      case 'gitlab':\n        annotation = GITLAB_ACTIONS_ANNOTATION;\n        break;\n      case 'azure':\n        annotation = AZURE_ACTIONS_ANNOTATION;\n        break;\n      default:\n        return entity;\n    }\n\n    let projectSlug = entity.metadata.annotations?.[annotation];\n    if (!projectSlug) {\n      const gitUrl = parseGitUrl(location.target);\n      projectSlug = `${gitUrl.owner}/${gitUrl.name}`;\n    }\n\n    return merge(\n      {\n        metadata: {\n          annotations: pickBy(\n            {\n              [annotation]: projectSlug,\n            },\n            identity,\n          ),\n        },\n      },\n      entity,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, LocationEntity } from '@backstage/catalog-model';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  processingResult,\n  CatalogProcessor,\n  CatalogProcessorEmit,\n} from '@backstage/plugin-catalog-node';\n\nexport function toAbsoluteUrl(\n  integrations: ScmIntegrationRegistry,\n  base: LocationSpec,\n  target: string,\n): string {\n  try {\n    if (base.type === 'file') {\n      if (target.startsWith('.')) {\n        return path.join(path.dirname(base.target), target);\n      }\n      return target;\n    }\n    return integrations.resolveUrl({ url: target, base: base.target });\n  } catch (e) {\n    return target;\n  }\n}\n\n/**\n * @public\n * @deprecated This processor should no longer be used\n */\nexport type LocationEntityProcessorOptions = {\n  integrations: ScmIntegrationRegistry;\n};\n\n/**\n * Legacy processor, should not be used.\n *\n * @remarks\n *\n * In the old catalog architecture, this processor translated Location entities\n * into URLs that should be fetched. This is no longer needed since the engine\n * handles this internally.\n *\n * @public\n * @deprecated This processor should no longer be used\n */\nexport class LocationEntityProcessor implements CatalogProcessor {\n  constructor(private readonly options: LocationEntityProcessorOptions) {}\n\n  getProcessorName(): string {\n    return 'LocationEntityProcessor';\n  }\n\n  async postProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    if (entity.kind === 'Location') {\n      const locationEntity = entity as LocationEntity;\n\n      const type = locationEntity.spec.type || location.type;\n      if (type === 'file' && location.target.endsWith(path.sep)) {\n        emit(\n          processingResult.inputError(\n            location,\n            `LocationEntityProcessor cannot handle ${type} type location with target ${location.target} that ends with a path separator`,\n          ),\n        );\n      }\n\n      const targets = new Array<string>();\n      if (locationEntity.spec.target) {\n        targets.push(locationEntity.spec.target);\n      }\n      if (locationEntity.spec.targets) {\n        targets.push(...locationEntity.spec.targets);\n      }\n\n      for (const maybeRelativeTarget of targets) {\n        const target = toAbsoluteUrl(\n          this.options.integrations,\n          location,\n          maybeRelativeTarget,\n        );\n        emit(processingResult.location({ type, target }));\n      }\n    }\n\n    return entity;\n  }\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EntityPolicy } from '@backstage/catalog-model';\nimport { CatalogProcessor } from '@backstage/plugin-catalog-node';\n\n/**\n * Transform a given entity policy to an entity processor.\n * @param policy - The policy to transform\n * @returns A new entity processor that uses the entity policy.\n * @public\n */\nexport function transformLegacyPolicyToProcessor(\n  policy: EntityPolicy,\n): CatalogProcessor {\n  return {\n    getProcessorName() {\n      return policy.constructor.name;\n    },\n    async preProcessEntity(entity) {\n      // If enforcing the policy fails, throw the policy error.\n      const result = await policy.enforce(entity);\n      if (!result) {\n        return entity;\n      }\n      return result;\n    },\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PluginEndpointDiscovery,\n  TokenManager,\n} from '@backstage/backend-common';\nimport {\n  Entity,\n  isUserEntity,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  CatalogApi,\n  CatalogClient,\n  GetEntitiesRequest,\n} from '@backstage/catalog-client';\nimport { catalogEntityReadPermission } from '@backstage/plugin-catalog-common/alpha';\nimport { CatalogEntityDocument } from '@backstage/plugin-catalog-common';\nimport { Permission } from '@backstage/plugin-permission-common';\n\n/**\n * @public\n * @deprecated Upgrade to a more recent `@backstage/plugin-search-backend-node` and\n * use `DefaultCatalogCollatorFactory` instead.\n */\nexport class DefaultCatalogCollator {\n  protected discovery: PluginEndpointDiscovery;\n  protected locationTemplate: string;\n  protected filter?: GetEntitiesRequest['filter'];\n  protected readonly catalogClient: CatalogApi;\n  public readonly type: string = 'software-catalog';\n  public readonly visibilityPermission: Permission =\n    catalogEntityReadPermission;\n  protected tokenManager: TokenManager;\n\n  static fromConfig(\n    _config: Config,\n    options: {\n      discovery: PluginEndpointDiscovery;\n      tokenManager: TokenManager;\n      filter?: GetEntitiesRequest['filter'];\n    },\n  ) {\n    return new DefaultCatalogCollator({\n      ...options,\n    });\n  }\n\n  constructor(options: {\n    discovery: PluginEndpointDiscovery;\n    tokenManager: TokenManager;\n    locationTemplate?: string;\n    filter?: GetEntitiesRequest['filter'];\n    catalogClient?: CatalogApi;\n  }) {\n    const { discovery, locationTemplate, filter, catalogClient, tokenManager } =\n      options;\n\n    this.discovery = discovery;\n    this.locationTemplate =\n      locationTemplate || '/catalog/:namespace/:kind/:name';\n    this.filter = filter;\n    this.catalogClient =\n      catalogClient || new CatalogClient({ discoveryApi: discovery });\n    this.tokenManager = tokenManager;\n  }\n\n  protected applyArgsToFormat(\n    format: string,\n    args: Record<string, string>,\n  ): string {\n    let formatted = format;\n    for (const [key, value] of Object.entries(args)) {\n      formatted = formatted.replace(`:${key}`, value);\n    }\n    return formatted.toLowerCase();\n  }\n\n  private getDocumentText(entity: Entity): string {\n    let documentText = entity.metadata.description || '';\n    if (isUserEntity(entity)) {\n      if (entity.spec?.profile?.displayName && documentText) {\n        // combine displayName and description\n        const displayName = entity.spec?.profile?.displayName;\n        documentText = displayName.concat(' : ', documentText);\n      } else {\n        documentText = entity.spec?.profile?.displayName || documentText;\n      }\n    }\n    return documentText;\n  }\n\n  async execute() {\n    const { token } = await this.tokenManager.getToken();\n    const response = await this.catalogClient.getEntities(\n      {\n        filter: this.filter,\n      },\n      { token },\n    );\n    return response.items.map((entity: Entity): CatalogEntityDocument => {\n      return {\n        title: entity.metadata.title ?? entity.metadata.name,\n        location: this.applyArgsToFormat(this.locationTemplate, {\n          namespace: entity.metadata.namespace || 'default',\n          kind: entity.kind,\n          name: entity.metadata.name,\n        }),\n        text: this.getDocumentText(entity),\n        componentType: entity.spec?.type?.toString() || 'other',\n        type: entity.spec?.type?.toString() || 'other',\n        namespace: entity.metadata.namespace || 'default',\n        kind: entity.kind,\n        lifecycle: (entity.spec?.lifecycle as string) || '',\n        owner: (entity.spec?.owner as string) || '',\n        authorization: {\n          resourceRef: stringifyEntityRef(entity),\n        },\n      };\n    });\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  type AnalyzeLocationEntityField as _AnalyzeLocationEntityField,\n  type AnalyzeLocationExistingEntity as _AnalyzeLocationExistingEntity,\n  type AnalyzeLocationGenerateEntity as _AnalyzeLocationGenerateEntity,\n  type AnalyzeLocationRequest as _AnalyzeLocationRequest,\n  type AnalyzeLocationResponse as _AnalyzeLocationResponse,\n  type LocationSpec as _LocationSpec,\n} from '@backstage/plugin-catalog-common';\nimport {\n  locationSpecToMetadataName as _locationSpecToMetadataName,\n  locationSpecToLocationEntity as _locationSpecToLocationEntity,\n  processingResult as _processingResult,\n  type EntitiesSearchFilter as _EntitiesSearchFilter,\n  type EntityFilter as _EntityFilter,\n  type DeferredEntity as _DeferredEntity,\n  type EntityRelationSpec as _EntityRelationSpec,\n  type CatalogProcessor as _CatalogProcessor,\n  type CatalogProcessorParser as _CatalogProcessorParser,\n  type CatalogProcessorCache as _CatalogProcessorCache,\n  type CatalogProcessorEmit as _CatalogProcessorEmit,\n  type CatalogProcessorLocationResult as _CatalogProcessorLocationResult,\n  type CatalogProcessorEntityResult as _CatalogProcessorEntityResult,\n  type CatalogProcessorRelationResult as _CatalogProcessorRelationResult,\n  type CatalogProcessorErrorResult as _CatalogProcessorErrorResult,\n  type CatalogProcessorRefreshKeysResult as _CatalogProcessorRefreshKeysResult,\n  type CatalogProcessorResult as _CatalogProcessorResult,\n  type EntityProvider as _EntityProvider,\n  type EntityProviderConnection as _EntityProviderConnection,\n  type EntityProviderMutation as _EntityProviderMutation,\n  type AnalyzeOptions as _AnalyzeOptions,\n  type PlaceholderResolver as _PlaceholderResolver,\n  type PlaceholderResolverParams as _PlaceholderResolverParams,\n  type PlaceholderResolverRead as _PlaceholderResolverRead,\n  type PlaceholderResolverResolveUrl as _PlaceholderResolverResolveUrl,\n  type ScmLocationAnalyzer as _ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport {\n  defaultCatalogCollatorEntityTransformer as _defaultCatalogCollatorEntityTransformer,\n  DefaultCatalogCollatorFactory as _DefaultCatalogCollatorFactory,\n  type CatalogCollatorEntityTransformer as _CatalogCollatorEntityTransformer,\n  type DefaultCatalogCollatorFactoryOptions as _DefaultCatalogCollatorFactoryOptions,\n} from '@backstage/plugin-search-backend-module-catalog';\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport const locationSpecToMetadataName = _locationSpecToMetadataName;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport const locationSpecToLocationEntity = _locationSpecToLocationEntity;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport const processingResult = _processingResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntitiesSearchFilter = _EntitiesSearchFilter;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityFilter = _EntityFilter;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type DeferredEntity = _DeferredEntity;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityRelationSpec = _EntityRelationSpec;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessor = _CatalogProcessor;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorParser = _CatalogProcessorParser;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorCache = _CatalogProcessorCache;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorEmit = _CatalogProcessorEmit;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorLocationResult = _CatalogProcessorLocationResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorEntityResult = _CatalogProcessorEntityResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorRelationResult = _CatalogProcessorRelationResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorErrorResult = _CatalogProcessorErrorResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorRefreshKeysResult =\n  _CatalogProcessorRefreshKeysResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorResult = _CatalogProcessorResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityProvider = _EntityProvider;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityProviderConnection = _EntityProviderConnection;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityProviderMutation = _EntityProviderMutation;\n\n/**\n * Holds the entity location information.\n *\n * @remarks\n *\n *  `presence` flag: when using repo importer plugin, location is being created before the component yaml file is merged to the main branch.\n *  This flag is then set to indicate that the file can be not present.\n *  default value: 'required'.\n *\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type LocationSpec = _LocationSpec;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type AnalyzeOptions = _AnalyzeOptions;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type ScmLocationAnalyzer = _ScmLocationAnalyzer;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolver = _PlaceholderResolver;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolverParams = _PlaceholderResolverParams;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolverRead = _PlaceholderResolverRead;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolverResolveUrl = _PlaceholderResolverResolveUrl;\n\n/**\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationRequest = _AnalyzeLocationRequest;\n/**\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationResponse = _AnalyzeLocationResponse;\n\n/**\n * If the folder pointed to already contained catalog info yaml files, they are\n * read and emitted like this so that the frontend can inform the user that it\n * located them and can make sure to register them as well if they weren't\n * already\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationExistingEntity = _AnalyzeLocationExistingEntity;\n/**\n * This is some form of representation of what the analyzer could deduce.\n * We should probably have a chat about how this can best be conveyed to\n * the frontend. It'll probably contain a (possibly incomplete) entity, plus\n * enough info for the frontend to know what form data to show to the user\n * for overriding/completing the info.\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationGenerateEntity = _AnalyzeLocationGenerateEntity;\n\n/**\n *\n * This is where I get really vague. Something like this perhaps? Or it could be\n * something like a json-schema that contains enough info for the frontend to\n * be able to present a form and explanations\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationEntityField = _AnalyzeLocationEntityField;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport const DefaultCatalogCollatorFactory = _DefaultCatalogCollatorFactory;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport const defaultCatalogCollatorEntityTransformer =\n  _defaultCatalogCollatorEntityTransformer;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport type DefaultCatalogCollatorFactoryOptions =\n  _DefaultCatalogCollatorFactoryOptions;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport type CatalogCollatorEntityTransformer =\n  _CatalogCollatorEntityTransformer;\n"],"names":["ScmIntegrations","parseGitUrl","merge","pickBy","identity","path","processingResult","catalogEntityReadPermission","catalogClient","CatalogClient","isUserEntity","stringifyEntityRef","_locationSpecToMetadataName","_locationSpecToLocationEntity","_processingResult","_DefaultCatalogCollatorFactory","_defaultCatalogCollatorEntityTransformer"],"mappings":"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"}