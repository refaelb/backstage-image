'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var CatalogBuilder = require('./cjs/CatalogBuilder-12834e8e.cjs.js');
var integration = require('@backstage/integration');
var parseGitUrl = require('git-url-parse');
var lodash = require('lodash');
var path = require('path');
var pluginCatalogNode = require('@backstage/plugin-catalog-node');
var catalogModel = require('@backstage/catalog-model');
var catalogClient = require('@backstage/catalog-client');
var alpha = require('@backstage/plugin-catalog-common/alpha');
var pluginSearchBackendModuleCatalog = require('@backstage/plugin-search-backend-module-catalog');
require('crypto');
require('@backstage/errors');
require('core-js/features/promise');
require('codeowners-utils');
require('fs-extra');
require('glob');
require('util');
require('yaml');
require('p-limit');
require('uuid');
require('@backstage/backend-common');
require('luxon');
require('prom-client');
require('@opentelemetry/api');
require('fast-json-stable-stringify');
require('lodash/uniq');
require('lodash/chunk');
require('zod');
require('@backstage/types');
require('yn');
require('@backstage/backend-openapi-utils');
require('@backstage/plugin-auth-node');
require('@backstage/plugin-permission-common');
require('minimatch');
require('@backstage/config');
require('@backstage/plugin-permission-node');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var parseGitUrl__default = /*#__PURE__*/_interopDefaultLegacy(parseGitUrl);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

const GITHUB_ACTIONS_ANNOTATION = "github.com/project-slug";
const GITLAB_ACTIONS_ANNOTATION = "gitlab.com/project-slug";
const AZURE_ACTIONS_ANNOTATION = "dev.azure.com/project-repo";
class AnnotateScmSlugEntityProcessor {
  constructor(opts) {
    this.opts = opts;
  }
  getProcessorName() {
    return "AnnotateScmSlugEntityProcessor";
  }
  static fromConfig(config, options) {
    return new AnnotateScmSlugEntityProcessor({
      scmIntegrationRegistry: integration.ScmIntegrations.fromConfig(config),
      kinds: options == null ? void 0 : options.kinds
    });
  }
  async preProcessEntity(entity, location) {
    var _a, _b;
    const applicableKinds = ((_a = this.opts.kinds) != null ? _a : ["Component"]).map(
      (k) => k.toLocaleLowerCase("en-US")
    );
    if (!applicableKinds.includes(entity.kind.toLocaleLowerCase("en-US")) || location.type !== "url") {
      return entity;
    }
    const scmIntegration = this.opts.scmIntegrationRegistry.byUrl(
      location.target
    );
    if (!scmIntegration) {
      return entity;
    }
    let annotation;
    switch (scmIntegration.type) {
      case "github":
        annotation = GITHUB_ACTIONS_ANNOTATION;
        break;
      case "gitlab":
        annotation = GITLAB_ACTIONS_ANNOTATION;
        break;
      case "azure":
        annotation = AZURE_ACTIONS_ANNOTATION;
        break;
      default:
        return entity;
    }
    let projectSlug = (_b = entity.metadata.annotations) == null ? void 0 : _b[annotation];
    if (!projectSlug) {
      const gitUrl = parseGitUrl__default["default"](location.target);
      projectSlug = `${gitUrl.owner}/${gitUrl.name}`;
    }
    return lodash.merge(
      {
        metadata: {
          annotations: lodash.pickBy(
            {
              [annotation]: projectSlug
            },
            lodash.identity
          )
        }
      },
      entity
    );
  }
}

function toAbsoluteUrl(integrations, base, target) {
  try {
    if (base.type === "file") {
      if (target.startsWith(".")) {
        return path__default["default"].join(path__default["default"].dirname(base.target), target);
      }
      return target;
    }
    return integrations.resolveUrl({ url: target, base: base.target });
  } catch (e) {
    return target;
  }
}
class LocationEntityProcessor {
  constructor(options) {
    this.options = options;
  }
  getProcessorName() {
    return "LocationEntityProcessor";
  }
  async postProcessEntity(entity, location, emit) {
    if (entity.kind === "Location") {
      const locationEntity = entity;
      const type = locationEntity.spec.type || location.type;
      if (type === "file" && location.target.endsWith(path__default["default"].sep)) {
        emit(
          pluginCatalogNode.processingResult.inputError(
            location,
            `LocationEntityProcessor cannot handle ${type} type location with target ${location.target} that ends with a path separator`
          )
        );
      }
      const targets = new Array();
      if (locationEntity.spec.target) {
        targets.push(locationEntity.spec.target);
      }
      if (locationEntity.spec.targets) {
        targets.push(...locationEntity.spec.targets);
      }
      for (const maybeRelativeTarget of targets) {
        const target = toAbsoluteUrl(
          this.options.integrations,
          location,
          maybeRelativeTarget
        );
        emit(pluginCatalogNode.processingResult.location({ type, target }));
      }
    }
    return entity;
  }
}

function transformLegacyPolicyToProcessor(policy) {
  return {
    getProcessorName() {
      return policy.constructor.name;
    },
    async preProcessEntity(entity) {
      const result = await policy.enforce(entity);
      if (!result) {
        return entity;
      }
      return result;
    }
  };
}

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class DefaultCatalogCollator {
  constructor(options) {
    __publicField(this, "discovery");
    __publicField(this, "locationTemplate");
    __publicField(this, "filter");
    __publicField(this, "catalogClient");
    __publicField(this, "type", "software-catalog");
    __publicField(this, "visibilityPermission", alpha.catalogEntityReadPermission);
    __publicField(this, "tokenManager");
    const { discovery, locationTemplate, filter, catalogClient: catalogClient$1, tokenManager } = options;
    this.discovery = discovery;
    this.locationTemplate = locationTemplate || "/catalog/:namespace/:kind/:name";
    this.filter = filter;
    this.catalogClient = catalogClient$1 || new catalogClient.CatalogClient({ discoveryApi: discovery });
    this.tokenManager = tokenManager;
  }
  static fromConfig(_config, options) {
    return new DefaultCatalogCollator({
      ...options
    });
  }
  applyArgsToFormat(format, args) {
    let formatted = format;
    for (const [key, value] of Object.entries(args)) {
      formatted = formatted.replace(`:${key}`, value);
    }
    return formatted.toLowerCase();
  }
  getDocumentText(entity) {
    var _a, _b, _c, _d, _e, _f;
    let documentText = entity.metadata.description || "";
    if (catalogModel.isUserEntity(entity)) {
      if (((_b = (_a = entity.spec) == null ? void 0 : _a.profile) == null ? void 0 : _b.displayName) && documentText) {
        const displayName = (_d = (_c = entity.spec) == null ? void 0 : _c.profile) == null ? void 0 : _d.displayName;
        documentText = displayName.concat(" : ", documentText);
      } else {
        documentText = ((_f = (_e = entity.spec) == null ? void 0 : _e.profile) == null ? void 0 : _f.displayName) || documentText;
      }
    }
    return documentText;
  }
  async execute() {
    const { token } = await this.tokenManager.getToken();
    const response = await this.catalogClient.getEntities(
      {
        filter: this.filter
      },
      { token }
    );
    return response.items.map((entity) => {
      var _a, _b, _c, _d, _e, _f, _g;
      return {
        title: (_a = entity.metadata.title) != null ? _a : entity.metadata.name,
        location: this.applyArgsToFormat(this.locationTemplate, {
          namespace: entity.metadata.namespace || "default",
          kind: entity.kind,
          name: entity.metadata.name
        }),
        text: this.getDocumentText(entity),
        componentType: ((_c = (_b = entity.spec) == null ? void 0 : _b.type) == null ? void 0 : _c.toString()) || "other",
        type: ((_e = (_d = entity.spec) == null ? void 0 : _d.type) == null ? void 0 : _e.toString()) || "other",
        namespace: entity.metadata.namespace || "default",
        kind: entity.kind,
        lifecycle: ((_f = entity.spec) == null ? void 0 : _f.lifecycle) || "",
        owner: ((_g = entity.spec) == null ? void 0 : _g.owner) || "",
        authorization: {
          resourceRef: catalogModel.stringifyEntityRef(entity)
        }
      };
    });
  }
}

const locationSpecToMetadataName = pluginCatalogNode.locationSpecToMetadataName;
const locationSpecToLocationEntity = pluginCatalogNode.locationSpecToLocationEntity;
const processingResult = pluginCatalogNode.processingResult;
const DefaultCatalogCollatorFactory = pluginSearchBackendModuleCatalog.DefaultCatalogCollatorFactory;
const defaultCatalogCollatorEntityTransformer = pluginSearchBackendModuleCatalog.defaultCatalogCollatorEntityTransformer;

exports.AnnotateLocationEntityProcessor = CatalogBuilder.AnnotateLocationEntityProcessor;
exports.BuiltinKindsEntityProcessor = CatalogBuilder.BuiltinKindsEntityProcessor;
exports.CATALOG_CONFLICTS_TOPIC = CatalogBuilder.CATALOG_CONFLICTS_TOPIC;
exports.CatalogBuilder = CatalogBuilder.CatalogBuilder;
exports.CodeOwnersProcessor = CatalogBuilder.CodeOwnersProcessor;
exports.FileReaderProcessor = CatalogBuilder.FileReaderProcessor;
exports.PlaceholderProcessor = CatalogBuilder.PlaceholderProcessor;
exports.UrlReaderProcessor = CatalogBuilder.UrlReaderProcessor;
exports.createRandomProcessingInterval = CatalogBuilder.createRandomProcessingInterval;
exports.parseEntityYaml = CatalogBuilder.parseEntityYaml;
exports.AnnotateScmSlugEntityProcessor = AnnotateScmSlugEntityProcessor;
exports.DefaultCatalogCollator = DefaultCatalogCollator;
exports.DefaultCatalogCollatorFactory = DefaultCatalogCollatorFactory;
exports.LocationEntityProcessor = LocationEntityProcessor;
exports.defaultCatalogCollatorEntityTransformer = defaultCatalogCollatorEntityTransformer;
exports.locationSpecToLocationEntity = locationSpecToLocationEntity;
exports.locationSpecToMetadataName = locationSpecToMetadataName;
exports.processingResult = processingResult;
exports.transformLegacyPolicyToProcessor = transformLegacyPolicyToProcessor;
//# sourceMappingURL=index.cjs.js.map
