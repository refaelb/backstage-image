'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var backendCommon = require('@backstage/backend-common');
var IndexBuilder = require('./cjs/IndexBuilder-5081eb72.cjs.js');
require('stream');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class DefaultSearchIndexService {
  constructor(options) {
    __publicField(this, "logger");
    __publicField(this, "indexBuilder", null);
    this.logger = options.logger;
  }
  static fromConfig(options) {
    return new DefaultSearchIndexService(options);
  }
  async start(options) {
    var _a;
    this.indexBuilder = new IndexBuilder.IndexBuilder({
      logger: this.logger,
      searchEngine: options.searchEngine
    });
    options.collators.forEach(
      (collator) => {
        var _a2;
        return (_a2 = this.indexBuilder) == null ? void 0 : _a2.addCollator(collator);
      }
    );
    options.decorators.forEach(
      (decorator) => {
        var _a2;
        return (_a2 = this.indexBuilder) == null ? void 0 : _a2.addDecorator(decorator);
      }
    );
    const { scheduler } = await ((_a = this.indexBuilder) == null ? void 0 : _a.build());
    scheduler.start();
  }
  getDocumentTypes() {
    var _a, _b;
    return (_b = (_a = this.indexBuilder) == null ? void 0 : _a.getDocumentTypes()) != null ? _b : {};
  }
}
const searchIndexServiceRef = backendPluginApi.createServiceRef({
  id: "search.index.service",
  defaultFactory: async (service) => backendPluginApi.createServiceFactory({
    service,
    deps: {
      logger: backendPluginApi.coreServices.logger
    },
    factory({ logger }) {
      return DefaultSearchIndexService.fromConfig({
        logger: backendCommon.loggerToWinstonLogger(logger)
      });
    }
  })
});
const searchEngineRegistryExtensionPoint = backendPluginApi.createExtensionPoint({
  id: "search.engine.registry"
});
const searchIndexRegistryExtensionPoint = backendPluginApi.createExtensionPoint({
  id: "search.index.registry"
});

exports.searchEngineRegistryExtensionPoint = searchEngineRegistryExtensionPoint;
exports.searchIndexRegistryExtensionPoint = searchIndexRegistryExtensionPoint;
exports.searchIndexServiceRef = searchIndexServiceRef;
//# sourceMappingURL=alpha.cjs.js.map
