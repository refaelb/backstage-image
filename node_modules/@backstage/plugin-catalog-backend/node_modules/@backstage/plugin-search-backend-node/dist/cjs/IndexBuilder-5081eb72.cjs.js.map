{"version":3,"file":"IndexBuilder-5081eb72.cjs.js","sources":["../../src/Scheduler.ts","../../src/IndexBuilder.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from 'winston';\nimport { TaskFunction, TaskRunner } from '@backstage/backend-tasks';\n\ntype TaskEnvelope = {\n  task: TaskFunction;\n  scheduledRunner: TaskRunner;\n};\n\n/**\n * ScheduleTaskParameters\n * @public\n */\nexport type ScheduleTaskParameters = {\n  id: string;\n  task: TaskFunction;\n  scheduledRunner: TaskRunner;\n};\n\n/**\n * Scheduler responsible for all search tasks.\n * @public\n */\nexport class Scheduler {\n  private logger: Logger;\n  private schedule: { [id: string]: TaskEnvelope };\n  private abortControllers: AbortController[];\n  private isRunning: boolean;\n\n  constructor(options: { logger: Logger }) {\n    this.logger = options.logger;\n    this.schedule = {};\n    this.abortControllers = [];\n    this.isRunning = false;\n  }\n\n  /**\n   * Adds each task and interval to the schedule.\n   * When running the tasks, the scheduler waits at least for the time specified\n   * in the interval once the task was completed, before running it again.\n   */\n  addToSchedule(options: ScheduleTaskParameters) {\n    const { id, task, scheduledRunner } = options;\n\n    if (this.isRunning) {\n      throw new Error(\n        'Cannot add task to schedule that has already been started.',\n      );\n    }\n\n    if (this.schedule[id]) {\n      throw new Error(`Task with id ${id} already exists.`);\n    }\n\n    this.schedule[id] = { task, scheduledRunner };\n  }\n\n  /**\n   * Starts the scheduling process for each task\n   */\n  start() {\n    this.logger.info('Starting all scheduled search tasks.');\n    this.isRunning = true;\n    Object.keys(this.schedule).forEach(id => {\n      const abortController = new AbortController();\n      this.abortControllers.push(abortController);\n      const { task, scheduledRunner } = this.schedule[id];\n      scheduledRunner.run({\n        id,\n        fn: task,\n        signal: abortController.signal,\n      });\n    });\n  }\n\n  /**\n   * Stop all scheduled tasks.\n   */\n  stop() {\n    this.logger.info('Stopping all scheduled search tasks.');\n    for (const abortController of this.abortControllers) {\n      abortController.abort();\n    }\n    this.abortControllers = [];\n    this.isRunning = false;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DocumentDecoratorFactory,\n  DocumentTypeInfo,\n  SearchEngine,\n} from '@backstage/plugin-search-common';\nimport { Transform, pipeline } from 'stream';\nimport { Logger } from 'winston';\nimport { Scheduler } from './Scheduler';\nimport {\n  IndexBuilderOptions,\n  RegisterCollatorParameters,\n  RegisterDecoratorParameters,\n} from './types';\n\n/**\n * Used for adding collators, decorators and compile them into tasks which are added to a scheduler returned to the caller.\n * @public\n */\nexport class IndexBuilder {\n  private collators: Record<string, RegisterCollatorParameters>;\n  private decorators: Record<string, DocumentDecoratorFactory[]>;\n  private documentTypes: Record<string, DocumentTypeInfo>;\n  private searchEngine: SearchEngine;\n  private logger: Logger;\n\n  constructor(options: IndexBuilderOptions) {\n    this.collators = {};\n    this.decorators = {};\n    this.documentTypes = {};\n    this.logger = options.logger;\n    this.searchEngine = options.searchEngine;\n  }\n\n  /**\n   * Responsible for returning the registered search engine.\n   */\n  getSearchEngine(): SearchEngine {\n    return this.searchEngine;\n  }\n\n  /**\n   * Responsible for returning the registered document types.\n   */\n  getDocumentTypes(): Record<string, DocumentTypeInfo> {\n    return this.documentTypes;\n  }\n\n  /**\n   * Makes the index builder aware of a collator that should be executed at the\n   * given refresh interval.\n   */\n  addCollator(options: RegisterCollatorParameters): void {\n    const { factory, schedule } = options;\n\n    this.logger.info(\n      `Added ${factory.constructor.name} collator factory for type ${factory.type}`,\n    );\n    this.collators[factory.type] = {\n      factory,\n      schedule,\n    };\n    this.documentTypes[factory.type] = {\n      visibilityPermission: factory.visibilityPermission,\n    };\n  }\n\n  /**\n   * Makes the index builder aware of a decorator. If no types are provided on\n   * the decorator, it will be applied to documents from all known collators,\n   * otherwise it will only be applied to documents of the given types.\n   */\n  addDecorator(options: RegisterDecoratorParameters): void {\n    const { factory } = options;\n    const types = factory.types || ['*'];\n    this.logger.info(\n      `Added decorator ${factory.constructor.name} to types ${types.join(\n        ', ',\n      )}`,\n    );\n    types.forEach(type => {\n      if (this.decorators.hasOwnProperty(type)) {\n        this.decorators[type].push(factory);\n      } else {\n        this.decorators[type] = [factory];\n      }\n    });\n  }\n\n  /**\n   * Compiles collators and decorators into tasks, which are added to a\n   * scheduler returned to the caller.\n   */\n  async build(): Promise<{ scheduler: Scheduler }> {\n    const scheduler = new Scheduler({\n      logger: this.logger,\n    });\n\n    Object.keys(this.collators).forEach(type => {\n      const taskLogger = this.logger.child({ documentType: type });\n      scheduler.addToSchedule({\n        id: `search_index_${type.replace('-', '_').toLocaleLowerCase('en-US')}`,\n        scheduledRunner: this.collators[type].schedule,\n        task: async () => {\n          // Instantiate the collator.\n          const collator = await this.collators[type].factory.getCollator();\n          taskLogger.info(\n            `Collating documents for ${type} via ${this.collators[type].factory.constructor.name}`,\n          );\n\n          // Instantiate all relevant decorators.\n          const decorators: Transform[] = await Promise.all(\n            (this.decorators['*'] || [])\n              .concat(this.decorators[type] || [])\n              .map(async factory => {\n                const decorator = await factory.getDecorator();\n                taskLogger.info(\n                  `Attached decorator via ${factory.constructor.name} to ${type} index pipeline.`,\n                );\n                return decorator;\n              }),\n          );\n\n          // Instantiate the indexer.\n          const indexer = await this.searchEngine.getIndexer(type);\n\n          // Compose collator/decorators/indexer into a pipeline\n          return new Promise<void>((resolve, reject) => {\n            pipeline(\n              [collator, ...decorators, indexer],\n              (error: NodeJS.ErrnoException | null) => {\n                if (error) {\n                  taskLogger.error(\n                    `Collating documents for ${type} failed: ${error}`,\n                  );\n                  reject(error);\n                } else {\n                  // Signal index pipeline completion!\n                  taskLogger.info(`Collating documents for ${type} succeeded`);\n                  resolve();\n                }\n              },\n            );\n          });\n        },\n      });\n    });\n\n    return {\n      scheduler,\n    };\n  }\n}\n"],"names":["__publicField","pipeline"],"mappings":"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"}