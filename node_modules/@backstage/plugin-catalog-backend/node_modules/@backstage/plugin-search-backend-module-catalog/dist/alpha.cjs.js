'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var alpha$2 = require('@backstage/plugin-catalog-node/alpha');
var pluginSearchBackendModuleCatalog = require('@backstage/plugin-search-backend-module-catalog');
var alpha$1 = require('@backstage/plugin-search-backend-node/alpha');
var config = require('./cjs/config-6c7298b0.cjs.js');
require('@backstage/backend-tasks');
require('@backstage/errors');

const catalogCollatorExtensionPoint = backendPluginApi.createExtensionPoint({
  id: "search.catalogCollator.extension"
});
var alpha = backendPluginApi.createBackendModule({
  pluginId: "search",
  moduleId: "catalog-collator",
  register(env) {
    let entityTransformer;
    env.registerExtensionPoint(catalogCollatorExtensionPoint, {
      setEntityTransformer(transformer) {
        if (entityTransformer) {
          throw new Error("setEntityTransformer can only be called once");
        }
        entityTransformer = transformer;
      }
    });
    env.registerInit({
      deps: {
        config: backendPluginApi.coreServices.rootConfig,
        discovery: backendPluginApi.coreServices.discovery,
        tokenManager: backendPluginApi.coreServices.tokenManager,
        scheduler: backendPluginApi.coreServices.scheduler,
        indexRegistry: alpha$1.searchIndexRegistryExtensionPoint,
        catalog: alpha$2.catalogServiceRef
      },
      async init({
        config: config$1,
        discovery,
        tokenManager,
        scheduler,
        indexRegistry,
        catalog
      }) {
        indexRegistry.addCollator({
          schedule: scheduler.createScheduledTaskRunner(
            config.readScheduleConfigOptions(config$1)
          ),
          factory: pluginSearchBackendModuleCatalog.DefaultCatalogCollatorFactory.fromConfig(config$1, {
            entityTransformer,
            discovery,
            tokenManager,
            catalogClient: catalog
          })
        });
      }
    });
  }
});

exports.catalogCollatorExtensionPoint = catalogCollatorExtensionPoint;
exports["default"] = alpha;
//# sourceMappingURL=alpha.cjs.js.map
