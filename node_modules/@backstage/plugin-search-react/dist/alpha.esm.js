import React, { lazy } from 'react';
import { createExtensionDataRef, createSchemaFromZod, createExtension, ExtensionBoundary } from '@backstage/frontend-plugin-api';
import { a as SearchResultListItemExtension } from './esm/extensions-c878c532.esm.js';
import '@backstage/core-plugin-api';
import '@material-ui/core';
import '@material-ui/core/Typography';
import '@backstage/core-components';

function createSearchResultListItemExtension(options) {
  var _a;
  const configSchema = "configSchema" in options ? options.configSchema : createSchemaFromZod(
    (z) => z.object({
      noTrack: z.boolean().default(false)
    })
  );
  return createExtension({
    kind: "search-result-list-item",
    namespace: options.namespace,
    name: options.name,
    attachTo: (_a = options.attachTo) != null ? _a : {
      id: "page:search",
      input: "items"
    },
    configSchema,
    output: {
      item: createSearchResultListItemExtension.itemDataRef
    },
    factory({ config, node }) {
      const ExtensionComponent = lazy(
        () => options.component({ config }).then((component) => ({ default: component }))
      );
      return {
        item: {
          predicate: options.predicate,
          component: (props) => /* @__PURE__ */ React.createElement(ExtensionBoundary, { node }, /* @__PURE__ */ React.createElement(
            SearchResultListItemExtension,
            {
              rank: props.rank,
              result: props.result,
              noTrack: config.noTrack
            },
            /* @__PURE__ */ React.createElement(ExtensionComponent, { ...props })
          ))
        }
      };
    }
  });
}
((createSearchResultListItemExtension2) => {
  createSearchResultListItemExtension2.itemDataRef = createExtensionDataRef("search.search-result-list-item.item");
})(createSearchResultListItemExtension || (createSearchResultListItemExtension = {}));

export { createSearchResultListItemExtension };
//# sourceMappingURL=alpha.esm.js.map
