import React, { useMemo, useCallback, createElement, Fragment, isValidElement, cloneElement } from 'react';
import { AnalyticsContext, useAnalytics, createReactExtension, useElementFilter, getComponentData } from '@backstage/core-plugin-api';
import { makeStyles, ListItemIcon, ListItemText, Box, ListItem, List } from '@material-ui/core';
import Typography from '@material-ui/core/Typography';
import { Link } from '@backstage/core-components';

const useStyles = makeStyles(
  () => ({
    highlight: {}
  }),
  { name: "BackstageHighlightedSearchResultText" }
);
const HighlightedSearchResultText = (props) => {
  const { text, preTag, postTag } = props;
  const classes = useStyles();
  const terms = useMemo(
    () => text.split(new RegExp(`(${preTag}.+?${postTag})`)),
    [postTag, preTag, text]
  );
  return /* @__PURE__ */ React.createElement(React.Fragment, null, terms.map(
    (t, idx) => t.includes(preTag) ? /* @__PURE__ */ React.createElement("mark", { className: classes.highlight, key: idx }, t.replace(new RegExp(`${preTag}|${postTag}`, "g"), "")) : t
  ));
};

const DefaultResultListItemComponent = ({
  result,
  highlight,
  icon,
  secondaryAction,
  lineClamp = 5
}) => {
  if (!result)
    return null;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, icon && /* @__PURE__ */ React.createElement(ListItemIcon, null, icon), /* @__PURE__ */ React.createElement(
    ListItemText,
    {
      primaryTypographyProps: { variant: "h6" },
      primary: /* @__PURE__ */ React.createElement(Link, { noTrack: true, to: result.location }, (highlight == null ? void 0 : highlight.fields.title) ? /* @__PURE__ */ React.createElement(
        HighlightedSearchResultText,
        {
          text: (highlight == null ? void 0 : highlight.fields.title) || "",
          preTag: (highlight == null ? void 0 : highlight.preTag) || "",
          postTag: (highlight == null ? void 0 : highlight.postTag) || ""
        }
      ) : result.title),
      secondary: /* @__PURE__ */ React.createElement(
        Typography,
        {
          component: "span",
          style: {
            display: "-webkit-box",
            WebkitBoxOrient: "vertical",
            WebkitLineClamp: lineClamp,
            overflow: "hidden"
          },
          color: "textSecondary",
          variant: "body2"
        },
        (highlight == null ? void 0 : highlight.fields.text) ? /* @__PURE__ */ React.createElement(
          HighlightedSearchResultText,
          {
            text: highlight.fields.text,
            preTag: highlight.preTag,
            postTag: highlight.postTag
          }
        ) : result.text
      )
    }
  ), secondaryAction && /* @__PURE__ */ React.createElement(Box, { alignItems: "flex-end" }, secondaryAction));
};
const HigherOrderDefaultResultListItem = (props) => {
  return /* @__PURE__ */ React.createElement(
    AnalyticsContext,
    {
      attributes: {
        pluginId: "search",
        extension: "DefaultResultListItem"
      }
    },
    /* @__PURE__ */ React.createElement(DefaultResultListItemComponent, { ...props })
  );
};

const SEARCH_RESULT_LIST_ITEM_EXTENSION = "search.results.list.items.extensions.v1";
const findSearchResultListItemExtensionElement = (elements, result) => {
  for (const element of elements) {
    if (!isValidElement(element))
      continue;
    const predicate = getComponentData(
      element,
      SEARCH_RESULT_LIST_ITEM_EXTENSION
    );
    if (!(predicate == null ? void 0 : predicate(result)))
      continue;
    return cloneElement(element, {
      rank: result.rank,
      highlight: result.highlight,
      result: result.document,
      // Use props in situations where a consumer is manually rendering the extension
      ...element.props
    });
  }
  return null;
};
const SearchResultListItemExtension = (props) => {
  const {
    rank,
    result,
    noTrack,
    children,
    alignItems = "flex-start",
    ...rest
  } = props;
  const analytics = useAnalytics();
  const handleClickCapture = useCallback(() => {
    if (noTrack)
      return;
    if (!result)
      return;
    analytics.captureEvent("discover", result.title, {
      attributes: { to: result.location },
      value: rank
    });
  }, [rank, result, noTrack, analytics]);
  return /* @__PURE__ */ React.createElement(
    ListItem,
    {
      divider: true,
      alignItems,
      onClickCapture: handleClickCapture,
      ...rest
    },
    children
  );
};
const createSearchResultListItemExtension = (options) => {
  const { name, component, predicate = () => true } = options;
  return createReactExtension({
    name,
    component: {
      lazy: () => component().then(
        (type) => (props) => /* @__PURE__ */ React.createElement(
          SearchResultListItemExtension,
          {
            rank: props.rank,
            result: props.result,
            noTrack: props.noTrack
          },
          createElement(type, props)
        )
      )
    },
    data: {
      [SEARCH_RESULT_LIST_ITEM_EXTENSION]: predicate
    }
  });
};
const useSearchResultListItemExtensions = (children) => {
  const elements = useElementFilter(
    children,
    (collection) => {
      return collection.selectByComponentData({
        key: SEARCH_RESULT_LIST_ITEM_EXTENSION
      }).getElements();
    },
    [children]
  );
  return useCallback(
    (result, key) => {
      const element = findSearchResultListItemExtensionElement(
        elements,
        result
      );
      return /* @__PURE__ */ React.createElement(Fragment, { key }, element != null ? element : /* @__PURE__ */ React.createElement(
        SearchResultListItemExtension,
        {
          rank: result.rank,
          result: result.document
        },
        /* @__PURE__ */ React.createElement(
          HigherOrderDefaultResultListItem,
          {
            rank: result.rank,
            highlight: result.highlight,
            result: result.document
          }
        )
      ));
    },
    [elements]
  );
};
const SearchResultListItemExtensions = (props) => {
  const { results, children, ...rest } = props;
  const render = useSearchResultListItemExtensions(children);
  return /* @__PURE__ */ React.createElement(List, { ...rest }, results.map(render));
};

export { HigherOrderDefaultResultListItem as H, SearchResultListItemExtensions as S, SearchResultListItemExtension as a, HighlightedSearchResultText as b, createSearchResultListItemExtension as c, useSearchResultListItemExtensions as u };
//# sourceMappingURL=extensions-c878c532.esm.js.map
