'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var pluginAuthNode = require('@backstage/plugin-auth-node');
var googleAuthLibrary = require('google-auth-library');
var passportGoogleOauth20 = require('passport-google-oauth20');
var backendPluginApi = require('@backstage/backend-plugin-api');

const googleAuthenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  initialize({ callbackUrl, config }) {
    const clientId = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    return pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new passportGoogleOauth20.Strategy(
        {
          clientID: clientId,
          clientSecret,
          callbackURL: callbackUrl,
          passReqToCallback: false
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            {
              fullProfile,
              params,
              accessToken
            },
            {
              refreshToken
            }
          );
        }
      )
    );
  },
  async start(input, helper) {
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent"
    });
  },
  async authenticate(input, helper) {
    return helper.authenticate(input);
  },
  async refresh(input, helper) {
    return helper.refresh(input);
  },
  async logout(input) {
    if (input.refreshToken) {
      const oauthClient = new googleAuthLibrary.OAuth2Client();
      await oauthClient.revokeToken(input.refreshToken);
    }
  }
});

exports.googleSignInResolvers = void 0;
((googleSignInResolvers2) => {
  googleSignInResolvers2.emailMatchingUserEntityAnnotation = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const { profile } = info;
        if (!profile.email) {
          throw new Error("Google profile contained no email");
        }
        return ctx.signInWithCatalogUser({
          annotations: {
            "google.com/email": profile.email
          }
        });
      };
    }
  });
})(exports.googleSignInResolvers || (exports.googleSignInResolvers = {}));

const authModuleGoogleProvider = backendPluginApi.createBackendModule({
  pluginId: "auth",
  moduleId: "google-provider",
  register(reg) {
    reg.registerInit({
      deps: {
        providers: pluginAuthNode.authProvidersExtensionPoint
      },
      async init({ providers }) {
        providers.registerProvider({
          providerId: "google",
          factory: pluginAuthNode.createOAuthProviderFactory({
            authenticator: googleAuthenticator,
            signInResolverFactories: {
              ...exports.googleSignInResolvers,
              ...pluginAuthNode.commonSignInResolvers
            }
          })
        });
      }
    });
  }
});

exports["default"] = authModuleGoogleProvider;
exports.googleAuthenticator = googleAuthenticator;
//# sourceMappingURL=index.cjs.js.map
