{"version":3,"file":"index.cjs.js","sources":["../src/ipcClient.ts","../src/DevDataStore.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ntype SendMessage = Exclude<typeof process.send, undefined>;\n\ninterface Request {\n  id: number;\n  method: string;\n  body: unknown;\n  type: string;\n}\n\ntype Response =\n  | {\n      type: string;\n      id: number;\n      body: unknown;\n    }\n  | {\n      type: string;\n      id: number;\n      error: Error;\n    };\n\nconst requestType = '@backstage/cli/channel/request';\nconst responseType = '@backstage/cli/channel/response';\n\nconst IPC_TIMEOUT_MS = 5000;\n\n/**\n * The client side of an IPC communication channel.\n *\n * @internal\n */\nexport class BackstageIpcClient {\n  #messageId = 0;\n  #sendMessage: SendMessage;\n\n  /**\n   * Creates a new client if we're in a child process with IPC and BACKSTAGE_CLI_CHANNEL is set.\n   */\n  static create(): BackstageIpcClient | undefined {\n    const sendMessage = process.send?.bind(process);\n    return sendMessage && process.env.BACKSTAGE_CLI_CHANNEL\n      ? new BackstageIpcClient(sendMessage)\n      : undefined;\n  }\n\n  constructor(sendMessage: SendMessage) {\n    this.#sendMessage = sendMessage;\n  }\n\n  /**\n   * Send a request to the parent process and wait for a response.\n   */\n  async request<TRequestBody, TResponseBody>(\n    method: string,\n    body: TRequestBody,\n  ): Promise<TResponseBody> {\n    return new Promise((resolve, reject) => {\n      const id = this.#messageId++;\n\n      const request: Request = {\n        type: requestType,\n        id,\n        method,\n        body,\n      };\n\n      let timeout: NodeJS.Timeout | undefined = undefined;\n\n      const messageHandler = (response: Response) => {\n        if (response?.type !== responseType) {\n          return;\n        }\n        if (response.id !== id) {\n          return;\n        }\n\n        clearTimeout(timeout);\n        timeout = undefined;\n        process.removeListener('message', messageHandler);\n\n        if ('error' in response) {\n          const error = new Error(response.error.message);\n          if (response.error.name) {\n            error.name = response.error.name;\n          }\n          reject(error);\n        } else {\n          resolve(response.body as TResponseBody);\n        }\n      };\n\n      timeout = setTimeout(() => {\n        reject(new Error(`IPC request '${method}' with ID ${id} timed out`));\n        process.removeListener('message', messageHandler);\n      }, IPC_TIMEOUT_MS);\n      timeout.unref();\n\n      process.addListener('message', messageHandler as () => void);\n\n      this.#sendMessage(request, (e: Error) => {\n        if (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n}\n\nexport const ipcClient = BackstageIpcClient.create();\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BackstageIpcClient, ipcClient } from './ipcClient';\n\ninterface SaveRequest {\n  key: string;\n  data: unknown;\n}\n\ninterface SaveResponse {\n  saved: boolean;\n}\n\ninterface LoadRequest {\n  key: string;\n}\n\ninterface LoadResponse {\n  loaded: boolean;\n  data: unknown;\n}\n\n/**\n * A data store that can be used to store temporary data during development.\n *\n * @public\n */\nexport class DevDataStore {\n  static #instance?: DevDataStore;\n\n  /**\n   * Tries to acquire a DevDataStore instance. This will only succeed when the backend\n   * process is being run through the `@backstage/cli` in development mode.\n   *\n   * @returns A DevDataStore instance, or undefined if not available.\n   */\n  static get(): DevDataStore | undefined {\n    if (ipcClient) {\n      if (!this.#instance) {\n        this.#instance = new DevDataStore(ipcClient);\n      }\n      return this.#instance;\n    }\n    return undefined;\n  }\n\n  /** @internal */\n  static forTest(client: Pick<BackstageIpcClient, 'request'>): DevDataStore {\n    return new DevDataStore(client as BackstageIpcClient);\n  }\n\n  #client: BackstageIpcClient;\n\n  private constructor(client: BackstageIpcClient) {\n    this.#client = client;\n  }\n\n  /**\n   * Save data to the data store.\n   *\n   * @param key - The key used to identify the data.\n   * @param data - The data to save. The data will be serialized using advanced IPC serialization.\n   * @returns A promise that resolves to a result object that indicates whether the data was saved.\n   */\n  async save<T>(key: string, data: T): Promise<{ saved: boolean }> {\n    return this.#client.request<SaveRequest, SaveResponse>(\n      'DevDataStore.save',\n      { key, data },\n    );\n  }\n\n  /**\n   * Loads data from the data store.\n   *\n   * @param key - The key used to identify the data.\n   * @returns A promise that resolves to a result object that indicates whether the data was loaded, as well as the data.\n   */\n  async load<T>(key: string): Promise<{ loaded: boolean; data: T }> {\n    const result = await this.#client.request<LoadRequest, LoadResponse>(\n      'DevDataStore.load',\n      { key },\n    );\n    return result as { loaded: boolean; data: T };\n  }\n}\n"],"names":["__privateAdd","__privateSet","__privateGet"],"mappings":"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"}