import { Config } from '@backstage/config';
import express from 'express';
import { Logger } from 'winston';
import { PluginEndpointDiscovery } from '@backstage/backend-common';

/** @public */
interface RouterOptions {
    logger: Logger;
    config: Config;
    discovery: PluginEndpointDiscovery;
    skipInvalidProxies?: boolean;
    reviveConsumedRequestBodies?: boolean;
}
/**
 * Creates a new {@link https://expressjs.com/en/api.html#router | "express router"} that proxy each target configured under the `proxy` key of the config
 * @example
 * ```ts
 * let router = await createRouter({logger, config, discovery});
 * ```
 * @config
 * ```yaml
 * proxy:
 *  simple-example: http://simple.example.com:8080 # Opt 1 Simple URL String
 *  '/larger-example/v1': # Opt 2 `http-proxy-middleware` compatible object
 *    target: http://larger.example.com:8080/svc.v1
 *    headers:
 *      Authorization: Bearer ${EXAMPLE_AUTH_TOKEN}
 *```
 * @see https://backstage.io/docs/plugins/proxying
 * @public
 */
declare function createRouter(options: RouterOptions): Promise<express.Router>;

export { RouterOptions, createRouter };
