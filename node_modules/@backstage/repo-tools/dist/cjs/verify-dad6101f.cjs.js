'use strict';

var fs = require('fs-extra');
var YAML = require('js-yaml');
var lodash = require('lodash');
var path = require('path');
var chalk = require('chalk');
var Parser = require('@apidevtools/swagger-parser');
var runner = require('./runner-d5b73286.cjs.js');
var paths = require('./paths-9ab9b8a8.cjs.js');
var helpers = require('./helpers-712dfada.cjs.js');
require('p-limit');
require('portfinder');
require('@backstage/cli-common');
require('@backstage/cli-node');
require('minimatch');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var YAML__default = /*#__PURE__*/_interopDefaultLegacy(YAML);
var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var Parser__default = /*#__PURE__*/_interopDefaultLegacy(Parser);

async function verify(directoryPath) {
  let openapiPath = "";
  try {
    openapiPath = await helpers.getPathToOpenApiSpec(directoryPath);
  } catch {
    return;
  }
  const yaml = YAML__default["default"].load(await fs__default["default"].readFile(openapiPath, "utf8"));
  await Parser__default["default"].validate(lodash.cloneDeep(yaml));
  const schemaPath = path.join(directoryPath, helpers.TS_SCHEMA_PATH);
  if (!await fs__default["default"].pathExists(schemaPath)) {
    throw new Error(`No \`${helpers.TS_SCHEMA_PATH}\` file found.`);
  }
  const schema = await (function (t) { return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require(t)); }); })(path.resolve(path.join(directoryPath, helpers.TS_MODULE)));
  if (!schema.spec) {
    throw new Error(`\`${helpers.TS_SCHEMA_PATH}\` needs to have a 'spec' export.`);
  }
  if (!lodash.isEqual(schema.spec, yaml)) {
    const path$1 = path.relative(paths.paths.targetRoot, directoryPath);
    throw new Error(
      `\`${helpers.YAML_SCHEMA_PATH}\` and \`${helpers.TS_SCHEMA_PATH}\` do not match. Please run \`yarn backstage-repo-tools package schema openapi generate\` from '${path$1}' to regenerate \`${helpers.TS_SCHEMA_PATH}\`.`
    );
  }
}
async function bulkCommand(paths = []) {
  const resultsList = await runner.runner(paths, (dir) => verify(dir));
  let failed = false;
  for (const { relativeDir, resultText } of resultsList) {
    if (resultText) {
      console.log();
      console.log(chalk__default["default"].red(`OpenAPI validation failed in ${relativeDir}:`));
      console.log(resultText.trimStart());
      failed = true;
    }
  }
  if (failed) {
    process.exit(1);
  } else {
    console.log(chalk__default["default"].green("Verified all files."));
  }
}

exports.bulkCommand = bulkCommand;
//# sourceMappingURL=verify-dad6101f.cjs.js.map
