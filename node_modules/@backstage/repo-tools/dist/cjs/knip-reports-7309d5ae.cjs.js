'use strict';

var paths = require('./paths-9ab9b8a8.cjs.js');
var pLimit = require('p-limit');
var os = require('os');
var path = require('path');
var fs = require('fs-extra');
var util = require('./util-bfc74a41.cjs.js');
require('@backstage/cli-common');
require('@backstage/cli-node');
require('minimatch');
require('child_process');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var pLimit__default = /*#__PURE__*/_interopDefaultLegacy(pLimit);
var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);

const ignoredPackages = ["packages/techdocs-cli-embedded-app"];
function logKnipReportInstructions() {
  console.log("");
  console.log(
    "*************************************************************************************"
  );
  console.log(
    "* You have uncommitted changes to the knip reports of a package.                    *"
  );
  console.log(
    "* To solve this, run `yarn build:knip-reports` and commit all md file changes.      *"
  );
  console.log(
    "*************************************************************************************"
  );
  console.log("");
}
async function generateKnipConfig({ packageDir }) {
  const knipConfig = {
    entry: [
      "dev/index.{ts,tsx}",
      "src/index.{ts,tsx}",
      "src/alpha.{ts,tsx}",
      "src/routes.ts",
      "src/run.ts"
    ],
    jest: {
      entry: ["src/setupTests.ts", "**/*.test.{ts,tsx}"]
    },
    storybook: { entry: "src/components/**/*.stories.tsx" },
    ignore: [
      ".eslintrc.js",
      "config.d.ts",
      "knexfile.js",
      "node_modules/**",
      "dist/**",
      "{fixtures,migrations,templates}/**"
    ],
    ignoreDependencies: [
      "@backstage/cli",
      // everything depends on this for its package.json commands
      "@backstage/theme"
      // this uses `declare module` in .d.ts so is implicitly used whenever extensions are needed
    ]
  };
  await fs__default["default"].writeFile(
    `${packageDir}/knip.json`,
    JSON.stringify(knipConfig, null, 2)
  );
}
function cleanKnipConfig({ packageDir }) {
  if (fs__default["default"].existsSync(`${packageDir}/knip.json`)) {
    fs__default["default"].rmSync(`${packageDir}/knip.json`);
  }
}
async function handlePackage({
  packageDir,
  knipDir,
  isLocalBuild
}) {
  console.log(`## Processing ${packageDir}`);
  if (ignoredPackages.includes(packageDir)) {
    console.log(`Skipping ${packageDir}`);
    return;
  }
  const fullDir = paths.paths.resolveTargetRoot(packageDir);
  const reportPath = path.resolve(fullDir, "knip-report.md");
  const run = util.createBinRunner(fullDir, "");
  await generateKnipConfig({ packageDir: fullDir });
  const report = await run(
    `${knipDir}/knip.js`,
    `--directory ${fullDir}`,
    // Run in the package directory
    "--config knip.json",
    "--no-exit-code",
    // Removing this will end the process in case there are findings by knip
    "--no-progress",
    // Remove unnecessary debugging from output
    // TODO: Add more checks when dependencies start to look ok, see https://knip.dev/reference/cli#--include
    "--include dependencies,unlisted",
    "--reporter markdown"
  );
  cleanKnipConfig({ packageDir: fullDir });
  const existingReport = await fs__default["default"].readFile(reportPath, "utf8").catch((error) => {
    if (error.code === "ENOENT") {
      return void 0;
    }
    throw error;
  });
  if (existingReport !== report) {
    if (isLocalBuild) {
      console.warn(`Knip report changed for ${packageDir}`);
      await fs__default["default"].writeFile(reportPath, report);
    } else {
      logKnipReportInstructions();
      if (existingReport) {
        console.log("");
        console.log(
          `The conflicting file is ${path.relative(
            paths.paths.targetRoot,
            reportPath
          )}, expecting the following content:`
        );
        console.log("");
        console.log(report);
        logKnipReportInstructions();
      }
      throw new Error(`Knip report changed for ${packageDir}, `);
    }
  }
}
async function runKnipReports({
  packageDirs,
  isLocalBuild
}) {
  const knipDir = paths.paths.resolveTargetRoot("./node_modules/knip/bin/");
  const limiter = pLimit__default["default"](os__default["default"].cpus().length);
  try {
    await Promise.all(
      packageDirs.map(
        (packageDir) => limiter(
          async () => handlePackage({ packageDir, knipDir, isLocalBuild })
        )
      )
    );
  } catch (e) {
    console.log(
      `Error occurred during knip reporting: ${e}, cleaning knip configs`
    );
    packageDirs.map((packageDir) => {
      const fullDir = paths.paths.resolveTargetRoot(packageDir);
      cleanKnipConfig({ packageDir: fullDir });
    });
  }
}

const buildKnipReports = async (paths$1 = [], opts) => {
  const isCiBuild = opts.ci;
  const isAllPackages = !(paths$1 == null ? void 0 : paths$1.length);
  const selectedPackageDirs = await paths.resolvePackagePaths({
    paths: paths$1,
    include: opts.include,
    exclude: opts.exclude
  });
  if (isAllPackages && !isCiBuild) {
    console.log("");
    console.log(
      "TIP: You can generate knip-reports for select packages by passing package paths:"
    );
    console.log("");
    console.log(
      "       yarn build:knip-reports packages/config packages/core-plugin-api plugins/*"
    );
    console.log("");
  }
  if (selectedPackageDirs.length > 0) {
    console.log("# Generating package knip reports");
    await runKnipReports({
      packageDirs: selectedPackageDirs,
      isLocalBuild: !isCiBuild
    });
  }
};

exports.buildKnipReports = buildKnipReports;
//# sourceMappingURL=knip-reports-7309d5ae.cjs.js.map
