'use strict';

var chalk = require('chalk');
var path = require('path');
var helpers = require('./helpers-712dfada.cjs.js');
var paths = require('./paths-9ab9b8a8.cjs.js');
var fs = require('fs-extra');
var exec$1 = require('./exec-7bf444eb.cjs.js');
var backendCommon = require('@backstage/backend-common');
var YAML = require('js-yaml');
var util = require('util');
var child_process = require('child_process');
require('@backstage/cli-common');
require('@backstage/cli-node');
require('minimatch');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var YAML__default = /*#__PURE__*/_interopDefaultLegacy(YAML);

async function generate$1(outputDirectory) {
  const resolvedOpenapiPath = await helpers.getPathToCurrentOpenApiSpec();
  const resolvedOutputDirectory = paths.paths.resolveTargetRoot(
    outputDirectory,
    helpers.OUTPUT_PATH
  );
  fs.mkdirpSync(resolvedOutputDirectory);
  await fs__default["default"].mkdirp(resolvedOutputDirectory);
  await fs__default["default"].writeFile(
    path.resolve(resolvedOutputDirectory, ".openapi-generator-ignore"),
    helpers.OPENAPI_IGNORE_FILES.join("\n")
  );
  await exec$1.exec(
    "node",
    [
      backendCommon.resolvePackagePath("@openapitools/openapi-generator-cli", "main.js"),
      "generate",
      "-i",
      resolvedOpenapiPath,
      "-o",
      resolvedOutputDirectory,
      "-g",
      "typescript",
      "-c",
      backendCommon.resolvePackagePath(
        "@backstage/repo-tools",
        "templates/typescript-backstage.yaml"
      ),
      "--generator-key",
      "v3.0"
    ],
    {
      maxBuffer: Number.MAX_VALUE,
      cwd: backendCommon.resolvePackagePath("@backstage/repo-tools"),
      env: {
        ...process.env
      }
    }
  );
  await exec$1.exec(
    `yarn backstage-cli package lint --fix ${resolvedOutputDirectory}`
  );
  const prettier = paths.paths.resolveTargetRoot("node_modules/.bin/prettier");
  if (prettier) {
    await exec$1.exec(`${prettier} --write ${resolvedOutputDirectory}`);
  }
  fs__default["default"].removeSync(path.resolve(resolvedOutputDirectory, ".openapi-generator-ignore"));
  fs__default["default"].rmSync(path.resolve(resolvedOutputDirectory, ".openapi-generator"), {
    recursive: true,
    force: true
  });
}
async function command$2(outputPackage) {
  try {
    await generate$1(outputPackage);
    console.log(
      chalk__default["default"].green(`Generated client in ${outputPackage}/${helpers.OUTPUT_PATH}`)
    );
  } catch (err) {
    console.log();
    console.log(chalk__default["default"].red(`Client generation failed:`));
    console.log(err);
    process.exit(1);
  }
}

const exec = util.promisify(child_process.exec);
async function generate() {
  const openapiPath = await helpers.getPathToCurrentOpenApiSpec();
  const yaml = YAML__default["default"].load(await fs__default["default"].readFile(openapiPath, "utf8"));
  const tsPath = paths.paths.resolveTarget(helpers.TS_SCHEMA_PATH);
  await fs__default["default"].writeFile(
    tsPath,
    `//

// ******************************************************************
// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *
// ******************************************************************
import {createValidatedOpenApiRouter} from '@backstage/backend-openapi-utils';
export const spec = ${JSON.stringify(yaml, null, 2)} as const;
export const createOpenApiRouter = async (
  options?: Parameters<typeof createValidatedOpenApiRouter>['1'],
) => createValidatedOpenApiRouter<typeof spec>(spec, options);
`
  );
  await exec(`yarn backstage-cli package lint --fix ${tsPath}`);
  if (await paths.paths.resolveTargetRoot("node_modules/.bin/prettier")) {
    await exec(`yarn prettier --write ${tsPath}`, {
      cwd: paths.paths.targetRoot
    });
  }
}
async function command$1() {
  try {
    await generate();
    console.log(chalk__default["default"].green("Generated all files."));
  } catch (err) {
    console.log(chalk__default["default"].red(`OpenAPI server stub generation failed.`));
    console.log(err.message);
    process.exit(1);
  }
}

async function command(opts) {
  if (!opts.clientPackage && !opts.server) {
    console.log(
      chalk__default["default"].red("Either --client-package or --server must be defined.")
    );
    process.exit(1);
  }
  if (opts.clientPackage) {
    await command$2(opts.clientPackage);
  }
  if (opts.server) {
    await command$1();
  }
}

exports.command = command;
//# sourceMappingURL=index-c6ffc4f4.cjs.js.map
