'use strict';

var fs = require('fs-extra');
var paths = require('./paths-9ab9b8a8.cjs.js');
var path = require('path');

const YAML_SCHEMA_PATH = "src/schema/openapi.yaml";
const TS_MODULE = "src/schema/openapi.generated";
const TS_SCHEMA_PATH = `${TS_MODULE}.ts`;
const OUTPUT_PATH = "src/generated";
const OPENAPI_IGNORE_FILES = [
  // Get rid of the default files.
  "*.md",
  "*.mustache",
  // The rest of these have to be explicit, otherwise they get added if this was a *.*
  "apis/baseapi.ts",
  "apis/exception.ts",
  "auth/*",
  "http/*",
  "middleware.ts",
  "servers.ts",
  "util.ts",
  "configuration.ts",
  "rxjsStub.ts",
  ".gitignore",
  // Override the created version.
  "apis/*.ts",
  "!apis/*.client.ts",
  "models/*.ts",
  "!models/*.model.ts",
  // Always include index.ts files.
  "!index.ts",
  "!**/index.ts",
  // Weird API typings.
  "types/ObjectParamAPI.ts",
  "types/ObservableAPI.ts",
  "types/PromiseAPI.ts",
  "git_push.sh",
  "package.json",
  "tsconfig.json"
];

const getPathToFile = async (directory, filename) => {
  return path.resolve(directory, filename);
};
const getRelativePathToFile = async (filename) => {
  return await getPathToFile(paths.paths.targetDir, filename);
};
const assertExists = async (path) => {
  if (!await fs.pathExists(path)) {
    throw new Error(`Could not find ${path}.`);
  }
  return path;
};
const getPathToOpenApiSpec = async (directory) => {
  return await assertExists(await getPathToFile(directory, YAML_SCHEMA_PATH));
};
const getPathToCurrentOpenApiSpec = async () => {
  return await assertExists(await getRelativePathToFile(YAML_SCHEMA_PATH));
};

exports.OPENAPI_IGNORE_FILES = OPENAPI_IGNORE_FILES;
exports.OUTPUT_PATH = OUTPUT_PATH;
exports.TS_MODULE = TS_MODULE;
exports.TS_SCHEMA_PATH = TS_SCHEMA_PATH;
exports.YAML_SCHEMA_PATH = YAML_SCHEMA_PATH;
exports.getPathToCurrentOpenApiSpec = getPathToCurrentOpenApiSpec;
exports.getPathToOpenApiSpec = getPathToOpenApiSpec;
exports.getRelativePathToFile = getRelativePathToFile;
//# sourceMappingURL=helpers-712dfada.cjs.js.map
