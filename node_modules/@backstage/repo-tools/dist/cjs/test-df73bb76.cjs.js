'use strict';

var fs = require('fs-extra');
var path = require('path');
var chalk = require('chalk');
var runner = require('./runner-d5b73286.cjs.js');
var helpers = require('./helpers-712dfada.cjs.js');
var paths = require('./paths-9ab9b8a8.cjs.js');
var exec = require('./exec-7bf444eb.cjs.js');
require('p-limit');
require('portfinder');
require('@backstage/cli-common');
require('@backstage/cli-node');
require('minimatch');
require('util');
require('child_process');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);

async function test(directoryPath, { port }, options) {
  let openapiPath = path.join(directoryPath, helpers.YAML_SCHEMA_PATH);
  try {
    openapiPath = await helpers.getPathToOpenApiSpec(directoryPath);
  } catch {
    return;
  }
  const opticConfigFilePath = path.join(directoryPath, "optic.yml");
  if (!await fs__default["default"].pathExists(opticConfigFilePath)) {
    return;
  }
  let opticLocation = "";
  try {
    opticLocation = (await exec.exec(`yarn bin optic`, [], { cwd: paths.paths.ownRoot })).stdout;
  } catch (err) {
    throw new Error(
      `Failed to find an Optic CLI installation, ensure that you have @useoptic/optic installed in the root of your repo. If not, run yarn add @useoptic/optic from the root of your repo.`
    );
  }
  try {
    await exec.exec(
      `${opticLocation.trim()} capture`,
      [
        helpers.YAML_SCHEMA_PATH,
        "--server-override",
        `http://localhost:${port}`,
        (options == null ? void 0 : options.update) ? "--update" : ""
      ],
      {
        cwd: directoryPath,
        env: {
          ...process.env,
          PORT: `${port}`
        }
      }
    );
  } catch (err) {
    err.message = err.stderr + err.stdout;
    err.message = err.message.split("\n").map((e) => e.replace(/.{1} Sending requests to server/, "")).filter((e) => !e.includes("PASS")).filter((e) => e.trim()).join("\n");
    throw err;
  }
  if (await paths.paths.resolveTargetRoot("node_modules/.bin/prettier") && (options == null ? void 0 : options.update)) {
    await exec.exec(`yarn prettier`, ["--write", openapiPath]);
  }
}
async function bulkCommand(paths = [], options) {
  const resultsList = await runner.runner(
    paths,
    (dir, runnerOptions) => test(dir, runnerOptions, options),
    {
      concurrencyLimit: 1,
      startingPort: 9e3
    }
  );
  let failed = false;
  for (const { relativeDir, resultText } of resultsList) {
    if (resultText) {
      console.log();
      console.log(
        chalk__default["default"].red(
          `OpenAPI runtime validation against tests failed in ${relativeDir}:`
        )
      );
      console.log(resultText.trimStart());
      failed = true;
    }
  }
  if (failed) {
    process.exit(1);
  } else {
    console.log(chalk__default["default"].green("Verified all specifications against test data."));
  }
}

exports.bulkCommand = bulkCommand;
//# sourceMappingURL=test-df73bb76.cjs.js.map
