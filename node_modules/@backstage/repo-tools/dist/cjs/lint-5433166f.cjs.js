'use strict';

var spectralCore = require('@stoplight/spectral-core');
var spectralParsers = require('@stoplight/spectral-parsers');
var ruleset = require('@apisyouwonthate/style-guide');
var fs = require('fs-extra');
var chalk = require('chalk');
var runner = require('./runner-d5b73286.cjs.js');
var spectralRulesets = require('@stoplight/spectral-rulesets');
var types = require('@stoplight/types');
var spectralFormatters = require('@stoplight/spectral-formatters');
var helpers = require('./helpers-712dfada.cjs.js');
require('./paths-9ab9b8a8.cjs.js');
require('@backstage/cli-common');
require('@backstage/cli-node');
require('minimatch');
require('path');
require('p-limit');
require('portfinder');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var ruleset__default = /*#__PURE__*/_interopDefaultLegacy(ruleset);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);

async function lint(directoryPath, config) {
  const { strict } = config != null ? config : {};
  let openapiPath = "";
  try {
    openapiPath = await helpers.getPathToOpenApiSpec(directoryPath);
  } catch {
    return;
  }
  const openapiFileContent = await fs__default["default"].readFile(openapiPath, "utf8");
  const document = new spectralCore.Document(openapiFileContent, spectralParsers.Yaml, openapiPath);
  const spectral = new spectralCore.Spectral();
  const backstageRuleset = new spectralCore.Ruleset(
    {
      extends: [spectralRulesets.oas, ruleset__default["default"]],
      overrides: [
        {
          files: ["*"],
          rules: {
            "api-health": "off",
            "api-home": "off",
            "api-home-get": "off",
            "operation-tags": "off",
            "hosts-https-only-oas3": "off",
            "no-unknown-error-format": "off"
          }
        }
      ]
    },
    { source: openapiPath }
  );
  spectral.setRuleset(backstageRuleset);
  const result = await spectral.run(document);
  const errors = result.filter((e) => e.severity === types.DiagnosticSeverity.Error);
  const numberOfErrors = strict && result.length || errors.length;
  if (numberOfErrors > 0) {
    console.error(
      spectralFormatters.pretty(result, {
        // Used to fulfill the types, but not used for prettier output.
        failSeverity: types.DiagnosticSeverity.Error
      })
    );
    throw new Error(`${numberOfErrors} error(s) found when linting your spec.`);
  }
}
async function bulkCommand(paths = [], options) {
  const resultsList = await runner.runner(
    paths,
    (dir) => lint(dir, { strict: !!options.strict })
  );
  let failed = false;
  for (const { relativeDir, resultText } of resultsList) {
    if (resultText) {
      console.log();
      console.log(
        chalk__default["default"].red(`OpenAPI yaml file linting failed in ${relativeDir}:`)
      );
      console.log(resultText.trimStart());
      failed = true;
    }
  }
  if (failed) {
    process.exit(1);
  } else {
    console.log(chalk__default["default"].green("Linted all files."));
  }
}

exports.bulkCommand = bulkCommand;
//# sourceMappingURL=lint-5433166f.cjs.js.map
