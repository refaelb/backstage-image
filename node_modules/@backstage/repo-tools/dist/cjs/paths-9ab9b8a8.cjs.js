'use strict';

var cliCommon = require('@backstage/cli-common');
var cliNode = require('@backstage/cli-node');
var minimatch = require('minimatch');
var path = require('path');

const paths = cliCommon.findPaths(__dirname);
async function resolvePackagePaths(options = {}) {
  const { paths: providedPaths, include, exclude } = options;
  let packages = await cliNode.PackageGraph.listTargetPackages();
  if (providedPaths && providedPaths.length > 0) {
    packages = packages.filter(
      ({ dir }) => providedPaths.some(
        (path$1) => new minimatch.Minimatch(path$1).match(path.relative(paths.targetRoot, dir)) || isChildPath(dir, path$1)
      )
    );
  }
  if (include) {
    packages = packages.filter(
      (pkg) => include.some(
        (pattern) => new minimatch.Minimatch(pattern).match(path.relative(paths.targetRoot, pkg.dir))
      )
    );
  }
  if (exclude) {
    packages = packages.filter(
      (pkg) => exclude.some(
        (pattern) => !new minimatch.Minimatch(pattern).match(
          path.relative(paths.targetRoot, pkg.dir)
        )
      )
    );
  }
  return packages.map((pkg) => path.relative(paths.targetRoot, pkg.dir));
}
function isChildPath(base, path$1) {
  const relative = path.relative(base, path$1);
  if (relative === "") {
    return true;
  }
  const outsideBase = relative.startsWith("..");
  const differentDrive = path.isAbsolute(relative);
  return !outsideBase && !differentDrive;
}

exports.paths = paths;
exports.resolvePackagePaths = resolvePackagePaths;
//# sourceMappingURL=paths-9ab9b8a8.cjs.js.map
