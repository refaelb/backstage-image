{"version":3,"file":"index.esm.js","sources":["../src/helpers.ts","../src/awsS3/config.ts","../src/awsS3/AwsS3Integration.ts","../src/azure/AzureUrl.ts","../src/azure/config.ts","../src/azure/AzureIntegration.ts","../src/azure/core.ts","../src/azure/CachedAzureDevOpsCredentialsProvider.ts","../src/azure/DefaultAzureDevOpsCredentialsProvider.ts","../src/azure/deprecated.ts","../src/bitbucket/config.ts","../src/bitbucket/BitbucketIntegration.ts","../src/bitbucket/core.ts","../src/bitbucketCloud/config.ts","../src/bitbucketCloud/BitbucketCloudIntegration.ts","../src/bitbucketCloud/core.ts","../src/bitbucketServer/config.ts","../src/bitbucketServer/BitbucketServerIntegration.ts","../src/bitbucketServer/core.ts","../src/gerrit/config.ts","../src/gerrit/core.ts","../src/gerrit/GerritIntegration.ts","../src/gitea/config.ts","../src/gitea/core.ts","../src/gitea/GiteaIntegration.ts","../src/github/config.ts","../src/github/core.ts","../src/github/SingleInstanceGithubCredentialsProvider.ts","../src/github/DefaultGithubCredentialsProvider.ts","../src/github/GithubIntegration.ts","../src/github/deprecated.ts","../src/gitlab/config.ts","../src/gitlab/core.ts","../src/gitlab/GitLabIntegration.ts","../src/gitlab/SingleInstanceGitlabCredentialsProvider.ts","../src/gitlab/DefaultGitlabCredentialsProvider.ts","../src/googleGcs/config.ts","../src/ScmIntegrations.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { ScmIntegration, ScmIntegrationsGroup } from './types';\n\n/** Checks whether the given argument is a valid URL hostname */\nexport function isValidHost(host: string): boolean {\n  const check = new URL('http://example.com');\n  check.host = host;\n  return check.host === host;\n}\n\n/** Checks whether the given argument is a valid URL */\nexport function isValidUrl(url: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function basicIntegrations<T extends ScmIntegration>(\n  integrations: T[],\n  getHost: (integration: T) => string,\n): ScmIntegrationsGroup<T> {\n  return {\n    list(): T[] {\n      return integrations;\n    },\n    byUrl(url: string | URL): T | undefined {\n      try {\n        const parsed = typeof url === 'string' ? new URL(url) : url;\n        return integrations.find(i => getHost(i) === parsed.host);\n      } catch {\n        return undefined;\n      }\n    },\n    byHost(host: string): T | undefined {\n      return integrations.find(i => getHost(i) === host);\n    },\n  };\n}\n\n/**\n * Default implementation of {@link ScmIntegration} `resolveUrl`, that only\n * works with URL pathname based providers.\n *\n * @public\n */\nexport function defaultScmResolveUrl(options: {\n  url: string;\n  base: string;\n  lineNumber?: number;\n}): string {\n  const { url, base, lineNumber } = options;\n\n  // If it is a fully qualified URL - then return it verbatim\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return url;\n  } catch {\n    // ignore intentionally\n  }\n\n  let updated: URL;\n\n  if (url.startsWith('/')) {\n    // If it is an absolute path, move relative to the repo root\n    const { filepath } = parseGitUrl(base);\n    updated = new URL(base);\n    const repoRootPath = trimEnd(\n      updated.pathname.substring(0, updated.pathname.length - filepath.length),\n      '/',\n    );\n    updated.pathname = `${repoRootPath}${url}`;\n  } else {\n    // For relative URLs, just let the default URL constructor handle the\n    // resolving. Note that this essentially will treat the last segment of the\n    // base as a file - NOT a folder - unless the url ends in a slash.\n    updated = new URL(url, base);\n  }\n\n  updated.search = new URL(base).search;\n  if (lineNumber) {\n    updated.hash = `L${lineNumber}`;\n  }\n  return updated.toString();\n}\n\n/**\n * Sets up handlers for request mocking\n *\n * Copied from test-utils, as that is a frontend-only package\n *\n * @param worker - service worker\n */\nexport function setupRequestMockHandlers(worker: {\n  listen: (t: any) => void;\n  close: () => void;\n  resetHandlers: () => void;\n}) {\n  beforeAll(() => worker.listen({ onUnhandledRequest: 'error' }));\n  afterAll(() => worker.close());\n  afterEach(() => worker.resetHandlers());\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\nconst AMAZON_AWS_HOST = 'amazonaws.com';\n\n/**\n * The configuration parameters for a single AWS S3 provider.\n *\n * @public\n */\nexport type AwsS3IntegrationConfig = {\n  /**\n   * Host, derived from endpoint, and defaults to amazonaws.com\n   */\n  host: string;\n\n  /**\n   * (Optional) AWS Endpoint.\n   * The endpoint URI to send requests to. The default endpoint is built from the configured region.\n   * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#constructor-property\n   *\n   * Supports non-AWS providers, e.g. for LocalStack, endpoint may look like http://localhost:4566\n   */\n  endpoint?: string;\n\n  /**\n   * (Optional) Whether to use path style URLs when communicating with S3.\n   * Defaults to false.\n   * This allows providers like LocalStack, Minio and Wasabi (and possibly others) to be used.\n   */\n  s3ForcePathStyle?: boolean;\n\n  /**\n   * (Optional) User access key id\n   */\n  accessKeyId?: string;\n\n  /**\n   * (Optional) User secret access key\n   */\n  secretAccessKey?: string;\n\n  /**\n   * (Optional) ARN of role to be assumed\n   */\n  roleArn?: string;\n\n  /**\n   * (Optional) External ID to use when assuming role\n   */\n  externalId?: string;\n};\n\n/**\n * Reads a single Aws S3 integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\n\nexport function readAwsS3IntegrationConfig(\n  config: Config,\n): AwsS3IntegrationConfig {\n  const endpoint = config.getOptionalString('endpoint');\n  const s3ForcePathStyle =\n    config.getOptionalBoolean('s3ForcePathStyle') ?? false;\n  let host;\n  let pathname;\n  if (endpoint) {\n    try {\n      const url = new URL(endpoint);\n      host = url.host;\n      pathname = url.pathname;\n    } catch {\n      throw new Error(\n        `invalid awsS3 integration config, endpoint '${endpoint}' is not a valid URL`,\n      );\n    }\n    if (pathname !== '/') {\n      throw new Error(\n        `invalid awsS3 integration config, endpoints cannot contain path, got '${endpoint}'`,\n      );\n    }\n  } else {\n    host = AMAZON_AWS_HOST;\n  }\n\n  const accessKeyId = config.getOptionalString('accessKeyId');\n  const secretAccessKey = config.getOptionalString('secretAccessKey')?.trim();\n  const roleArn = config.getOptionalString('roleArn');\n  const externalId = config.getOptionalString('externalId');\n\n  return {\n    host,\n    endpoint,\n    s3ForcePathStyle,\n    accessKeyId,\n    secretAccessKey,\n    roleArn,\n    externalId,\n  };\n}\n\n/**\n * Reads a set of AWS S3 integration configs, and inserts some defaults for\n * public Amazon AWS if not specified.\n *\n * @param configs - The config objects of the integrations\n * @public\n */\nexport function readAwsS3IntegrationConfigs(\n  configs: Config[],\n): AwsS3IntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAwsS3IntegrationConfig);\n\n  // If no explicit amazonaws.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AMAZON_AWS_HOST)) {\n    result.push({\n      host: AMAZON_AWS_HOST,\n    });\n  }\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { AwsS3IntegrationConfig, readAwsS3IntegrationConfigs } from './config';\n\n/**\n * Integrates with AWS S3 or compatible solutions.\n *\n * @public\n */\nexport class AwsS3Integration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AwsS3Integration> = ({ config }) => {\n    const configs = readAwsS3IntegrationConfigs(\n      config.getOptionalConfigArray('integrations.awsS3') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new AwsS3Integration(c)),\n      i => i.config.host,\n    );\n  };\n\n  get type(): string {\n    return 'awsS3';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): AwsS3IntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  constructor(private readonly integrationConfig: AwsS3IntegrationConfig) {}\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number | undefined;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    // TODO: Implement edit URL for awsS3\n    return url;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VERSION_PREFIX_GIT_BRANCH = 'GB';\n\nexport class AzureUrl {\n  /**\n   * Parses an azure URL as copied from the browser address bar.\n   *\n   * Throws an error if the URL is not a valid azure repo URL.\n   */\n  static fromRepoUrl(repoUrl: string): AzureUrl {\n    const url = new URL(repoUrl);\n\n    let owner;\n    let project;\n    let repo;\n\n    const parts = url.pathname.split('/').map(part => decodeURIComponent(part));\n    if (parts[2] === '_git') {\n      owner = parts[1];\n      project = repo = parts[3];\n    } else if (parts[3] === '_git') {\n      owner = parts[1];\n      project = parts[2];\n      repo = parts[4];\n    } else if (parts[4] === '_git') {\n      owner = `${parts[1]}/${parts[2]}`;\n      project = parts[3];\n      repo = parts[5];\n    }\n\n    if (!owner || !project || !repo) {\n      throw new Error('Azure URL must point to a git repository');\n    }\n\n    const path = url.searchParams.get('path') ?? undefined;\n\n    let ref;\n    const version = url.searchParams.get('version');\n    if (version) {\n      const prefix = version.slice(0, 2);\n      if (prefix !== 'GB') {\n        throw new Error('Azure URL version must point to a git branch');\n      }\n      ref = version.slice(2);\n    }\n\n    return new AzureUrl(url.origin, owner, project, repo, path, ref);\n  }\n\n  #origin: string;\n  #owner: string;\n  #project: string;\n  #repo: string;\n  #path?: string;\n  #ref?: string;\n\n  private constructor(\n    origin: string,\n    owner: string,\n    project: string,\n    repo: string,\n    path?: string,\n    ref?: string,\n  ) {\n    this.#origin = origin;\n    this.#owner = owner;\n    this.#project = project;\n    this.#repo = repo;\n    this.#path = path;\n    this.#ref = ref;\n  }\n\n  #baseUrl = (...parts: string[]): URL => {\n    const url = new URL(this.#origin);\n    url.pathname = parts.map(part => encodeURIComponent(part)).join('/');\n    return url;\n  };\n\n  /**\n   * Returns a repo URL that can be used to navigate to the resource in azure.\n   *\n   * Throws an error if the URL is not a valid azure repo URL.\n   */\n  toRepoUrl(): string {\n    let url;\n    if (this.#project === this.#repo) {\n      url = this.#baseUrl(this.#owner, '_git', this.#repo);\n    } else {\n      url = this.#baseUrl(this.#owner, this.#project, '_git', this.#repo);\n    }\n\n    if (this.#path) {\n      url.searchParams.set('path', this.#path);\n    }\n    if (this.#ref) {\n      url.searchParams.set('version', VERSION_PREFIX_GIT_BRANCH + this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the file download URL for this azure resource.\n   *\n   * Throws an error if the URL does not point to a file.\n   */\n  toFileUrl(): string {\n    if (!this.#path) {\n      throw new Error(\n        'Azure URL must point to a specific path to be able to download a file',\n      );\n    }\n\n    const url = this.#baseUrl(\n      this.#owner,\n      this.#project,\n      '_apis',\n      'git',\n      'repositories',\n      this.#repo,\n      'items',\n    );\n    url.searchParams.set('api-version', '6.0');\n    url.searchParams.set('path', this.#path);\n\n    if (this.#ref) {\n      url.searchParams.set('version', this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the archive download URL for this azure resource.\n   *\n   * Throws an error if the URL does not point to a repo.\n   */\n  toArchiveUrl(): string {\n    const url = this.#baseUrl(\n      this.#owner,\n      this.#project,\n      '_apis',\n      'git',\n      'repositories',\n      this.#repo,\n      'items',\n    );\n    url.searchParams.set('recursionLevel', 'full');\n    url.searchParams.set('download', 'true');\n    url.searchParams.set('api-version', '6.0');\n\n    if (this.#path) {\n      url.searchParams.set('scopePath', this.#path);\n    }\n    if (this.#ref) {\n      url.searchParams.set('version', this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the API url for fetching commits from a branch for this azure resource.\n   *\n   * Throws an error if the URL does not point to a commit.\n   */\n  toCommitsUrl(): string {\n    const url = this.#baseUrl(\n      this.#owner,\n      this.#project,\n      '_apis',\n      'git',\n      'repositories',\n      this.#repo,\n      'commits',\n    );\n    url.searchParams.set('api-version', '6.0');\n\n    if (this.#ref) {\n      url.searchParams.set('searchCriteria.itemVersion.version', this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the name of the owner, a user or an organization.\n   */\n  getOwner(): string {\n    return this.#owner;\n  }\n\n  /**\n   * Returns the name of the project.\n   */\n  getProject(): string {\n    return this.#project;\n  }\n\n  /**\n   * Returns the name of the repo.\n   */\n  getRepo(): string {\n    return this.#repo;\n  }\n\n  /**\n   * Returns the file path within the repo if the URL contains one.\n   */\n  getPath(): string | undefined {\n    return this.#path;\n  }\n\n  /**\n   * Returns the git ref in the repo if the URL contains one.\n   */\n  getRef(): string | undefined {\n    return this.#ref;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { isValidHost } from '../helpers';\n\nconst AZURE_HOST = 'dev.azure.com';\n\n/**\n * The configuration parameters for a single Azure provider.\n *\n * @public\n */\nexport type AzureIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"dev.azure.com\".\n   *\n   * Currently only \"dev.azure.com\" is supported.\n   */\n  host: string;\n\n  /**\n   * The authorization token to use for requests.\n   *\n   * If no token is specified, anonymous access is used.\n   *\n   * @deprecated Use `credentials` instead.\n   */\n  token?: string;\n\n  /**\n   * The credential to use for requests.\n   *\n   * If no credential is specified anonymous access is used.\n   *\n   * @deprecated Use `credentials` instead.\n   */\n  credential?: AzureDevOpsCredential;\n\n  /**\n   * The credentials to use for requests. If multiple credentials are specified the first one that matches the organization is used.\n   * If not organization matches the first credential without an organization is used.\n   *\n   * If no credentials are specified at all, either a default credential (for Azure DevOps) or anonymous access (for Azure DevOps Server) is used.\n   */\n  credentials?: AzureDevOpsCredential[];\n};\n\n/**\n * The kind of Azure DevOps credential.\n * @public\n */\nexport type AzureDevOpsCredentialKind =\n  | 'PersonalAccessToken'\n  | 'ClientSecret'\n  | 'ManagedIdentity';\n\n/**\n * Common fields for the Azure DevOps credentials.\n * @public\n */\nexport type AzureCredentialBase = {\n  /**\n   * The kind of credential.\n   */\n  kind: AzureDevOpsCredentialKind;\n  /**\n   * The Azure DevOps organizations for which to use this credential.\n   */\n  organizations?: string[];\n};\n\n/**\n * A client secret credential that was generated for an App Registration.\n * @public\n */\nexport type AzureClientSecretCredential = AzureCredentialBase & {\n  kind: 'ClientSecret';\n  /**\n   * The Entra ID tenant\n   */\n  tenantId: string;\n  /**\n   * The client id\n   */\n  clientId: string;\n\n  /**\n   * The client secret\n   */\n  clientSecret: string;\n};\n\n/**\n * A managed identity credential.\n * @public\n */\nexport type AzureManagedIdentityCredential = AzureCredentialBase & {\n  kind: 'ManagedIdentity';\n  /**\n   * The clientId\n   */\n  clientId: string;\n};\n\n/**\n * A personal access token credential.\n * @public\n */\nexport type PersonalAccessTokenCredential = AzureCredentialBase & {\n  kind: 'PersonalAccessToken';\n  personalAccessToken: string;\n};\n\n/**\n * The general shape of a credential that can be used to authenticate to Azure DevOps.\n * @public\n */\nexport type AzureDevOpsCredentialLike = Omit<\n  Partial<AzureClientSecretCredential> &\n    Partial<AzureManagedIdentityCredential> &\n    Partial<PersonalAccessTokenCredential>,\n  'kind'\n>;\n\n/**\n * Credential used to authenticate to Azure DevOps.\n * @public\n */\nexport type AzureDevOpsCredential =\n  | AzureClientSecretCredential\n  | AzureManagedIdentityCredential\n  | PersonalAccessTokenCredential;\n\nconst AzureDevOpsCredentialFields = [\n  'clientId',\n  'clientSecret',\n  'tenantId',\n  'personalAccessToken',\n] as const;\ntype AzureDevOpsCredentialField = (typeof AzureDevOpsCredentialFields)[number];\n\nconst AzureDevopsCredentialFieldMap = new Map<\n  AzureDevOpsCredentialKind,\n  AzureDevOpsCredentialField[]\n>([\n  ['ClientSecret', ['clientId', 'clientSecret', 'tenantId']],\n  ['ManagedIdentity', ['clientId']],\n  ['PersonalAccessToken', ['personalAccessToken']],\n]);\n\nfunction asAzureDevOpsCredential(\n  credential: AzureDevOpsCredentialLike,\n): AzureDevOpsCredential {\n  for (const entry of AzureDevopsCredentialFieldMap.entries()) {\n    const [kind, requiredFields] = entry;\n\n    const forbiddenFields = AzureDevOpsCredentialFields.filter(\n      field => !requiredFields.includes(field as AzureDevOpsCredentialField),\n    );\n\n    if (\n      requiredFields.every(field => credential[field] !== undefined) &&\n      forbiddenFields.every(field => credential[field] === undefined)\n    ) {\n      return {\n        kind,\n        organizations: credential.organizations,\n        ...requiredFields.reduce((acc, field) => {\n          acc[field] = credential[field];\n          return acc;\n        }, {} as Record<string, any>),\n      } as AzureDevOpsCredential;\n    }\n  }\n  throw new Error('is not a valid credential');\n}\n\n/**\n * Reads a single Azure integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readAzureIntegrationConfig(\n  config: Config,\n): AzureIntegrationConfig {\n  const host = config.getOptionalString('host') ?? AZURE_HOST;\n\n  let credentialConfigs = config\n    .getOptionalConfigArray('credentials')\n    ?.map(credential => {\n      const result: Partial<AzureDevOpsCredentialLike> = {\n        organizations: credential.getOptionalStringArray('organizations'),\n        personalAccessToken: credential\n          .getOptionalString('personalAccessToken')\n          ?.trim(),\n        tenantId: credential.getOptionalString('tenantId'),\n        clientId: credential.getOptionalString('clientId'),\n        clientSecret: credential.getOptionalString('clientSecret')?.trim(),\n      };\n\n      return result;\n    });\n\n  const token = config.getOptionalString('token')?.trim();\n\n  if (\n    config.getOptional('credential') !== undefined &&\n    config.getOptional('credentials') !== undefined\n  ) {\n    throw new Error(\n      `Invalid Azure integration config, 'credential' and 'credentials' cannot be used together. Use 'credentials' instead.`,\n    );\n  }\n\n  if (\n    config.getOptional('token') !== undefined &&\n    config.getOptional('credentials') !== undefined\n  ) {\n    throw new Error(\n      `Invalid Azure integration config, 'token' and 'credentials' cannot be used together. Use 'credentials' instead.`,\n    );\n  }\n\n  if (token !== undefined) {\n    const mapped = [{ personalAccessToken: token }];\n    credentialConfigs = credentialConfigs?.concat(mapped) ?? mapped;\n  }\n\n  if (config.getOptional('credential') !== undefined) {\n    const mapped = [\n      {\n        organizations: config.getOptionalStringArray(\n          'credential.organizations',\n        ),\n        token: config.getOptionalString('credential.token')?.trim(),\n        tenantId: config.getOptionalString('credential.tenantId'),\n        clientId: config.getOptionalString('credential.clientId'),\n        clientSecret: config\n          .getOptionalString('credential.clientSecret')\n          ?.trim(),\n      },\n    ];\n    credentialConfigs = credentialConfigs?.concat(mapped) ?? mapped;\n  }\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Azure integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  let credentials: AzureDevOpsCredential[] | undefined = undefined;\n  if (credentialConfigs !== undefined) {\n    const errors = credentialConfigs\n      ?.reduce((acc, credentialConfig, index) => {\n        let error: string | undefined = undefined;\n        try {\n          asAzureDevOpsCredential(credentialConfig);\n        } catch (e) {\n          error = e.message;\n        }\n\n        if (error !== undefined) {\n          acc.push(`credential at position ${index + 1} ${error}`);\n        }\n\n        return acc;\n      }, Array.of<string>())\n      .concat(\n        Object.entries(\n          credentialConfigs\n            .filter(\n              credential =>\n                credential.organizations !== undefined &&\n                credential.organizations.length > 0,\n            )\n            .reduce((acc, credential, index) => {\n              credential.organizations?.forEach(organization => {\n                if (!acc[organization]) {\n                  acc[organization] = [];\n                }\n\n                acc[organization].push(index + 1);\n              });\n\n              return acc;\n            }, {} as Record<string, number[]>),\n        )\n          .filter(([_, indexes]) => indexes.length > 1)\n          .reduce((acc, [org, indexes]) => {\n            acc.push(\n              `organization ${org} is specified multiple times in credentials at positions ${indexes\n                .slice(0, indexes.length - 1)\n                .join(', ')} and ${indexes[indexes.length - 1]}`,\n            );\n            return acc;\n          }, Array.of<string>()),\n      );\n\n    if (errors?.length > 0) {\n      throw new Error(\n        `Invalid Azure integration config for ${host}: ${errors.join('; ')}`,\n      );\n    }\n\n    credentials = credentialConfigs.map(credentialConfig =>\n      asAzureDevOpsCredential(credentialConfig),\n    );\n\n    if (\n      credentials.some(\n        credential => credential.kind !== 'PersonalAccessToken',\n      ) &&\n      host !== AZURE_HOST\n    ) {\n      throw new Error(\n        `Invalid Azure integration config for ${host}, only personal access tokens can be used with hosts other than ${AZURE_HOST}`,\n      );\n    }\n\n    if (\n      credentials.filter(\n        credential =>\n          credential.organizations === undefined ||\n          credential.organizations.length === 0,\n      ).length > 1\n    ) {\n      throw new Error(\n        `Invalid Azure integration config for ${host}, you cannot specify multiple credentials without organizations`,\n      );\n    }\n  }\n\n  return {\n    host,\n    credentials,\n  };\n}\n\n/**\n * Reads a set of Azure integration configs, and inserts some defaults for\n * public Azure if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readAzureIntegrationConfigs(\n  configs: Config[],\n): AzureIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAzureIntegrationConfig);\n\n  // If no explicit dev.azure.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AZURE_HOST)) {\n    result.push({ host: AZURE_HOST });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, isValidUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { AzureUrl } from './AzureUrl';\nimport { AzureIntegrationConfig, readAzureIntegrationConfigs } from './config';\n\n/**\n * Microsoft Azure based integration.\n *\n * @public\n */\nexport class AzureIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AzureIntegration> = ({ config }) => {\n    const configs = readAzureIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.azure') ?? [],\n    );\n\n    return basicIntegrations(\n      configs.map(c => new AzureIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: AzureIntegrationConfig) {}\n\n  get type(): string {\n    return 'azure';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): AzureIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  /*\n   * Azure repo URLs on the form with a `path` query param are treated specially.\n   *\n   * Example base URL: https://dev.azure.com/organization/project/_git/repository?path=%2Fcatalog-info.yaml\n   */\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base } = options;\n\n    // If we can parse the url, it is absolute - then return it verbatim\n    if (isValidUrl(url)) {\n      return url;\n    }\n\n    try {\n      const azureUrl = AzureUrl.fromRepoUrl(base);\n      const newUrl = new URL(base);\n\n      // We lean on the URL path resolution logic to resolve the path param\n      const mockBaseUrl = new URL(`https://a.com${azureUrl.getPath() ?? ''}`);\n      const updatedPath = new URL(url, mockBaseUrl).pathname;\n      newUrl.searchParams.set('path', updatedPath);\n\n      if (options.lineNumber) {\n        newUrl.searchParams.set('line', String(options.lineNumber));\n        newUrl.searchParams.set('lineEnd', String(options.lineNumber + 1));\n        newUrl.searchParams.set('lineStartColumn', '1');\n        newUrl.searchParams.set('lineEndColumn', '1');\n      }\n\n      return newUrl.toString();\n    } catch {\n      // If not an actual file path within a repo, treat the URL as raw\n      return new URL(url, base).toString();\n    }\n  }\n\n  resolveEditUrl(url: string): string {\n    // TODO: Implement edit URL for Azure, fallback to view url as I don't know\n    // how azure works.\n    return url;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AzureUrl } from './AzureUrl';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * - from: `https://dev.azure.com/{organization}/{project}/_git/reponame?path={path}&version=GB{commitOrBranch}&_a=contents`\n * - to:   `https://dev.azure.com/{organization}/{project}/_apis/git/repositories/reponame/items?path={path}&version={commitOrBranch}`\n *\n * @param url - A URL pointing to a file\n * @public\n */\nexport function getAzureFileFetchUrl(url: string): string {\n  return AzureUrl.fromRepoUrl(url).toFileUrl();\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @public\n */\nexport function getAzureDownloadUrl(url: string): string {\n  return AzureUrl.fromRepoUrl(url).toArchiveUrl();\n}\n\n/**\n * Given a URL, return the API URL to fetch commits on the branch.\n *\n * @param url - A URL pointing to a repository or a sub-path\n * @public\n */\nexport function getAzureCommitsUrl(url: string): string {\n  return AzureUrl.fromRepoUrl(url).toCommitsUrl();\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AzureDevOpsCredential, PersonalAccessTokenCredential } from './config';\nimport {\n  ClientSecretCredential,\n  ManagedIdentityCredential,\n  TokenCredential,\n} from '@azure/identity';\nimport {\n  AzureDevOpsCredentials,\n  AzureDevOpsCredentialsProvider,\n} from './types';\n\ntype CachedAzureDevOpsCredentials = AzureDevOpsCredentials & {\n  expiresAt?: number;\n};\n\nfunction exhaustiveCheck(_param: never) {}\n\nconst tenMinutes = 1000 * 60 * 10;\n\n/**\n * A credentials provider that caches the credentials for as long as it is valid.\n *\n * @public\n */\nexport class CachedAzureDevOpsCredentialsProvider\n  implements AzureDevOpsCredentialsProvider\n{\n  azureDevOpsScope = '499b84ac-1321-427f-aa17-267ca6975798/.default';\n  cached: CachedAzureDevOpsCredentials | undefined;\n\n  static fromAzureDevOpsCredential(\n    credential: AzureDevOpsCredential,\n  ): CachedAzureDevOpsCredentialsProvider {\n    switch (credential.kind) {\n      case 'PersonalAccessToken':\n        return CachedAzureDevOpsCredentialsProvider.fromPersonalAccessTokenCredential(\n          credential,\n        );\n      case 'ClientSecret':\n        return CachedAzureDevOpsCredentialsProvider.fromTokenCredential(\n          new ClientSecretCredential(\n            credential.tenantId,\n            credential.clientId,\n            credential.clientSecret,\n          ),\n        );\n      case 'ManagedIdentity':\n        return CachedAzureDevOpsCredentialsProvider.fromTokenCredential(\n          new ManagedIdentityCredential(credential.clientId),\n        );\n      default:\n        exhaustiveCheck(credential);\n\n        throw new Error(\n          `Credential kind '${(credential as any).kind}' not supported`,\n        );\n    }\n  }\n\n  static fromTokenCredential(\n    credential: TokenCredential,\n  ): CachedAzureDevOpsCredentialsProvider {\n    return new CachedAzureDevOpsCredentialsProvider(credential);\n  }\n\n  static fromPersonalAccessTokenCredential(\n    credential: PersonalAccessTokenCredential,\n  ) {\n    return new CachedAzureDevOpsCredentialsProvider(\n      credential.personalAccessToken,\n    );\n  }\n\n  private constructor(private readonly credential: TokenCredential | string) {}\n\n  async getCredentials(): Promise<AzureDevOpsCredentials> {\n    if (\n      this.cached === undefined ||\n      (this.cached.expiresAt !== undefined &&\n        Date.now() > this.cached.expiresAt)\n    ) {\n      if (typeof this.credential === 'string') {\n        this.cached = {\n          headers: {\n            Authorization: `Basic ${btoa(`:${this.credential}`)}`,\n          },\n          type: 'pat',\n          token: this.credential,\n        };\n      } else {\n        const accessToken = await this.credential.getToken(\n          this.azureDevOpsScope,\n        );\n\n        if (!accessToken) {\n          throw new Error('Failed to retrieve access token');\n        }\n\n        this.cached = {\n          expiresAt: accessToken.expiresOnTimestamp - tenMinutes,\n          headers: {\n            Authorization: `Bearer ${accessToken.token}`,\n          },\n          type: 'bearer',\n          token: accessToken.token,\n        };\n      }\n    }\n\n    return this.cached;\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  AzureDevOpsCredentials,\n  AzureDevOpsCredentialsProvider,\n} from './types';\nimport { CachedAzureDevOpsCredentialsProvider } from './CachedAzureDevOpsCredentialsProvider';\nimport { ScmIntegrationRegistry } from '../registry';\nimport { DefaultAzureCredential } from '@azure/identity';\n\n/**\n * Default implementation of AzureDevOpsCredentialsProvider.\n * @public\n */\nexport class DefaultAzureDevOpsCredentialsProvider\n  implements AzureDevOpsCredentialsProvider\n{\n  static fromIntegrations(\n    integrations: ScmIntegrationRegistry,\n  ): DefaultAzureDevOpsCredentialsProvider {\n    const providers = integrations.azure.list().reduce((acc, integration) => {\n      integration.config.credentials?.forEach(credential => {\n        if (\n          credential.organizations === undefined ||\n          credential.organizations.length === 0\n        ) {\n          if (acc.get(integration.config.host) === undefined) {\n            acc.set(\n              integration.config.host,\n              CachedAzureDevOpsCredentialsProvider.fromAzureDevOpsCredential(\n                credential,\n              ),\n            );\n          }\n        } else {\n          const provider =\n            CachedAzureDevOpsCredentialsProvider.fromAzureDevOpsCredential(\n              credential,\n            );\n          credential.organizations?.forEach(organization => {\n            acc.set(`${integration.config.host}/${organization}`, provider);\n          });\n        }\n      });\n\n      if (\n        integration.config.host === 'dev.azure.com' &&\n        acc.get(integration.config.host) === undefined\n      ) {\n        acc.set(\n          integration.config.host,\n          CachedAzureDevOpsCredentialsProvider.fromTokenCredential(\n            new DefaultAzureCredential(),\n          ),\n        );\n      }\n\n      return acc;\n    }, new Map<string, CachedAzureDevOpsCredentialsProvider>());\n\n    return new DefaultAzureDevOpsCredentialsProvider(providers);\n  }\n\n  private constructor(\n    private readonly providers: Map<\n      string,\n      CachedAzureDevOpsCredentialsProvider\n    >,\n  ) {}\n\n  private forAzureDevOpsServerOrganization(\n    url: URL,\n  ): AzureDevOpsCredentialsProvider | undefined {\n    const parts = url.pathname.split('/').filter(part => part !== '');\n    if (url.host !== 'dev.azure.com' && parts.length > 0) {\n      if (parts[0] !== 'tfs') {\n        // url format: https://{host}/{organization}\n        return this.providers.get(`${url.host}/${parts[0]}`);\n      } else if (parts[0] === 'tfs' && parts.length > 1) {\n        // url format: https://{host}/tfs/{organization}\n        return this.providers.get(`${url.host}/${parts[1]}`);\n      }\n    }\n\n    return undefined;\n  }\n\n  private forAzureDevOpsOrganization(\n    url: URL,\n  ): AzureDevOpsCredentialsProvider | undefined {\n    const parts = url.pathname.split('/').filter(part => part !== '');\n    if (url.host === 'dev.azure.com' && parts.length > 0) {\n      // url format: https://{host}/{organization}\n      return this.providers.get(`${url.host}/${parts[0]}`);\n    }\n\n    return undefined;\n  }\n\n  private forHost(url: URL): AzureDevOpsCredentialsProvider | undefined {\n    return this.providers.get(url.host);\n  }\n\n  async getCredentials(opts: {\n    url: string;\n  }): Promise<AzureDevOpsCredentials | undefined> {\n    const url = new URL(opts.url);\n    const provider =\n      this.forAzureDevOpsOrganization(url) ??\n      this.forAzureDevOpsServerOrganization(url) ??\n      this.forHost(url);\n\n    if (provider === undefined) {\n      return undefined;\n    }\n\n    return provider.getCredentials(opts);\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AzureIntegrationConfig } from './config';\nimport { CachedAzureDevOpsCredentialsProvider } from './CachedAzureDevOpsCredentialsProvider';\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @param additionalHeaders - Additional headers for the request\n * @public\n * @deprecated Use {@link AzureDevOpsCredentialsProvider} instead.\n */\nexport async function getAzureRequestOptions(\n  config: AzureIntegrationConfig,\n  additionalHeaders?: Record<string, string>,\n): Promise<{ headers: Record<string, string> }> {\n  const headers: Record<string, string> = additionalHeaders\n    ? { ...additionalHeaders }\n    : {};\n\n  /*\n   * Since we do not have a way to determine which organization the request is for,\n   * we will use the first credential that does not have an organization specified.\n   */\n  const credentialConfig = config.credentials?.filter(\n    credential =>\n      credential.organizations === undefined ||\n      credential.organizations.length === 0,\n  )[0];\n\n  if (credentialConfig) {\n    const credentialsProvider =\n      CachedAzureDevOpsCredentialsProvider.fromAzureDevOpsCredential(\n        credentialConfig,\n      );\n    const credentials = await credentialsProvider.getCredentials();\n\n    return {\n      headers: {\n        ...credentials?.headers,\n        ...headers,\n      },\n    };\n  }\n\n  return { headers };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\nconst BITBUCKET_HOST = 'bitbucket.org';\nconst BITBUCKET_API_BASE_URL = 'https://api.bitbucket.org/2.0';\n\n/**\n * The configuration parameters for a single Bitbucket API provider.\n *\n * @public\n * @deprecated bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport type BitbucketIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"bitbucket.org\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://api.bitbucket.org/2.0\",\n   * with no trailing slash.\n   *\n   * Values omitted at the optional property at the app-config will be deduced\n   * from the \"host\" value.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to a Bitbucket Server provider.\n   *\n   * See https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The username to use for requests to Bitbucket Cloud (bitbucket.org).\n   */\n  username?: string;\n\n  /**\n   * Authentication with Bitbucket Cloud (bitbucket.org) is done using app passwords.\n   *\n   * See https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/\n   */\n  appPassword?: string;\n};\n\n/**\n * Reads a single Bitbucket integration config.\n *\n * @param config - The config object of a single integration\n * @public\n * @deprecated bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function readBitbucketIntegrationConfig(\n  config: Config,\n): BitbucketIntegrationConfig {\n  const host = config.getOptionalString('host') ?? BITBUCKET_HOST;\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token')?.trim();\n  const username = config.getOptionalString('username');\n  const appPassword = config.getOptionalString('appPassword')?.trim();\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Bitbucket integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === BITBUCKET_HOST) {\n    apiBaseUrl = BITBUCKET_API_BASE_URL;\n  } else {\n    apiBaseUrl = `https://${host}/rest/api/1.0`;\n  }\n\n  return {\n    host,\n    apiBaseUrl,\n    token,\n    username,\n    appPassword,\n  };\n}\n\n/**\n * Reads a set of Bitbucket integration configs, and inserts some defaults for\n * public Bitbucket if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n * @deprecated bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function readBitbucketIntegrationConfigs(\n  configs: Config[],\n): BitbucketIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readBitbucketIntegrationConfig);\n\n  // If no explicit bitbucket.org integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === BITBUCKET_HOST)) {\n    result.push({\n      host: BITBUCKET_HOST,\n      apiBaseUrl: BITBUCKET_API_BASE_URL,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketIntegrationConfig,\n  readBitbucketIntegrationConfigs,\n} from './config';\n\n/**\n * A Bitbucket based integration.\n *\n * @public\n * @deprecated replaced by the integrations bitbucketCloud and bitbucketServer.\n */\nexport class BitbucketIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucket') ?? [\n        // if integrations.bitbucket was not used assume the use was migrated to the new configs\n        // and backport for the deprecated integration to be usable for other parts of the system\n        // until these got migrated\n        ...(config.getOptionalConfigArray('integrations.bitbucketCloud') ?? []),\n        ...(config.getOptionalConfigArray('integrations.bitbucketServer') ??\n          []),\n      ],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: BitbucketIntegrationConfig) {}\n\n  get type(): string {\n    return 'bitbucket';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n    if (!options.lineNumber) {\n      return resolved;\n    }\n\n    const url = new URL(resolved);\n\n    if (this.integrationConfig.host === 'bitbucket.org') {\n      // Bitbucket Cloud uses the syntax #lines-{start}[:{end}][,...]\n      url.hash = `lines-${options.lineNumber}`;\n    } else {\n      // Bitbucket Server uses the syntax #{start}[-{end}][,...]\n      url.hash = `${options.lineNumber}`;\n    }\n\n    return url.toString();\n  }\n\n  resolveEditUrl(url: string): string {\n    const urlData = parseGitUrl(url);\n    const editUrl = new URL(url);\n\n    editUrl.searchParams.set('mode', 'edit');\n    // TODO: Not sure what spa=0 does, at least bitbucket.org doesn't support it\n    // but this is taken over from the initial implementation.\n    editUrl.searchParams.set('spa', '0');\n    editUrl.searchParams.set('at', urlData.ref);\n    return editUrl.toString();\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { BitbucketIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a path on a provider, returns the default branch.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport async function getBitbucketDefaultBranch(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project, resource } = parseGitUrl(url);\n\n  const isHosted = resource === 'bitbucket.org';\n  // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp184\n  let branchUrl = isHosted\n    ? `${config.apiBaseUrl}/repositories/${project}/${repoName}`\n    : `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/default-branch`;\n\n  let response = await fetch(branchUrl, getBitbucketRequestOptions(config));\n\n  if (response.status === 404 && !isHosted) {\n    // First try the new format, and then if it gets specifically a 404 it should try the old format\n    // (to support old  Atlassian Bitbucket v5.11.1 format )\n    branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches/default`;\n    response = await fetch(branchUrl, getBitbucketRequestOptions(config));\n  }\n\n  if (!response.ok) {\n    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;\n    throw new Error(message);\n  }\n\n  let defaultBranch;\n  if (isHosted) {\n    const repoInfo = await response.json();\n    defaultBranch = repoInfo.mainbranch.name;\n  } else {\n    const { displayId } = await response.json();\n    defaultBranch = displayId;\n  }\n  if (!defaultBranch) {\n    throw new Error(\n      `Failed to read default branch from ${branchUrl}. ` +\n        `Response ${response.status} ${response.json()}`,\n    );\n  }\n  return defaultBranch;\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport async function getBitbucketDownloadUrl(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): Promise<string> {\n  const {\n    name: repoName,\n    owner: project,\n    ref,\n    protocol,\n    resource,\n    filepath,\n  } = parseGitUrl(url);\n\n  const isHosted = resource === 'bitbucket.org';\n\n  let branch = ref;\n  if (!branch) {\n    branch = await getBitbucketDefaultBranch(url, config);\n  }\n  // path will limit the downloaded content\n  // /docs will only download the docs folder and everything below it\n  // /docs/index.md will download the docs folder and everything below it\n  const path = filepath\n    ? `&path=${encodeURIComponent(decodeURIComponent(filepath))}`\n    : '';\n  const archiveUrl = isHosted\n    ? `${protocol}://${resource}/${project}/${repoName}/get/${branch}.tar.gz`\n    : `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/archive?format=tgz&at=${branch}&prefix=${project}-${repoName}${path}`;\n\n  return archiveUrl;\n}\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://bitbucket.org/orgname/reponame/src/master/file.yaml\n * to:   https://api.bitbucket.org/2.0/repositories/orgname/reponame/src/master/file.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function getBitbucketFileFetchUrl(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      (filepathtype !== 'browse' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'src')\n    ) {\n      throw new Error('Invalid Bitbucket URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n\n    if (config.host === 'bitbucket.org') {\n      if (!ref) {\n        throw new Error('Invalid Bitbucket URL or file path');\n      }\n      return `${config.apiBaseUrl}/repositories/${owner}/${name}/src/${ref}/${pathWithoutSlash}`;\n    }\n    return `${config.apiBaseUrl}/projects/${owner}/repos/${name}/raw/${pathWithoutSlash}?at=${ref}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function getBitbucketRequestOptions(\n  config: BitbucketIntegrationConfig,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (config.token) {\n    headers.Authorization = `Bearer ${config.token}`;\n  } else if (config.username && config.appPassword) {\n    const buffer = Buffer.from(\n      `${config.username}:${config.appPassword}`,\n      'utf8',\n    );\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return {\n    headers,\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\nconst BITBUCKET_CLOUD_HOST = 'bitbucket.org';\nconst BITBUCKET_CLOUD_API_BASE_URL = 'https://api.bitbucket.org/2.0';\n\n/**\n * The configuration parameters for a single Bitbucket Cloud API provider.\n *\n * @public\n */\nexport type BitbucketCloudIntegrationConfig = {\n  /**\n   * Constant. bitbucket.org\n   */\n  host: string;\n\n  /**\n   * Constant. https://api.bitbucket.org/2.0\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The username to use for requests to Bitbucket Cloud (bitbucket.org).\n   */\n  username?: string;\n\n  /**\n   * Authentication with Bitbucket Cloud (bitbucket.org) is done using app passwords.\n   *\n   * See https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/\n   */\n  appPassword?: string;\n};\n\n/**\n * Reads a single Bitbucket Cloud integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readBitbucketCloudIntegrationConfig(\n  config: Config,\n): BitbucketCloudIntegrationConfig {\n  const host = BITBUCKET_CLOUD_HOST;\n  const apiBaseUrl = BITBUCKET_CLOUD_API_BASE_URL;\n  // If config is provided, we assume authenticated access is desired\n  // (as the anonymous one is provided by default).\n  const username = config.getString('username');\n  const appPassword = config.getString('appPassword')?.trim();\n\n  return {\n    host,\n    apiBaseUrl,\n    username,\n    appPassword,\n  };\n}\n\n/**\n * Reads a set of Bitbucket Cloud integration configs,\n * and inserts one for public Bitbucket Cloud if none specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readBitbucketCloudIntegrationConfigs(\n  configs: Config[],\n): BitbucketCloudIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readBitbucketCloudIntegrationConfig);\n\n  // If no explicit bitbucket.org integration was added,\n  // put one in the list as a convenience\n  if (result.length === 0) {\n    result.push({\n      host: BITBUCKET_CLOUD_HOST,\n      apiBaseUrl: BITBUCKET_CLOUD_API_BASE_URL,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketCloudIntegrationConfig,\n  readBitbucketCloudIntegrationConfigs,\n} from './config';\n\n/**\n * A Bitbucket Cloud based integration.\n *\n * @public\n */\nexport class BitbucketCloudIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketCloudIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketCloudIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucketCloud') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketCloudIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(\n    private readonly integrationConfig: BitbucketCloudIntegrationConfig,\n  ) {}\n\n  get type(): string {\n    return 'bitbucketCloud';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketCloudIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n\n    // Bitbucket Cloud line numbers use the syntax #lines-42, rather than #L42\n    if (options.lineNumber) {\n      const url = new URL(resolved);\n\n      url.hash = `lines-${options.lineNumber}`;\n      return url.toString();\n    }\n\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    const urlData = parseGitUrl(url);\n    const editUrl = new URL(url);\n\n    editUrl.searchParams.set('mode', 'edit');\n    editUrl.searchParams.set('at', urlData.ref);\n    return editUrl.toString();\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { BitbucketCloudIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a path on a provider, returns the default branch.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketCloudDefaultBranch(\n  url: string,\n  config: BitbucketCloudIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project } = parseGitUrl(url);\n\n  const branchUrl = `${config.apiBaseUrl}/repositories/${project}/${repoName}`;\n  const response = await fetch(\n    branchUrl,\n    getBitbucketCloudRequestOptions(config),\n  );\n\n  if (!response.ok) {\n    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;\n    throw new Error(message);\n  }\n\n  const repoInfo = await response.json();\n  const defaultBranch = repoInfo.mainbranch.name;\n  if (!defaultBranch) {\n    throw new Error(\n      `Failed to read default branch from ${branchUrl}. ` +\n        `Response ${response.status} ${response.json()}`,\n    );\n  }\n  return defaultBranch;\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketCloudDownloadUrl(\n  url: string,\n  config: BitbucketCloudIntegrationConfig,\n): Promise<string> {\n  const {\n    name: repoName,\n    owner: project,\n    ref,\n    protocol,\n    resource,\n  } = parseGitUrl(url);\n\n  let branch = ref;\n  if (!branch) {\n    branch = await getBitbucketCloudDefaultBranch(url, config);\n  }\n  return `${protocol}://${resource}/${project}/${repoName}/get/${branch}.tar.gz`;\n}\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://bitbucket.org/orgname/reponame/src/master/file.yaml\n * to:   https://api.bitbucket.org/2.0/repositories/orgname/reponame/src/master/file.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketCloudFileFetchUrl(\n  url: string,\n  config: BitbucketCloudIntegrationConfig,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (!owner || !name || (filepathtype !== 'src' && filepathtype !== 'raw')) {\n      throw new Error('Invalid Bitbucket Cloud URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n\n    if (!ref) {\n      throw new Error('Invalid Bitbucket Cloud URL or file path');\n    }\n    return `${config.apiBaseUrl}/repositories/${owner}/${name}/src/${ref}/${pathWithoutSlash}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketCloudRequestOptions(\n  config: BitbucketCloudIntegrationConfig,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (config.username && config.appPassword) {\n    const buffer = Buffer.from(\n      `${config.username}:${config.appPassword}`,\n      'utf8',\n    );\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return {\n    headers,\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\n/**\n * The configuration parameters for a single Bitbucket Server API provider.\n *\n * @public\n */\nexport type BitbucketServerIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"bitbucket.company.com\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://<host>/rest/api/1.0\",\n   * with no trailing slash.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to a Bitbucket Server provider.\n   *\n   * See https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The credentials for Basic Authentication for requests to a Bitbucket Server provider.\n   *\n   * If `token` was provided, it will be preferred.\n   *\n   * See https://developer.atlassian.com/server/bitbucket/how-tos/command-line-rest/#authentication\n   */\n  username?: string;\n\n  /**\n   * The credentials for Basic Authentication for requests to a Bitbucket Server provider.\n   *\n   * If `token` was provided, it will be preferred.\n   *\n   * See https://developer.atlassian.com/server/bitbucket/how-tos/command-line-rest/#authentication\n   */\n  password?: string;\n};\n\n/**\n * Reads a single Bitbucket Server integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readBitbucketServerIntegrationConfig(\n  config: Config,\n): BitbucketServerIntegrationConfig {\n  const host = config.getString('host');\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token')?.trim();\n  const username = config.getOptionalString('username');\n  const password = config.getOptionalString('password');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Bitbucket Server integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else {\n    apiBaseUrl = `https://${host}/rest/api/1.0`;\n  }\n\n  return {\n    host,\n    apiBaseUrl,\n    token,\n    username,\n    password,\n  };\n}\n\n/**\n * Reads a set of Bitbucket Server integration configs.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readBitbucketServerIntegrationConfigs(\n  configs: Config[],\n): BitbucketServerIntegrationConfig[] {\n  // Read all the explicit integrations\n  // No default integration will be added\n  return configs.map(readBitbucketServerIntegrationConfig);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketServerIntegrationConfig,\n  readBitbucketServerIntegrationConfigs,\n} from './config';\n\n/**\n * A Bitbucket Server based integration.\n *\n * @public\n */\nexport class BitbucketServerIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketServerIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketServerIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucketServer') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketServerIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(\n    private readonly integrationConfig: BitbucketServerIntegrationConfig,\n  ) {}\n\n  get type(): string {\n    return 'bitbucketServer';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketServerIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n\n    // Bitbucket Server line numbers use the syntax #42, rather than #L42\n    if (options.lineNumber) {\n      const url = new URL(resolved);\n\n      url.hash = options.lineNumber.toString();\n      return url.toString();\n    }\n\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    // Bitbucket Server doesn't support deep linking to edit mode, therefore there's nothing to do here.\n    // We just remove query parameters since they cause issues with TechDocs edit button.\n    if (url.includes('?')) {\n      return url.substring(0, url.indexOf('?'));\n    }\n    return url;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { BitbucketServerIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a path on a provider, returns the default branch.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketServerDefaultBranch(\n  url: string,\n  config: BitbucketServerIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project } = parseGitUrl(url);\n\n  // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp184\n  let branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/default-branch`;\n\n  let response = await fetch(\n    branchUrl,\n    getBitbucketServerRequestOptions(config),\n  );\n\n  if (response.status === 404) {\n    // First try the new format, and then if it gets specifically a 404 it should try the old format\n    // (to support old  Atlassian Bitbucket Server v5.11.1 format )\n    branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches/default`;\n    response = await fetch(branchUrl, getBitbucketServerRequestOptions(config));\n  }\n\n  if (!response.ok) {\n    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;\n    throw new Error(message);\n  }\n\n  const { displayId } = await response.json();\n  const defaultBranch = displayId;\n  if (!defaultBranch) {\n    throw new Error(\n      `Failed to read default branch from ${branchUrl}. ` +\n        `Response ${response.status} ${response.json()}`,\n    );\n  }\n  return defaultBranch;\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketServerDownloadUrl(\n  url: string,\n  config: BitbucketServerIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project, ref, filepath } = parseGitUrl(url);\n\n  let branch = ref;\n  if (!branch) {\n    branch = await getBitbucketServerDefaultBranch(url, config);\n  }\n  // path will limit the downloaded content\n  // /docs will only download the docs folder and everything below it\n  // /docs/index.md will download the docs folder and everything below it\n  const path = filepath\n    ? `&path=${encodeURIComponent(decodeURIComponent(filepath))}`\n    : '';\n  return `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/archive?format=tgz&at=${branch}&prefix=${project}-${repoName}${path}`;\n}\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://bitbucket.company.com/projectname/reponame/src/main/file.yaml\n * to:   https://bitbucket.company.com/rest/api/1.0/project/projectname/reponame/raw/file.yaml?at=main\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketServerFileFetchUrl(\n  url: string,\n  config: BitbucketServerIntegrationConfig,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      (filepathtype !== 'browse' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'src')\n    ) {\n      throw new Error('Invalid Bitbucket Server URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n    return `${config.apiBaseUrl}/projects/${owner}/repos/${name}/raw/${pathWithoutSlash}?at=${ref}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketServerRequestOptions(\n  config: BitbucketServerIntegrationConfig,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (config.token) {\n    headers.Authorization = `Bearer ${config.token}`;\n  } else if (config.username && config.password) {\n    const buffer = Buffer.from(`${config.username}:${config.password}`, 'utf8');\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return {\n    headers,\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost, isValidUrl } from '../helpers';\n\n/**\n * The configuration parameters for a single Gerrit API provider.\n *\n * @public\n */\nexport type GerritIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"gerrit-review.com\"\n   */\n  host: string;\n\n  /**\n   * The optional base URL of the Gerrit instance. It is assumed that https\n   * is used and that the base path is \"/\" on the host. If that is not the\n   * case set the complete base url to the gerrit instance, e.g.\n   * \"https://gerrit-review.com/gerrit\". This is the url that you would open\n   * in a browser.\n   */\n  baseUrl?: string;\n\n  /**\n   * The optional base url to use for cloning a repository. If not set the\n   * baseUrl will be used.\n   */\n  cloneUrl?: string;\n\n  /**\n   * Optional base url for Gitiles. This is needed for creating a valid\n   * user-friendly url that can be used for browsing the content of the\n   * provider. If not set a default value will be created in the same way\n   * as the \"baseUrl\" option.\n   */\n  gitilesBaseUrl?: string;\n\n  /**\n   * The username to use for requests to gerrit.\n   */\n  username?: string;\n\n  /**\n   * The password or http token to use for authentication.\n   */\n  password?: string;\n};\n\n/**\n * Reads a single Gerrit integration config.\n *\n * @param config - The config object of a single integration\n *\n * @public\n */\nexport function readGerritIntegrationConfig(\n  config: Config,\n): GerritIntegrationConfig {\n  const host = config.getString('host');\n  let baseUrl = config.getOptionalString('baseUrl');\n  let cloneUrl = config.getOptionalString('cloneUrl');\n  let gitilesBaseUrl = config.getOptionalString('gitilesBaseUrl');\n  const username = config.getOptionalString('username');\n  const password = config.getOptionalString('password')?.trim();\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${host}' is not a valid host`,\n    );\n  } else if (baseUrl && !isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  } else if (cloneUrl && !isValidUrl(cloneUrl)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${cloneUrl}' is not a valid cloneUrl`,\n    );\n  } else if (gitilesBaseUrl && !isValidUrl(gitilesBaseUrl)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${gitilesBaseUrl}' is not a valid gitilesBaseUrl`,\n    );\n  }\n  if (baseUrl) {\n    baseUrl = trimEnd(baseUrl, '/');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n  if (gitilesBaseUrl) {\n    gitilesBaseUrl = trimEnd(gitilesBaseUrl, '/');\n  } else {\n    gitilesBaseUrl = `https://${host}`;\n  }\n  if (cloneUrl) {\n    cloneUrl = trimEnd(cloneUrl, '/');\n  } else {\n    cloneUrl = baseUrl;\n  }\n\n  return {\n    host,\n    baseUrl,\n    cloneUrl,\n    gitilesBaseUrl,\n    username,\n    password,\n  };\n}\n\n/**\n * Reads a set of Gerrit integration configs.\n *\n * @param configs - All of the integration config objects\n *\n * @public\n */\nexport function readGerritIntegrationConfigs(\n  configs: Config[],\n): GerritIntegrationConfig[] {\n  return configs.map(readGerritIntegrationConfig);\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { trimStart } from 'lodash';\nimport { GerritIntegrationConfig } from './config';\n\nconst GERRIT_BODY_PREFIX = \")]}'\";\n\n/**\n * Parse a Gitiles URL and return branch, file path and project.\n *\n * @remarks\n *\n * Gerrit only handles code reviews so it does not have a native way to browse\n * or showing the content of gits. Image if Github only had the \"pull requests\"\n * tab.\n *\n * Any source code browsing is instead handled by optional services outside\n * Gerrit. The url format chosen for the Gerrit url reader is the one used by\n * the Gitiles project. Gerrit will work perfectly with Backstage without\n * having Gitiles installed but there are some places in the Backstage GUI\n * with links to the url used by the url reader. These will not work unless\n * the urls point to an actual Gitiles installation.\n *\n * Gitiles url:\n * https://g.com/optional_path/\\{project\\}/+/refs/heads/\\{branch\\}/\\{filePath\\}\n * https://g.com/a/optional_path/\\{project\\}/+/refs/heads/\\{branch\\}/\\{filePath\\}\n *\n *\n * @param url - An URL pointing to a file stored in git.\n * @public\n */\n\nexport function parseGerritGitilesUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n): { branch: string; filePath: string; project: string } {\n  const baseUrlParse = new URL(config.gitilesBaseUrl!);\n  const urlParse = new URL(url);\n\n  // Remove the gerrit authentication prefix '/a/' from the url\n  // In case of the gitilesBaseUrl is https://review.gerrit.com/plugins/gitiles\n  // and the url provided is https://review.gerrit.com/a/plugins/gitiles/...\n  // remove the prefix only if the pathname start with '/a/'\n  const urlPath = urlParse.pathname\n    .substring(urlParse.pathname.startsWith('/a/') ? 2 : 0)\n    .replace(baseUrlParse.pathname, '');\n\n  const parts = urlPath.split('/').filter(p => !!p);\n\n  const projectEndIndex = parts.indexOf('+');\n\n  if (projectEndIndex <= 0) {\n    throw new Error(`Unable to parse project from url: ${url}`);\n  }\n  const project = trimStart(parts.slice(0, projectEndIndex).join('/'), '/');\n\n  const branchIndex = parts.indexOf('heads');\n  if (branchIndex <= 0) {\n    throw new Error(`Unable to parse branch from url: ${url}`);\n  }\n  const branch = parts[branchIndex + 1];\n  const filePath = parts.slice(branchIndex + 2).join('/');\n\n  return {\n    branch,\n    filePath: filePath === '' ? '/' : filePath,\n    project,\n  };\n}\n\n/**\n * Build a Gerrit Gitiles url that targets a specific path.\n *\n * @param config - A Gerrit provider config.\n * @param project - The name of the git project\n * @param branch - The branch we will target.\n * @param filePath - The absolute file path.\n * @public\n */\nexport function buildGerritGitilesUrl(\n  config: GerritIntegrationConfig,\n  project: string,\n  branch: string,\n  filePath: string,\n): string {\n  return `${\n    config.gitilesBaseUrl\n  }/${project}/+/refs/heads/${branch}/${trimStart(filePath, '/')}`;\n}\n\n/**\n * Build a Gerrit Gitiles archive url that targets a specific branch and path\n *\n * @param config - A Gerrit provider config.\n * @param project - The name of the git project\n * @param branch - The branch we will target.\n * @param filePath - The absolute file path.\n * @public\n */\nexport function buildGerritGitilesArchiveUrl(\n  config: GerritIntegrationConfig,\n  project: string,\n  branch: string,\n  filePath: string,\n): string {\n  const archiveName =\n    filePath === '/' || filePath === '' ? '.tar.gz' : `/${filePath}.tar.gz`;\n  return `${getGitilesAuthenticationUrl(\n    config,\n  )}/${project}/+archive/refs/heads/${branch}${archiveName}`;\n}\n\n/**\n * Return the authentication prefix.\n *\n * @remarks\n *\n * To authenticate with a password the API url must be prefixed with \"/a/\".\n * If no password is set anonymous access (without the prefix) will\n * be used.\n *\n * @param config - A Gerrit provider config.\n * @public\n */\nexport function getAuthenticationPrefix(\n  config: GerritIntegrationConfig,\n): string {\n  return config.password ? '/a/' : '/';\n}\n\n/**\n * Return the authentication gitiles url.\n *\n * @remarks\n *\n * To authenticate with a password the API url must be prefixed with \"/a/\".\n * If no password is set anonymous access (without the prefix) will\n * be used.\n *\n * @param config - A Gerrit provider config.\n */\nexport function getGitilesAuthenticationUrl(\n  config: GerritIntegrationConfig,\n): string {\n  if (!config.baseUrl || !config.gitilesBaseUrl) {\n    throw new Error(\n      'Unexpected Gerrit config values. baseUrl or gitilesBaseUrl not set.',\n    );\n  }\n  if (config.gitilesBaseUrl.startsWith(config.baseUrl)) {\n    return config.gitilesBaseUrl.replace(\n      config.baseUrl.concat('/'),\n      config.baseUrl.concat(getAuthenticationPrefix(config)),\n    );\n  }\n  if (config.password) {\n    throw new Error(\n      'Since the baseUrl (Gerrit) is not part of the gitilesBaseUrl, an authentication URL could not be constructed.',\n    );\n  }\n  return config.gitilesBaseUrl!;\n}\n\n/**\n * Return the url to get branch info from the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritBranchApiUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { branch, project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.baseUrl}${getAuthenticationPrefix(\n    config,\n  )}projects/${encodeURIComponent(project)}/branches/${branch}`;\n}\n\n/**\n * Return the url to clone the repo that is referenced by the url.\n *\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritCloneRepoUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.cloneUrl}${getAuthenticationPrefix(config)}${project}`;\n}\n\n/**\n * Return the url to fetch the contents of a file using the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritFileContentsApiUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { branch, filePath, project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.baseUrl}${getAuthenticationPrefix(\n    config,\n  )}projects/${encodeURIComponent(\n    project,\n  )}/branches/${branch}/files/${encodeURIComponent(filePath)}/content`;\n}\n\n/**\n * Return the url to query available projects using the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @public\n */\nexport function getGerritProjectsApiUrl(config: GerritIntegrationConfig) {\n  return `${config.baseUrl}${getAuthenticationPrefix(config)}projects/`;\n}\n\n/**\n * Return request headers for a Gerrit provider.\n *\n * @param config - A Gerrit provider config\n * @public\n */\nexport function getGerritRequestOptions(config: GerritIntegrationConfig): {\n  headers?: Record<string, string>;\n} {\n  const headers: Record<string, string> = {};\n\n  if (!config.password) {\n    return headers;\n  }\n  const buffer = Buffer.from(`${config.username}:${config.password}`, 'utf8');\n  headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  return {\n    headers,\n  };\n}\n\n/**\n * Parse the json response from Gerrit and strip the magic prefix.\n *\n * @remarks\n *\n * To prevent against XSSI attacks the JSON response body from Gerrit starts\n * with a magic prefix that must be stripped before it can be fed to a JSON\n * parser.\n *\n * @param response - An API response.\n * @public\n */\nexport async function parseGerritJsonResponse(\n  response: Response,\n): Promise<unknown> {\n  const responseBody = await response.text();\n  if (responseBody.startsWith(GERRIT_BODY_PREFIX)) {\n    try {\n      return JSON.parse(responseBody.slice(GERRIT_BODY_PREFIX.length));\n    } catch (ex) {\n      throw new Error(\n        `Invalid response from Gerrit: ${responseBody.slice(0, 10)} - ${ex}`,\n      );\n    }\n  }\n  throw new Error(\n    `Gerrit JSON body prefix missing. Found: ${responseBody.slice(0, 10)}`,\n  );\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GerritIntegrationConfig,\n  readGerritIntegrationConfigs,\n} from './config';\nimport { parseGerritGitilesUrl, buildGerritGitilesUrl } from './core';\n\n/**\n * A Gerrit based integration.\n *\n * @public\n */\nexport class GerritIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GerritIntegration> = ({ config }) => {\n    const configs = readGerritIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.gerrit') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GerritIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GerritIntegrationConfig) {}\n\n  get type(): string {\n    return 'gerrit';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GerritIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base, lineNumber } = options;\n    let updated;\n    if (url.startsWith('/')) {\n      const { branch, project } = parseGerritGitilesUrl(this.config, base);\n      return buildGerritGitilesUrl(this.config, project, branch, url);\n    }\n    if (url) {\n      updated = new URL(url, base);\n    } else {\n      updated = new URL(base);\n    }\n    if (lineNumber) {\n      updated.hash = lineNumber.toString();\n    }\n    return updated.toString();\n  }\n\n  resolveEditUrl(url: string): string {\n    // Not applicable for gerrit.\n    return url;\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost, isValidUrl } from '../helpers';\n\n/**\n * The configuration for a single Gitea integration.\n *\n * @public\n */\nexport type GiteaIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"gitea.website.com\"\n   */\n  host: string;\n  /**\n   * The optional base URL of the Gitea instance. It is assumed that https\n   * is used and that the base path is \"/\" on the host. If that is not the\n   * case set the complete base url to the gitea instance, e.g.\n   * \"https://gitea.website.com/\". This is the url that you would open\n   * in a browser.\n   */\n  baseUrl?: string;\n  /**\n   * The username to use for requests to gitea.\n   */\n  username?: string;\n\n  /**\n   * The password or http token to use for authentication.\n   */\n  password?: string;\n};\n\n/**\n * Parses a location config block for use in GiteaIntegration\n *\n * @public\n */\nexport function readGiteaConfig(config: Config): GiteaIntegrationConfig {\n  const host = config.getString('host');\n  let baseUrl = config.getOptionalString('baseUrl');\n  const username = config.getOptionalString('username');\n  const password = config.getOptionalString('password')?.trim();\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Gitea integration config, '${host}' is not a valid host`,\n    );\n  } else if (baseUrl && !isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid Gitea integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  }\n\n  if (baseUrl) {\n    baseUrl = trimEnd(baseUrl, '/');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n\n  return {\n    host,\n    baseUrl,\n    username,\n    password,\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { GiteaIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a file, returns a URL\n * for editing the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://gitea.com/a/b/src/branchname/path/to/c.yaml\n * or:   https://gitea.com/a/b/_edit/branchname/path/to/c.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getGiteaEditContentsUrl(\n  config: GiteaIntegrationConfig,\n  url: string,\n) {\n  const giteaUrl = parseGiteaUrl(config, url);\n  return `${giteaUrl.url}/${giteaUrl.owner}/${giteaUrl.name}/_edit/${giteaUrl.ref}/${giteaUrl.path}`;\n}\n\n/**\n * Given a URL pointing to a file, returns an api URL\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://gitea.com/a/b/src/branch/branchname/path/to/c.yaml\n * to:   https://gitea.com/api/v1/repos/a/b/contents/path/to/c.yaml?ref=branchname\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getGiteaFileContentsUrl(\n  config: GiteaIntegrationConfig,\n  url: string,\n) {\n  const giteaUrl = parseGiteaUrl(config, url);\n  return `${giteaUrl.url}/api/v1/repos/${giteaUrl.owner}/${giteaUrl.name}/contents/${giteaUrl.path}?ref=${giteaUrl.ref}`;\n}\n\n/**\n * Given a URL pointing to a repository/path, returns a URL\n * for archive contents of the repository.\n *\n * @remarks\n *\n * Converts\n * from: https://gitea.com/a/b/src/branchname\n * or:   https://gitea.com/api/v1/repos/a/b/archive/branchname.tar.gz\n *\n * @param url - A URL pointing to a repository/path\n * @param config - The relevant provider config\n * @public\n */\nexport function getGiteaArchiveUrl(\n  config: GiteaIntegrationConfig,\n  url: string,\n) {\n  const giteaUrl = parseGiteaUrl(config, url);\n  return `${giteaUrl.url}/api/v1/repos/${giteaUrl.owner}/${giteaUrl.name}/archive/${giteaUrl.ref}.tar.gz`;\n}\n\n/**\n * Given a URL pointing to a repository branch, returns a URL\n * for latest commit information.\n *\n * @remarks\n *\n * Converts\n * from: https://gitea.com/a/b/src/branchname\n * or:   https://gitea.com/api/v1/repos/a/b/git/commits/branchname\n *\n * @param url - A URL pointing to a repository branch\n * @param config - The relevant provider config\n * @public\n */\nexport function getGiteaLatestCommitUrl(\n  config: GiteaIntegrationConfig,\n  url: string,\n) {\n  const giteaUrl = parseGiteaUrl(config, url);\n  return `${giteaUrl.url}/api/v1/repos/${giteaUrl.owner}/${giteaUrl.name}/git/commits/${giteaUrl.ref}`;\n}\n\n/**\n * Return request headers for a Gitea provider.\n *\n * @param config - A Gitea provider config\n * @public\n */\nexport function getGiteaRequestOptions(config: GiteaIntegrationConfig): {\n  headers?: Record<string, string>;\n} {\n  const headers: Record<string, string> = {};\n  const { username, password } = config;\n\n  if (!password) {\n    return headers;\n  }\n\n  if (username) {\n    headers.Authorization = `basic ${Buffer.from(\n      `${username}:${password}`,\n    ).toString('base64')}`;\n  } else {\n    headers.Authorization = `token ${password}`;\n  }\n\n  return {\n    headers,\n  };\n}\n\n/**\n * Return parsed git url properties.\n *\n * @param config - A Gitea provider config\n * @param url - A URL pointing to a repository\n * @public\n */\nexport function parseGiteaUrl(\n  config: GiteaIntegrationConfig,\n  url: string,\n): {\n  url: string;\n  owner: string;\n  name: string;\n  ref: string;\n  path: string;\n} {\n  const baseUrl = config.baseUrl ?? `https://${config.host}`;\n  try {\n    const [_blank, owner, name, _src, _branch, ref, ...path] = url\n      .replace(baseUrl, '')\n      .split('/');\n    const pathWithoutSlash = path.join('/').replace(/^\\//, '');\n\n    return {\n      url: baseUrl,\n      owner: owner,\n      name: name,\n      ref: ref,\n      path: pathWithoutSlash,\n    };\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { GiteaIntegrationConfig, readGiteaConfig } from './config';\nimport { getGiteaEditContentsUrl } from './core';\n\n/**\n * A Gitea based integration.\n *\n * @public\n */\nexport class GiteaIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GiteaIntegration> = ({ config }) => {\n    const configs = config.getOptionalConfigArray('integrations.gitea') ?? [];\n    const giteaConfigs = configs.map(c => readGiteaConfig(c));\n\n    return basicIntegrations(\n      giteaConfigs.map(c => new GiteaIntegration(c)),\n      (gitea: GiteaIntegration) => gitea.config.host,\n    );\n  };\n\n  constructor(readonly config: GiteaIntegrationConfig) {}\n\n  get type(): string {\n    return 'gitea';\n  }\n\n  get title(): string {\n    return this.config.host;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number | undefined;\n  }): string {\n    return defaultScmResolveUrl(options);\n  }\n\n  resolveEditUrl(url: string): string {\n    return getGiteaEditContentsUrl(this.config, url);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\nconst GITHUB_HOST = 'github.com';\nconst GITHUB_API_BASE_URL = 'https://api.github.com';\nconst GITHUB_RAW_BASE_URL = 'https://raw.githubusercontent.com';\n\n/**\n * The configuration parameters for a single GitHub integration.\n *\n * @public\n */\nexport type GithubIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"github.com\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://api.github.com\",\n   * with no trailing slash.\n   *\n   * May be omitted specifically for GitHub; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  apiBaseUrl?: string;\n\n  /**\n   * The base URL of the raw fetch endpoint of this provider, e.g.\n   * \"https://raw.githubusercontent.com\", with no trailing slash.\n   *\n   * May be omitted specifically for GitHub; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  rawBaseUrl?: string;\n\n  /**\n   * The authorization token to use for requests to this provider.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The GitHub Apps configuration to use for requests to this provider.\n   *\n   * If no apps are specified, token or anonymous is used.\n   */\n  apps?: GithubAppConfig[];\n};\n\n/**\n * The configuration parameters for authenticating a GitHub Application.\n *\n * @remarks\n *\n * A GitHub Apps configuration can be generated using the `backstage-cli create-github-app` command.\n *\n * @public\n */\nexport type GithubAppConfig = {\n  /**\n   * Unique app identifier, found at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  appId: number;\n  /**\n   * The private key is used by the GitHub App integration to authenticate the app.\n   * A private key can be generated from the app at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  privateKey: string;\n  /**\n   * Webhook secret can be configured at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  webhookSecret: string;\n  /**\n   * Found at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  clientId: string;\n  /**\n   * Client secrets can be generated at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  clientSecret: string;\n  /**\n   * List of installation owners allowed to be used by this GitHub app. The GitHub UI does not provide a way to list the installations.\n   * However you can list the installations with the GitHub API. You can find the list of installations here:\n   * https://api.github.com/app/installations\n   * The relevant documentation for this is here.\n   * https://docs.github.com/en/rest/reference/apps#list-installations-for-the-authenticated-app--code-samples\n   */\n  allowedInstallationOwners?: string[];\n};\n\n/**\n * Reads a single GitHub integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGithubIntegrationConfig(\n  config: Config,\n): GithubIntegrationConfig {\n  const host = config.getOptionalString('host') ?? GITHUB_HOST;\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  let rawBaseUrl = config.getOptionalString('rawBaseUrl');\n  const token = config.getOptionalString('token')?.trim();\n  const apps = config.getOptionalConfigArray('apps')?.map(c => ({\n    appId: c.getNumber('appId'),\n    clientId: c.getString('clientId'),\n    clientSecret: c.getString('clientSecret'),\n    webhookSecret: c.getString('webhookSecret'),\n    privateKey: c.getString('privateKey'),\n    allowedInstallationOwners: c.getOptionalStringArray(\n      'allowedInstallationOwners',\n    ),\n  }));\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid GitHub integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === GITHUB_HOST) {\n    apiBaseUrl = GITHUB_API_BASE_URL;\n  }\n\n  if (rawBaseUrl) {\n    rawBaseUrl = trimEnd(rawBaseUrl, '/');\n  } else if (host === GITHUB_HOST) {\n    rawBaseUrl = GITHUB_RAW_BASE_URL;\n  }\n\n  return { host, apiBaseUrl, rawBaseUrl, token, apps };\n}\n\n/**\n * Reads a set of GitHub integration configs, and inserts some defaults for\n * public GitHub if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readGithubIntegrationConfigs(\n  configs: Config[],\n): GithubIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readGithubIntegrationConfig);\n\n  // If no explicit github.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === GITHUB_HOST)) {\n    result.push({\n      host: GITHUB_HOST,\n      apiBaseUrl: GITHUB_API_BASE_URL,\n      rawBaseUrl: GITHUB_RAW_BASE_URL,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { GithubIntegrationConfig } from './config';\nimport { GithubCredentials } from './types';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://github.com/a/b/blob/branchname/path/to/c.yaml\n * to:   https://api.github.com/repos/a/b/contents/path/to/c.yaml?ref=branchname\n * or:   https://raw.githubusercontent.com/a/b/branchname/c.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getGithubFileFetchUrl(\n  url: string,\n  config: GithubIntegrationConfig,\n  credentials: GithubCredentials,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      !ref ||\n      // GitHub is automatically redirecting tree urls to blob urls so it's\n      // fine to pass a tree url.\n      (filepathtype !== 'blob' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'tree')\n    ) {\n      throw new Error('Invalid GitHub URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n    if (chooseEndpoint(config, credentials) === 'api') {\n      return `${config.apiBaseUrl}/repos/${owner}/${name}/contents/${pathWithoutSlash}?ref=${ref}`;\n    }\n    return `${config.rawBaseUrl}/${owner}/${name}/${ref}/${pathWithoutSlash}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @deprecated This function is no longer used internally\n * @param config - The relevant provider config\n * @public\n */\nexport function getGitHubRequestOptions(\n  config: GithubIntegrationConfig,\n  credentials: GithubCredentials,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (chooseEndpoint(config, credentials) === 'api') {\n    headers.Accept = 'application/vnd.github.v3.raw';\n  }\n\n  if (credentials.token) {\n    headers.Authorization = `token ${credentials.token}`;\n  }\n\n  return { headers };\n}\n\nexport function chooseEndpoint(\n  config: GithubIntegrationConfig,\n  credentials: GithubCredentials,\n): 'api' | 'raw' {\n  if (config.apiBaseUrl && (credentials.token || !config.rawBaseUrl)) {\n    return 'api';\n  }\n  return 'raw';\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { GithubAppConfig, GithubIntegrationConfig } from './config';\nimport { createAppAuth } from '@octokit/auth-app';\nimport { Octokit, RestEndpointMethodTypes } from '@octokit/rest';\nimport { DateTime } from 'luxon';\nimport {\n  GithubCredentials,\n  GithubCredentialsProvider,\n  GithubCredentialType,\n} from './types';\n\ntype InstallationData = {\n  installationId: number;\n  suspended: boolean;\n};\n\ntype InstallationTokenData = {\n  token: string;\n  expiresAt: DateTime;\n  repositories?: String[];\n};\n\nclass Cache {\n  private readonly tokenCache = new Map<string, InstallationTokenData>();\n\n  async getOrCreateToken(\n    owner: string,\n    repo: string | undefined,\n    supplier: () => Promise<InstallationTokenData>,\n  ): Promise<{ accessToken: string }> {\n    let existingInstallationData = this.tokenCache.get(owner);\n\n    if (\n      !existingInstallationData ||\n      this.isExpired(existingInstallationData.expiresAt)\n    ) {\n      existingInstallationData = await supplier();\n      // Allow 10 minutes grace to account for clock skew\n      existingInstallationData.expiresAt =\n        existingInstallationData.expiresAt.minus({ minutes: 10 });\n      this.tokenCache.set(owner, existingInstallationData);\n    }\n\n    if (!this.appliesToRepo(existingInstallationData, repo)) {\n      throw new Error(\n        `The Backstage GitHub application used in the ${owner} organization does not have access to a repository with the name ${repo}`,\n      );\n    }\n\n    return { accessToken: existingInstallationData.token };\n  }\n\n  private isExpired = (date: DateTime) => DateTime.local() > date;\n\n  private appliesToRepo(tokenData: InstallationTokenData, repo?: string) {\n    // If no specific repo has been requested the token is applicable\n    if (repo === undefined) {\n      return true;\n    }\n    // If the token is restricted to repositories, the token only applies if the repo is in the allow list\n    if (tokenData.repositories !== undefined) {\n      return tokenData.repositories.includes(repo);\n    }\n    // Otherwise the token is applicable\n    return true;\n  }\n}\n\n/**\n * This accept header is required when calling App APIs in GitHub Enterprise.\n * It has no effect on calls to github.com and can probably be removed entirely\n * once GitHub Apps is out of preview.\n */\nconst HEADERS = {\n  Accept: 'application/vnd.github.machine-man-preview+json',\n};\n\n/**\n * GithubAppManager issues and caches tokens for a specific GitHub App.\n */\nclass GithubAppManager {\n  private readonly appClient: Octokit;\n  private readonly baseUrl?: string;\n  private readonly baseAuthConfig: { appId: number; privateKey: string };\n  private readonly cache = new Cache();\n  private readonly allowedInstallationOwners: string[] | undefined; // undefined allows all installations\n\n  constructor(config: GithubAppConfig, baseUrl?: string) {\n    this.allowedInstallationOwners = config.allowedInstallationOwners;\n    this.baseUrl = baseUrl;\n    this.baseAuthConfig = {\n      appId: config.appId,\n      privateKey: config.privateKey.replace(/\\\\n/gm, '\\n'),\n    };\n    this.appClient = new Octokit({\n      baseUrl,\n      headers: HEADERS,\n      authStrategy: createAppAuth,\n      auth: this.baseAuthConfig,\n    });\n  }\n\n  async getInstallationCredentials(\n    owner: string,\n    repo?: string,\n  ): Promise<{ accessToken: string | undefined }> {\n    if (this.allowedInstallationOwners) {\n      if (!this.allowedInstallationOwners?.includes(owner)) {\n        return { accessToken: undefined }; // An empty token allows anonymous access to public repos\n      }\n    }\n\n    // Go and grab an access token for the app scoped to a repository if provided, if not use the organisation installation.\n    return this.cache.getOrCreateToken(owner, repo, async () => {\n      const { installationId, suspended } = await this.getInstallationData(\n        owner,\n      );\n      if (suspended) {\n        throw new Error(`The GitHub application for ${owner} is suspended`);\n      }\n\n      const result = await this.appClient.apps.createInstallationAccessToken({\n        installation_id: installationId,\n        headers: HEADERS,\n      });\n\n      let repositoryNames;\n\n      if (result.data.repository_selection === 'selected') {\n        const installationClient = new Octokit({\n          baseUrl: this.baseUrl,\n          auth: result.data.token,\n        });\n        const repos = await installationClient.paginate(\n          installationClient.apps.listReposAccessibleToInstallation,\n        );\n        // The return type of the paginate method is incorrect.\n        const repositories: RestEndpointMethodTypes['apps']['listReposAccessibleToInstallation']['response']['data']['repositories'] =\n          repos.repositories ?? repos;\n\n        repositoryNames = repositories.map(repository => repository.name);\n      }\n      return {\n        token: result.data.token,\n        expiresAt: DateTime.fromISO(result.data.expires_at),\n        repositories: repositoryNames,\n      };\n    });\n  }\n\n  getInstallations(): Promise<\n    RestEndpointMethodTypes['apps']['listInstallations']['response']['data']\n  > {\n    return this.appClient.paginate(this.appClient.apps.listInstallations);\n  }\n\n  private async getInstallationData(owner: string): Promise<InstallationData> {\n    const allInstallations = await this.getInstallations();\n    const installation = allInstallations.find(\n      inst =>\n        inst.account &&\n        'login' in inst.account &&\n        inst.account.login?.toLocaleLowerCase('en-US') ===\n          owner.toLocaleLowerCase('en-US'),\n    );\n    if (installation) {\n      return {\n        installationId: installation.id,\n        suspended: Boolean(installation.suspended_by),\n      };\n    }\n    const notFoundError = new Error(\n      `No app installation found for ${owner} in ${this.baseAuthConfig.appId}`,\n    );\n    notFoundError.name = 'NotFoundError';\n    throw notFoundError;\n  }\n}\n\n/**\n * Corresponds to a Github installation which internally could hold several GitHub Apps.\n *\n * @public\n */\nexport class GithubAppCredentialsMux {\n  private readonly apps: GithubAppManager[];\n\n  constructor(config: GithubIntegrationConfig) {\n    this.apps =\n      config.apps?.map(ac => new GithubAppManager(ac, config.apiBaseUrl)) ?? [];\n  }\n\n  async getAllInstallations(): Promise<\n    RestEndpointMethodTypes['apps']['listInstallations']['response']['data']\n  > {\n    if (!this.apps.length) {\n      return [];\n    }\n\n    const installs = await Promise.all(\n      this.apps.map(app => app.getInstallations()),\n    );\n\n    return installs.flat();\n  }\n\n  async getAppToken(owner: string, repo?: string): Promise<string | undefined> {\n    if (this.apps.length === 0) {\n      return undefined;\n    }\n\n    const results = await Promise.all(\n      this.apps.map(app =>\n        app.getInstallationCredentials(owner, repo).then(\n          credentials => ({ credentials, error: undefined }),\n          error => ({ credentials: undefined, error }),\n        ),\n      ),\n    );\n\n    const result = results.find(\n      resultItem => resultItem.credentials?.accessToken,\n    );\n    if (result) {\n      return result.credentials!.accessToken;\n    }\n\n    const errors = results.map(r => r.error);\n    const notNotFoundError = errors.find(err => err?.name !== 'NotFoundError');\n    if (notNotFoundError) {\n      throw notNotFoundError;\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * Handles the creation and caching of credentials for GitHub integrations.\n *\n * @public\n * @remarks\n *\n * TODO: Possibly move this to a backend only package so that it's not used in the frontend by mistake\n */\nexport class SingleInstanceGithubCredentialsProvider\n  implements GithubCredentialsProvider\n{\n  static create: (\n    config: GithubIntegrationConfig,\n  ) => GithubCredentialsProvider = config => {\n    return new SingleInstanceGithubCredentialsProvider(\n      new GithubAppCredentialsMux(config),\n      config.token,\n    );\n  };\n\n  private constructor(\n    private readonly githubAppCredentialsMux: GithubAppCredentialsMux,\n    private readonly token?: string,\n  ) {}\n\n  /**\n   * Returns {@link GithubCredentials} for a given URL.\n   *\n   * @remarks\n   *\n   * Consecutive calls to this method with the same URL will return cached\n   * credentials.\n   *\n   * The shortest lifetime for a token returned is 10 minutes.\n   *\n   * @example\n   * ```ts\n   * const { token, headers } = await getCredentials({\n   *   url: 'github.com/backstage/foobar'\n   * })\n   * ```\n   *\n   * @param opts - The organization or repository URL\n   * @returns A promise of {@link GithubCredentials}.\n   */\n  async getCredentials(opts: { url: string }): Promise<GithubCredentials> {\n    const parsed = parseGitUrl(opts.url);\n\n    const owner = parsed.owner || parsed.name;\n    const repo = parsed.owner ? parsed.name : undefined;\n\n    let type: GithubCredentialType = 'app';\n    let token = await this.githubAppCredentialsMux.getAppToken(owner, repo);\n    if (!token) {\n      type = 'token';\n      token = this.token;\n    }\n\n    return {\n      headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n      token,\n      type,\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GithubCredentials, GithubCredentialsProvider } from './types';\nimport { ScmIntegrationRegistry } from '../registry';\nimport { SingleInstanceGithubCredentialsProvider } from './SingleInstanceGithubCredentialsProvider';\n\n/**\n * Handles the creation and caching of credentials for GitHub integrations.\n *\n * @public\n * @remarks\n *\n * TODO: Possibly move this to a backend only package so that it's not used in the frontend by mistake\n */\nexport class DefaultGithubCredentialsProvider\n  implements GithubCredentialsProvider\n{\n  static fromIntegrations(integrations: ScmIntegrationRegistry) {\n    const credentialsProviders: Map<string, GithubCredentialsProvider> =\n      new Map<string, GithubCredentialsProvider>();\n\n    integrations.github.list().forEach(integration => {\n      const credentialsProvider =\n        SingleInstanceGithubCredentialsProvider.create(integration.config);\n      credentialsProviders.set(integration.config.host, credentialsProvider);\n    });\n    return new DefaultGithubCredentialsProvider(credentialsProviders);\n  }\n\n  private constructor(\n    private readonly providers: Map<string, GithubCredentialsProvider>,\n  ) {}\n\n  /**\n   * Returns {@link GithubCredentials} for a given URL.\n   *\n   * @remarks\n   *\n   * Consecutive calls to this method with the same URL will return cached\n   * credentials.\n   *\n   * The shortest lifetime for a token returned is 10 minutes.\n   *\n   * @example\n   * ```ts\n   * const { token, headers } = await getCredentials({\n   *   url: 'https://github.com/backstage/foobar'\n   * })\n   *\n   * const { token, headers } = await getCredentials({\n   *   url: 'https://github.com/backstage'\n   * })\n   * ```\n   *\n   * @param opts - The organization or repository URL\n   * @returns A promise of {@link GithubCredentials}.\n   */\n  async getCredentials(opts: { url: string }): Promise<GithubCredentials> {\n    const parsed = new URL(opts.url);\n    const provider = this.providers.get(parsed.host);\n\n    if (!provider) {\n      throw new Error(\n        `There is no GitHub integration that matches ${opts.url}. Please add a configuration for an integration.`,\n      );\n    }\n\n    return provider.getCredentials(opts);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport {\n  RateLimitInfo,\n  ScmIntegration,\n  ScmIntegrationsFactory,\n} from '../types';\nimport {\n  GithubIntegrationConfig,\n  readGithubIntegrationConfigs,\n} from './config';\nimport { ConsumedResponse } from '@backstage/errors';\n\n/**\n * A GitHub based integration.\n *\n * @public\n */\nexport class GithubIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GithubIntegration> = ({ config }) => {\n    const configs = readGithubIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.github') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GithubIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GithubIntegrationConfig) {}\n\n  get type(): string {\n    return 'github';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GithubIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    // GitHub uses blob URLs for files and tree urls for directory listings. But\n    // there is a redirect from tree to blob for files, so we can always return\n    // tree urls here.\n    return replaceGithubUrlType(defaultScmResolveUrl(options), 'tree');\n  }\n\n  resolveEditUrl(url: string): string {\n    return replaceGithubUrlType(url, 'edit');\n  }\n\n  parseRateLimitInfo(response: ConsumedResponse): RateLimitInfo {\n    return {\n      isRateLimited:\n        response.status === 429 ||\n        (response.status === 403 &&\n          response.headers.get('x-ratelimit-remaining') === '0'),\n    };\n  }\n}\n\n/**\n * Takes a GitHub URL and replaces the type part (blob, tree etc).\n *\n * @param url - The original URL\n * @param type - The desired type, e.g. \"blob\"\n * @public\n */\nexport function replaceGithubUrlType(\n  url: string,\n  type: 'blob' | 'tree' | 'edit',\n): string {\n  return url.replace(\n    /\\/\\/([^/]+)\\/([^/]+)\\/([^/]+)\\/(blob|tree|edit)\\//,\n    (_, host, owner, repo) => {\n      return `//${host}/${owner}/${repo}/${type}/`;\n    },\n  );\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GithubIntegrationConfig,\n  readGithubIntegrationConfig,\n  readGithubIntegrationConfigs,\n} from './config';\nimport { getGithubFileFetchUrl } from './core';\nimport { GithubIntegration, replaceGithubUrlType } from './GithubIntegration';\nimport { ScmIntegrationsFactory } from '../types';\n\n/**\n * @public\n * @deprecated Use {@link getGithubFileFetchUrl} instead.\n */\nexport const getGitHubFileFetchUrl = getGithubFileFetchUrl;\n\n/**\n * @public\n * @deprecated Use {@link GithubIntegrationConfig} instead.\n */\nexport type GitHubIntegrationConfig = GithubIntegrationConfig;\n\n/**\n * @public\n * @deprecated Use {@link GithubIntegration} instead.\n */\nexport class GitHubIntegration extends GithubIntegration {\n  static factory: ScmIntegrationsFactory<GitHubIntegration> =\n    GithubIntegration.factory;\n\n  constructor(integrationConfig: GitHubIntegrationConfig) {\n    super(integrationConfig as GithubIntegrationConfig);\n  }\n\n  get config(): GitHubIntegrationConfig {\n    return super.config as GitHubIntegrationConfig;\n  }\n}\n\n/**\n * @public\n * @deprecated Use {@link readGithubIntegrationConfig} instead.\n */\nexport const readGitHubIntegrationConfig = readGithubIntegrationConfig;\n\n/**\n * @public\n * @deprecated Use {@link readGithubIntegrationConfigs} instead.\n */\nexport const readGitHubIntegrationConfigs = readGithubIntegrationConfigs;\n\n/**\n * @public\n * @deprecated Use {@link replaceGithubUrlType} instead.\n */\nexport const replaceGitHubUrlType = replaceGithubUrlType;\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost, isValidUrl } from '../helpers';\n\nconst GITLAB_HOST = 'gitlab.com';\nconst GITLAB_API_BASE_URL = 'https://gitlab.com/api/v4';\n\n/**\n * The configuration parameters for a single GitLab integration.\n *\n * @public\n */\nexport type GitLabIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. `gitlab.com`.\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g.\n   * `https://gitlab.com/api/v4`, with no trailing slash.\n   *\n   * May be omitted specifically for public GitLab; then it will be deduced.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to this provider.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The baseUrl of this provider, e.g. `https://gitlab.com`, which is passed\n   * into the GitLab client.\n   *\n   * If no baseUrl is provided, it will default to `https://${host}`\n   */\n  baseUrl: string;\n};\n\n/**\n * Reads a single GitLab integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGitLabIntegrationConfig(\n  config: Config,\n): GitLabIntegrationConfig {\n  const host = config.getString('host');\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token')?.trim();\n  let baseUrl = config.getOptionalString('baseUrl');\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === GITLAB_HOST) {\n    apiBaseUrl = GITLAB_API_BASE_URL;\n  }\n\n  if (baseUrl) {\n    baseUrl = trimEnd(baseUrl, '/');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${host}' is not a valid host`,\n    );\n  } else if (!apiBaseUrl || !isValidUrl(apiBaseUrl)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${apiBaseUrl}' is not a valid apiBaseUrl`,\n    );\n  } else if (!isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  }\n\n  return { host, token, apiBaseUrl, baseUrl };\n}\n\n/**\n * Reads a set of GitLab integration configs, and inserts some defaults for\n * public GitLab if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readGitLabIntegrationConfigs(\n  configs: Config[],\n): GitLabIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readGitLabIntegrationConfig);\n\n  // As a convenience we always make sure there's at least an unauthenticated\n  // reader for public gitlab repos.\n  if (!result.some(c => c.host === GITLAB_HOST)) {\n    result.push({\n      host: GITLAB_HOST,\n      apiBaseUrl: GITLAB_API_BASE_URL,\n      baseUrl: `https://${GITLAB_HOST}`,\n    });\n  }\n\n  return result;\n}\n\n/**\n * Reads a GitLab integration config, and returns\n * relative path.\n *\n * @param config - GitLabIntegrationConfig object\n * @public\n */\nexport function getGitLabIntegrationRelativePath(\n  config: GitLabIntegrationConfig,\n): string {\n  let relativePath = '';\n  if (config.host !== GITLAB_HOST) {\n    relativePath = new URL(config.baseUrl).pathname;\n  }\n  return trimEnd(relativePath, '/');\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGitLabIntegrationRelativePath,\n  GitLabIntegrationConfig,\n} from './config';\nimport fetch from 'cross-fetch';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://gitlab.example.com/a/b/blob/master/c.yaml\n * to:   https://gitlab.com/api/v4/projects/projectId/repository/c.yaml?ref=master\n * -or-\n * from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n * to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport async function getGitLabFileFetchUrl(\n  url: string,\n  config: GitLabIntegrationConfig,\n): Promise<string> {\n  const projectID = await getProjectId(url, config);\n  return buildProjectUrl(url, projectID, config).toString();\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getGitLabRequestOptions(config: GitLabIntegrationConfig): {\n  headers: Record<string, string>;\n} {\n  const { token = '' } = config;\n  return {\n    headers: {\n      'PRIVATE-TOKEN': token,\n    },\n  };\n}\n\n// Converts\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\nexport function buildProjectUrl(\n  target: string,\n  projectID: Number,\n  config: GitLabIntegrationConfig,\n): URL {\n  try {\n    const url = new URL(target);\n\n    const branchAndFilePath = url.pathname\n      .split('/blob/')\n      .slice(1)\n      .join('/blob/');\n    const [branch, ...filePath] = branchAndFilePath.split('/');\n    const relativePath = getGitLabIntegrationRelativePath(config);\n\n    url.pathname = [\n      ...(relativePath ? [relativePath] : []),\n      'api/v4/projects',\n      projectID,\n      'repository/files',\n      encodeURIComponent(decodeURIComponent(filePath.join('/'))),\n      'raw',\n    ].join('/');\n\n    url.search = `?ref=${branch}`;\n\n    return url;\n  } catch (e) {\n    throw new Error(`Incorrect url: ${target}, ${e}`);\n  }\n}\n\n// Convert\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   The project ID that corresponds to the URL\nexport async function getProjectId(\n  target: string,\n  config: GitLabIntegrationConfig,\n): Promise<number> {\n  const url = new URL(target);\n\n  if (!url.pathname.includes('/blob/')) {\n    throw new Error('Please provide full path to yaml file from GitLab');\n  }\n\n  try {\n    let repo = url.pathname.split('/-/blob/')[0].split('/blob/')[0];\n\n    // Get gitlab relative path\n    const relativePath = getGitLabIntegrationRelativePath(config);\n\n    // Check relative path exist and replace it if it's the case.\n    if (relativePath) {\n      repo = repo.replace(relativePath, '');\n    }\n\n    // Convert\n    // to: https://gitlab.com/api/v4/projects/groupA%2Fteams%2FsubgroupA%2FteamA%2Frepo\n    const repoIDLookup = new URL(\n      `${url.origin}${relativePath}/api/v4/projects/${encodeURIComponent(\n        repo.replace(/^\\//, ''),\n      )}`,\n    );\n\n    const response = await fetch(\n      repoIDLookup.toString(),\n      getGitLabRequestOptions(config),\n    );\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `GitLab Error '${data.error}', ${data.error_description}`,\n      );\n    }\n\n    return Number(data.id);\n  } catch (e) {\n    throw new Error(`Could not get GitLab project ID for: ${target}, ${e}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GitLabIntegrationConfig,\n  readGitLabIntegrationConfigs,\n} from './config';\n\n/**\n * A GitLab based integration.\n *\n * @public\n */\nexport class GitLabIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GitLabIntegration> = ({ config }) => {\n    const configs = readGitLabIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.gitlab') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GitLabIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GitLabIntegrationConfig) {}\n\n  get type(): string {\n    return 'gitlab';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GitLabIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    return defaultScmResolveUrl(options);\n  }\n\n  resolveEditUrl(url: string): string {\n    return replaceGitLabUrlType(url, 'edit');\n  }\n}\n\n/**\n * Takes a GitLab URL and replaces the type part (blob, tree etc).\n *\n * @param url - The original URL\n * @param type - The desired type, e.g. 'blob', 'tree', 'edit'\n * @public\n */\nexport function replaceGitLabUrlType(\n  url: string,\n  type: 'blob' | 'tree' | 'edit',\n): string {\n  return url.replace(/\\/\\-\\/(blob|tree|edit)\\//, `/-/${type}/`);\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitLabIntegrationConfig } from './config';\nimport { GitlabCredentials, GitlabCredentialsProvider } from './types';\n\nexport class SingleInstanceGitlabCredentialsProvider\n  implements GitlabCredentialsProvider\n{\n  static create: (\n    config: GitLabIntegrationConfig,\n  ) => GitlabCredentialsProvider = config => {\n    return new SingleInstanceGitlabCredentialsProvider(config.token);\n  };\n\n  private constructor(private readonly token?: string) {}\n\n  async getCredentials(_opts: { url: string }): Promise<GitlabCredentials> {\n    if (!this.token) {\n      return {};\n    }\n\n    return {\n      headers: {\n        Authorization: `Bearer ${this.token}`,\n      },\n      token: this.token,\n    };\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrationRegistry } from '../registry';\nimport { SingleInstanceGitlabCredentialsProvider } from './SingleInstanceGitlabCredentialsProvider';\nimport { GitlabCredentials, GitlabCredentialsProvider } from './types';\n\n/**\n * Handles the creation and caching of credentials for GitLab integrations.\n *\n * @public\n */\nexport class DefaultGitlabCredentialsProvider\n  implements GitlabCredentialsProvider\n{\n  static fromIntegrations(integrations: ScmIntegrationRegistry) {\n    const credentialsProviders: Map<string, GitlabCredentialsProvider> =\n      new Map<string, GitlabCredentialsProvider>();\n\n    integrations.gitlab.list().forEach(integration => {\n      const credentialsProvider =\n        SingleInstanceGitlabCredentialsProvider.create(integration.config);\n      credentialsProviders.set(integration.config.host, credentialsProvider);\n    });\n    return new DefaultGitlabCredentialsProvider(credentialsProviders);\n  }\n\n  private constructor(\n    private readonly providers: Map<string, GitlabCredentialsProvider>,\n  ) {}\n\n  async getCredentials(opts: { url: string }): Promise<GitlabCredentials> {\n    const parsed = new URL(opts.url);\n    const provider = this.providers.get(parsed.host);\n\n    if (!provider) {\n      throw new Error(\n        `There is no GitLab integration that matches ${opts.url}. Please add a configuration for an integration.`,\n      );\n    }\n\n    return provider.getCredentials(opts);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\n/**\n * The configuration parameters for a single Google Cloud Storage provider.\n *\n * @public\n */\nexport type GoogleGcsIntegrationConfig = {\n  /**\n   * Service account email used to authenticate requests.\n   */\n  clientEmail?: string;\n  /**\n   * Service account private key used to authenticate requests.\n   */\n  privateKey?: string;\n};\n\n/**\n * Reads a single Google GCS integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGoogleGcsIntegrationConfig(\n  config: Config,\n): GoogleGcsIntegrationConfig {\n  if (!config) {\n    return {};\n  }\n\n  if (!config.has('clientEmail') && !config.has('privateKey')) {\n    return {};\n  }\n\n  const privateKey = config.getString('privateKey').split('\\\\n').join('\\n');\n\n  const clientEmail = config.getString('clientEmail');\n  return { clientEmail: clientEmail, privateKey: privateKey };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AwsS3Integration } from './awsS3/AwsS3Integration';\nimport { AzureIntegration } from './azure/AzureIntegration';\nimport { BitbucketCloudIntegration } from './bitbucketCloud/BitbucketCloudIntegration';\nimport { BitbucketIntegration } from './bitbucket/BitbucketIntegration';\nimport { BitbucketServerIntegration } from './bitbucketServer/BitbucketServerIntegration';\nimport { GerritIntegration } from './gerrit/GerritIntegration';\nimport { GithubIntegration } from './github/GithubIntegration';\nimport { GitLabIntegration } from './gitlab/GitLabIntegration';\nimport { defaultScmResolveUrl } from './helpers';\nimport { ScmIntegration, ScmIntegrationsGroup } from './types';\nimport { ScmIntegrationRegistry } from './registry';\nimport { GiteaIntegration } from './gitea';\n\n/**\n * The set of supported integrations.\n *\n * @public\n */\nexport interface IntegrationsByType {\n  awsS3: ScmIntegrationsGroup<AwsS3Integration>;\n  azure: ScmIntegrationsGroup<AzureIntegration>;\n  /**\n   * @deprecated in favor of `bitbucketCloud` and `bitbucketServer`\n   */\n  bitbucket: ScmIntegrationsGroup<BitbucketIntegration>;\n  bitbucketCloud: ScmIntegrationsGroup<BitbucketCloudIntegration>;\n  bitbucketServer: ScmIntegrationsGroup<BitbucketServerIntegration>;\n  gerrit: ScmIntegrationsGroup<GerritIntegration>;\n  github: ScmIntegrationsGroup<GithubIntegration>;\n  gitlab: ScmIntegrationsGroup<GitLabIntegration>;\n  gitea: ScmIntegrationsGroup<GiteaIntegration>;\n}\n\n/**\n * Exposes the set of supported integrations.\n *\n * @public\n */\nexport class ScmIntegrations implements ScmIntegrationRegistry {\n  private readonly byType: IntegrationsByType;\n\n  static fromConfig(config: Config): ScmIntegrations {\n    return new ScmIntegrations({\n      awsS3: AwsS3Integration.factory({ config }),\n      azure: AzureIntegration.factory({ config }),\n      bitbucket: BitbucketIntegration.factory({ config }),\n      bitbucketCloud: BitbucketCloudIntegration.factory({ config }),\n      bitbucketServer: BitbucketServerIntegration.factory({ config }),\n      gerrit: GerritIntegration.factory({ config }),\n      github: GithubIntegration.factory({ config }),\n      gitlab: GitLabIntegration.factory({ config }),\n      gitea: GiteaIntegration.factory({ config }),\n    });\n  }\n\n  constructor(integrationsByType: IntegrationsByType) {\n    this.byType = integrationsByType;\n  }\n\n  get awsS3(): ScmIntegrationsGroup<AwsS3Integration> {\n    return this.byType.awsS3;\n  }\n\n  get azure(): ScmIntegrationsGroup<AzureIntegration> {\n    return this.byType.azure;\n  }\n\n  /**\n   * @deprecated in favor of `bitbucketCloud()` and `bitbucketServer()`\n   */\n  get bitbucket(): ScmIntegrationsGroup<BitbucketIntegration> {\n    return this.byType.bitbucket;\n  }\n\n  get bitbucketCloud(): ScmIntegrationsGroup<BitbucketCloudIntegration> {\n    return this.byType.bitbucketCloud;\n  }\n\n  get bitbucketServer(): ScmIntegrationsGroup<BitbucketServerIntegration> {\n    return this.byType.bitbucketServer;\n  }\n\n  get gerrit(): ScmIntegrationsGroup<GerritIntegration> {\n    return this.byType.gerrit;\n  }\n\n  get github(): ScmIntegrationsGroup<GithubIntegration> {\n    return this.byType.github;\n  }\n\n  get gitlab(): ScmIntegrationsGroup<GitLabIntegration> {\n    return this.byType.gitlab;\n  }\n\n  get gitea(): ScmIntegrationsGroup<GiteaIntegration> {\n    return this.byType.gitea;\n  }\n\n  list(): ScmIntegration[] {\n    return Object.values(this.byType).flatMap(\n      i => i.list() as ScmIntegration[],\n    );\n  }\n\n  byUrl(url: string | URL): ScmIntegration | undefined {\n    let candidates = Object.values(this.byType)\n      .map(i => i.byUrl(url))\n      .filter(Boolean);\n\n    // Do not return deprecated integrations if there are other options\n    if (candidates.length > 1) {\n      const filteredCandidates = candidates.filter(\n        x => !(x instanceof BitbucketIntegration),\n      );\n      if (filteredCandidates.length !== 0) {\n        candidates = filteredCandidates;\n      }\n    }\n\n    return candidates[0];\n  }\n\n  byHost(host: string): ScmIntegration | undefined {\n    return Object.values(this.byType)\n      .map(i => i.byHost(host))\n      .find(Boolean);\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const integration = this.byUrl(options.base);\n    if (!integration) {\n      return defaultScmResolveUrl(options);\n    }\n\n    return integration.resolveUrl(options);\n  }\n\n  resolveEditUrl(url: string): string {\n    const integration = this.byUrl(url);\n    if (!integration) {\n      return url;\n    }\n\n    return integration.resolveEditUrl(url);\n  }\n}\n"],"names":["__publicField","_a","_b"],"mappings":"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"}