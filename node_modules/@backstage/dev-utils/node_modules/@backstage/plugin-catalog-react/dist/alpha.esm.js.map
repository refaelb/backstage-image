{"version":3,"file":"alpha.esm.js","sources":["../src/utils/isOwnerOf.ts","../src/hooks/useEntityPermission.ts","../src/alpha.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  getCompoundEntityRef,\n  RELATION_MEMBER_OF,\n  RELATION_OWNED_BY,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { getEntityRelations } from './getEntityRelations';\n\n/**\n * Returns true if the `owner` argument is a direct owner on the `entity` argument.\n *\n * @alpha\n * @remarks\n *\n * Note that this ownership is not the same as using the claims in the auth-resolver, it only will take into account ownership as expressed by direct entity relations.\n * It doesn't know anything about the additional groups that a user might belong to which the claims contain.\n */\nexport function isOwnerOf(owner: Entity, entity: Entity) {\n  const possibleOwners = new Set(\n    [\n      ...getEntityRelations(owner, RELATION_MEMBER_OF, { kind: 'group' }),\n      ...(owner ? [getCompoundEntityRef(owner)] : []),\n    ].map(stringifyEntityRef),\n  );\n\n  const owners = getEntityRelations(entity, RELATION_OWNED_BY).map(\n    stringifyEntityRef,\n  );\n\n  for (const ownerItem of owners) {\n    if (possibleOwners.has(ownerItem)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { ResourcePermission } from '@backstage/plugin-permission-common';\nimport { usePermission } from '@backstage/plugin-permission-react';\nimport { useAsyncEntity } from './useEntity';\n\n/**\n * A thin wrapper around the\n * {@link @backstage/plugin-permission-react#usePermission} hook which uses the\n * current entity in context to make an authorization request for the given\n * {@link @backstage/plugin-catalog-common#CatalogEntityPermission}.\n *\n * Note: this hook blocks the permission request until the entity has loaded in\n * context. If you have the entityRef and need concurrent requests, use the\n * `usePermission` hook directly.\n * @alpha\n */\nexport function useEntityPermission(\n  // TODO(joeporpeglia) Replace with `CatalogEntityPermission` when the issue described in\n  // https://github.com/backstage/backstage/pull/10128 is fixed.\n  permission: ResourcePermission<'catalog-entity'>,\n): {\n  loading: boolean;\n  allowed: boolean;\n  error?: Error;\n} {\n  const {\n    entity,\n    loading: loadingEntity,\n    error: entityError,\n  } = useAsyncEntity();\n  const {\n    allowed,\n    loading: loadingPermission,\n    error: permissionError,\n  } = usePermission({\n    permission,\n    resourceRef: entity ? stringifyEntityRef(entity) : undefined,\n  });\n\n  if (loadingEntity || loadingPermission) {\n    return { loading: true, allowed: false };\n  }\n  if (entityError) {\n    return { loading: false, allowed: false, error: entityError };\n  }\n  return { loading: false, allowed, error: permissionError };\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnyExtensionInputMap,\n  ExtensionBoundary,\n  PortableSchema,\n  ResolvedExtensionInputs,\n  RouteRef,\n  coreExtensionData,\n  createExtension,\n  createExtensionDataRef,\n  createSchemaFromZod,\n} from '@backstage/frontend-plugin-api';\nimport React, { lazy } from 'react';\nimport { Entity } from '@backstage/catalog-model';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { Expand } from '../../../packages/frontend-plugin-api/src/types';\n\nexport { useEntityPermission } from './hooks/useEntityPermission';\nexport { isOwnerOf } from './utils';\n\n/** @alpha */\nexport const catalogExtensionData = {\n  entityContentTitle: createExtensionDataRef<string>(\n    'catalog.entity-content-title',\n  ),\n  entityFilterFunction: createExtensionDataRef<(entity: Entity) => boolean>(\n    'catalog.entity-filter-function',\n  ),\n  entityFilterExpression: createExtensionDataRef<string>(\n    'catalog.entity-filter-expression',\n  ),\n};\n\n// TODO: Figure out how to merge with provided config schema\n/** @alpha */\nexport function createEntityCardExtension<\n  TConfig extends { filter?: string },\n  TInputs extends AnyExtensionInputMap,\n>(options: {\n  namespace?: string;\n  name?: string;\n  attachTo?: { id: string; input: string };\n  disabled?: boolean;\n  inputs?: TInputs;\n  configSchema?: PortableSchema<TConfig>;\n  filter?:\n    | typeof catalogExtensionData.entityFilterFunction.T\n    | typeof catalogExtensionData.entityFilterExpression.T;\n  loader: (options: {\n    config: TConfig;\n    inputs: Expand<ResolvedExtensionInputs<TInputs>>;\n  }) => Promise<JSX.Element>;\n}) {\n  const configSchema =\n    'configSchema' in options\n      ? options.configSchema\n      : (createSchemaFromZod(z =>\n          z.object({\n            filter: z.string().optional(),\n          }),\n        ) as PortableSchema<TConfig>);\n  return createExtension({\n    kind: 'entity-card',\n    namespace: options.namespace,\n    name: options.name,\n    attachTo: options.attachTo ?? {\n      id: 'entity-content:catalog/overview',\n      input: 'cards',\n    },\n    disabled: options.disabled ?? true,\n    output: {\n      element: coreExtensionData.reactElement,\n      filterFunction: catalogExtensionData.entityFilterFunction.optional(),\n      filterExpression: catalogExtensionData.entityFilterExpression.optional(),\n    },\n    inputs: options.inputs,\n    configSchema,\n    factory({ config, inputs, node }) {\n      const ExtensionComponent = lazy(() =>\n        options\n          .loader({ inputs, config })\n          .then(element => ({ default: () => element })),\n      );\n\n      return {\n        element: (\n          <ExtensionBoundary node={node}>\n            <ExtensionComponent />\n          </ExtensionBoundary>\n        ),\n        ...mergeFilters({ config, options }),\n      };\n    },\n  });\n}\n\n/** @alpha */\nexport function createEntityContentExtension<\n  TInputs extends AnyExtensionInputMap,\n>(options: {\n  namespace?: string;\n  name?: string;\n  attachTo?: { id: string; input: string };\n  disabled?: boolean;\n  inputs?: TInputs;\n  routeRef?: RouteRef;\n  defaultPath: string;\n  defaultTitle: string;\n  filter?:\n    | typeof catalogExtensionData.entityFilterFunction.T\n    | typeof catalogExtensionData.entityFilterExpression.T;\n  loader: (options: {\n    inputs: Expand<ResolvedExtensionInputs<TInputs>>;\n  }) => Promise<JSX.Element>;\n}) {\n  return createExtension({\n    kind: 'entity-content',\n    namespace: options.namespace,\n    name: options.name,\n    attachTo: options.attachTo ?? {\n      id: 'page:catalog/entity',\n      input: 'contents',\n    },\n    disabled: options.disabled ?? true,\n    output: {\n      element: coreExtensionData.reactElement,\n      path: coreExtensionData.routePath,\n      routeRef: coreExtensionData.routeRef.optional(),\n      title: catalogExtensionData.entityContentTitle,\n      filterFunction: catalogExtensionData.entityFilterFunction.optional(),\n      filterExpression: catalogExtensionData.entityFilterExpression.optional(),\n    },\n    inputs: options.inputs,\n    configSchema: createSchemaFromZod(z =>\n      z.object({\n        path: z.string().default(options.defaultPath),\n        title: z.string().default(options.defaultTitle),\n        filter: z.string().optional(),\n      }),\n    ),\n    factory({ config, inputs, node }) {\n      const ExtensionComponent = lazy(() =>\n        options\n          .loader({ inputs })\n          .then(element => ({ default: () => element })),\n      );\n\n      return {\n        path: config.path,\n        title: config.title,\n        routeRef: options.routeRef,\n        element: (\n          <ExtensionBoundary node={node} routable>\n            <ExtensionComponent />\n          </ExtensionBoundary>\n        ),\n        ...mergeFilters({ config, options }),\n      };\n    },\n  });\n}\n\n/**\n * Decides what filter outputs to produce, given some options and config\n */\nfunction mergeFilters(inputs: {\n  options: {\n    filter?:\n      | typeof catalogExtensionData.entityFilterFunction.T\n      | typeof catalogExtensionData.entityFilterExpression.T;\n  };\n  config: {\n    filter?: string;\n  };\n}): {\n  filterFunction?: typeof catalogExtensionData.entityFilterFunction.T;\n  filterExpression?: typeof catalogExtensionData.entityFilterExpression.T;\n} {\n  const { options, config } = inputs;\n  if (config.filter) {\n    return { filterExpression: config.filter };\n  } else if (typeof options.filter === 'string') {\n    return { filterExpression: options.filter };\n  } else if (typeof options.filter === 'function') {\n    return { filterFunction: options.filter };\n  }\n  return {};\n}\n"],"names":[],"mappings":"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"}