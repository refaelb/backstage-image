{"version":3,"file":"alpha.esm.js","sources":["../src/translation/TranslationMessages.ts","../src/translation/TranslationResource.ts","../src/translation/TranslationRef.ts","../src/apis/definitions/TranslationApi.ts","../src/apis/definitions/AppLanguageApi.ts","../src/translation/useTranslationRef.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TranslationRef } from '@backstage/core-plugin-api/alpha';\n\n/**\n * Represents a collection of messages to be provided for a given translation ref.\n *\n * @alpha\n * @remarks\n *\n * This collection of messages can either be used directly as an override for the\n * default messages, or it can be used to provide translations for a language by\n * by being referenced by a {@link TranslationResource}.\n */\nexport interface TranslationMessages<\n  TId extends string = string,\n  TMessages extends { [key in string]: string } = { [key in string]: string },\n  TFull extends boolean = boolean,\n> {\n  $$type: '@backstage/TranslationMessages';\n  /** The ID of the translation ref that these messages are for */\n  id: TId;\n  /** Whether or not these messages override all known messages */\n  full: TFull;\n  /** The messages provided for the given translation ref */\n  messages: TMessages;\n}\n\n/**\n * Options for {@link createTranslationMessages}.\n *\n * @alpha\n */\nexport interface TranslationMessagesOptions<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TFull extends boolean,\n> {\n  ref: TranslationRef<TId, TMessages>;\n\n  full?: TFull;\n\n  messages: false extends TFull\n    ? { [key in keyof TMessages]?: string | null }\n    : { [key in keyof TMessages]: string | null };\n}\n\n/**\n * Creates a collection of messages for a given translation ref.\n *\n * @alpha\n */\nexport function createTranslationMessages<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TFull extends boolean,\n>(\n  options: TranslationMessagesOptions<TId, TMessages, TFull>,\n): TranslationMessages<TId, TMessages, TFull> {\n  return {\n    $$type: '@backstage/TranslationMessages',\n    id: options.ref.id,\n    full: Boolean(options.full) as TFull,\n    messages: options.messages as TMessages,\n  };\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TranslationMessages,\n  TranslationRef,\n} from '@backstage/core-plugin-api/alpha';\n\n/** @alpha */\nexport interface TranslationResource<TId extends string = string> {\n  $$type: '@backstage/TranslationResource';\n  id: TId;\n}\n\n/** @internal */\nexport type InternalTranslationResourceLoader = () => Promise<{\n  messages: { [key in string]: string | null };\n}>;\n\n/** @internal */\nexport interface InternalTranslationResource<TId extends string = string>\n  extends TranslationResource<TId> {\n  version: 'v1';\n  resources: Array<{\n    language: string;\n    loader: InternalTranslationResourceLoader;\n  }>;\n}\n\n/** @internal */\nexport function toInternalTranslationResource<TId extends string>(\n  resource: TranslationResource<TId>,\n): InternalTranslationResource<TId> {\n  const r = resource as InternalTranslationResource<TId>;\n  if (r.$$type !== '@backstage/TranslationResource') {\n    throw new Error(`Invalid translation resource, bad type '${r.$$type}'`);\n  }\n  if (r.version !== 'v1') {\n    throw new Error(`Invalid translation resource, bad version '${r.version}'`);\n  }\n\n  return r;\n}\n\n/** @alpha */\nexport interface TranslationResourceOptions<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default:\n        | TranslationMessages<TId>\n        | { [key in keyof TMessages]: string | null };\n    }>;\n  },\n> {\n  ref: TranslationRef<TId, TMessages>;\n\n  translations: TTranslations;\n}\n\n/** @alpha */\nexport function createTranslationResource<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default:\n        | TranslationMessages<TId>\n        | { [key in keyof TMessages]: string | null };\n    }>;\n  },\n>(\n  options: TranslationResourceOptions<TId, TMessages, TTranslations>,\n): TranslationResource<TId> {\n  return {\n    $$type: '@backstage/TranslationResource',\n    version: 'v1',\n    id: options.ref.id,\n    resources: Object.entries(options.translations).map(\n      ([language, loader]) => ({\n        language,\n        loader: () =>\n          loader().then(m => {\n            const value = m.default;\n            return {\n              messages:\n                value?.$$type === '@backstage/TranslationMessages'\n                  ? value.messages\n                  : value,\n            };\n          }),\n      }),\n    ),\n  } as InternalTranslationResource<TId>;\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createTranslationResource,\n  TranslationResource,\n} from './TranslationResource';\n\n/** @alpha */\nexport interface TranslationRef<\n  TId extends string = string,\n  TMessages extends { [key in string]: string } = { [key in string]: string },\n> {\n  $$type: '@backstage/TranslationRef';\n\n  id: TId;\n\n  T: TMessages;\n}\n\n/** @internal */\ntype AnyMessages = { [key in string]: string };\n\n/** @ignore */\ntype AnyNestedMessages = { [key in string]: AnyNestedMessages | string };\n\n/**\n * Flattens a nested message declaration into a flat object with dot-separated keys.\n *\n * @ignore\n */\ntype FlattenedMessages<TMessages extends AnyNestedMessages> =\n  // Flatten out object keys into a union structure of objects, e.g. { a: 'a', b: 'b' } -> { a: 'a' } | { b: 'b' }\n  // Any nested object will be flattened into the individual unions, e.g. { a: 'a', b: { x: 'x', y: 'y' } } -> { a: 'a' } | { 'b.x': 'x', 'b.y': 'y' }\n  // We create this structure by first nesting the desired union types into the original object, and\n  // then extract them by indexing with `keyof TMessages` to form the union.\n  // Throughout this the objects are wrapped up in a function parameter, which allows us to have the\n  // final step of flipping this unions around to an intersection by inferring the function parameter.\n  {\n    [TKey in keyof TMessages]: (\n      _: TMessages[TKey] extends infer TValue // \"local variable\" for the value\n        ? TValue extends AnyNestedMessages\n          ? FlattenedMessages<TValue> extends infer TNested // Recurse into nested messages, \"local variable\" for the result\n            ? {\n                [TNestedKey in keyof TNested as `${TKey & string}.${TNestedKey &\n                  string}`]: TNested[TNestedKey];\n              }\n            : never\n          : { [_ in TKey]: TValue } // Primitive object values are passed through with the same key\n        : never,\n    ) => void;\n    // The `[keyof TMessages]` extracts the object values union from our flattened structure, still wrapped up in function parameters.\n    // The `extends (_: infer TIntersection) => void` flips the union to an intersection, at which point we have the correct type.\n  }[keyof TMessages] extends (_: infer TIntersection) => void\n    ? // This object mapping just expands similar to the Expand<> utility type, providing nicer type hints\n      {\n        readonly [TExpandKey in keyof TIntersection]: TIntersection[TExpandKey];\n      }\n    : never;\n\n/** @internal */\nexport interface InternalTranslationRef<\n  TId extends string = string,\n  TMessages extends { [key in string]: string } = { [key in string]: string },\n> extends TranslationRef<TId, TMessages> {\n  version: 'v1';\n\n  getDefaultMessages(): AnyMessages;\n\n  getDefaultResource(): TranslationResource | undefined;\n}\n\n/** @alpha */\nexport interface TranslationRefOptions<\n  TId extends string,\n  TNestedMessages extends AnyNestedMessages,\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default: {\n        [key in keyof FlattenedMessages<TNestedMessages>]: string | null;\n      };\n    }>;\n  },\n> {\n  id: TId;\n  messages: TNestedMessages;\n  translations?: TTranslations;\n}\n\nfunction flattenMessages(nested: AnyNestedMessages): AnyMessages {\n  const entries = new Array<[string, string]>();\n\n  function visit(obj: AnyNestedMessages, prefix: string): void {\n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === 'string') {\n        entries.push([prefix + key, value]);\n      } else {\n        visit(value, `${prefix}${key}.`);\n      }\n    }\n  }\n\n  visit(nested, '');\n\n  return Object.fromEntries(entries);\n}\n\n/** @internal */\nclass TranslationRefImpl<\n  TId extends string,\n  TNestedMessages extends AnyNestedMessages,\n> implements InternalTranslationRef<TId, FlattenedMessages<TNestedMessages>>\n{\n  #id: TId;\n  #messages: FlattenedMessages<TNestedMessages>;\n  #resources: TranslationResource | undefined;\n\n  constructor(options: TranslationRefOptions<TId, TNestedMessages, any>) {\n    this.#id = options.id;\n    this.#messages = flattenMessages(\n      options.messages,\n    ) as FlattenedMessages<TNestedMessages>;\n  }\n\n  $$type = '@backstage/TranslationRef' as const;\n\n  version = 'v1' as const;\n\n  get id(): TId {\n    return this.#id;\n  }\n\n  get T(): never {\n    throw new Error('Not implemented');\n  }\n\n  getDefaultMessages(): AnyMessages {\n    return this.#messages;\n  }\n\n  setDefaultResource(resources: TranslationResource): void {\n    this.#resources = resources;\n  }\n\n  getDefaultResource(): TranslationResource | undefined {\n    return this.#resources;\n  }\n\n  toString() {\n    return `TranslationRef{id=${this.id}}`;\n  }\n}\n\n/** @alpha */\nexport function createTranslationRef<\n  TId extends string,\n  const TNestedMessages extends AnyNestedMessages,\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default: {\n        [key in keyof FlattenedMessages<TNestedMessages>]: string | null;\n      };\n    }>;\n  },\n>(\n  config: TranslationRefOptions<TId, TNestedMessages, TTranslations>,\n): TranslationRef<TId, FlattenedMessages<TNestedMessages>> {\n  const ref = new TranslationRefImpl(config);\n  if (config.translations) {\n    ref.setDefaultResource(\n      createTranslationResource({\n        ref,\n        translations: config.translations as any,\n      }),\n    );\n  }\n  return ref;\n}\n\n/** @internal */\nexport function toInternalTranslationRef<\n  TId extends string,\n  TMessages extends AnyMessages,\n>(ref: TranslationRef<TId, TMessages>): InternalTranslationRef<TId, TMessages> {\n  const r = ref as InternalTranslationRef<TId, TMessages>;\n  if (r.$$type !== '@backstage/TranslationRef') {\n    throw new Error(`Invalid translation ref, bad type '${r.$$type}'`);\n  }\n  if (r.version !== 'v1') {\n    throw new Error(`Invalid translation ref, bad version '${r.version}'`);\n  }\n  return r;\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '@backstage/core-plugin-api';\nimport { Observable } from '@backstage/types';\nimport { TranslationRef } from '../../translation';\n\n/**\n * Base translation options.\n *\n * @alpha\n */\ninterface BaseOptions {\n  interpolation?: {\n    /** Whether to HTML escape provided values, defaults to false  */\n    escapeValue?: boolean;\n  };\n}\n\n/**\n * All pluralization suffixes supported by i18next\n *\n * @ignore\n */\ntype TranslationPlural = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n\n/**\n * A mapping of i18n formatting types to their corresponding types and options.\n * @ignore\n */\ntype I18nextFormatMap = {\n  number: {\n    type: number;\n    options: Intl.NumberFormatOptions;\n  };\n  currency: {\n    type: number;\n    options: Intl.NumberFormatOptions;\n  };\n  datetime: {\n    type: Date;\n    options: Intl.DateTimeFormatOptions;\n  };\n  relativetime: {\n    type: number;\n    options: {\n      range?: Intl.RelativeTimeFormatUnit;\n    } & Intl.RelativeTimeFormatOptions;\n  };\n  list: {\n    type: string[];\n    options: Intl.ListFormatOptions;\n  };\n};\n\n/**\n * Extracts all pluralized keys from the message map.\n *\n * @example\n * ```\n * { foo: 'foo', bar_one: 'bar', bar_other: 'bars' } -> 'bar'\n * ```\n *\n * @ignore\n */\ntype PluralKeys<TMessages extends { [key in string]: string }> = {\n  [Key in keyof TMessages]: Key extends `${infer K}_${TranslationPlural}`\n    ? K\n    : never;\n}[keyof TMessages];\n\n/**\n * Collapses a message map into normalized keys with union values.\n *\n * @example\n * ```\n * { foo_one: 'foo', foo_other: 'foos' } -> { foo: 'foo' | 'foos' }\n * ```\n *\n * @ignore\n */\ntype CollapsedMessages<TMessages extends { [key in string]: string }> = {\n  [key in keyof TMessages as key extends `${infer K}_${TranslationPlural}`\n    ? K\n    : key]: TMessages[key];\n};\n\n/**\n * Helper type that expands type hints\n *\n * @ignore\n */\ntype Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;\n\n/**\n * Helper type that expands type hints recursively\n *\n * @ignore\n */\ntype ExpandRecursive<T> = T extends infer O\n  ? { [K in keyof O]: ExpandRecursive<O[K]> }\n  : never;\n\n/**\n * Trim away whitespace\n *\n * @ignore\n */\ntype Trim<T> = T extends ` ${infer U}`\n  ? Trim<U>\n  : T extends `${infer U} `\n  ? Trim<U>\n  : T;\n\n/**\n * Extracts the key and format from a replacement string.\n *\n * @example\n * ```\n * 'foo, number' -> { foo: number }, 'foo' -> { foo: undefined }\n * ```\n */\ntype ExtractFormat<Replacement extends string> =\n  Replacement extends `${infer Key},${infer FullFormat}`\n    ? {\n        [key in Trim<Key>]: Lowercase<\n          Trim<\n            FullFormat extends `${infer Format}(${string})${string}`\n              ? Format\n              : FullFormat\n          >\n        >;\n      }\n    : { [key in Trim<Replacement>]: undefined };\n\n/**\n * Expand the keys in a flat map to nested objects.\n *\n * @example\n * ```\n * { 'a.b': 'foo', 'a.c': 'bar' } -> { a: { b: 'foo', c: 'bar' }\n * ```\n *\n * @ignore\n */\ntype ExpandKeys<TMap extends {}> = {\n  [Key in keyof TMap as Key extends `${infer Prefix}.${string}`\n    ? Prefix\n    : Key]: Key extends `${string}.${infer Rest}`\n    ? ExpandKeys<{ [key in Rest]: TMap[Key] }>\n    : TMap[Key];\n};\n\n/**\n * Extracts all option keys and their format from a message string.\n *\n * @example\n * ```\n * 'foo {{bar}} {{baz, number}}' -> { 'bar': undefined, 'baz': 'number' }\n * ```\n *\n * @ignore\n */\ntype ReplaceFormatsFromMessage<TMessage> =\n  TMessage extends `${string}{{${infer Replacement}}}${infer Tail}` // no formatting, e.g. {{foo}}\n    ? ExpandKeys<ExtractFormat<Replacement>> & ReplaceFormatsFromMessage<Tail>\n    : {};\n\n/**\n * Generates the replace options structure\n *\n * @ignore\n */\ntype ReplaceOptionsFromFormats<TFormats extends {}> = {\n  [Key in keyof TFormats]: TFormats[Key] extends keyof I18nextFormatMap\n    ? I18nextFormatMap[TFormats[Key]]['type']\n    : TFormats[Key] extends {}\n    ? Expand<ReplaceOptionsFromFormats<TFormats[Key]>>\n    : string;\n};\n\n/**\n * Generates the formatParams options structure\n *\n * @ignore\n */\ntype ReplaceFormatParamsFromFormats<TFormats extends {}> = {\n  [Key in keyof TFormats]?: TFormats[Key] extends keyof I18nextFormatMap\n    ? I18nextFormatMap[TFormats[Key]]['options']\n    : TFormats[Key] extends {}\n    ? Expand<ReplaceFormatParamsFromFormats<TFormats[Key]>>\n    : undefined;\n};\n\n/**\n * Extracts all nesting keys from a message string.\n *\n * @example\n * ```\n * 'foo $t(bar) $t(baz)' -> 'bar' | 'baz'\n * ```\n *\n * @ignore\n */\ntype NestingKeysFromMessage<TMessage extends string> =\n  TMessage extends `${string}$t(${infer Key})${infer Tail}` // nesting options are not supported\n    ? Trim<Key> | NestingKeysFromMessage<Tail>\n    : never;\n\n/**\n * Find all referenced keys, given a starting key and the full set of messages.\n *\n * This will only discover keys up to 3 levels deep.\n *\n * @example\n * ```\n * <'x', { x: '$t(y) $t(z)', y: 'y', z: '$t(w)', w: 'w', foo: 'foo' }> -> 'x' | 'y' | 'z' | 'w'\n * ```\n *\n * @ignore\n */\ntype NestedMessageKeys<\n  TKey extends keyof TMessages,\n  TMessages extends { [key in string]: string },\n> =\n  | TKey\n  | NestedMessageKeys2<NestingKeysFromMessage<TMessages[TKey]>, TMessages>;\n// Can't recursively reference ourself, so instead we got this beauty\ntype NestedMessageKeys2<\n  TKey extends keyof TMessages,\n  TMessages extends { [key in string]: string },\n> =\n  | TKey\n  | NestedMessageKeys3<NestingKeysFromMessage<TMessages[TKey]>, TMessages>;\n// Only support 3 levels of nesting\ntype NestedMessageKeys3<\n  TKey extends keyof TMessages,\n  TMessages extends { [key in string]: string },\n> = TKey | NestingKeysFromMessage<TMessages[TKey]>;\n\n/**\n * Converts a union type to an intersection type.\n *\n * @example\n * ```\n * { foo: 'foo' } | { bar: 'bar' } -> { foo: 'foo' } & { bar: 'bar' }\n * ```\n *\n * @ignore\n */\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (\n  k: infer I,\n) => void\n  ? I\n  : never;\n\n/**\n * Collects different types of options into a single object\n *\n * @ignore\n */\ntype CollectOptions<\n  TCount extends { count?: number },\n  TFormats extends {},\n> = TCount &\n  // count is special, omit it from the replacements\n  (keyof Omit<TFormats, 'count'> extends never\n    ? {}\n    : (\n        | Expand<Omit<ReplaceOptionsFromFormats<TFormats>, 'count'>>\n        | {\n            replace: Expand<Omit<ReplaceOptionsFromFormats<TFormats>, 'count'>>;\n          }\n      ) & {\n        formatParams?: Expand<ReplaceFormatParamsFromFormats<TFormats>>;\n      });\n\n/**\n * Helper type to only require options argument if needed\n *\n * @ignore\n */\ntype OptionArgs<TOptions extends {}> = keyof TOptions extends never\n  ? [options?: BaseOptions]\n  : [options: BaseOptions & TOptions];\n\n/**\n * @ignore\n */\ntype TranslationFunctionOptions<\n  TKeys extends keyof TMessages, // All normalized message keys to be considered, i.e. included nested ones\n  TPluralKeys extends keyof TMessages, // All keys in the message map that are pluralized\n  TMessages extends { [key in string]: string }, // Collapsed message map with normalized keys and union values\n> = OptionArgs<\n  Expand<\n    CollectOptions<\n      TKeys & TPluralKeys extends never ? {} : { count: number },\n      ExpandRecursive<\n        UnionToIntersection<ReplaceFormatsFromMessage<TMessages[TKeys]>>\n      >\n    >\n  >\n>;\n\n/** @alpha */\nexport interface TranslationFunction<\n  TMessages extends { [key in string]: string },\n> {\n  <TKey extends keyof CollapsedMessages<TMessages>>(\n    key: TKey,\n    ...[args]: TranslationFunctionOptions<\n      NestedMessageKeys<TKey, CollapsedMessages<TMessages>>,\n      PluralKeys<TMessages>,\n      CollapsedMessages<TMessages>\n    >\n  ): CollapsedMessages<TMessages>[TKey];\n}\n\n/** @alpha */\nexport type TranslationSnapshot<TMessages extends { [key in string]: string }> =\n  { ready: false } | { ready: true; t: TranslationFunction<TMessages> };\n\n/** @alpha */\nexport type TranslationApi = {\n  getTranslation<TMessages extends { [key in string]: string }>(\n    translationRef: TranslationRef<string, TMessages>,\n  ): TranslationSnapshot<TMessages>;\n\n  translation$<TMessages extends { [key in string]: string }>(\n    translationRef: TranslationRef<string, TMessages>,\n  ): Observable<TranslationSnapshot<TMessages>>;\n};\n\n/**\n * @alpha\n */\nexport const translationApiRef: ApiRef<TranslationApi> = createApiRef({\n  id: 'core.translation',\n});\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '@backstage/core-plugin-api';\nimport { Observable } from '@backstage/types';\n\n/** @alpha */\nexport type AppLanguageApi = {\n  getAvailableLanguages(): { languages: string[] };\n\n  setLanguage(language?: string): void;\n\n  getLanguage(): { language: string };\n\n  language$(): Observable<{ language: string }>;\n};\n\n/**\n * @alpha\n */\nexport const appLanguageApiRef: ApiRef<AppLanguageApi> = createApiRef({\n  id: 'core.applanguage',\n});\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { errorApiRef, useApi } from '../apis';\nimport {\n  translationApiRef,\n  TranslationFunction,\n  TranslationSnapshot,\n} from '../apis/alpha';\nimport { TranslationRef } from './TranslationRef';\n\n// Make sure we don't fill the logs with loading errors for the same ref\nconst loggedRefs = new WeakSet<TranslationRef<string, {}>>();\n\n/** @alpha */\nexport const useTranslationRef = <\n  TMessages extends { [key in string]: string },\n>(\n  translationRef: TranslationRef<string, TMessages>,\n): { t: TranslationFunction<TMessages> } => {\n  const errorApi = useApi(errorApiRef);\n  const translationApi = useApi(translationApiRef);\n\n  const [snapshot, setSnapshot] = useState<TranslationSnapshot<TMessages>>(() =>\n    translationApi.getTranslation(translationRef),\n  );\n  const observable = useMemo(\n    () => translationApi.translation$(translationRef),\n    [translationApi, translationRef],\n  );\n\n  const onError = useCallback(\n    (error: Error) => {\n      if (!loggedRefs.has(translationRef)) {\n        const errMsg = `Failed to load translation resource '${translationRef.id}'; caused by ${error}`;\n        // eslint-disable-next-line no-console\n        console.error(errMsg);\n        errorApi.post(new Error(errMsg));\n        loggedRefs.add(translationRef);\n      }\n    },\n    [errorApi, translationRef],\n  );\n\n  useEffect(() => {\n    const subscription = observable.subscribe({\n      next(next) {\n        if (next.ready) {\n          setSnapshot(next);\n        }\n      },\n      error(error) {\n        onError(error);\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable, onError]);\n\n  // Keep track of if the provided translation ref changes, and in that case update the snapshot\n  const initialRenderRef = useRef(true);\n  useEffect(() => {\n    if (initialRenderRef.current) {\n      initialRenderRef.current = false;\n    } else {\n      setSnapshot(translationApi.getTranslation(translationRef));\n    }\n  }, [translationApi, translationRef]);\n\n  if (!snapshot.ready) {\n    throw new Promise<void>(resolve => {\n      const subscription = observable.subscribe({\n        next(next) {\n          if (next.ready) {\n            subscription.unsubscribe();\n            resolve();\n          }\n        },\n        error(error) {\n          subscription.unsubscribe();\n          onError(error);\n          resolve();\n        },\n      });\n    });\n  }\n\n  return { t: snapshot.t };\n};\n"],"names":[],"mappings":"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"}