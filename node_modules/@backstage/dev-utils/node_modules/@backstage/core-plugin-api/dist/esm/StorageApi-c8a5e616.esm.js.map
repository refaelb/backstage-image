{"version":3,"file":"StorageApi-c8a5e616.esm.js","sources":["../../src/apis/system/useApi.tsx","../../src/apis/system/ApiRef.ts","../../src/apis/definitions/auth.ts","../../src/apis/definitions/AlertApi.ts","../../src/apis/definitions/AnalyticsApi.ts","../../src/apis/definitions/AppThemeApi.ts","../../src/apis/definitions/ConfigApi.ts","../../src/apis/definitions/DiscoveryApi.ts","../../src/apis/definitions/ErrorApi.ts","../../src/apis/definitions/FeatureFlagsApi.ts","../../src/apis/definitions/FetchApi.ts","../../src/apis/definitions/IdentityApi.ts","../../src/apis/definitions/OAuthRequestApi.ts","../../src/apis/definitions/StorageApi.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PropsWithChildren } from 'react';\nimport { ApiRef, ApiHolder, TypesToApiRefs } from './types';\nimport { useVersionedContext } from '@backstage/version-bridge';\nimport { NotImplementedError } from '@backstage/errors';\n\n/**\n * React hook for retrieving {@link ApiHolder}, an API catalog.\n *\n * @public\n */\nexport function useApiHolder(): ApiHolder {\n  const versionedHolder = useVersionedContext<{ 1: ApiHolder }>('api-context');\n  if (!versionedHolder) {\n    throw new NotImplementedError('API context is not available');\n  }\n\n  const apiHolder = versionedHolder.atVersion(1);\n  if (!apiHolder) {\n    throw new NotImplementedError('ApiContext v1 not available');\n  }\n  return apiHolder;\n}\n\n/**\n * React hook for retrieving APIs.\n *\n * @param apiRef - Reference of the API to use.\n * @public\n */\nexport function useApi<T>(apiRef: ApiRef<T>): T {\n  const apiHolder = useApiHolder();\n\n  const api = apiHolder.get(apiRef);\n  if (!api) {\n    throw new NotImplementedError(`No implementation available for ${apiRef}`);\n  }\n  return api;\n}\n\n/**\n * Wrapper for giving component an API context.\n *\n * @param apis - APIs for the context.\n * @public\n */\nexport function withApis<T extends {}>(apis: TypesToApiRefs<T>) {\n  return function withApisWrapper<TProps extends T>(\n    WrappedComponent: React.ComponentType<TProps>,\n  ) {\n    const Hoc = (props: PropsWithChildren<Omit<TProps, keyof T>>) => {\n      const apiHolder = useApiHolder();\n\n      const impls = {} as T;\n\n      for (const key in apis) {\n        if (apis.hasOwnProperty(key)) {\n          const ref = apis[key];\n\n          const api = apiHolder.get(ref);\n          if (!api) {\n            throw new NotImplementedError(\n              `No implementation available for ${ref}`,\n            );\n          }\n          impls[key] = api;\n        }\n      }\n\n      return <WrappedComponent {...(props as TProps)} {...impls} />;\n    };\n    const displayName =\n      WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n    Hoc.displayName = `withApis(${displayName})`;\n\n    return Hoc;\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ApiRef } from './types';\n\n/**\n * API reference configuration - holds an ID of the referenced API.\n *\n * @public\n */\nexport type ApiRefConfig = {\n  id: string;\n};\n\nclass ApiRefImpl<T> implements ApiRef<T> {\n  constructor(private readonly config: ApiRefConfig) {\n    const valid = config.id\n      .split('.')\n      .flatMap(part => part.split('-'))\n      .every(part => part.match(/^[a-z][a-z0-9]*$/));\n    if (!valid) {\n      throw new Error(\n        `API id must only contain period separated lowercase alphanum tokens with dashes, got '${config.id}'`,\n      );\n    }\n  }\n\n  get id(): string {\n    return this.config.id;\n  }\n\n  // Utility for getting type of an api, using `typeof apiRef.T`\n  get T(): T {\n    throw new Error(`tried to read ApiRef.T of ${this}`);\n  }\n\n  toString() {\n    return `apiRef{${this.config.id}}`;\n  }\n}\n\n/**\n * Creates a reference to an API.\n *\n * @param config - The descriptor of the API to reference.\n * @returns An API reference.\n * @public\n */\nexport function createApiRef<T>(config: ApiRefConfig): ApiRef<T> {\n  return new ApiRefImpl<T>(config);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { IconComponent } from '../../icons/types';\nimport { Observable } from '@backstage/types';\n\n/**\n * This file contains declarations for common interfaces of auth-related APIs.\n * The declarations should be used to signal which type of authentication and\n * authorization methods each separate auth provider supports.\n *\n * For example, a Google OAuth provider that supports OAuth 2 and OpenID Connect,\n * would be declared as follows:\n *\n * const googleAuthApiRef = createApiRef<OAuthApi & OpenIDConnectApi>({ ... })\n */\n\n/**\n * Information about the auth provider.\n *\n * @remarks\n *\n * This information is used both to connect the correct auth provider in the backend, as\n * well as displaying the provider to the user.\n *\n * @public\n */\nexport type AuthProviderInfo = {\n  /**\n   * The ID of the auth provider. This should match with ID of the provider in the `@backstage/auth-backend`.\n   */\n  id: string;\n\n  /**\n   * Title for the auth provider, for example \"GitHub\"\n   */\n  title: string;\n\n  /**\n   * Icon for the auth provider.\n   */\n  icon: IconComponent;\n};\n\n/**\n * An array of scopes, or a scope string formatted according to the\n * auth provider, which is typically a space separated list.\n *\n * @remarks\n *\n * See the documentation for each auth provider for the list of scopes\n * supported by each provider.\n *\n * @public\n */\nexport type OAuthScope = string | string[];\n\n/**\n * Configuration of an authentication request.\n *\n * @public\n */\nexport type AuthRequestOptions = {\n  /**\n   * If this is set to true, the user will not be prompted to log in,\n   * and an empty response will be returned if there is no existing session.\n   *\n   * This can be used to perform a check whether the user is logged in, or if you don't\n   * want to force a user to be logged in, but provide functionality if they already are.\n   *\n   * @defaultValue false\n   */\n  optional?: boolean;\n\n  /**\n   * If this is set to true, the request will bypass the regular oauth login modal\n   * and open the login popup directly.\n   *\n   * The method must be called synchronously from a user action for this to work in all browsers.\n   *\n   * @defaultValue false\n   */\n  instantPopup?: boolean;\n};\n\n/**\n * This API provides access to OAuth 2 credentials. It lets you request access tokens,\n * which can be used to act on behalf of the user when talking to APIs.\n *\n * @public\n */\nexport type OAuthApi = {\n  /**\n   * Requests an OAuth 2 Access Token, optionally with a set of scopes. The access token allows\n   * you to make requests on behalf of the user, and the copes may grant you broader access, depending\n   * on the auth provider.\n   *\n   * Each auth provider has separate handling of scope, so you need to look at the documentation\n   * for each one to know what scope you need to request.\n   *\n   * This method is cheap and should be called each time an access token is used. Do not for example\n   * store the access token in React component state, as that could cause the token to expire. Instead\n   * fetch a new access token for each request.\n   *\n   * Be sure to include all required scopes when requesting an access token. When testing your implementation\n   * it is best to log out the Backstage session and then visit your plugin page directly, as\n   * you might already have some required scopes in your existing session. Not requesting the correct\n   * scopes can lead to 403 or other authorization errors, which can be tricky to debug.\n   *\n   * If the user has not yet granted access to the provider and the set of requested scopes, the user\n   * will be prompted to log in. The returned promise will not resolve until the user has\n   * successfully logged in. The returned promise can be rejected, but only if the user rejects the login request.\n   */\n  getAccessToken(\n    scope?: OAuthScope,\n    options?: AuthRequestOptions,\n  ): Promise<string>;\n};\n\n/**\n * This API provides access to OpenID Connect credentials. It lets you request ID tokens,\n * which can be passed to backend services to prove the user's identity.\n *\n * @public\n */\nexport type OpenIdConnectApi = {\n  /**\n   * Requests an OpenID Connect ID Token.\n   *\n   * This method is cheap and should be called each time an ID token is used. Do not for example\n   * store the id token in React component state, as that could cause the token to expire. Instead\n   * fetch a new id token for each request.\n   *\n   * If the user has not yet logged in to Google inside Backstage, the user will be prompted\n   * to log in. The returned promise will not resolve until the user has successfully logged in.\n   * The returned promise can be rejected, but only if the user rejects the login request.\n   */\n  getIdToken(options?: AuthRequestOptions): Promise<string>;\n};\n\n/**\n * This API provides access to profile information of the user from an auth provider.\n *\n * @public\n */\nexport type ProfileInfoApi = {\n  /**\n   * Get profile information for the user as supplied by this auth provider.\n   *\n   * If the optional flag is not set, a session is guaranteed to be returned, while if\n   * the optional flag is set, the session may be undefined. See {@link AuthRequestOptions} for more details.\n   */\n  getProfile(options?: AuthRequestOptions): Promise<ProfileInfo | undefined>;\n};\n\n/**\n * This API provides access to the user's identity within Backstage.\n *\n * @remarks\n *\n * An auth provider that implements this interface can be used to sign-in to backstage. It is\n * not intended to be used directly from a plugin, but instead serves as a connection between\n * this authentication method and the app's {@link IdentityApi}\n *\n * @public\n */\nexport type BackstageIdentityApi = {\n  /**\n   * Get the user's identity within Backstage. This should normally not be called directly,\n   * use the {@link IdentityApi} instead.\n   *\n   * If the optional flag is not set, a session is guaranteed to be returned, while if\n   * the optional flag is set, the session may be undefined. See {@link AuthRequestOptions} for more details.\n   */\n  getBackstageIdentity(\n    options?: AuthRequestOptions,\n  ): Promise<BackstageIdentityResponse | undefined>;\n};\n\n/**\n * User identity information within Backstage.\n *\n * @public\n */\nexport type BackstageUserIdentity = {\n  /**\n   * The type of identity that this structure represents. In the frontend app\n   * this will currently always be 'user'.\n   */\n  type: 'user';\n\n  /**\n   * The entityRef of the user in the catalog.\n   * For example User:default/sandra\n   */\n  userEntityRef: string;\n\n  /**\n   * The user and group entities that the user claims ownership through\n   */\n  ownershipEntityRefs: string[];\n};\n\n/**\n * Token and Identity response, with the users claims in the Identity.\n *\n * @public\n */\nexport type BackstageIdentityResponse = {\n  /**\n   * The token used to authenticate the user within Backstage.\n   */\n  token: string;\n\n  /**\n   * The time at which the token expires. If not set, it can be assumed that the token does not expire.\n   */\n  expiresAt?: Date;\n\n  /**\n   * Identity information derived from the token.\n   */\n  identity: BackstageUserIdentity;\n};\n\n/**\n * Profile information of the user.\n *\n * @public\n */\nexport type ProfileInfo = {\n  /**\n   * Email ID.\n   */\n  email?: string;\n\n  /**\n   * Display name that can be presented to the user.\n   */\n  displayName?: string;\n\n  /**\n   * URL to an avatar image of the user.\n   */\n  picture?: string;\n};\n\n/**\n * Session state values passed to subscribers of the SessionApi.\n *\n * @public\n */\nexport enum SessionState {\n  /**\n   * User signed in.\n   */\n  SignedIn = 'SignedIn',\n  /**\n   * User not signed in.\n   */\n  SignedOut = 'SignedOut',\n}\n\n/**\n * The SessionApi provides basic controls for any auth provider that is tied to a persistent session.\n *\n * @public\n */\nexport type SessionApi = {\n  /**\n   * Sign in with a minimum set of permissions.\n   */\n  signIn(): Promise<void>;\n\n  /**\n   * Sign out from the current session. This will reload the page.\n   */\n  signOut(): Promise<void>;\n\n  /**\n   * Observe the current state of the auth session. Emits the current state on subscription.\n   */\n  sessionState$(): Observable<SessionState>;\n};\n\n/**\n * Provides authentication towards Google APIs and identities.\n *\n * @public\n * @remarks\n *\n * See {@link https://developers.google.com/identity/protocols/googlescopes} for a full list of supported scopes.\n *\n * Note that the ID token payload is only guaranteed to contain the user's numerical Google ID,\n * email and expiration information. Do not rely on any other fields, as they might not be present.\n */\nexport const googleAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.google',\n});\n\n/**\n * Provides authentication towards GitHub APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/}\n * for a full list of supported scopes.\n */\nexport const githubAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.github',\n});\n\n/**\n * Provides authentication towards Okta APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://developer.okta.com/docs/guides/implement-oauth-for-okta/scopes/}\n * for a full list of supported scopes.\n */\nexport const oktaAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.okta',\n});\n\n/**\n * Provides authentication towards GitLab APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#limiting-scopes-of-a-personal-access-token}\n * for a full list of supported scopes.\n */\nexport const gitlabAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.gitlab',\n});\n\n/**\n * Provides authentication towards Microsoft APIs and identities.\n *\n * @public\n * @remarks\n *\n * For more info and a full list of supported scopes, see:\n * - {@link https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent}\n * - {@link https://docs.microsoft.com/en-us/graph/permissions-reference}\n */\nexport const microsoftAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.microsoft',\n});\n\n/**\n * Provides authentication towards OneLogin APIs.\n *\n * @public\n */\nexport const oneloginAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.onelogin',\n});\n\n/**\n * Provides authentication towards Bitbucket APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud/}\n * for a full list of supported scopes.\n */\nexport const bitbucketAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.bitbucket',\n});\n\n/**\n * Provides authentication towards Bitbucket Server APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://confluence.atlassian.com/bitbucketserver/bitbucket-oauth-2-0-provider-api-1108483661.html#BitbucketOAuth2.0providerAPI-scopes}\n * for a full list of supported scopes.\n */\nexport const bitbucketServerAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.bitbucket-server',\n});\n\n/**\n * Provides authentication towards Atlassian APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://developer.atlassian.com/cloud/jira/platform/scopes-for-connect-and-oauth-2-3LO-apps/}\n * for a full list of supported scopes.\n */\nexport const atlassianAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.atlassian',\n});\n\n/**\n * Provides authentication towards VMware Cloud APIs and identities.\n *\n * @public\n * @remarks\n *\n * For more info about VMware Cloud identity and access management:\n * - {@link https://docs.vmware.com/en/VMware-Cloud-services/services/Using-VMware-Cloud-Services/GUID-53D39337-D93A-4B84-BD18-DDF43C21479A.html}\n */\nexport const vmwareCloudAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.vmware-cloud',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createApiRef, ApiRef } from '../system';\nimport { Observable } from '@backstage/types';\n\n/**\n * Message handled by the {@link AlertApi}.\n *\n * @public\n */\nexport type AlertMessage = {\n  message: string;\n  // Severity will default to success since that is what material ui defaults the value to.\n  severity?: 'success' | 'info' | 'warning' | 'error';\n  display?: 'permanent' | 'transient';\n};\n\n/**\n * The alert API is used to report alerts to the app, and display them to the user.\n *\n * @public\n */\nexport type AlertApi = {\n  /**\n   * Post an alert for handling by the application.\n   */\n  post(alert: AlertMessage): void;\n\n  /**\n   * Observe alerts posted by other parts of the application.\n   */\n  alert$(): Observable<AlertMessage>;\n};\n\n/**\n * The {@link ApiRef} of {@link AlertApi}.\n *\n * @public\n */\nexport const alertApiRef: ApiRef<AlertApi> = createApiRef({\n  id: 'core.alert',\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { AnalyticsContextValue } from '../../analytics/types';\n\n/**\n * Represents an event worth tracking in an analytics system that could inform\n * how users of a Backstage instance are using its features.\n *\n * @public\n */\nexport type AnalyticsEvent = {\n  /**\n   * A string that identifies the event being tracked by the type of action the\n   * event represents. Be careful not to encode extra metadata in this string\n   * that should instead be placed in the Analytics Context or attributes.\n   * Examples include:\n   *\n   * - view\n   * - click\n   * - filter\n   * - search\n   * - hover\n   * - scroll\n   */\n  action: string;\n\n  /**\n   * A string that uniquely identifies the object that the action is being\n   * taken on. Examples include:\n   *\n   * - The path of the page viewed\n   * - The url of the link clicked\n   * - The value that was filtered by\n   * - The text that was searched for\n   */\n  subject: string;\n\n  /**\n   * An optional numeric value relevant to the event that could be aggregated\n   * by analytics tools. Examples include:\n   *\n   * - The index or position of the clicked element in an ordered list\n   * - The percentage of an element that has been scrolled through\n   * - The amount of time that has elapsed since a fixed point\n   * - A satisfaction score on a fixed scale\n   */\n  value?: number;\n\n  /**\n   * Optional, additional attributes (representing dimensions or metrics)\n   * specific to the event that could be forwarded on to analytics systems.\n   */\n  attributes?: AnalyticsEventAttributes;\n\n  /**\n   * Contextual metadata relating to where the event was captured and by whom.\n   * This could include information about the route, plugin, or extension in\n   * which an event was captured.\n   */\n  context: AnalyticsContextValue;\n};\n\n/**\n * A structure allowing other arbitrary metadata to be provided by analytics\n * event emitters.\n *\n * @public\n */\nexport type AnalyticsEventAttributes = {\n  [attribute in string]: string | boolean | number;\n};\n\n/**\n * Represents a tracker with methods that can be called to track events in a\n * configured analytics service.\n *\n * @public\n */\nexport type AnalyticsTracker = {\n  captureEvent: (\n    action: string,\n    subject: string,\n    options?: {\n      value?: number;\n      attributes?: AnalyticsEventAttributes;\n    },\n  ) => void;\n};\n\n/**\n * The Analytics API is used to track user behavior in a Backstage instance.\n *\n * @remarks\n *\n * To instrument your App or Plugin, retrieve an analytics tracker using the\n * useAnalytics() hook. This will return a pre-configured AnalyticsTracker\n * with relevant methods for instrumentation.\n *\n * @public\n */\nexport type AnalyticsApi = {\n  /**\n   * Primary event handler responsible for compiling and forwarding events to\n   * an analytics system.\n   */\n  captureEvent(event: AnalyticsEvent): void;\n};\n\n/**\n * The {@link ApiRef} of {@link AnalyticsApi}.\n *\n * @public\n */\nexport const analyticsApiRef: ApiRef<AnalyticsApi> = createApiRef({\n  id: 'core.analytics',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReactNode } from 'react';\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '@backstage/types';\n\n/**\n * Describes a theme provided by the app.\n *\n * @public\n */\nexport type AppTheme = {\n  /**\n   * ID used to remember theme selections.\n   */\n  id: string;\n\n  /**\n   * Title of the theme\n   */\n  title: string;\n\n  /**\n   * Theme variant\n   */\n  variant: 'light' | 'dark';\n\n  /**\n   * An Icon for the theme mode setting.\n   */\n  icon?: React.ReactElement;\n\n  Provider(props: { children: ReactNode }): JSX.Element | null;\n};\n\n/**\n * The AppThemeApi gives access to the current app theme, and allows switching\n * to other options that have been registered as a part of the App.\n *\n * @public\n */\nexport type AppThemeApi = {\n  /**\n   * Get a list of available themes.\n   */\n  getInstalledThemes(): AppTheme[];\n\n  /**\n   * Observe the currently selected theme. A value of undefined means no specific theme has been selected.\n   */\n  activeThemeId$(): Observable<string | undefined>;\n\n  /**\n   * Get the current theme ID. Returns undefined if no specific theme is selected.\n   */\n  getActiveThemeId(): string | undefined;\n\n  /**\n   * Set a specific theme to use in the app, overriding the default theme selection.\n   *\n   * Clear the selection by passing in undefined.\n   */\n  setActiveThemeId(themeId?: string): void;\n};\n\n/**\n * The {@link ApiRef} of {@link AppThemeApi}.\n *\n * @public\n */\nexport const appThemeApiRef: ApiRef<AppThemeApi> = createApiRef({\n  id: 'core.apptheme',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\nimport { Config } from '@backstage/config';\n\n/**\n * The Config API is used to provide a mechanism to access the\n * runtime configuration of the system.\n *\n * @public\n */\nexport type ConfigApi = Config;\n\n/**\n * The {@link ApiRef} of {@link ConfigApi}.\n *\n * @public\n */\nexport const configApiRef: ApiRef<ConfigApi> = createApiRef({\n  id: 'core.config',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * The discovery API is used to provide a mechanism for plugins to\n * discover the endpoint to use to talk to their backend counterpart.\n *\n * @remarks\n *\n * The purpose of the discovery API is to allow for many different deployment\n * setups and routing methods through a central configuration, instead\n * of letting each individual plugin manage that configuration.\n *\n * Implementations of the discovery API can be a simple as a URL pattern\n * using the pluginId, but could also have overrides for individual plugins,\n * or query a separate discovery service.\n *\n * @public\n */\nexport type DiscoveryApi = {\n  /**\n   * Returns the HTTP base backend URL for a given plugin, without a trailing slash.\n   *\n   * This method must always be called just before making a request, as opposed to\n   * fetching the URL when constructing an API client. That is to ensure that more\n   * flexible routing patterns can be supported.\n   *\n   * For example, asking for the URL for `auth` may return something\n   * like `https://backstage.example.com/api/auth`\n   */\n  getBaseUrl(pluginId: string): Promise<string>;\n};\n\n/**\n * The {@link ApiRef} of {@link DiscoveryApi}.\n *\n * @public\n */\nexport const discoveryApiRef: ApiRef<DiscoveryApi> = createApiRef({\n  id: 'core.discovery',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '@backstage/types';\n\n/**\n * Mirrors the JavaScript Error class, for the purpose of\n * providing documentation and optional fields.\n *\n * @public\n */\nexport type ErrorApiError = {\n  name: string;\n  message: string;\n  stack?: string;\n};\n\n/**\n * Provides additional information about an error that was posted to the application.\n *\n * @public\n */\nexport type ErrorApiErrorContext = {\n  /**\n   * If set to true, this error should not be displayed to the user.\n   *\n   * Hidden errors are typically not displayed in the UI, but the ErrorApi\n   * implementation may still report them to error tracking services\n   * or other utilities that care about all errors.\n   *\n   * @defaultValue false\n   */\n  hidden?: boolean;\n};\n\n/**\n * The error API is used to report errors to the app, and display them to the user.\n *\n * @remarks\n *\n * Plugins can use this API as a method of displaying errors to the user, but also\n * to report errors for collection by error reporting services.\n *\n * If an error can be displayed inline, e.g. as feedback in a form, that should be\n * preferred over relying on this API to display the error. The main use of this API\n * for displaying errors should be for asynchronous errors, such as a failing background process.\n *\n * Even if an error is displayed inline, it should still be reported through this API\n * if it would be useful to collect or log it for debugging purposes, but with\n * the hidden flag set. For example, an error arising from form field validation\n * should probably not be reported, while a failed REST call would be useful to report.\n *\n * @public\n */\nexport type ErrorApi = {\n  /**\n   * Post an error for handling by the application.\n   */\n  post(error: ErrorApiError, context?: ErrorApiErrorContext): void;\n\n  /**\n   * Observe errors posted by other parts of the application.\n   */\n  error$(): Observable<{\n    error: ErrorApiError;\n    context?: ErrorApiErrorContext;\n  }>;\n};\n\n/**\n * The {@link ApiRef} of {@link ErrorApi}.\n *\n * @public\n */\nexport const errorApiRef: ApiRef<ErrorApi> = createApiRef({\n  id: 'core.error',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * Feature flag descriptor.\n *\n * @public\n */\nexport type FeatureFlag = {\n  name: string;\n  pluginId: string;\n  description?: string;\n};\n\n/**\n * Enum representing the state of a feature flag (inactive/active).\n *\n * @public\n */\nexport enum FeatureFlagState {\n  /**\n   * Feature flag inactive (disabled).\n   */\n  None = 0,\n  /**\n   * Feature flag active (enabled).\n   */\n  Active = 1,\n}\n\n/**\n * Options to use when saving feature flags.\n *\n * @public\n */\nexport type FeatureFlagsSaveOptions = {\n  /**\n   * The new feature flag states to save.\n   */\n  states: Record<string, FeatureFlagState>;\n\n  /**\n   * Whether the saves states should be merged into the existing ones, or replace them.\n   *\n   * Defaults to false.\n   */\n  merge?: boolean;\n};\n\n/**\n * The feature flags API is used to toggle functionality to users across plugins and Backstage.\n *\n * @remarks\n *\n * Plugins can use this API to register feature flags that they have available\n * for users to enable/disable, and this API will centralize the current user's\n * state of which feature flags they would like to enable.\n *\n * This is ideal for Backstage plugins, as well as your own App, to trial incomplete\n * or unstable upcoming features. Although there will be a common interface for users\n * to enable and disable feature flags, this API acts as another way to enable/disable.\n *\n * @public\n */\nexport interface FeatureFlagsApi {\n  /**\n   * Registers a new feature flag. Once a feature flag has been registered it\n   * can be toggled by users, and read back to enable or disable features.\n   */\n  registerFlag(flag: FeatureFlag): void;\n\n  /**\n   * Get a list of all registered flags.\n   */\n  getRegisteredFlags(): FeatureFlag[];\n\n  /**\n   * Whether the feature flag with the given name is currently activated for the user.\n   */\n  isActive(name: string): boolean;\n\n  /**\n   * Save the user's choice of feature flag states.\n   */\n  save(options: FeatureFlagsSaveOptions): void;\n}\n\n/**\n * The {@link ApiRef} of {@link FeatureFlagsApi}.\n *\n * @public\n */\nexport const featureFlagsApiRef: ApiRef<FeatureFlagsApi> = createApiRef({\n  id: 'core.featureflags',\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * A wrapper for the fetch API, that has additional behaviors such as the\n * ability to automatically inject auth information where necessary.\n *\n * @public\n */\nexport type FetchApi = {\n  /**\n   * The `fetch` implementation.\n   */\n  fetch: typeof fetch;\n};\n\n/**\n * The {@link ApiRef} of {@link FetchApi}.\n *\n * @remarks\n *\n * This is a wrapper for the fetch API, that has additional behaviors such as\n * the ability to automatically inject auth information where necessary.\n *\n * Note that the default behavior of this API (unless overridden by your org),\n * is to require that the user is already signed in so that it has auth\n * information to inject. Therefore, using the default implementation of this\n * utility API e.g. on the `SignInPage` or similar, would cause issues. In\n * special circumstances like those, you can use the regular system `fetch`\n * instead.\n *\n * @public\n */\nexport const fetchApiRef: ApiRef<FetchApi> = createApiRef({\n  id: 'core.fetch',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\nimport { BackstageUserIdentity, ProfileInfo } from './auth';\n\n/**\n * The Identity API used to identify and get information about the signed in user.\n *\n * @public\n */\nexport type IdentityApi = {\n  /**\n   * The profile of the signed in user.\n   */\n  getProfileInfo(): Promise<ProfileInfo>;\n\n  /**\n   * User identity information within Backstage.\n   */\n  getBackstageIdentity(): Promise<BackstageUserIdentity>;\n\n  /**\n   * Provides credentials in the form of a token which proves the identity of the signed in user.\n   *\n   * The token will be undefined if the signed in user does not have a verified\n   * identity, such as a demo user or mocked user for e2e tests.\n   */\n  getCredentials(): Promise<{ token?: string }>;\n\n  /**\n   * Sign out the current user\n   */\n  signOut(): Promise<void>;\n};\n\n/**\n * The {@link ApiRef} of {@link IdentityApi}.\n *\n * @public\n */\nexport const identityApiRef: ApiRef<IdentityApi> = createApiRef({\n  id: 'core.identity',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from '@backstage/types';\nimport { ApiRef, createApiRef } from '../system';\nimport { AuthProviderInfo } from './auth';\n\n/**\n * Describes how to handle auth requests. Both how to show them to the user, and what to do when\n * the user accesses the auth request.\n *\n * @public\n */\nexport type OAuthRequesterOptions<TOAuthResponse> = {\n  /**\n   * Information about the auth provider, which will be forwarded to auth requests.\n   */\n  provider: AuthProviderInfo;\n\n  /**\n   * Implementation of the auth flow, which will be called synchronously when\n   * trigger() is called on an auth requests.\n   */\n  onAuthRequest(scopes: Set<string>): Promise<TOAuthResponse>;\n};\n\n/**\n * Function used to trigger new auth requests for a set of scopes.\n *\n * @remarks\n *\n * The returned promise will resolve to the same value returned by the onAuthRequest in the\n * {@link OAuthRequesterOptions}. Or rejected, if the request is rejected.\n *\n * This function can be called multiple times before the promise resolves. All calls\n * will be merged into one request, and the scopes forwarded to the onAuthRequest will be the\n * union of all requested scopes.\n *\n * @public\n */\nexport type OAuthRequester<TAuthResponse> = (\n  scopes: Set<string>,\n) => Promise<TAuthResponse>;\n\n/**\n * An pending auth request for a single auth provider. The request will remain in this pending\n * state until either reject() or trigger() is called.\n *\n * @remarks\n *\n * Any new requests for the same provider are merged into the existing pending request, meaning\n * there will only ever be a single pending request for a given provider.\n *\n * @public\n */\nexport type PendingOAuthRequest = {\n  /**\n   * Information about the auth provider, as given in the AuthRequesterOptions\n   */\n  provider: AuthProviderInfo;\n\n  /**\n   * Rejects the request, causing all pending AuthRequester calls to fail with \"RejectedError\".\n   */\n  reject(): void;\n\n  /**\n   * Trigger the auth request to continue the auth flow, by for example showing a popup.\n   *\n   * Synchronously calls onAuthRequest with all scope currently in the request.\n   */\n  trigger(): Promise<void>;\n};\n\n/**\n * Provides helpers for implemented OAuth login flows within Backstage.\n *\n * @public\n */\nexport type OAuthRequestApi = {\n  /**\n   * A utility for showing login popups or similar things, and merging together multiple requests for\n   * different scopes into one request that includes all scopes.\n   *\n   * The passed in options provide information about the login provider, and how to handle auth requests.\n   *\n   * The returned AuthRequester function is used to request login with new scopes. These requests\n   * are merged together and forwarded to the auth handler, as soon as a consumer of auth requests\n   * triggers an auth flow.\n   *\n   * See AuthRequesterOptions, AuthRequester, and handleAuthRequests for more info.\n   */\n  createAuthRequester<OAuthResponse>(\n    options: OAuthRequesterOptions<OAuthResponse>,\n  ): OAuthRequester<OAuthResponse>;\n\n  /**\n   * Observers pending auth requests. The returned observable will emit all\n   * current active auth request, at most one for each created auth requester.\n   *\n   * Each request has its own info about the login provider, forwarded from the auth requester options.\n   *\n   * Depending on user interaction, the request should either be rejected, or used to trigger the auth handler.\n   * If the request is rejected, all pending AuthRequester calls will fail with a \"RejectedError\".\n   * If a auth is triggered, and the auth handler resolves successfully, then all currently pending\n   * AuthRequester calls will resolve to the value returned by the onAuthRequest call.\n   */\n  authRequest$(): Observable<PendingOAuthRequest[]>;\n};\n\n/**\n * The {@link ApiRef} of {@link OAuthRequestApi}.\n *\n * @public\n */\nexport const oauthRequestApiRef: ApiRef<OAuthRequestApi> = createApiRef({\n  id: 'core.oauthrequest',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { JsonValue, Observable } from '@backstage/types';\n\n/**\n * A snapshot in time of the current known value of a storage key.\n *\n * @public\n */\nexport type StorageValueSnapshot<TValue extends JsonValue> =\n  | {\n      key: string;\n      presence: 'unknown' | 'absent';\n      value?: undefined;\n    }\n  | {\n      key: string;\n      presence: 'present';\n      value: TValue;\n    };\n\n/**\n * Provides a key-value persistence API.\n *\n * @public\n */\nexport interface StorageApi {\n  /**\n   * Create a bucket to store data in.\n   *\n   * @param name - Namespace for the storage to be stored under,\n   *               will inherit previous namespaces too\n   */\n  forBucket(name: string): StorageApi;\n\n  /**\n   * Remove persistent data.\n   *\n   * @param key - Unique key associated with the data.\n   */\n  remove(key: string): Promise<void>;\n\n  /**\n   * Save persistent data, and emit messages to anyone that is using\n   * {@link StorageApi.observe$} for this key.\n   *\n   * @param key - Unique key associated with the data.\n   * @param data - The data to be stored under the key.\n   */\n  set<T extends JsonValue>(key: string, data: T): Promise<void>;\n\n  /**\n   * Observe the value over time for a particular key in the current bucket.\n   *\n   * @remarks\n   *\n   * The observable will only emit values when the value changes in the underlying\n   * storage, although multiple values with the same shape may be emitted in a row.\n   *\n   * If a {@link StorageApi.snapshot} of a key is retrieved and the presence is\n   * `'unknown'`, then you are guaranteed to receive a snapshot with a known\n   * presence, as long as you observe the key within the same tick.\n   *\n   * Since the emitted values are shared across all subscribers, it is important\n   * not to mutate the returned values. The values may be frozen as a precaution.\n   *\n   * @param key - Unique key associated with the data\n   */\n  observe$<T extends JsonValue>(\n    key: string,\n  ): Observable<StorageValueSnapshot<T>>;\n\n  /**\n   * Returns an immediate snapshot value for the given key, if possible.\n   *\n   * @remarks\n   *\n   * Combine with {@link StorageApi.observe$} to get notified of value changes.\n   *\n   * Note that this method is synchronous, and some underlying storages may be\n   * unable to retrieve a value using this method - the result may or may not\n   * consistently have a presence of 'unknown'. Use {@link StorageApi.observe$}\n   * to be sure to receive an actual value eventually.\n   */\n  snapshot<T extends JsonValue>(key: string): StorageValueSnapshot<T>;\n}\n\n/**\n * The {@link ApiRef} of {@link StorageApi}.\n *\n * @public\n */\nexport const storageApiRef: ApiRef<StorageApi> = createApiRef({\n  id: 'core.storage',\n});\n"],"names":["SessionState","FeatureFlagState"],"mappings":";;;;AA0BO,SAAS,YAA0B,GAAA;AACxC,EAAM,MAAA,eAAA,GAAkB,oBAAsC,aAAa,CAAA,CAAA;AAC3E,EAAA,IAAI,CAAC,eAAiB,EAAA;AACpB,IAAM,MAAA,IAAI,oBAAoB,8BAA8B,CAAA,CAAA;AAAA,GAC9D;AAEA,EAAM,MAAA,SAAA,GAAY,eAAgB,CAAA,SAAA,CAAU,CAAC,CAAA,CAAA;AAC7C,EAAA,IAAI,CAAC,SAAW,EAAA;AACd,IAAM,MAAA,IAAI,oBAAoB,6BAA6B,CAAA,CAAA;AAAA,GAC7D;AACA,EAAO,OAAA,SAAA,CAAA;AACT,CAAA;AAQO,SAAS,OAAU,MAAsB,EAAA;AAC9C,EAAA,MAAM,YAAY,YAAa,EAAA,CAAA;AAE/B,EAAM,MAAA,GAAA,GAAM,SAAU,CAAA,GAAA,CAAI,MAAM,CAAA,CAAA;AAChC,EAAA,IAAI,CAAC,GAAK,EAAA;AACR,IAAA,MAAM,IAAI,mBAAA,CAAoB,CAAmC,gCAAA,EAAA,MAAM,CAAE,CAAA,CAAA,CAAA;AAAA,GAC3E;AACA,EAAO,OAAA,GAAA,CAAA;AACT,CAAA;AAQO,SAAS,SAAuB,IAAyB,EAAA;AAC9D,EAAO,OAAA,SAAS,gBACd,gBACA,EAAA;AACA,IAAM,MAAA,GAAA,GAAM,CAAC,KAAoD,KAAA;AAC/D,MAAA,MAAM,YAAY,YAAa,EAAA,CAAA;AAE/B,MAAA,MAAM,QAAQ,EAAC,CAAA;AAEf,MAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,QAAI,IAAA,IAAA,CAAK,cAAe,CAAA,GAAG,CAAG,EAAA;AAC5B,UAAM,MAAA,GAAA,GAAM,KAAK,GAAG,CAAA,CAAA;AAEpB,UAAM,MAAA,GAAA,GAAM,SAAU,CAAA,GAAA,CAAI,GAAG,CAAA,CAAA;AAC7B,UAAA,IAAI,CAAC,GAAK,EAAA;AACR,YAAA,MAAM,IAAI,mBAAA;AAAA,cACR,mCAAmC,GAAG,CAAA,CAAA;AAAA,aACxC,CAAA;AAAA,WACF;AACA,UAAA,KAAA,CAAM,GAAG,CAAI,GAAA,GAAA,CAAA;AAAA,SACf;AAAA,OACF;AAEA,MAAA,uBAAQ,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,EAAkB,GAAI,KAAA,EAAmB,GAAG,KAAO,EAAA,CAAA,CAAA;AAAA,KAC7D,CAAA;AACA,IAAA,MAAM,WACJ,GAAA,gBAAA,CAAiB,WAAe,IAAA,gBAAA,CAAiB,IAAQ,IAAA,WAAA,CAAA;AAE3D,IAAI,GAAA,CAAA,WAAA,GAAc,YAAY,WAAW,CAAA,CAAA,CAAA,CAAA;AAEzC,IAAO,OAAA,GAAA,CAAA;AAAA,GACT,CAAA;AACF;;AClEA,MAAM,UAAmC,CAAA;AAAA,EACvC,YAA6B,MAAsB,EAAA;AAAtB,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;AAC3B,IAAA,MAAM,QAAQ,MAAO,CAAA,EAAA,CAClB,MAAM,GAAG,CAAA,CACT,QAAQ,CAAQ,IAAA,KAAA,IAAA,CAAK,KAAM,CAAA,GAAG,CAAC,CAC/B,CAAA,KAAA,CAAM,UAAQ,IAAK,CAAA,KAAA,CAAM,kBAAkB,CAAC,CAAA,CAAA;AAC/C,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,sFAAA,EAAyF,OAAO,EAAE,CAAA,CAAA,CAAA;AAAA,OACpG,CAAA;AAAA,KACF;AAAA,GACF;AAAA,EAEA,IAAI,EAAa,GAAA;AACf,IAAA,OAAO,KAAK,MAAO,CAAA,EAAA,CAAA;AAAA,GACrB;AAAA;AAAA,EAGA,IAAI,CAAO,GAAA;AACT,IAAA,MAAM,IAAI,KAAA,CAAM,CAA6B,0BAAA,EAAA,IAAI,CAAE,CAAA,CAAA,CAAA;AAAA,GACrD;AAAA,EAEA,QAAW,GAAA;AACT,IAAO,OAAA,CAAA,OAAA,EAAU,IAAK,CAAA,MAAA,CAAO,EAAE,CAAA,CAAA,CAAA,CAAA;AAAA,GACjC;AACF,CAAA;AASO,SAAS,aAAgB,MAAiC,EAAA;AAC/D,EAAO,OAAA,IAAI,WAAc,MAAM,CAAA,CAAA;AACjC;;AC2MY,IAAA,YAAA,qBAAAA,aAAL,KAAA;AAIL,EAAAA,cAAA,UAAW,CAAA,GAAA,UAAA,CAAA;AAIX,EAAAA,cAAA,WAAY,CAAA,GAAA,WAAA,CAAA;AARF,EAAAA,OAAAA,aAAAA,CAAAA;AAAA,CAAA,EAAA,YAAA,IAAA,EAAA,EAAA;AA4CL,MAAM,mBAMT,YAAa,CAAA;AAAA,EACf,EAAI,EAAA,kBAAA;AACN,CAAC,EAAA;AAWM,MAAM,mBAET,YAAa,CAAA;AAAA,EACf,EAAI,EAAA,kBAAA;AACN,CAAC,EAAA;AAWM,MAAM,iBAMT,YAAa,CAAA;AAAA,EACf,EAAI,EAAA,gBAAA;AACN,CAAC,EAAA;AAWM,MAAM,mBAMT,YAAa,CAAA;AAAA,EACf,EAAI,EAAA,kBAAA;AACN,CAAC,EAAA;AAYM,MAAM,sBAMT,YAAa,CAAA;AAAA,EACf,EAAI,EAAA,qBAAA;AACN,CAAC,EAAA;AAOM,MAAM,qBAMT,YAAa,CAAA;AAAA,EACf,EAAI,EAAA,oBAAA;AACN,CAAC,EAAA;AAWM,MAAM,sBAET,YAAa,CAAA;AAAA,EACf,EAAI,EAAA,qBAAA;AACN,CAAC,EAAA;AAWM,MAAM,4BAET,YAAa,CAAA;AAAA,EACf,EAAI,EAAA,4BAAA;AACN,CAAC,EAAA;AAWM,MAAM,sBAET,YAAa,CAAA;AAAA,EACf,EAAI,EAAA,qBAAA;AACN,CAAC,EAAA;AAWM,MAAM,wBAMT,YAAa,CAAA;AAAA,EACf,EAAI,EAAA,wBAAA;AACN,CAAC;;ACjaM,MAAM,cAAgC,YAAa,CAAA;AAAA,EACxD,EAAI,EAAA,YAAA;AACN,CAAC;;ACyEM,MAAM,kBAAwC,YAAa,CAAA;AAAA,EAChE,EAAI,EAAA,gBAAA;AACN,CAAC;;AC9CM,MAAM,iBAAsC,YAAa,CAAA;AAAA,EAC9D,EAAI,EAAA,eAAA;AACN,CAAC;;ACvDM,MAAM,eAAkC,YAAa,CAAA;AAAA,EAC1D,EAAI,EAAA,aAAA;AACN,CAAC;;ACmBM,MAAM,kBAAwC,YAAa,CAAA;AAAA,EAChE,EAAI,EAAA,gBAAA;AACN,CAAC;;ACkCM,MAAM,cAAgC,YAAa,CAAA;AAAA,EACxD,EAAI,EAAA,YAAA;AACN,CAAC;;ACxDW,IAAA,gBAAA,qBAAAC,iBAAL,KAAA;AAIL,EAAAA,iBAAAA,CAAAA,iBAAAA,CAAA,UAAO,CAAP,CAAA,GAAA,MAAA,CAAA;AAIA,EAAAA,iBAAAA,CAAAA,iBAAAA,CAAA,YAAS,CAAT,CAAA,GAAA,QAAA,CAAA;AARU,EAAAA,OAAAA,iBAAAA,CAAAA;AAAA,CAAA,EAAA,gBAAA,IAAA,EAAA,EAAA;AAyEL,MAAM,qBAA8C,YAAa,CAAA;AAAA,EACtE,EAAI,EAAA,mBAAA;AACN,CAAC;;AC7DM,MAAM,cAAgC,YAAa,CAAA;AAAA,EACxD,EAAI,EAAA,YAAA;AACN,CAAC;;ACGM,MAAM,iBAAsC,YAAa,CAAA;AAAA,EAC9D,EAAI,EAAA,eAAA;AACN,CAAC;;ACyEM,MAAM,qBAA8C,YAAa,CAAA;AAAA,EACtE,EAAI,EAAA,mBAAA;AACN,CAAC;;ACvBM,MAAM,gBAAoC,YAAa,CAAA;AAAA,EAC5D,EAAI,EAAA,cAAA;AACN,CAAC;;;;"}