/// <reference types="react" />
import * as React from 'react';
import React__default, { ComponentType, PropsWithChildren } from 'react';
import { Entity } from '@backstage/catalog-model';
import { TemplateEntityV1beta3 } from '@backstage/plugin-scaffolder-common';
import * as _backstage_plugin_scaffolder_react from '@backstage/plugin-scaffolder-react';
import { ReviewStepProps, ScaffolderTaskOutput, TemplateGroupFilter, FormProps } from '@backstage/plugin-scaffolder-react';
import { TemplateListPageProps, TemplateWizardPageProps } from '@backstage/plugin-scaffolder/alpha';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';

/**
 * The props for the entrypoint `ScaffolderPage` component the plugin.
 * @alpha
 */
type LegacyRouterProps = {
    components?: {
        ReviewStepComponent?: ComponentType<ReviewStepProps>;
        TemplateCardComponent?: ComponentType<{
            template: TemplateEntityV1beta3;
        }> | undefined;
        TaskPageComponent?: ComponentType<PropsWithChildren<{}>>;
    };
    groups?: Array<{
        title?: React__default.ReactNode;
        filter: (entity: Entity) => boolean;
    }>;
    templateFilter?: (entity: TemplateEntityV1beta3) => boolean;
    defaultPreviewTemplate?: string;
    headerOptions?: {
        pageTitleOverride?: string;
        title?: string;
        subtitle?: string;
    };
    /**
     * Options for the context menu on the scaffolder page.
     */
    contextMenu?: {
        /** Whether to show a link to the template editor */
        editor?: boolean;
        /** Whether to show a link to the actions documentation */
        actions?: boolean;
    };
};
/**
 * The legacy router
 *
 * @alpha
 */
declare const LegacyRouter: (props: LegacyRouterProps) => React__default.JSX.Element;

/**
 * The Props for the Scaffolder Router
 *
 * @public
 */
type RouterProps = {
    components?: {
        ReviewStepComponent?: React__default.ComponentType<ReviewStepProps>;
        TemplateCardComponent?: React__default.ComponentType<{
            template: TemplateEntityV1beta3;
        }>;
        TaskPageComponent?: React__default.ComponentType<PropsWithChildren<{}>>;
        EXPERIMENTAL_TemplateOutputsComponent?: React__default.ComponentType<{
            output?: ScaffolderTaskOutput;
        }>;
        EXPERIMENTAL_TemplateListPageComponent?: React__default.ComponentType<TemplateListPageProps>;
        EXPERIMENTAL_TemplateWizardPageComponent?: React__default.ComponentType<TemplateWizardPageProps>;
    };
    groups?: TemplateGroupFilter[];
    templateFilter?: (entity: TemplateEntityV1beta3) => boolean;
    headerOptions?: {
        pageTitleOverride?: string;
        title?: string;
        subtitle?: string;
    };
    defaultPreviewTemplate?: string;
    formProps?: FormProps;
    contextMenu?: {
        /** Whether to show a link to the template editor */
        editor?: boolean;
        /** Whether to show a link to the actions documentation */
        actions?: boolean;
        /** Whether to show a link to the tasks page */
        tasks?: boolean;
    };
};

/**
 * The main plugin export for the scaffolder.
 * @public
 */
declare const scaffolderPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    root: _backstage_core_plugin_api.RouteRef<undefined>;
    selectedTemplate: _backstage_core_plugin_api.SubRouteRef<_backstage_core_plugin_api.PathParams<"/templates/:namespace/:templateName">>;
    ongoingTask: _backstage_core_plugin_api.SubRouteRef<_backstage_core_plugin_api.PathParams<"/tasks/:taskId">>;
    actions: _backstage_core_plugin_api.SubRouteRef<undefined>;
    listTasks: _backstage_core_plugin_api.SubRouteRef<undefined>;
    edit: _backstage_core_plugin_api.SubRouteRef<undefined>;
}, {
    registerComponent: _backstage_core_plugin_api.ExternalRouteRef<undefined, true>;
    viewTechDoc: _backstage_core_plugin_api.ExternalRouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }, true>;
}>;
/**
 * A field extension for selecting an Entity that exists in the Catalog.
 *
 * @public
 */
declare const EntityPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    allowedKinds?: string[] | undefined;
    defaultKind?: string | undefined;
    allowArbitraryValues?: boolean | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
}>;
/**
 * The field extension for selecting a name for a new Entity in the Catalog.
 *
 * @public
 */
declare const EntityNamePickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {}>;
/**
 * The field extension which provides the ability to select a RepositoryUrl.
 * Currently, this is an encoded URL that looks something like the following `github.com?repo=myRepoName&owner=backstage`.
 *
 * @public
 */
declare const RepoUrlPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    allowedHosts?: string[] | undefined;
    allowedOrganizations?: string[] | undefined;
    allowedOwners?: string[] | undefined;
    allowedProjects?: string[] | undefined;
    allowedRepos?: string[] | undefined;
    requestUserCredentials?: {
        secretsKey: string;
        additionalScopes?: {
            gitea?: string[] | undefined;
            gerrit?: string[] | undefined;
            github?: string[] | undefined;
            gitlab?: string[] | undefined;
            bitbucket?: string[] | undefined;
            azure?: string[] | undefined;
        } | undefined;
    } | undefined;
}>;
/**
 * A field extension for picking users and groups out of the Catalog.
 *
 * @public
 */
declare const OwnerPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
}>;
/**
 * A field extension for picking groups a user belongs to out of the catalog.
 *
 * @public
 */
declare const MyGroupsPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    title?: string | undefined;
    description?: string | undefined;
}>;
/**
 * The Router and main entrypoint to the Scaffolder plugin.
 *
 * @public
 */
declare const ScaffolderPage: (props: React.PropsWithChildren<RouterProps>) => React.JSX.Element;
/**
 * A field extension to show all the Entities that are owned by the current logged-in User for use in templates.
 *
 * @public
 */
declare const OwnedEntityPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    allowedKinds?: string[] | undefined;
    defaultKind?: string | undefined;
    allowArbitraryValues?: boolean | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
}>;
/**
 * EntityTagsPickerFieldExtension
 * @public
 */
declare const EntityTagsPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string[], {
    kinds?: string[] | undefined;
    showCounts?: boolean | undefined;
    helperText?: string | undefined;
}>;
/**
 * @alpha
 * The Router and main entrypoint to the Alpha Scaffolder plugin.
 */
declare const LegacyScaffolderPage: (props: LegacyRouterProps) => React.JSX.Element;

export { EntityPickerFieldExtension as E, LegacyRouter as L, MyGroupsPickerFieldExtension as M, OwnerPickerFieldExtension as O, RepoUrlPickerFieldExtension as R, ScaffolderPage as S, EntityNamePickerFieldExtension as a, EntityTagsPickerFieldExtension as b, OwnedEntityPickerFieldExtension as c, RouterProps as d, LegacyRouterProps as e, LegacyScaffolderPage as f, scaffolderPlugin as s };
