/// <reference types="react" />
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { DiscoveryApi, FetchApi, IdentityApi, ApiHolder } from '@backstage/core-plugin-api';
import { ScmIntegrationRegistry } from '@backstage/integration';
import { Observable } from '@backstage/types';
import * as _backstage_plugin_scaffolder_react from '@backstage/plugin-scaffolder-react';
import { ScaffolderApi as ScaffolderApi$1, ScaffolderTask as ScaffolderTask$1, ScaffolderGetIntegrationsListOptions as ScaffolderGetIntegrationsListOptions$1, ScaffolderGetIntegrationsListResponse as ScaffolderGetIntegrationsListResponse$1, TemplateParameterSchema as TemplateParameterSchema$1, ScaffolderScaffoldOptions as ScaffolderScaffoldOptions$1, ScaffolderScaffoldResponse as ScaffolderScaffoldResponse$1, ScaffolderStreamLogsOptions as ScaffolderStreamLogsOptions$1, LogEvent as LogEvent$1, ScaffolderDryRunOptions as ScaffolderDryRunOptions$1, ScaffolderDryRunResponse as ScaffolderDryRunResponse$1, ListActionsResponse as ListActionsResponse$1, CustomFieldExtensionSchema as CustomFieldExtensionSchema$1, FieldExtensionComponentProps as FieldExtensionComponentProps$1, ScaffolderTaskOutput as ScaffolderTaskOutput$1, createScaffolderFieldExtension as createScaffolderFieldExtension$1, ScaffolderUseTemplateSecrets as ScaffolderUseTemplateSecrets$1, CustomFieldValidator as CustomFieldValidator$1, FieldExtensionOptions as FieldExtensionOptions$1, FieldExtensionComponent as FieldExtensionComponent$1, ScaffolderOutputLink, ScaffolderTaskStatus as ScaffolderTaskStatus$1, createScaffolderLayout as createScaffolderLayout$1, LayoutTemplate as LayoutTemplate$1, LayoutOptions as LayoutOptions$1 } from '@backstage/plugin-scaffolder-react';
export { ReviewStepProps } from '@backstage/plugin-scaffolder-react';
export { a as EntityNamePickerFieldExtension, E as EntityPickerFieldExtension, b as EntityTagsPickerFieldExtension, M as MyGroupsPickerFieldExtension, c as OwnedEntityPickerFieldExtension, O as OwnerPickerFieldExtension, R as RepoUrlPickerFieldExtension, d as RouterProps, S as ScaffolderPage, s as scaffolderPlugin } from './types/plugin.d-c637df46.js';
import { z } from 'zod';
import { FieldValidation } from '@rjsf/utils';
import * as React from 'react';
import React__default from 'react';
import '@backstage/catalog-model';
import '@backstage/plugin-scaffolder-common';
import '@backstage/plugin-scaffolder/alpha';

/**
 * An API to interact with the scaffolder backend.
 *
 * @public
 */
declare class ScaffolderClient implements ScaffolderApi$1 {
    private readonly discoveryApi;
    private readonly scmIntegrationsApi;
    private readonly fetchApi;
    private readonly identityApi?;
    private readonly useLongPollingLogs;
    constructor(options: {
        discoveryApi: DiscoveryApi;
        fetchApi: FetchApi;
        identityApi?: IdentityApi;
        scmIntegrationsApi: ScmIntegrationRegistry;
        useLongPollingLogs?: boolean;
    });
    listTasks(options: {
        filterByOwnership: 'owned' | 'all';
    }): Promise<{
        tasks: ScaffolderTask$1[];
    }>;
    getIntegrationsList(options: ScaffolderGetIntegrationsListOptions$1): Promise<ScaffolderGetIntegrationsListResponse$1>;
    getTemplateParameterSchema(templateRef: string): Promise<TemplateParameterSchema$1>;
    scaffold(options: ScaffolderScaffoldOptions$1): Promise<ScaffolderScaffoldResponse$1>;
    getTask(taskId: string): Promise<ScaffolderTask$1>;
    streamLogs(options: ScaffolderStreamLogsOptions$1): Observable<LogEvent$1>;
    dryRun(options: ScaffolderDryRunOptions$1): Promise<ScaffolderDryRunResponse$1>;
    private streamLogsEventStream;
    private streamLogsPolling;
    listActions(): Promise<ListActionsResponse$1>;
    cancelTask(taskId: string): Promise<void>;
}

/**
 * @public
 * FieldSchema encapsulates a JSONSchema7 along with the
 * matching FieldExtensionComponentProps type for a field extension.
 */
interface FieldSchema<TReturn, TUiOptions> {
    readonly schema: CustomFieldExtensionSchema$1;
    readonly type: FieldExtensionComponentProps$1<TReturn, TUiOptions>;
    readonly uiOptionsType: TUiOptions;
}
/**
 * @public
 * Utility function to convert zod return and UI options schemas to a
 * CustomFieldExtensionSchema with FieldExtensionComponentProps type inference
 */
declare function makeFieldSchemaFromZod<TReturnSchema extends z.ZodType, TUiOptionsSchema extends z.ZodType = z.ZodType<any, any, {}>>(returnSchema: TReturnSchema, uiOptionsSchema?: TUiOptionsSchema): FieldSchema<TReturnSchema extends z.ZodType<any, any, infer IReturn> ? IReturn : never, TUiOptionsSchema extends z.ZodType<any, any, infer IUiOptions> ? IUiOptions : never>;

/**
 * @public
 */
declare const EntityPickerFieldSchema: FieldSchema<string, {
    allowedKinds?: string[] | undefined;
    defaultKind?: string | undefined;
    allowArbitraryValues?: boolean | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `EntityPicker` field extension.
 *
 * @public
 */
type EntityPickerUiOptions = typeof EntityPickerFieldSchema.uiOptionsType;

/**
 * @public
 */
declare const OwnerPickerFieldSchema: FieldSchema<string, {
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `OwnerPicker` field extension.
 *
 * @public
 */
type OwnerPickerUiOptions = typeof OwnerPickerFieldSchema.uiOptionsType;

/**
 * @public
 */
declare const RepoUrlPickerFieldSchema: FieldSchema<string, {
    allowedHosts?: string[] | undefined;
    allowedOrganizations?: string[] | undefined;
    allowedOwners?: string[] | undefined;
    allowedProjects?: string[] | undefined;
    allowedRepos?: string[] | undefined;
    requestUserCredentials?: {
        secretsKey: string;
        additionalScopes?: {
            gitea?: string[] | undefined;
            gerrit?: string[] | undefined;
            github?: string[] | undefined;
            gitlab?: string[] | undefined;
            bitbucket?: string[] | undefined;
            azure?: string[] | undefined;
        } | undefined;
    } | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `RepoUrlPicker` field extension.
 *
 * @public
 */
type RepoUrlPickerUiOptions = typeof RepoUrlPickerFieldSchema.uiOptionsType;

/**
 * The validation function for the `repoUrl` that is returned from the
 * field extension. Ensures that you have all the required fields filled for
 * the different providers that exist.
 *
 * @public
 */
declare const repoPickerValidation: (value: string, validation: FieldValidation, context: {
    apiHolder: ApiHolder;
}) => void;

/**
 * @public
 */
declare const OwnedEntityPickerFieldSchema: FieldSchema<string, {
    allowedKinds?: string[] | undefined;
    defaultKind?: string | undefined;
    allowArbitraryValues?: boolean | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `OwnedEntityPicker` field extension.
 *
 * @public
 */
type OwnedEntityPickerUiOptions = typeof OwnedEntityPickerFieldSchema.uiOptionsType;

/**
 * @public
 */
declare const EntityTagsPickerFieldSchema: FieldSchema<string[], {
    kinds?: string[] | undefined;
    showCounts?: boolean | undefined;
    helperText?: string | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `EntityTagsPicker` field extension.
 *
 * @public
 */
type EntityTagsPickerUiOptions = typeof EntityTagsPickerFieldSchema.uiOptionsType;

/**
 * Field schema for the MyGroupsPicker.
 * @public
 */
declare const MyGroupsPickerFieldSchema: FieldSchema<string, {
    title?: string | undefined;
    description?: string | undefined;
}>;
/**
 * UI options for the MyGroupsPicker.
 * @public
 */
type MyGroupsPickerUiOptions = typeof MyGroupsPickerFieldSchema.uiOptionsType;
/**
 * Schema for the MyGroupsPicker.
 * @public
 */
declare const MyGroupsPickerSchema: _backstage_plugin_scaffolder_react.CustomFieldExtensionSchema;

/**
 * The component to select the `type` of `Template` that you will see in the table.
 *
 * @public
 */
declare const TemplateTypePicker: () => React__default.JSX.Element | null;

/**
 * @public
 */
declare const OngoingTask: (props: {
    TemplateOutputsComponent?: React__default.ComponentType<{
        output?: ScaffolderTaskOutput$1;
    }>;
}) => React__default.JSX.Element;

/**
 * TaskPageProps for constructing a TaskPage
 * @param loadingText - Optional loading text shown before a task begins executing.
 * @public
 * @deprecated - this is a useless type that is no longer used.
 */
type TaskPageProps = {
    loadingText?: string;
};

/**
 * @public
 * @deprecated use import from `{@link @backstage/plugin-scaffolder#scaffolderPlugin}.routes.root` instead.
 */
declare const rootRouteRef: _backstage_core_plugin_api.RouteRef<undefined>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#createScaffolderFieldExtension} instead as this has now been moved.
 */
declare const createScaffolderFieldExtension: typeof createScaffolderFieldExtension$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderFieldExtensions} instead as this has now been moved.
 */
declare const ScaffolderFieldExtensions: React.ComponentType<{
    children?: React.ReactNode;
}>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#useTemplateSecrets} instead as this has now been moved.
 */
declare const useTemplateSecrets: () => ScaffolderUseTemplateSecrets$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#scaffolderApiRef} instead as this has now been moved.
 */
declare const scaffolderApiRef: _backstage_core_plugin_api.ApiRef<ScaffolderApi$1>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderApi} instead as this has now been moved.
 */
type ScaffolderApi = ScaffolderApi$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderUseTemplateSecrets} instead as this has now been moved.
 */
type ScaffolderUseTemplateSecrets = ScaffolderUseTemplateSecrets$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#TemplateParameterSchema} instead as this has now been moved.
 */
type TemplateParameterSchema = TemplateParameterSchema$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#CustomFieldExtensionSchema} instead as this has now been moved.
 */
type CustomFieldExtensionSchema = CustomFieldExtensionSchema$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#CustomFieldValidator} instead as this has now been moved.
 */
type CustomFieldValidator<TReturnFieldData> = CustomFieldValidator$1<TReturnFieldData>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionOptions} instead as this has now been moved.
 */
type FieldExtensionOptions = FieldExtensionOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionComponentProps} instead as this has now been moved.
 */
type FieldExtensionComponentProps<TFieldReturnValue, TUiOptions extends {} = {}> = FieldExtensionComponentProps$1<TFieldReturnValue, TUiOptions>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionComponent} instead as this has now been moved.
 */
type FieldExtensionComponent<_TReturnValue, _TInputProps> = FieldExtensionComponent$1<_TReturnValue, _TInputProps>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ListActionsResponse} instead as this has now been moved.
 */
type ListActionsResponse = ListActionsResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LogEvent} instead as this has now been moved.
 */
type LogEvent = LogEvent$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderDryRunOptions} instead as this has now been moved.
 */
type ScaffolderDryRunOptions = ScaffolderDryRunOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderDryRunResponse} instead as this has now been moved.
 */
type ScaffolderDryRunResponse = ScaffolderDryRunResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderGetIntegrationsListOptions} instead as this has now been moved.
 */
type ScaffolderGetIntegrationsListOptions = ScaffolderGetIntegrationsListOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderGetIntegrationsListResponse} instead as this has now been moved.
 */
type ScaffolderGetIntegrationsListResponse = ScaffolderGetIntegrationsListResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderOutputlink} instead as this has now been moved.
 */
type ScaffolderOutputlink = ScaffolderOutputLink;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderScaffoldOptions} instead as this has now been moved.
 */
type ScaffolderScaffoldOptions = ScaffolderScaffoldOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderScaffoldResponse} instead as this has now been moved.
 */
type ScaffolderScaffoldResponse = ScaffolderScaffoldResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderStreamLogsOptions} instead as this has now been moved.
 */
type ScaffolderStreamLogsOptions = ScaffolderStreamLogsOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderTask} instead as this has now been moved.
 */
type ScaffolderTask = ScaffolderTask$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderTaskOutput} instead as this has now been moved.
 */
type ScaffolderTaskOutput = ScaffolderTaskOutput$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderTaskStatus} instead as this has now been moved.
 */
type ScaffolderTaskStatus = ScaffolderTaskStatus$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#createScaffolderLayout} instead as this has now been moved.
 */
declare const createScaffolderLayout: typeof createScaffolderLayout$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderLayouts} instead as this has now been moved.
 */
declare const ScaffolderLayouts: React.ComponentType<{
    children?: React.ReactNode;
}>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LayoutTemplate} instead as this has now been moved.
 */
type LayoutTemplate = LayoutTemplate$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LayoutOptions} instead as this has now been moved.
 */
type LayoutOptions = LayoutOptions$1;

export { CustomFieldExtensionSchema, CustomFieldValidator, EntityPickerFieldSchema, EntityPickerUiOptions, EntityTagsPickerFieldSchema, EntityTagsPickerUiOptions, FieldExtensionComponent, FieldExtensionComponentProps, FieldExtensionOptions, FieldSchema, LayoutOptions, LayoutTemplate, ListActionsResponse, LogEvent, MyGroupsPickerFieldSchema, MyGroupsPickerSchema, MyGroupsPickerUiOptions, OwnedEntityPickerFieldSchema, OwnedEntityPickerUiOptions, OwnerPickerFieldSchema, OwnerPickerUiOptions, RepoUrlPickerFieldSchema, RepoUrlPickerUiOptions, ScaffolderApi, ScaffolderClient, ScaffolderDryRunOptions, ScaffolderDryRunResponse, ScaffolderFieldExtensions, ScaffolderGetIntegrationsListOptions, ScaffolderGetIntegrationsListResponse, ScaffolderLayouts, ScaffolderOutputlink, ScaffolderScaffoldOptions, ScaffolderScaffoldResponse, ScaffolderStreamLogsOptions, ScaffolderTask, ScaffolderTaskOutput, ScaffolderTaskStatus, ScaffolderUseTemplateSecrets, OngoingTask as TaskPage, TaskPageProps, TemplateParameterSchema, TemplateTypePicker, createScaffolderFieldExtension, createScaffolderLayout, makeFieldSchemaFromZod, repoPickerValidation, rootRouteRef, scaffolderApiRef, useTemplateSecrets };
