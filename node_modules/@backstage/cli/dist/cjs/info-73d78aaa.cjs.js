'use strict';

var index = require('./index-f60e95c6.cjs.js');
var os = require('os');
var run = require('./run-92501f36.cjs.js');
var Lockfile = require('./Lockfile-eced6070.cjs.js');
require('minimatch');
require('@manypkg/get-packages');
require('chalk');
require('./yarn-6cd89e16.cjs.js');
var fs = require('fs-extra');
require('commander');
require('semver');
require('@backstage/cli-common');
require('@backstage/errors');
require('child_process');
require('util');
require('@yarnpkg/parsers');
require('@yarnpkg/lockfile');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);

var info = async () => {
  await new Promise(async () => {
    var _a;
    const yarnVersion = await run.runPlain("yarn --version");
    const isLocal = fs__default["default"].existsSync(index.paths.resolveOwn("./src"));
    const backstageFile = index.paths.resolveTargetRoot("backstage.json");
    let backstageVersion = "N/A";
    if (fs__default["default"].existsSync(backstageFile)) {
      try {
        const backstageJson = await fs__default["default"].readJSON(backstageFile);
        backstageVersion = (_a = backstageJson.version) != null ? _a : "N/A";
      } catch (error) {
        console.warn('The "backstage.json" file is not in the expected format');
        console.log();
      }
    }
    console.log(`OS:   ${os__default["default"].type} ${os__default["default"].release} - ${os__default["default"].platform}/${os__default["default"].arch}`);
    console.log(`node: ${process.version}`);
    console.log(`yarn: ${yarnVersion}`);
    console.log(`cli:  ${index.version$1} (${isLocal ? "local" : "installed"})`);
    console.log(`backstage:  ${backstageVersion}`);
    console.log();
    console.log("Dependencies:");
    const lockfilePath = index.paths.resolveTargetRoot("yarn.lock");
    const lockfile = await Lockfile.Lockfile.load(lockfilePath);
    const deps = [...lockfile.keys()].filter((n) => n.startsWith("@backstage/"));
    const maxLength = Math.max(...deps.map((d) => d.length));
    for (const dep of deps) {
      const versions = new Set(lockfile.get(dep).map((i) => i.version));
      console.log(`  ${dep.padEnd(maxLength)} ${[...versions].join(", ")}`);
    }
  });
};

exports["default"] = info;
//# sourceMappingURL=info-73d78aaa.cjs.js.map
