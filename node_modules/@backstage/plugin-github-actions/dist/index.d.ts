/// <reference types="react" />
import * as _backstage_core_components from '@backstage/core-components';
import { InfoCardVariants } from '@backstage/core-components';
import * as react from 'react';
import react__default from 'react';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { ConfigApi } from '@backstage/core-plugin-api';
import { RestEndpointMethodTypes } from '@octokit/rest';
import { ScmAuthApi } from '@backstage/integration-react';
import { Entity } from '@backstage/catalog-model';

/** @public */
declare const githubActionsApiRef: _backstage_core_plugin_api.ApiRef<GithubActionsApi>;
/**
 * A client for fetching information about GitHub actions.
 *
 * @public
 */
type GithubActionsApi = {
    listWorkflowRuns: (options: {
        hostname?: string;
        owner: string;
        repo: string;
        pageSize?: number;
        page?: number;
        branch?: string;
    }) => Promise<RestEndpointMethodTypes['actions']['listWorkflowRuns']['response']['data']>;
    getWorkflow: (options: {
        hostname?: string;
        owner: string;
        repo: string;
        id: number;
    }) => Promise<RestEndpointMethodTypes['actions']['getWorkflow']['response']['data']>;
    getWorkflowRun: (options: {
        hostname?: string;
        owner: string;
        repo: string;
        id: number;
    }) => Promise<RestEndpointMethodTypes['actions']['getWorkflowRun']['response']['data']>;
    reRunWorkflow: (options: {
        hostname?: string;
        owner: string;
        repo: string;
        runId: number;
    }) => Promise<any>;
    listJobsForWorkflowRun: (options: {
        hostname?: string;
        owner: string;
        repo: string;
        id: number;
        pageSize?: number;
        page?: number;
    }) => Promise<RestEndpointMethodTypes['actions']['listJobsForWorkflowRun']['response']['data']>;
    downloadJobLogsForWorkflowRun: (options: {
        hostname?: string;
        owner: string;
        repo: string;
        runId: number;
    }) => Promise<RestEndpointMethodTypes['actions']['downloadJobLogsForWorkflowRun']['response']['data']>;
    listBranches: (options: {
        hostname?: string;
        owner: string;
        repo: string;
        page: number;
    }) => Promise<RestEndpointMethodTypes['repos']['listBranches']['response']['data']>;
    getDefaultBranch: (options: {
        hostname?: string;
        owner: string;
        repo: string;
    }) => Promise<RestEndpointMethodTypes['repos']['get']['response']['data']['default_branch']>;
};

/**
 * A client for fetching information about GitHub actions.
 *
 * @public
 */
declare class GithubActionsClient implements GithubActionsApi {
    private readonly configApi;
    private readonly scmAuthApi;
    constructor(options: {
        configApi: ConfigApi;
        scmAuthApi: ScmAuthApi;
    });
    private getOctokit;
    reRunWorkflow(options: {
        hostname?: string;
        owner: string;
        repo: string;
        runId: number;
    }): Promise<any>;
    listWorkflowRuns(options: {
        hostname?: string;
        owner: string;
        repo: string;
        pageSize?: number;
        page?: number;
        branch?: string;
    }): Promise<RestEndpointMethodTypes['actions']['listWorkflowRuns']['response']['data']>;
    getWorkflow(options: {
        hostname?: string;
        owner: string;
        repo: string;
        id: number;
    }): Promise<RestEndpointMethodTypes['actions']['getWorkflow']['response']['data']>;
    getWorkflowRun(options: {
        hostname?: string;
        owner: string;
        repo: string;
        id: number;
    }): Promise<RestEndpointMethodTypes['actions']['getWorkflowRun']['response']['data']>;
    listJobsForWorkflowRun(options: {
        hostname?: string;
        owner: string;
        repo: string;
        id: number;
        pageSize?: number;
        page?: number;
    }): Promise<RestEndpointMethodTypes['actions']['listJobsForWorkflowRun']['response']['data']>;
    downloadJobLogsForWorkflowRun(options: {
        hostname?: string;
        owner: string;
        repo: string;
        runId: number;
    }): Promise<RestEndpointMethodTypes['actions']['downloadJobLogsForWorkflowRun']['response']['data']>;
    listBranches(options: {
        hostname?: string;
        owner: string;
        repo: string;
        page?: number;
    }): Promise<RestEndpointMethodTypes['repos']['listBranches']['response']['data']>;
    getDefaultBranch(options: {
        hostname?: string;
        owner: string;
        repo: string;
    }): Promise<RestEndpointMethodTypes['repos']['get']['response']['data']['default_branch']>;
}

/** @public */
type Step = {
    name: string;
    status: string;
    conclusion?: string;
    number: number;
    started_at?: string;
    completed_at?: string;
};
/** @public */
type Job = {
    html_url?: string;
    status: string;
    conclusion?: string;
    started_at: string;
    completed_at?: string;
    id: number;
    name: string;
    steps?: Step[];
};
/** @public */
type Jobs = {
    total_count: number;
    jobs: Job[];
};
/** @public */
declare enum BuildStatus {
    'success' = 0,
    'failure' = 1,
    'pending' = 2,
    'running' = 3
}
/** @public */
type Branch = {
    name: string;
};
/** @public */
type Branches = {
    default_branch: string;
    branches: Branch[];
};
/** @public */
interface RouterProps {
    view?: 'cards' | 'table';
}

/** @public */
declare const githubActionsPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    entityContent: _backstage_core_plugin_api.RouteRef<undefined>;
}, {}>;
/** @public */
declare const EntityGithubActionsContent: (props: RouterProps) => react.JSX.Element;
/** @public */
declare const EntityLatestGithubActionRunCard: (props: {
    branch: string;
    variant?: _backstage_core_components.InfoCardVariants | undefined;
}) => react.JSX.Element;
/** @public */
declare const EntityLatestGithubActionsForBranchCard: (props: {
    branch: string;
    variant?: _backstage_core_components.InfoCardVariants | undefined;
}) => react.JSX.Element;
/** @public */
declare const EntityRecentGithubActionsRunsCard: (props: {
    branch?: string | undefined;
    dense?: boolean | undefined;
    limit?: number | undefined;
    variant?: _backstage_core_components.InfoCardVariants | undefined;
}) => react.JSX.Element;

/** @public */
declare const isGithubActionsAvailable: (entity: Entity) => boolean;
/** @public */
declare const Router: (props: RouterProps) => react__default.JSX.Element;

/** @public */
declare const LatestWorkflowRunCard: (props: {
    branch: string;
    variant?: InfoCardVariants;
}) => react__default.JSX.Element;
/** @public */
declare const LatestWorkflowsForBranchCard: (props: {
    branch: string;
    variant?: InfoCardVariants;
}) => react__default.JSX.Element;

/** @public */
declare const RecentWorkflowRunsCard: (props: {
    branch?: string;
    dense?: boolean;
    limit?: number;
    variant?: InfoCardVariants;
}) => react__default.JSX.Element;

/** @public */
declare const GITHUB_ACTIONS_ANNOTATION = "github.com/project-slug";

export { Branch, Branches, BuildStatus, EntityGithubActionsContent, EntityLatestGithubActionRunCard, EntityLatestGithubActionsForBranchCard, EntityRecentGithubActionsRunsCard, GITHUB_ACTIONS_ANNOTATION, GithubActionsApi, GithubActionsClient, Job, Jobs, LatestWorkflowRunCard, LatestWorkflowsForBranchCard, RecentWorkflowRunsCard, Router, RouterProps, Step, githubActionsApiRef, githubActionsPlugin, isGithubActionsAvailable, isGithubActionsAvailable as isPluginApplicableToEntity, githubActionsPlugin as plugin };
