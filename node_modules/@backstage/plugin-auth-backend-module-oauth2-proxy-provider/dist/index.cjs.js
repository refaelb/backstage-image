'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var errors = require('@backstage/errors');
var jose = require('jose');

const OAUTH2_PROXY_JWT_HEADER = "X-OAUTH2-PROXY-ID-TOKEN";
const oauth2ProxyAuthenticator = pluginAuthNode.createProxyAuthenticator({
  defaultProfileTransform: async (result) => {
    return {
      profile: {
        email: result.getHeader("x-forwarded-email"),
        displayName: result.getHeader("x-forwarded-preferred-username") || result.getHeader("x-forwarded-user")
      }
    };
  },
  async initialize() {
  },
  async authenticate({ req }) {
    try {
      const authHeader = req.header(OAUTH2_PROXY_JWT_HEADER);
      const jwt = pluginAuthNode.getBearerTokenFromAuthorizationHeader(authHeader);
      const decodedJWT = jwt && jose.decodeJwt(jwt);
      const result = {
        fullProfile: decodedJWT || {},
        accessToken: jwt || "",
        headers: req.headers,
        getHeader(name) {
          if (name.toLocaleLowerCase("en-US") === "set-cookie") {
            throw new Error("Access Set-Cookie via the headers object instead");
          }
          return req.get(name);
        }
      };
      return { result };
    } catch (e) {
      throw new errors.AuthenticationError("Authentication failed", e);
    }
  }
});

var oauth2ProxySignInResolvers;
((oauth2ProxySignInResolvers2) => {
  oauth2ProxySignInResolvers2.forwardedUserMatchingUserEntityName = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const name = info.result.getHeader("x-forwarded-user");
        if (!name) {
          throw new Error("Request did not contain a user");
        }
        return ctx.signInWithCatalogUser({
          entityRef: { name }
        });
      };
    }
  });
})(oauth2ProxySignInResolvers || (oauth2ProxySignInResolvers = {}));

const authModuleOauth2ProxyProvider = backendPluginApi.createBackendModule({
  pluginId: "auth",
  moduleId: "oauth2-proxy-provider",
  register(reg) {
    reg.registerInit({
      deps: {
        providers: pluginAuthNode.authProvidersExtensionPoint
      },
      async init({ providers }) {
        providers.registerProvider({
          providerId: "oauth2Proxy",
          factory: pluginAuthNode.createProxyAuthProviderFactory({
            authenticator: oauth2ProxyAuthenticator,
            signInResolverFactories: {
              ...pluginAuthNode.commonSignInResolvers,
              ...oauth2ProxySignInResolvers
            }
          })
        });
      }
    });
  }
});

exports.OAUTH2_PROXY_JWT_HEADER = OAUTH2_PROXY_JWT_HEADER;
exports["default"] = authModuleOauth2ProxyProvider;
exports.oauth2ProxyAuthenticator = oauth2ProxyAuthenticator;
//# sourceMappingURL=index.cjs.js.map
