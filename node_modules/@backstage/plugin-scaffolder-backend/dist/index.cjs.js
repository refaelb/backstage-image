'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var router = require('./cjs/router-e667d04e.cjs.js');
var github = require('@backstage/plugin-scaffolder-backend-module-github');
var gitlab = require('@backstage/plugin-scaffolder-backend-module-gitlab');
var azure = require('@backstage/plugin-scaffolder-backend-module-azure');
var bitbucket = require('@backstage/plugin-scaffolder-backend-module-bitbucket');
var gerrit = require('@backstage/plugin-scaffolder-backend-module-gerrit');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var pluginCatalogBackendModuleScaffolderEntityModel = require('@backstage/plugin-catalog-backend-module-scaffolder-entity-model');
require('@backstage/catalog-model');
require('@backstage/config');
require('@backstage/errors');
require('@backstage/integration');
require('@backstage/plugin-scaffolder-common');
require('@backstage/plugin-scaffolder-common/alpha');
require('express');
require('express-promise-router');
require('jsonschema');
require('zod');
require('yaml');
require('fs-extra');
require('@backstage/backend-common');
require('path');
require('luxon');
require('globby');
require('isbinaryfile');
require('isolated-vm');
require('lodash/get');
require('uuid');
require('zen-observable');
require('p-queue');
require('winston');
require('nunjucks');
require('stream');
require('lodash');
require('@backstage/plugin-permission-node');
require('prom-client');
require('@backstage/plugin-permission-common');
require('url');
require('os');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var github__namespace = /*#__PURE__*/_interopNamespace(github);
var gitlab__namespace = /*#__PURE__*/_interopNamespace(gitlab);
var azure__namespace = /*#__PURE__*/_interopNamespace(azure);
var bitbucket__namespace = /*#__PURE__*/_interopNamespace(bitbucket);
var gerrit__namespace = /*#__PURE__*/_interopNamespace(gerrit);

const createGithubActionsDispatchAction = github__namespace.createGithubActionsDispatchAction;
const createGithubDeployKeyAction = github__namespace.createGithubDeployKeyAction;
const createGithubEnvironmentAction = github__namespace.createGithubEnvironmentAction;
const createGithubIssuesLabelAction = github__namespace.createGithubIssuesLabelAction;
const createGithubRepoCreateAction = github__namespace.createGithubRepoCreateAction;
const createGithubRepoPushAction = github__namespace.createGithubRepoPushAction;
const createGithubWebhookAction = github__namespace.createGithubWebhookAction;
const createPublishGithubAction = github__namespace.createPublishGithubAction;
const createPublishGithubPullRequestAction = github__namespace.createPublishGithubPullRequestAction;
const createPublishBitbucketAction = bitbucket__namespace.createPublishBitbucketAction;
const createPublishBitbucketCloudAction = bitbucket__namespace.createPublishBitbucketCloudAction;
const createPublishBitbucketServerAction = bitbucket__namespace.createPublishBitbucketServerAction;
const createPublishBitbucketServerPullRequestAction = bitbucket__namespace.createPublishBitbucketServerPullRequestAction;
const createPublishAzureAction = azure__namespace.createPublishAzureAction;
const createPublishGerritAction = gerrit__namespace.createPublishGerritAction;
const createPublishGerritReviewAction = gerrit__namespace.createPublishGerritReviewAction;
const createPublishGitlabAction = gitlab__namespace.createPublishGitlabAction;
const createPublishGitlabMergeRequestAction = gitlab__namespace.createPublishGitlabMergeRequestAction;

const createTemplateAction = pluginScaffolderNode.createTemplateAction;
const executeShellCommand = pluginScaffolderNode.executeShellCommand;
const fetchContents = pluginScaffolderNode.fetchContents;
const ScaffolderEntitiesProcessor = pluginCatalogBackendModuleScaffolderEntityModel.ScaffolderEntitiesProcessor;

exports.DatabaseTaskStore = router.DatabaseTaskStore;
exports.TaskManager = router.TaskManager;
exports.TaskWorker = router.TaskWorker;
exports.TemplateActionRegistry = router.TemplateActionRegistry;
exports.createBuiltinActions = router.createBuiltinActions;
exports.createCatalogRegisterAction = router.createCatalogRegisterAction;
exports.createCatalogWriteAction = router.createCatalogWriteAction;
exports.createDebugLogAction = router.createDebugLogAction;
exports.createFetchCatalogEntityAction = router.createFetchCatalogEntityAction;
exports.createFetchPlainAction = router.createFetchPlainAction;
exports.createFetchPlainFileAction = router.createFetchPlainFileAction;
exports.createFetchTemplateAction = router.createFetchTemplateAction;
exports.createFilesystemDeleteAction = router.createFilesystemDeleteAction;
exports.createFilesystemRenameAction = router.createFilesystemRenameAction;
exports.createRouter = router.createRouter;
exports.createWaitAction = router.createWaitAction;
exports.ScaffolderEntitiesProcessor = ScaffolderEntitiesProcessor;
exports.createGithubActionsDispatchAction = createGithubActionsDispatchAction;
exports.createGithubDeployKeyAction = createGithubDeployKeyAction;
exports.createGithubEnvironmentAction = createGithubEnvironmentAction;
exports.createGithubIssuesLabelAction = createGithubIssuesLabelAction;
exports.createGithubRepoCreateAction = createGithubRepoCreateAction;
exports.createGithubRepoPushAction = createGithubRepoPushAction;
exports.createGithubWebhookAction = createGithubWebhookAction;
exports.createPublishAzureAction = createPublishAzureAction;
exports.createPublishBitbucketAction = createPublishBitbucketAction;
exports.createPublishBitbucketCloudAction = createPublishBitbucketCloudAction;
exports.createPublishBitbucketServerAction = createPublishBitbucketServerAction;
exports.createPublishBitbucketServerPullRequestAction = createPublishBitbucketServerPullRequestAction;
exports.createPublishGerritAction = createPublishGerritAction;
exports.createPublishGerritReviewAction = createPublishGerritReviewAction;
exports.createPublishGithubAction = createPublishGithubAction;
exports.createPublishGithubPullRequestAction = createPublishGithubPullRequestAction;
exports.createPublishGitlabAction = createPublishGitlabAction;
exports.createPublishGitlabMergeRequestAction = createPublishGitlabMergeRequestAction;
exports.createTemplateAction = createTemplateAction;
exports.executeShellCommand = executeShellCommand;
exports.fetchContents = fetchContents;
//# sourceMappingURL=index.cjs.js.map
