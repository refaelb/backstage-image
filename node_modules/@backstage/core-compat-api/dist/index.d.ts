import React, { ReactNode } from 'react';
import { FrontendFeature, RouteRef as RouteRef$1, SubRouteRef as SubRouteRef$1, ExternalRouteRef as ExternalRouteRef$1 } from '@backstage/frontend-plugin-api';
import { AnyRouteRefParams, RouteRef, SubRouteRef, ExternalRouteRef } from '@backstage/core-plugin-api';

/**
 * Wraps a React element in a bidirectional compatibility provider, allow APIs
 * from `@backstage/core-plugin-api` to be used in an app from `@backstage/frontend-app-api`,
 * and APIs from `@backstage/frontend-plugin-api` to be used in an app from `@backstage/core-app-api`.
 *
 * @public
 */
declare function compatWrapper(element: ReactNode): React.JSX.Element;

/** @public */
declare function convertLegacyApp(rootElement: React.JSX.Element): FrontendFeature[];

/**
 * A temporary helper to convert a legacy route ref to the new system.
 *
 * @public
 * @remarks
 *
 * In the future the legacy createRouteRef will instead create refs compatible with both systems.
 */
declare function convertLegacyRouteRef<TParams extends AnyRouteRefParams>(ref: RouteRef<TParams>): RouteRef$1<TParams>;
/**
 * A temporary helper to convert a legacy sub route ref to the new system.
 *
 * @public
 * @remarks
 *
 * In the future the legacy createSubRouteRef will instead create refs compatible with both systems.
 */
declare function convertLegacyRouteRef<TParams extends AnyRouteRefParams>(ref: SubRouteRef<TParams>): SubRouteRef$1<TParams>;
/**
 * A temporary helper to convert a legacy external route ref to the new system.
 *
 * @public
 * @remarks
 *
 * In the future the legacy createExternalRouteRef will instead create refs compatible with both systems.
 */
declare function convertLegacyRouteRef<TParams extends AnyRouteRefParams, TOptional extends boolean>(ref: ExternalRouteRef<TParams, TOptional>): ExternalRouteRef$1<TParams, TOptional>;

export { compatWrapper, convertLegacyApp, convertLegacyRouteRef };
