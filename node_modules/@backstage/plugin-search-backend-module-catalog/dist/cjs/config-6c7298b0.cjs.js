'use strict';

var backendTasks = require('@backstage/backend-tasks');
var errors = require('@backstage/errors');

const configKey = "search.collators.catalog";
const defaults = {
  schedule: {
    frequency: { minutes: 10 },
    timeout: { minutes: 15 },
    initialDelay: { seconds: 3 }
  },
  collatorOptions: {
    locationTemplate: "/catalog/:namespace/:kind/:name",
    filter: void 0,
    batchSize: 500
  }
};
function readScheduleConfigOptions(configRoot) {
  let schedule = void 0;
  const config = configRoot.getOptionalConfig(configKey);
  if (config) {
    const scheduleConfig = config.getOptionalConfig("schedule");
    if (scheduleConfig) {
      try {
        schedule = backendTasks.readTaskScheduleDefinitionFromConfig(scheduleConfig);
      } catch (error) {
        throw new errors.InputError(`Invalid schedule at ${configKey}, ${error}`);
      }
    }
  }
  return schedule != null ? schedule : defaults.schedule;
}
function readCollatorConfigOptions(configRoot) {
  var _a, _b, _c, _d;
  const config = configRoot.getOptionalConfig(configKey);
  if (!config) {
    return defaults.collatorOptions;
  }
  return {
    locationTemplate: (_a = config.getOptionalString("locationTemplate")) != null ? _a : defaults.collatorOptions.locationTemplate,
    filter: (_c = (_b = config.getOptionalConfig("filter")) == null ? void 0 : _b.get()) != null ? _c : defaults.collatorOptions.filter,
    batchSize: (_d = config.getOptionalNumber("batchSize")) != null ? _d : defaults.collatorOptions.batchSize
  };
}

exports.readCollatorConfigOptions = readCollatorConfigOptions;
exports.readScheduleConfigOptions = readScheduleConfigOptions;
//# sourceMappingURL=config-6c7298b0.cjs.js.map
