/// <reference types="node" />
import { PluginEndpointDiscovery, TokenManager } from '@backstage/backend-common';
import { GetEntitiesRequest, CatalogApi } from '@backstage/catalog-client';
import { Config } from '@backstage/config';
import { Permission } from '@backstage/plugin-permission-common';
import { DocumentCollatorFactory } from '@backstage/plugin-search-common';
import { Readable } from 'stream';
import { Entity } from '@backstage/catalog-model';
import { CatalogEntityDocument } from '@backstage/plugin-catalog-common';

/** @public */
type CatalogCollatorEntityTransformer = (entity: Entity) => Omit<CatalogEntityDocument, 'location' | 'authorization'>;

/** @public */
type DefaultCatalogCollatorFactoryOptions = {
    discovery: PluginEndpointDiscovery;
    tokenManager: TokenManager;
    /**
     * @deprecated Use the config key `search.collators.catalog.locationTemplate` instead.
     */
    locationTemplate?: string;
    /**
     * @deprecated Use the config key `search.collators.catalog.filter` instead.
     */
    filter?: GetEntitiesRequest['filter'];
    /**
     * @deprecated Use the config key `search.collators.catalog.batchSize` instead.
     */
    batchSize?: number;
    catalogClient?: CatalogApi;
    /**
     * Allows you to customize how entities are shaped into documents.
     */
    entityTransformer?: CatalogCollatorEntityTransformer;
};
/**
 * Collates entities from the Catalog into documents for the search backend.
 *
 * @public
 */
declare class DefaultCatalogCollatorFactory implements DocumentCollatorFactory {
    readonly type = "software-catalog";
    readonly visibilityPermission: Permission;
    private locationTemplate;
    private filter?;
    private batchSize;
    private readonly catalogClient;
    private tokenManager;
    private entityTransformer;
    static fromConfig(configRoot: Config, options: DefaultCatalogCollatorFactoryOptions): DefaultCatalogCollatorFactory;
    private constructor();
    getCollator(): Promise<Readable>;
    private execute;
    private applyArgsToFormat;
}

/** @public */
declare const defaultCatalogCollatorEntityTransformer: CatalogCollatorEntityTransformer;

export { CatalogCollatorEntityTransformer, DefaultCatalogCollatorFactory, DefaultCatalogCollatorFactoryOptions, defaultCatalogCollatorEntityTransformer };
