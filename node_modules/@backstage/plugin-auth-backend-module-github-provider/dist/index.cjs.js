'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var passportGithub2 = require('passport-github2');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var backendPluginApi = require('@backstage/backend-plugin-api');

const ACCESS_TOKEN_PREFIX = "access-token.";
const githubAuthenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  shouldPersistScopes: true,
  initialize({ callbackUrl, config }) {
    var _a;
    const clientId = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    const enterpriseInstanceUrl = (_a = config.getOptionalString("enterpriseInstanceUrl")) == null ? void 0 : _a.replace(/\/$/, "");
    const authorizationUrl = enterpriseInstanceUrl ? `${enterpriseInstanceUrl}/login/oauth/authorize` : void 0;
    const tokenUrl = enterpriseInstanceUrl ? `${enterpriseInstanceUrl}/login/oauth/access_token` : void 0;
    const userProfileUrl = enterpriseInstanceUrl ? `${enterpriseInstanceUrl}/api/v3/user` : void 0;
    return pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new passportGithub2.Strategy(
        {
          clientID: clientId,
          clientSecret,
          callbackURL: callbackUrl,
          tokenURL: tokenUrl,
          userProfileURL: userProfileUrl,
          authorizationURL: authorizationUrl
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            { fullProfile, params, accessToken },
            { refreshToken }
          );
        }
      )
    );
  },
  async start(input, helper) {
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent"
    });
  },
  async authenticate(input, helper) {
    const { fullProfile, session } = await helper.authenticate(input);
    if (!session.refreshToken && !session.expiresInSeconds) {
      session.refreshToken = ACCESS_TOKEN_PREFIX + session.accessToken;
    }
    return { fullProfile, session };
  },
  async refresh(input, helper) {
    var _a;
    if ((_a = input.refreshToken) == null ? void 0 : _a.startsWith(ACCESS_TOKEN_PREFIX)) {
      const accessToken = input.refreshToken.slice(ACCESS_TOKEN_PREFIX.length);
      const fullProfile = await helper.fetchProfile(accessToken).catch((error) => {
        var _a2;
        if (((_a2 = error.oauthError) == null ? void 0 : _a2.statusCode) === 401) {
          throw new Error("Invalid access token");
        }
        throw error;
      });
      return {
        fullProfile,
        session: {
          accessToken,
          tokenType: "bearer",
          scope: input.scope,
          refreshToken: input.refreshToken
          // No expiration
        }
      };
    }
    return helper.refresh(input);
  }
});

exports.githubSignInResolvers = void 0;
((githubSignInResolvers2) => {
  githubSignInResolvers2.usernameMatchingUserEntityName = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const { fullProfile } = info.result;
        const userId = fullProfile.username;
        if (!userId) {
          throw new Error(`GitHub user profile does not contain a username`);
        }
        return ctx.signInWithCatalogUser({ entityRef: { name: userId } });
      };
    }
  });
})(exports.githubSignInResolvers || (exports.githubSignInResolvers = {}));

const authModuleGithubProvider = backendPluginApi.createBackendModule({
  pluginId: "auth",
  moduleId: "github-provider",
  register(reg) {
    reg.registerInit({
      deps: {
        providers: pluginAuthNode.authProvidersExtensionPoint
      },
      async init({ providers }) {
        providers.registerProvider({
          providerId: "github",
          factory: pluginAuthNode.createOAuthProviderFactory({
            authenticator: githubAuthenticator,
            signInResolverFactories: {
              ...exports.githubSignInResolvers,
              ...pluginAuthNode.commonSignInResolvers
            }
          })
        });
      }
    });
  }
});

exports["default"] = authModuleGithubProvider;
exports.githubAuthenticator = githubAuthenticator;
//# sourceMappingURL=index.cjs.js.map
