{"version":3,"file":"index.cjs.js","sources":["../src/actions/createTemplateAction.ts","../src/actions/executeShellCommand.ts","../src/actions/fetch.ts","../src/actions/gitHelpers.ts","../src/actions/util.ts","../src/files/serializeDirectoryContents.ts","../src/files/deserializeDirectoryContents.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionContext, TemplateAction } from './types';\nimport { z } from 'zod';\nimport { Schema } from 'jsonschema';\nimport zodToJsonSchema from 'zod-to-json-schema';\nimport { JsonObject } from '@backstage/types';\n\n/** @public */\nexport type TemplateExample = {\n  description: string;\n  example: string;\n};\n\n/** @public */\nexport type TemplateActionOptions<\n  TActionInput extends JsonObject = {},\n  TActionOutput extends JsonObject = {},\n  TInputSchema extends Schema | z.ZodType = {},\n  TOutputSchema extends Schema | z.ZodType = {},\n> = {\n  id: string;\n  description?: string;\n  examples?: TemplateExample[];\n  supportsDryRun?: boolean;\n  schema?: {\n    input?: TInputSchema;\n    output?: TOutputSchema;\n  };\n  handler: (ctx: ActionContext<TActionInput, TActionOutput>) => Promise<void>;\n};\n\n/**\n * This function is used to create new template actions to get type safety.\n * Will convert zod schemas to json schemas for use throughout the system.\n * @public\n */\nexport const createTemplateAction = <\n  TInputParams extends JsonObject = JsonObject,\n  TOutputParams extends JsonObject = JsonObject,\n  TInputSchema extends Schema | z.ZodType = {},\n  TOutputSchema extends Schema | z.ZodType = {},\n  TActionInput extends JsonObject = TInputSchema extends z.ZodType<\n    any,\n    any,\n    infer IReturn\n  >\n    ? IReturn\n    : TInputParams,\n  TActionOutput extends JsonObject = TOutputSchema extends z.ZodType<\n    any,\n    any,\n    infer IReturn\n  >\n    ? IReturn\n    : TOutputParams,\n>(\n  action: TemplateActionOptions<\n    TActionInput,\n    TActionOutput,\n    TInputSchema,\n    TOutputSchema\n  >,\n): TemplateAction<TActionInput, TActionOutput> => {\n  const inputSchema =\n    action.schema?.input && 'safeParseAsync' in action.schema.input\n      ? zodToJsonSchema(action.schema.input)\n      : action.schema?.input;\n\n  const outputSchema =\n    action.schema?.output && 'safeParseAsync' in action.schema.output\n      ? zodToJsonSchema(action.schema.output)\n      : action.schema?.output;\n\n  return {\n    ...action,\n    schema: {\n      ...action.schema,\n      input: inputSchema as TInputSchema,\n      output: outputSchema as TOutputSchema,\n    },\n  };\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { spawn, SpawnOptionsWithoutStdio } from 'child_process';\nimport { PassThrough, Writable } from 'stream';\n\n/**\n * Options for {@link executeShellCommand}.\n *\n * @public\n */\nexport type ExecuteShellCommandOptions = {\n  /** command to run */\n  command: string;\n  /** arguments to pass the command */\n  args: string[];\n  /** options to pass to spawn */\n  options?: SpawnOptionsWithoutStdio;\n  /** stream to capture stdout and stderr output */\n  logStream?: Writable;\n};\n\n/**\n * Run a command in a sub-process, normally a shell command.\n *\n * @public\n */\nexport async function executeShellCommand(\n  options: ExecuteShellCommandOptions,\n): Promise<void> {\n  const {\n    command,\n    args,\n    options: spawnOptions,\n    logStream = new PassThrough(),\n  } = options;\n\n  await new Promise<void>((resolve, reject) => {\n    const process = spawn(command, args, spawnOptions);\n\n    process.stdout.on('data', stream => {\n      logStream.write(stream);\n    });\n\n    process.stderr.on('data', stream => {\n      logStream.write(stream);\n    });\n\n    process.on('error', error => {\n      return reject(error);\n    });\n\n    process.on('close', code => {\n      if (code !== 0) {\n        return reject(\n          new Error(`Command ${command} failed, exit code: ${code}`),\n        );\n      }\n      return resolve();\n    });\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolveSafeChildPath, UrlReader } from '@backstage/backend-common';\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport fs from 'fs-extra';\nimport path from 'path';\n\n/**\n * A helper function that reads the contents of a directory from the given URL.\n * Can be used in your own actions, and also used behind fetch:template and fetch:plain\n *\n * @public\n */\nexport async function fetchContents(options: {\n  reader: UrlReader;\n  integrations: ScmIntegrations;\n  baseUrl?: string;\n  fetchUrl?: string;\n  outputPath: string;\n}) {\n  const { reader, integrations, baseUrl, fetchUrl = '.', outputPath } = options;\n\n  const fetchUrlIsAbsolute = isFetchUrlAbsolute(fetchUrl);\n\n  // We handle both file locations and url ones\n  if (!fetchUrlIsAbsolute && baseUrl?.startsWith('file://')) {\n    const basePath = baseUrl.slice('file://'.length);\n    const srcDir = resolveSafeChildPath(path.dirname(basePath), fetchUrl);\n    await fs.copy(srcDir, outputPath);\n  } else {\n    const readUrl = getReadUrl(fetchUrl, baseUrl, integrations);\n\n    const res = await reader.readTree(readUrl);\n    await fs.ensureDir(outputPath);\n    await res.dir({ targetDir: outputPath });\n  }\n}\n\n/**\n * A helper function that reads the content of a single file from the given URL.\n * Can be used in your own actions, and also used behind `fetch:plain:file`\n *\n * @public\n */\nexport async function fetchFile(options: {\n  reader: UrlReader;\n  integrations: ScmIntegrations;\n  baseUrl?: string;\n  fetchUrl?: string;\n  outputPath: string;\n}) {\n  const { reader, integrations, baseUrl, fetchUrl = '.', outputPath } = options;\n\n  const fetchUrlIsAbsolute = isFetchUrlAbsolute(fetchUrl);\n\n  // We handle both file locations and url ones\n  if (!fetchUrlIsAbsolute && baseUrl?.startsWith('file://')) {\n    const basePath = baseUrl.slice('file://'.length);\n    const src = resolveSafeChildPath(path.dirname(basePath), fetchUrl);\n    await fs.copyFile(src, outputPath);\n  } else {\n    const readUrl = getReadUrl(fetchUrl, baseUrl, integrations);\n\n    const res = await reader.readUrl(readUrl);\n    await fs.ensureDir(path.dirname(outputPath));\n    const buffer = await res.buffer();\n    await fs.outputFile(outputPath, buffer.toString());\n  }\n}\n\nfunction isFetchUrlAbsolute(fetchUrl: string) {\n  let fetchUrlIsAbsolute = false;\n  try {\n    // eslint-disable-next-line no-new\n    new URL(fetchUrl);\n    fetchUrlIsAbsolute = true;\n  } catch {\n    /* ignored */\n  }\n  return fetchUrlIsAbsolute;\n}\n\nfunction getReadUrl(\n  fetchUrl: string,\n  baseUrl: string | undefined,\n  integrations: ScmIntegrations,\n) {\n  if (isFetchUrlAbsolute(fetchUrl)) {\n    return fetchUrl;\n  } else if (baseUrl) {\n    const integration = integrations.byUrl(baseUrl);\n    if (!integration) {\n      throw new InputError(`No integration found for location ${baseUrl}`);\n    }\n\n    return integration.resolveUrl({\n      url: fetchUrl,\n      base: baseUrl,\n    });\n  }\n  throw new InputError(\n    `Failed to fetch, template location could not be determined and the fetch URL is relative, ${fetchUrl}`,\n  );\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Git } from '@backstage/backend-common';\nimport { Logger } from 'winston';\n\n/**\n * @public\n */\nexport async function initRepoAndPush(input: {\n  dir: string;\n  remoteUrl: string;\n  // For use cases where token has to be used with Basic Auth\n  // it has to be provided as password together with a username\n  // which may be a fixed value defined by the provider.\n  auth: { username: string; password: string } | { token: string };\n  logger: Logger;\n  defaultBranch?: string;\n  commitMessage?: string;\n  gitAuthorInfo?: { name?: string; email?: string };\n}): Promise<{ commitHash: string }> {\n  const {\n    dir,\n    remoteUrl,\n    auth,\n    logger,\n    defaultBranch = 'master',\n    commitMessage = 'Initial commit',\n    gitAuthorInfo,\n  } = input;\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  await git.init({\n    dir,\n    defaultBranch,\n  });\n\n  await git.add({ dir, filepath: '.' });\n\n  // use provided info if possible, otherwise use fallbacks\n  const authorInfo = {\n    name: gitAuthorInfo?.name ?? 'Scaffolder',\n    email: gitAuthorInfo?.email ?? 'scaffolder@backstage.io',\n  };\n\n  const commitHash = await git.commit({\n    dir,\n    message: commitMessage,\n    author: authorInfo,\n    committer: authorInfo,\n  });\n  await git.addRemote({\n    dir,\n    url: remoteUrl,\n    remote: 'origin',\n  });\n\n  await git.push({\n    dir,\n    remote: 'origin',\n  });\n\n  return { commitHash };\n}\n\n/**\n * @public\n */\nexport async function commitAndPushRepo(input: {\n  dir: string;\n  // For use cases where token has to be used with Basic Auth\n  // it has to be provided as password together with a username\n  // which may be a fixed value defined by the provider.\n  auth: { username: string; password: string } | { token: string };\n  logger: Logger;\n  commitMessage: string;\n  gitAuthorInfo?: { name?: string; email?: string };\n  branch?: string;\n  remoteRef?: string;\n}): Promise<{ commitHash: string }> {\n  const {\n    dir,\n    auth,\n    logger,\n    commitMessage,\n    gitAuthorInfo,\n    branch = 'master',\n    remoteRef,\n  } = input;\n\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  await git.fetch({ dir });\n  await git.checkout({ dir, ref: branch });\n  await git.add({ dir, filepath: '.' });\n\n  // use provided info if possible, otherwise use fallbacks\n  const authorInfo = {\n    name: gitAuthorInfo?.name ?? 'Scaffolder',\n    email: gitAuthorInfo?.email ?? 'scaffolder@backstage.io',\n  };\n\n  const commitHash = await git.commit({\n    dir,\n    message: commitMessage,\n    author: authorInfo,\n    committer: authorInfo,\n  });\n\n  await git.push({\n    dir,\n    remote: 'origin',\n    remoteRef: remoteRef ?? `refs/heads/${branch}`,\n  });\n\n  return { commitHash };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { isChildPath } from '@backstage/backend-common';\nimport { join as joinPath, normalize as normalizePath } from 'path';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\n\n/**\n * @public\n */\nexport const getRepoSourceDirectory = (\n  workspacePath: string,\n  sourcePath: string | undefined,\n) => {\n  if (sourcePath) {\n    const safeSuffix = normalizePath(sourcePath).replace(\n      /^(\\.\\.(\\/|\\\\|$))+/,\n      '',\n    );\n    const path = joinPath(workspacePath, safeSuffix);\n    if (!isChildPath(workspacePath, path)) {\n      throw new Error('Invalid source path');\n    }\n    return path;\n  }\n  return workspacePath;\n};\n\n/**\n * @public\n */\nexport const parseRepoUrl = (\n  repoUrl: string,\n  integrations: ScmIntegrationRegistry,\n): {\n  repo: string;\n  host: string;\n  owner?: string;\n  organization?: string;\n  workspace?: string;\n  project?: string;\n} => {\n  let parsed;\n  try {\n    parsed = new URL(`https://${repoUrl}`);\n  } catch (error) {\n    throw new InputError(\n      `Invalid repo URL passed to publisher, got ${repoUrl}, ${error}`,\n    );\n  }\n  const host = parsed.host;\n  const owner = parsed.searchParams.get('owner') ?? undefined;\n  const organization = parsed.searchParams.get('organization') ?? undefined;\n  const workspace = parsed.searchParams.get('workspace') ?? undefined;\n  const project = parsed.searchParams.get('project') ?? undefined;\n\n  const type = integrations.byHost(host)?.type;\n\n  if (!type) {\n    throw new InputError(\n      `No matching integration configuration for host ${host}, please check your integrations config`,\n    );\n  }\n\n  const repo: string = parsed.searchParams.get('repo')!;\n  switch (type) {\n    case 'bitbucket': {\n      if (host === 'www.bitbucket.org') {\n        checkRequiredParams(parsed, 'workspace');\n      }\n      checkRequiredParams(parsed, 'project', 'repo');\n      break;\n    }\n    case 'gitlab': {\n      // project is the projectID, and if defined, owner and repo won't be needed.\n      if (!project) {\n        checkRequiredParams(parsed, 'owner', 'repo');\n      }\n      break;\n    }\n    case 'gerrit': {\n      checkRequiredParams(parsed, 'repo');\n      break;\n    }\n    default: {\n      checkRequiredParams(parsed, 'repo', 'owner');\n      break;\n    }\n  }\n\n  return { host, owner, repo, organization, workspace, project };\n};\n\nfunction checkRequiredParams(repoUrl: URL, ...params: string[]) {\n  for (let i = 0; i < params.length; i++) {\n    if (!repoUrl.searchParams.get(params[i])) {\n      throw new InputError(\n        `Invalid repo URL passed to publisher: ${repoUrl.toString()}, missing ${\n          params[i]\n        }`,\n      );\n    }\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { promises as fs } from 'fs';\nimport globby from 'globby';\nimport limiterFactory from 'p-limit';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\nimport { SerializedFile } from './types';\nimport { isError } from '@backstage/errors';\n\nconst DEFAULT_GLOB_PATTERNS = ['./**', '!.git'];\n\nexport const isExecutable = (fileMode: number | undefined) => {\n  if (!fileMode) {\n    return false;\n  }\n\n  const executeBitMask = 0o000111;\n  const res = fileMode & executeBitMask;\n  return res > 0;\n};\n\nasync function asyncFilter<T>(\n  array: T[],\n  callback: (value: T, index: number, array: T[]) => Promise<boolean>,\n): Promise<T[]> {\n  const filterMap = await Promise.all(array.map(callback));\n  return array.filter((_value, index) => filterMap[index]);\n}\n\n/**\n * @public\n */\nexport async function serializeDirectoryContents(\n  sourcePath: string,\n  options?: {\n    gitignore?: boolean;\n    globPatterns?: string[];\n  },\n): Promise<SerializedFile[]> {\n  const paths = await globby(options?.globPatterns ?? DEFAULT_GLOB_PATTERNS, {\n    cwd: sourcePath,\n    dot: true,\n    gitignore: options?.gitignore,\n    followSymbolicLinks: false,\n    // In order to pick up 'broken' symlinks, we oxymoronically request files AND folders yet we filter out folders\n    // This is because broken symlinks aren't classed as files so we need to glob everything\n    onlyFiles: false,\n    objectMode: true,\n    stats: true,\n  });\n\n  const limiter = limiterFactory(10);\n\n  const valid = await asyncFilter(paths, async ({ dirent, path }) => {\n    if (dirent.isDirectory()) return false;\n    if (!dirent.isSymbolicLink()) return true;\n\n    const safePath = resolveSafeChildPath(sourcePath, path);\n\n    // we only want files that don't exist\n    try {\n      await fs.stat(safePath);\n      return false;\n    } catch (e) {\n      return isError(e) && e.code === 'ENOENT';\n    }\n  });\n\n  return Promise.all(\n    valid.map(async ({ dirent, path, stats }) => ({\n      path,\n      content: await limiter(async () => {\n        const absFilePath = resolveSafeChildPath(sourcePath, path);\n        if (dirent.isSymbolicLink()) {\n          return fs.readlink(absFilePath, 'buffer');\n        }\n        return fs.readFile(absFilePath);\n      }),\n      executable: isExecutable(stats?.mode),\n      symlink: dirent.isSymbolicLink(),\n    })),\n  );\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { dirname } from 'path';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\nimport { SerializedFile } from './types';\n\n/**\n * Deserializes a list of serialized files into the target directory.\n *\n * This method uses `resolveSafeChildPath` to make sure that files are\n * not written outside of the target directory.\n *\n * @public\n */\nexport async function deserializeDirectoryContents(\n  targetPath: string,\n  files: SerializedFile[],\n): Promise<void> {\n  for (const file of files) {\n    const filePath = resolveSafeChildPath(targetPath, file.path);\n    await fs.ensureDir(dirname(filePath));\n    await fs.writeFile(filePath, file.content); // Ignore file mode\n  }\n}\n"],"names":["zodToJsonSchema","PassThrough","spawn","resolveSafeChildPath","path","fs","InputError","Git","normalizePath","joinPath","isChildPath","globby","limiterFactory","isError","dirname"],"mappings":"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"}