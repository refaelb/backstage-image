import { RELATION_PART_OF, RELATION_OWNED_BY, getEntitySourceLocation, ANNOTATION_EDIT_URL, parseEntityRef, DEFAULT_NAMESPACE, ANNOTATION_LOCATION, stringifyEntityRef } from '@backstage/catalog-model';
import { makeStyles, Typography, Grid, Chip, Card, CardHeader, IconButton, Divider, CardContent } from '@material-ui/core';
import { MarkdownContent, Link, HeaderIconLinkRow } from '@backstage/core-components';
import React, { useCallback } from 'react';
import { scmIntegrationsApiRef, ScmIntegrationIcon } from '@backstage/integration-react';
import { useElementFilter, useApp, useApi, alertApiRef, errorApiRef, useRouteRef } from '@backstage/core-plugin-api';
import { getEntityRelations, EntityRefLinks, useEntity, catalogApiRef, getEntitySourceLocation as getEntitySourceLocation$1 } from '@backstage/plugin-catalog-react';
import { v as viewTechDocRouteRef, b as createFromTemplateRouteRef } from './routes-86c34994.esm.js';
import { L as LinksGridList } from './LinksGridList-c9dd074c.esm.js';
import CachedIcon from '@material-ui/icons/Cached';
import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
import DocsIcon from '@material-ui/icons/Description';
import EditIcon from '@material-ui/icons/Edit';
import { isTemplateEntityV1beta3 } from '@backstage/plugin-scaffolder-common';
import { useEntityPermission } from '@backstage/plugin-catalog-react/alpha';
import { catalogEntityRefreshPermission } from '@backstage/plugin-catalog-common/alpha';

const useStyles$2 = makeStyles((theme) => ({
  value: {
    fontWeight: "bold",
    overflow: "hidden",
    lineHeight: "24px",
    wordBreak: "break-word"
  },
  label: {
    color: theme.palette.text.secondary,
    textTransform: "uppercase",
    fontSize: "10px",
    fontWeight: "bold",
    letterSpacing: 0.5,
    overflow: "hidden",
    whiteSpace: "nowrap"
  }
}));
function AboutField(props) {
  const { label, value, gridSizes, children } = props;
  const classes = useStyles$2();
  const childElements = useElementFilter(children, (c) => c.getElements());
  const content = childElements.length > 0 ? childElements : /* @__PURE__ */ React.createElement(Typography, { variant: "body2", className: classes.value }, value || `unknown`);
  return /* @__PURE__ */ React.createElement(Grid, { item: true, ...gridSizes }, /* @__PURE__ */ React.createElement(Typography, { variant: "h2", className: classes.label }, label), content);
}

const useStyles$1 = makeStyles({
  description: {
    wordBreak: "break-word"
  }
});
function getLocationTargetHref(target, type, entitySourceLocation) {
  if (type === "url" || target.includes("://")) {
    return target;
  }
  const srcLocationUrl = entitySourceLocation.type === "file" ? `file://${entitySourceLocation.target}` : entitySourceLocation.target;
  if (type === "file" || entitySourceLocation.type === "file") {
    return new URL(target, srcLocationUrl).href;
  }
  return srcLocationUrl;
}
function AboutContent(props) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const { entity } = props;
  const classes = useStyles$1();
  const isSystem = entity.kind.toLocaleLowerCase("en-US") === "system";
  const isResource = entity.kind.toLocaleLowerCase("en-US") === "resource";
  const isComponent = entity.kind.toLocaleLowerCase("en-US") === "component";
  const isAPI = entity.kind.toLocaleLowerCase("en-US") === "api";
  const isTemplate = entity.kind.toLocaleLowerCase("en-US") === "template";
  const isLocation = entity.kind.toLocaleLowerCase("en-US") === "location";
  const isGroup = entity.kind.toLocaleLowerCase("en-US") === "group";
  const partOfSystemRelations = getEntityRelations(entity, RELATION_PART_OF, {
    kind: "system"
  });
  const partOfComponentRelations = getEntityRelations(
    entity,
    RELATION_PART_OF,
    {
      kind: "component"
    }
  );
  const partOfDomainRelations = getEntityRelations(entity, RELATION_PART_OF, {
    kind: "domain"
  });
  const ownedByRelations = getEntityRelations(entity, RELATION_OWNED_BY);
  let entitySourceLocation;
  try {
    entitySourceLocation = getEntitySourceLocation(entity);
  } catch (e) {
    entitySourceLocation = void 0;
  }
  return /* @__PURE__ */ React.createElement(Grid, { container: true }, /* @__PURE__ */ React.createElement(AboutField, { label: "Description", gridSizes: { xs: 12 } }, /* @__PURE__ */ React.createElement(
    MarkdownContent,
    {
      className: classes.description,
      content: ((_a = entity == null ? void 0 : entity.metadata) == null ? void 0 : _a.description) || "No description"
    }
  )), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Owner",
      value: "No Owner",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    ownedByRelations.length > 0 && /* @__PURE__ */ React.createElement(EntityRefLinks, { entityRefs: ownedByRelations, defaultKind: "group" })
  ), (isSystem || partOfDomainRelations.length > 0) && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Domain",
      value: "No Domain",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    partOfDomainRelations.length > 0 && /* @__PURE__ */ React.createElement(
      EntityRefLinks,
      {
        entityRefs: partOfDomainRelations,
        defaultKind: "domain"
      }
    )
  ), (isAPI || isComponent || isResource || partOfSystemRelations.length > 0) && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "System",
      value: "No System",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    partOfSystemRelations.length > 0 && /* @__PURE__ */ React.createElement(
      EntityRefLinks,
      {
        entityRefs: partOfSystemRelations,
        defaultKind: "system"
      }
    )
  ), isComponent && partOfComponentRelations.length > 0 && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Parent Component",
      value: "No Parent Component",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    /* @__PURE__ */ React.createElement(
      EntityRefLinks,
      {
        entityRefs: partOfComponentRelations,
        defaultKind: "component"
      }
    )
  ), (isAPI || isComponent || isResource || isTemplate || isGroup || isLocation || typeof ((_b = entity == null ? void 0 : entity.spec) == null ? void 0 : _b.type) === "string") && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Type",
      value: (_c = entity == null ? void 0 : entity.spec) == null ? void 0 : _c.type,
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    }
  ), (isAPI || isComponent || typeof ((_d = entity == null ? void 0 : entity.spec) == null ? void 0 : _d.lifecycle) === "string") && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Lifecycle",
      value: (_e = entity == null ? void 0 : entity.spec) == null ? void 0 : _e.lifecycle,
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    }
  ), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Tags",
      value: "No Tags",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    (((_f = entity == null ? void 0 : entity.metadata) == null ? void 0 : _f.tags) || []).map((t) => /* @__PURE__ */ React.createElement(Chip, { key: t, size: "small", label: t }))
  ), isLocation && (((_g = entity == null ? void 0 : entity.spec) == null ? void 0 : _g.targets) || ((_h = entity == null ? void 0 : entity.spec) == null ? void 0 : _h.target)) && /* @__PURE__ */ React.createElement(AboutField, { label: "Targets", gridSizes: { xs: 12 } }, /* @__PURE__ */ React.createElement(
    LinksGridList,
    {
      cols: 1,
      items: (entity.spec.targets || [entity.spec.target]).map((target) => target).map((target) => {
        var _a2;
        return {
          text: target,
          href: getLocationTargetHref(
            target,
            ((_a2 = entity == null ? void 0 : entity.spec) == null ? void 0 : _a2.type) || "unknown",
            entitySourceLocation
          )
        };
      })
    }
  )));
}

const TECHDOCS_ANNOTATION = "backstage.io/techdocs-ref";
const TECHDOCS_EXTERNAL_ANNOTATION = "backstage.io/techdocs-entity";
const useStyles = makeStyles({
  gridItemCard: {
    display: "flex",
    flexDirection: "column",
    height: "calc(100% - 10px)",
    // for pages without content header
    marginBottom: "10px"
  },
  fullHeightCard: {
    display: "flex",
    flexDirection: "column",
    height: "100%"
  },
  gridItemCardContent: {
    flex: 1
  },
  fullHeightCardContent: {
    flex: 1
  }
});
function AboutCard(props) {
  var _a, _b, _c, _d, _e, _f, _g;
  const { variant } = props;
  const app = useApp();
  const classes = useStyles();
  const { entity } = useEntity();
  const scmIntegrationsApi = useApi(scmIntegrationsApiRef);
  const catalogApi = useApi(catalogApiRef);
  const alertApi = useApi(alertApiRef);
  const errorApi = useApi(errorApiRef);
  const viewTechdocLink = useRouteRef(viewTechDocRouteRef);
  const templateRoute = useRouteRef(createFromTemplateRouteRef);
  const { allowed: canRefresh } = useEntityPermission(
    catalogEntityRefreshPermission
  );
  const entitySourceLocation = getEntitySourceLocation$1(
    entity,
    scmIntegrationsApi
  );
  const entityMetadataEditUrl = (_a = entity.metadata.annotations) == null ? void 0 : _a[ANNOTATION_EDIT_URL];
  let techdocsRef;
  if ((_b = entity.metadata.annotations) == null ? void 0 : _b[TECHDOCS_EXTERNAL_ANNOTATION]) {
    try {
      techdocsRef = parseEntityRef(
        (_c = entity.metadata.annotations) == null ? void 0 : _c[TECHDOCS_EXTERNAL_ANNOTATION]
      );
    } catch {
      techdocsRef = void 0;
    }
  }
  const viewInSource = {
    label: "View Source",
    disabled: !entitySourceLocation,
    icon: /* @__PURE__ */ React.createElement(ScmIntegrationIcon, { type: entitySourceLocation == null ? void 0 : entitySourceLocation.integrationType }),
    href: entitySourceLocation == null ? void 0 : entitySourceLocation.locationTargetUrl
  };
  const viewInTechDocs = {
    label: "View TechDocs",
    disabled: !(((_d = entity.metadata.annotations) == null ? void 0 : _d[TECHDOCS_ANNOTATION]) || ((_e = entity.metadata.annotations) == null ? void 0 : _e[TECHDOCS_EXTERNAL_ANNOTATION])) || !viewTechdocLink,
    icon: /* @__PURE__ */ React.createElement(DocsIcon, null),
    href: viewTechdocLink && (techdocsRef ? viewTechdocLink({
      namespace: techdocsRef.namespace || DEFAULT_NAMESPACE,
      kind: techdocsRef.kind,
      name: techdocsRef.name
    }) : viewTechdocLink({
      namespace: entity.metadata.namespace || DEFAULT_NAMESPACE,
      kind: entity.kind,
      name: entity.metadata.name
    }))
  };
  const subHeaderLinks = [viewInSource, viewInTechDocs];
  if (isTemplateEntityV1beta3(entity)) {
    const Icon = (_f = app.getSystemIcon("scaffolder")) != null ? _f : CreateComponentIcon;
    const launchTemplate = {
      label: "Launch Template",
      icon: /* @__PURE__ */ React.createElement(Icon, null),
      disabled: !templateRoute,
      href: templateRoute && templateRoute({
        templateName: entity.metadata.name,
        namespace: entity.metadata.namespace || DEFAULT_NAMESPACE
      })
    };
    subHeaderLinks.push(launchTemplate);
  }
  let cardClass = "";
  if (variant === "gridItem") {
    cardClass = classes.gridItemCard;
  } else if (variant === "fullHeight") {
    cardClass = classes.fullHeightCard;
  }
  let cardContentClass = "";
  if (variant === "gridItem") {
    cardContentClass = classes.gridItemCardContent;
  } else if (variant === "fullHeight") {
    cardContentClass = classes.fullHeightCardContent;
  }
  const entityLocation = (_g = entity.metadata.annotations) == null ? void 0 : _g[ANNOTATION_LOCATION];
  const allowRefresh = (entityLocation == null ? void 0 : entityLocation.startsWith("url:")) || (entityLocation == null ? void 0 : entityLocation.startsWith("file:"));
  const refreshEntity = useCallback(async () => {
    try {
      await catalogApi.refreshEntity(stringifyEntityRef(entity));
      alertApi.post({
        message: "Refresh scheduled",
        severity: "info",
        display: "transient"
      });
    } catch (e) {
      errorApi.post(e);
    }
  }, [catalogApi, alertApi, errorApi, entity]);
  return /* @__PURE__ */ React.createElement(Card, { className: cardClass }, /* @__PURE__ */ React.createElement(
    CardHeader,
    {
      title: "About",
      action: /* @__PURE__ */ React.createElement(React.Fragment, null, allowRefresh && canRefresh && /* @__PURE__ */ React.createElement(
        IconButton,
        {
          "aria-label": "Refresh",
          title: "Schedule entity refresh",
          onClick: refreshEntity
        },
        /* @__PURE__ */ React.createElement(CachedIcon, null)
      ), /* @__PURE__ */ React.createElement(
        IconButton,
        {
          component: Link,
          "aria-label": "Edit",
          disabled: !entityMetadataEditUrl,
          title: "Edit Metadata",
          to: entityMetadataEditUrl != null ? entityMetadataEditUrl : "#"
        },
        /* @__PURE__ */ React.createElement(EditIcon, null)
      )),
      subheader: /* @__PURE__ */ React.createElement(HeaderIconLinkRow, { links: subHeaderLinks })
    }
  ), /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(CardContent, { className: cardContentClass }, /* @__PURE__ */ React.createElement(AboutContent, { entity })));
}

export { AboutContent as A, AboutField as a, AboutCard as b };
//# sourceMappingURL=AboutCard-ed377723.esm.js.map
