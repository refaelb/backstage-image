import { DEFAULT_NAMESPACE, RELATION_OWNED_BY } from '@backstage/catalog-model';
import { Page, Header, Progress, RoutedTabs, Content, WarningPanel, Link, HeaderLabel } from '@backstage/core-components';
import { useApi, alertApiRef, attachComponentData, useRouteRefParams, useElementFilter, useRouteRef } from '@backstage/core-plugin-api';
import { entityRouteRef, useAsyncEntity, UnregisterEntityDialog, InspectEntityDialog, EntityDisplayName, FavoriteEntity, getEntityRelations, EntityRefLinks } from '@backstage/plugin-catalog-react';
import { MenuItem, ListItemIcon, ListItemText, Divider, Tooltip, IconButton, Popover, MenuList, Box } from '@material-ui/core';
import { Alert } from '@material-ui/lab';
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { makeStyles } from '@material-ui/core/styles';
import BugReportIcon from '@material-ui/icons/BugReport';
import MoreVert from '@material-ui/icons/MoreVert';
import FileCopyTwoToneIcon from '@material-ui/icons/FileCopyTwoTone';
import { useEntityPermission } from '@backstage/plugin-catalog-react/alpha';
import { catalogEntityDeletePermission } from '@backstage/plugin-catalog-common/alpha';
import CancelIcon from '@material-ui/icons/Cancel';
import useCopyToClipboard from 'react-use/lib/useCopyToClipboard';
import { r as rootRouteRef, u as unregisterRedirectRouteRef } from './routes-86c34994.esm.js';

function UnregisterEntity(props) {
  var _a;
  const {
    unregisterEntityOptions,
    isUnregisterAllowed,
    onUnregisterEntity,
    onClose
  } = props;
  const isBoolean = typeof (unregisterEntityOptions == null ? void 0 : unregisterEntityOptions.disableUnregister) === "boolean";
  const isDisabled = (_a = !isUnregisterAllowed || (isBoolean ? !!(unregisterEntityOptions == null ? void 0 : unregisterEntityOptions.disableUnregister) : (unregisterEntityOptions == null ? void 0 : unregisterEntityOptions.disableUnregister) === "disable")) != null ? _a : false;
  let unregisterButton = /* @__PURE__ */ React.createElement(React.Fragment, null);
  if ((unregisterEntityOptions == null ? void 0 : unregisterEntityOptions.disableUnregister) !== "hidden") {
    unregisterButton = /* @__PURE__ */ React.createElement(
      MenuItem,
      {
        onClick: () => {
          onClose();
          onUnregisterEntity();
        },
        disabled: isDisabled
      },
      /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(CancelIcon, { fontSize: "small" })),
      /* @__PURE__ */ React.createElement(ListItemText, { primary: "Unregister entity" })
    );
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, unregisterButton);
}

const useStyles = makeStyles(
  (theme) => {
    return {
      button: {
        color: theme.page.fontColor
      }
    };
  },
  { name: "PluginCatalogEntityContextMenu" }
);
function EntityContextMenu(props) {
  const {
    UNSTABLE_extraContextMenuItems,
    UNSTABLE_contextMenuOptions,
    onUnregisterEntity,
    onInspectEntity
  } = props;
  const [anchorEl, setAnchorEl] = useState();
  const classes = useStyles();
  const unregisterPermission = useEntityPermission(
    catalogEntityDeletePermission
  );
  const isAllowed = unregisterPermission.allowed;
  const onOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const onClose = () => {
    setAnchorEl(void 0);
  };
  const alertApi = useApi(alertApiRef);
  const [copyState, copyToClipboard] = useCopyToClipboard();
  useEffect(() => {
    if (!copyState.error && copyState.value) {
      alertApi.post({
        message: "Copied!",
        severity: "info",
        display: "transient"
      });
    }
  }, [copyState, alertApi]);
  const extraItems = UNSTABLE_extraContextMenuItems && [
    ...UNSTABLE_extraContextMenuItems.map((item) => /* @__PURE__ */ React.createElement(
      MenuItem,
      {
        key: item.title,
        onClick: () => {
          onClose();
          item.onClick();
        }
      },
      /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(item.Icon, { fontSize: "small" })),
      /* @__PURE__ */ React.createElement(ListItemText, { primary: item.title })
    )),
    /* @__PURE__ */ React.createElement(Divider, { key: "the divider is here!" })
  ];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Tooltip, { title: "More", arrow: true }, /* @__PURE__ */ React.createElement(
    IconButton,
    {
      "aria-label": "more",
      "aria-controls": "long-menu",
      "aria-haspopup": "true",
      "aria-expanded": !!anchorEl,
      role: "button",
      onClick: onOpen,
      "data-testid": "menu-button",
      className: classes.button,
      id: "long-menu"
    },
    /* @__PURE__ */ React.createElement(MoreVert, null)
  )), /* @__PURE__ */ React.createElement(
    Popover,
    {
      open: Boolean(anchorEl),
      onClose,
      anchorEl,
      anchorOrigin: { vertical: "bottom", horizontal: "right" },
      transformOrigin: { vertical: "top", horizontal: "right" },
      "aria-labelledby": "long-menu"
    },
    /* @__PURE__ */ React.createElement(MenuList, { autoFocusItem: Boolean(anchorEl) }, extraItems, /* @__PURE__ */ React.createElement(
      UnregisterEntity,
      {
        unregisterEntityOptions: UNSTABLE_contextMenuOptions,
        isUnregisterAllowed: isAllowed,
        onUnregisterEntity,
        onClose
      }
    ), /* @__PURE__ */ React.createElement(
      MenuItem,
      {
        onClick: () => {
          onClose();
          onInspectEntity();
        }
      },
      /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(BugReportIcon, { fontSize: "small" })),
      /* @__PURE__ */ React.createElement(ListItemText, { primary: "Inspect entity" })
    ), /* @__PURE__ */ React.createElement(
      MenuItem,
      {
        onClick: () => {
          onClose();
          copyToClipboard(window.location.toString());
        }
      },
      /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(FileCopyTwoToneIcon, { fontSize: "small" })),
      /* @__PURE__ */ React.createElement(ListItemText, { primary: "Copy entity URL" })
    ))
  ));
}

const dataKey = "plugin.catalog.entityLayoutRoute";
const Route = () => null;
attachComponentData(Route, dataKey, true);
attachComponentData(Route, "core.gatherMountPoints", true);
function EntityLayoutTitle(props) {
  const { entity, title } = props;
  return /* @__PURE__ */ React.createElement(Box, { display: "inline-flex", alignItems: "center", height: "1em", maxWidth: "100%" }, /* @__PURE__ */ React.createElement(
    Box,
    {
      component: "span",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    },
    entity ? /* @__PURE__ */ React.createElement(EntityDisplayName, { entityRef: entity, hideIcon: true }) : title
  ), entity && /* @__PURE__ */ React.createElement(FavoriteEntity, { entity }));
}
function headerProps(paramKind, paramNamespace, paramName, entity) {
  var _a, _b, _c, _d, _e;
  const kind = (_a = paramKind != null ? paramKind : entity == null ? void 0 : entity.kind) != null ? _a : "";
  const namespace = (_b = paramNamespace != null ? paramNamespace : entity == null ? void 0 : entity.metadata.namespace) != null ? _b : "";
  const name = (_e = (_d = (_c = entity == null ? void 0 : entity.metadata.title) != null ? _c : paramName) != null ? _d : entity == null ? void 0 : entity.metadata.name) != null ? _e : "";
  return {
    headerTitle: `${name}${namespace && namespace !== DEFAULT_NAMESPACE ? ` in ${namespace}` : ""}`,
    headerType: (() => {
      let t = kind.toLocaleLowerCase("en-US");
      if (entity && entity.spec && "type" in entity.spec) {
        t += " \u2014 ";
        t += entity.spec.type.toLocaleLowerCase("en-US");
      }
      return t;
    })()
  };
}
function EntityLabels(props) {
  var _a, _b;
  const { entity } = props;
  const ownedByRelations = getEntityRelations(entity, RELATION_OWNED_BY);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, ownedByRelations.length > 0 && /* @__PURE__ */ React.createElement(
    HeaderLabel,
    {
      label: "Owner",
      contentTypograpyRootComponent: "p",
      value: /* @__PURE__ */ React.createElement(
        EntityRefLinks,
        {
          entityRefs: ownedByRelations,
          defaultKind: "Group",
          color: "inherit"
        }
      )
    }
  ), ((_a = entity.spec) == null ? void 0 : _a.lifecycle) && /* @__PURE__ */ React.createElement(
    HeaderLabel,
    {
      label: "Lifecycle",
      value: (_b = entity.spec.lifecycle) == null ? void 0 : _b.toString()
    }
  ));
}
const EntityLayout = (props) => {
  var _a, _b, _c;
  const {
    UNSTABLE_extraContextMenuItems,
    UNSTABLE_contextMenuOptions,
    children,
    NotFoundComponent
  } = props;
  const { kind, namespace, name } = useRouteRefParams(entityRouteRef);
  const { entity, loading, error } = useAsyncEntity();
  const location = useLocation();
  const routes = useElementFilter(
    children,
    (elements) => elements.selectByComponentData({
      key: dataKey,
      withStrictError: "Child of EntityLayout must be an EntityLayout.Route"
    }).getElements().flatMap(({ props: elementProps }) => {
      if (!entity) {
        return [];
      } else if (elementProps.if && !elementProps.if(entity)) {
        return [];
      }
      return [
        {
          path: elementProps.path,
          title: elementProps.title,
          children: elementProps.children,
          tabProps: elementProps.tabProps
        }
      ];
    }),
    [entity]
  );
  const { headerTitle, headerType } = headerProps(
    kind,
    namespace,
    name,
    entity
  );
  const [confirmationDialogOpen, setConfirmationDialogOpen] = useState(false);
  const [inspectionDialogOpen, setInspectionDialogOpen] = useState(false);
  const navigate = useNavigate();
  const catalogRoute = useRouteRef(rootRouteRef);
  const unregisterRedirectRoute = useRouteRef(unregisterRedirectRouteRef);
  const cleanUpAfterRemoval = async () => {
    setConfirmationDialogOpen(false);
    setInspectionDialogOpen(false);
    navigate(
      unregisterRedirectRoute ? unregisterRedirectRoute() : catalogRoute()
    );
  };
  useEffect(() => {
    setConfirmationDialogOpen(false);
    setInspectionDialogOpen(false);
  }, [location.pathname]);
  return /* @__PURE__ */ React.createElement(Page, { themeId: (_c = (_b = (_a = entity == null ? void 0 : entity.spec) == null ? void 0 : _a.type) == null ? void 0 : _b.toString()) != null ? _c : "home" }, /* @__PURE__ */ React.createElement(
    Header,
    {
      title: /* @__PURE__ */ React.createElement(EntityLayoutTitle, { title: headerTitle, entity }),
      pageTitleOverride: headerTitle,
      type: headerType
    },
    entity && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(EntityLabels, { entity }), /* @__PURE__ */ React.createElement(
      EntityContextMenu,
      {
        UNSTABLE_extraContextMenuItems,
        UNSTABLE_contextMenuOptions,
        onUnregisterEntity: () => setConfirmationDialogOpen(true),
        onInspectEntity: () => setInspectionDialogOpen(true)
      }
    ))
  ), loading && /* @__PURE__ */ React.createElement(Progress, null), entity && /* @__PURE__ */ React.createElement(RoutedTabs, { routes }), error && /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, error.toString())), !loading && !error && !entity && /* @__PURE__ */ React.createElement(Content, null, NotFoundComponent ? NotFoundComponent : /* @__PURE__ */ React.createElement(WarningPanel, { title: "Entity not found" }, "There is no ", kind, " with the requested", " ", /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/software-catalog/references" }, "kind, namespace, and name"), ".")), /* @__PURE__ */ React.createElement(
    UnregisterEntityDialog,
    {
      open: confirmationDialogOpen,
      entity,
      onConfirm: cleanUpAfterRemoval,
      onClose: () => setConfirmationDialogOpen(false)
    }
  ), /* @__PURE__ */ React.createElement(
    InspectEntityDialog,
    {
      open: inspectionDialogOpen,
      entity,
      onClose: () => setInspectionDialogOpen(false)
    }
  ));
};
EntityLayout.Route = Route;

export { EntityLayout as E };
//# sourceMappingURL=EntityLayout-7a74c718.esm.js.map
