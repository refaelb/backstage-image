import { makeStyles, Box, Typography, useMediaQuery, ImageList, ImageListItem } from '@material-ui/core';
import React from 'react';
import LanguageIcon from '@material-ui/icons/Language';
import { Link } from '@backstage/core-components';

const useStyles = makeStyles({
  svgIcon: {
    display: "inline-block",
    "& svg": {
      display: "inline-block",
      fontSize: "inherit",
      verticalAlign: "baseline"
    }
  }
});
function IconLink(props) {
  const { href, text, Icon } = props;
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(Box, { display: "flex" }, /* @__PURE__ */ React.createElement(Box, { mr: 1, className: classes.svgIcon }, /* @__PURE__ */ React.createElement(Typography, { component: "div" }, Icon ? /* @__PURE__ */ React.createElement(Icon, null) : /* @__PURE__ */ React.createElement(LanguageIcon, null))), /* @__PURE__ */ React.createElement(Box, { flexGrow: "1" }, /* @__PURE__ */ React.createElement(Link, { to: href, target: "_blank", rel: "noopener" }, text || href)));
}

const colDefaults = {
  xs: 1,
  sm: 1,
  md: 1,
  lg: 2,
  xl: 3
};
function useDynamicColumns(cols) {
  var _a, _b;
  const matches = [
    useMediaQuery((theme) => theme.breakpoints.up("xl")) ? "xl" : null,
    useMediaQuery((theme) => theme.breakpoints.up("lg")) ? "lg" : null,
    useMediaQuery((theme) => theme.breakpoints.up("md")) ? "md" : null,
    useMediaQuery((theme) => theme.breakpoints.up("sm")) ? "sm" : null,
    useMediaQuery((theme) => theme.breakpoints.up("xs")) ? "xs" : null
  ];
  let numOfCols = 1;
  if (typeof cols === "number") {
    numOfCols = cols;
  } else {
    const breakpoint = (_a = matches.find((k) => k !== null)) != null ? _a : "xs";
    numOfCols = (_b = cols == null ? void 0 : cols[breakpoint]) != null ? _b : colDefaults[breakpoint];
  }
  return numOfCols;
}

function LinksGridList(props) {
  const { items, cols = void 0 } = props;
  const numOfCols = useDynamicColumns(cols);
  return /* @__PURE__ */ React.createElement(ImageList, { rowHeight: "auto", cols: numOfCols }, items.map(({ text, href, Icon }, i) => /* @__PURE__ */ React.createElement(ImageListItem, { key: i }, /* @__PURE__ */ React.createElement(IconLink, { href, text: text != null ? text : href, Icon }))));
}

export { LinksGridList as L };
//# sourceMappingURL=LinksGridList-c9dd074c.esm.js.map
