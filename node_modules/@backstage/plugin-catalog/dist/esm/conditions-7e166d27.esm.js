import { useEntity } from '@backstage/plugin-catalog-react';
import React from 'react';
import { CodeSnippet, InfoCard, Table } from '@backstage/core-components';
import { makeStyles, Typography, Button } from '@material-ui/core';

const ENTITY_YAML = `metadata:
  name: example
  labels:
    javaVersion: 1.2.3`;
const useStyles$1 = makeStyles(
  (theme) => ({
    code: {
      borderRadius: 6,
      margin: theme.spacing(2, 0),
      background: theme.palette.type === "dark" ? "#444" : theme.palette.common.white
    }
  }),
  { name: "PluginCatalogEntityLabelsEmptyState" }
);
function EntityLabelsEmptyState() {
  const classes = useStyles$1();
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { variant: "body1" }, "No labels defined for this entity. You can add labels to your entity YAML as shown in the highlighted example below:"), /* @__PURE__ */ React.createElement("div", { className: classes.code }, /* @__PURE__ */ React.createElement(
    CodeSnippet,
    {
      text: ENTITY_YAML,
      language: "yaml",
      showLineNumbers: true,
      highlightedNumbers: [3, 4, 5, 6],
      customStyle: { background: "inherit", fontSize: "115%" }
    }
  )), /* @__PURE__ */ React.createElement(
    Button,
    {
      variant: "contained",
      color: "primary",
      target: "_blank",
      href: "https://backstage.io/docs/features/software-catalog/descriptor-format#labels-optional"
    },
    "Read more"
  ));
}

const useStyles = makeStyles((_) => ({
  key: {
    fontWeight: "bold"
  }
}));
const EntityLabelsCard = (props) => {
  var _a;
  const { variant, title } = props;
  const { entity } = useEntity();
  const classes = useStyles();
  const columns = [
    {
      render: (row) => {
        return /* @__PURE__ */ React.createElement(Typography, { className: classes.key, variant: "body2" }, row.key);
      }
    },
    {
      field: "value"
    }
  ];
  const labels = (_a = entity == null ? void 0 : entity.metadata) == null ? void 0 : _a.labels;
  return /* @__PURE__ */ React.createElement(InfoCard, { title: title || "Labels", variant }, !labels || Object.keys(labels).length === 0 ? /* @__PURE__ */ React.createElement(EntityLabelsEmptyState, null) : /* @__PURE__ */ React.createElement(
    Table,
    {
      columns,
      data: Object.keys(labels).map((labelKey) => ({
        key: labelKey,
        value: labels[labelKey]
      })),
      options: {
        search: false,
        showTitle: true,
        loadingType: "linear",
        header: false,
        padding: "dense",
        pageSize: 5,
        toolbar: false,
        paging: Object.keys(labels).length > 5
      }
    }
  ));
};

function hasLabels(entity) {
  var _a, _b;
  return ((_a = entity == null ? void 0 : entity.metadata) == null ? void 0 : _a.labels) ? Object.keys((_b = entity == null ? void 0 : entity.metadata) == null ? void 0 : _b.labels).some(Boolean) : false;
}

export { EntityLabelsCard as E, hasLabels as h };
//# sourceMappingURL=conditions-7e166d27.esm.js.map
