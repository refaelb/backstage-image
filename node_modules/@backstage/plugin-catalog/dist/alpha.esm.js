import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { createApiExtension, createPageExtension, createExtensionInput, coreExtensionData, createExtension, ExtensionBoundary, createSchemaFromZod, createNavItemExtension, createPlugin } from '@backstage/frontend-plugin-api';
import { catalogApiRef, starredEntitiesApiRef, entityRouteRef, AsyncEntityProvider } from '@backstage/plugin-catalog-react';
import { D as DefaultStarredEntitiesApi, r as rootRouteRef, v as viewTechDocRouteRef, c as createComponentRouteRef, b as createFromTemplateRouteRef, u as unregisterRedirectRouteRef } from './esm/routes-86c34994.esm.js';
import { createApiFactory, discoveryApiRef, fetchApiRef, storageApiRef } from '@backstage/core-plugin-api';
import { CatalogClient } from '@backstage/catalog-client';
import React, { lazy } from 'react';
import { catalogExtensionData, createEntityCardExtension, createEntityContentExtension } from '@backstage/plugin-catalog-react/alpha';
import { u as useEntityFromUrl } from './esm/useEntityFromUrl-59c4a128.esm.js';
import HomeIcon from '@material-ui/icons/Home';
import { createSearchResultListItemExtension } from '@backstage/plugin-search-react/alpha';
import '@backstage/catalog-model';
import '@backstage/types';
import 'dataloader';
import 'expiry-map';
import 'zen-observable';
import '@material-ui/icons/Apartment';
import '@material-ui/icons/Business';
import '@material-ui/icons/Extension';
import '@material-ui/icons/Help';
import '@material-ui/icons/LibraryAdd';
import '@material-ui/icons/LocationOn';
import '@material-ui/icons/Memory';
import '@material-ui/icons/People';
import '@material-ui/icons/Person';
import '@material-ui/icons/Work';
import 'lodash';
import 'react-router-dom';
import 'react-use/lib/useAsyncRetry';

const catalogApi = createApiExtension({
  factory: createApiFactory({
    api: catalogApiRef,
    deps: {
      discoveryApi: discoveryApiRef,
      fetchApi: fetchApiRef
    },
    factory: ({ discoveryApi, fetchApi }) => new CatalogClient({ discoveryApi, fetchApi })
  })
});
const catalogStarredEntitiesApi = createApiExtension({
  factory: createApiFactory({
    api: starredEntitiesApiRef,
    deps: { storageApi: storageApiRef },
    factory: ({ storageApi }) => new DefaultStarredEntitiesApi({ storageApi })
  })
});
var apis = [catalogApi, catalogStarredEntitiesApi];

const catalogPage = createPageExtension({
  defaultPath: "/catalog",
  routeRef: convertLegacyRouteRef(rootRouteRef),
  inputs: {
    filters: createExtensionInput({
      element: coreExtensionData.reactElement
    })
  },
  loader: async ({ inputs }) => {
    const { BaseCatalogPage } = await import('./esm/index-3544ccde.esm.js');
    const filters = inputs.filters.map((filter) => filter.output.element);
    return compatWrapper(/* @__PURE__ */ React.createElement(BaseCatalogPage, { filters: /* @__PURE__ */ React.createElement(React.Fragment, null, filters) }));
  }
});
const catalogEntityPage = createPageExtension({
  name: "entity",
  defaultPath: "/catalog/:namespace/:kind/:name",
  routeRef: convertLegacyRouteRef(entityRouteRef),
  inputs: {
    contents: createExtensionInput({
      element: coreExtensionData.reactElement,
      path: coreExtensionData.routePath,
      routeRef: coreExtensionData.routeRef.optional(),
      title: catalogExtensionData.entityContentTitle
    })
  },
  loader: async ({ inputs }) => {
    const { EntityLayout } = await import('./esm/index-9de71bcd.esm.js');
    const Component = () => {
      return /* @__PURE__ */ React.createElement(AsyncEntityProvider, { ...useEntityFromUrl() }, /* @__PURE__ */ React.createElement(EntityLayout, null, inputs.contents.map((content) => /* @__PURE__ */ React.createElement(
        EntityLayout.Route,
        {
          key: content.output.path,
          path: content.output.path,
          title: content.output.title
        },
        content.output.element
      ))));
    };
    return compatWrapper(/* @__PURE__ */ React.createElement(Component, null));
  }
});
var pages = [catalogPage, catalogEntityPage];

function createCatalogFilterExtension(options) {
  var _a;
  return createExtension({
    kind: "catalog-filter",
    namespace: options.namespace,
    name: options.name,
    attachTo: { id: "page:catalog", input: "filters" },
    inputs: (_a = options.inputs) != null ? _a : {},
    configSchema: options.configSchema,
    output: {
      element: coreExtensionData.reactElement
    },
    factory({ config, node }) {
      const ExtensionComponent = lazy(
        () => options.loader({ config }).then((element) => ({ default: () => element }))
      );
      return {
        element: /* @__PURE__ */ React.createElement(ExtensionBoundary, { node }, /* @__PURE__ */ React.createElement(ExtensionComponent, null))
      };
    }
  });
}

const catalogTagCatalogFilter = createCatalogFilterExtension({
  name: "tag",
  loader: async () => {
    const { EntityTagPicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityTagPicker, null);
  }
});
const catalogKindCatalogFilter = createCatalogFilterExtension({
  name: "kind",
  configSchema: createSchemaFromZod(
    (z) => z.object({
      initialFilter: z.string().default("component")
    })
  ),
  loader: async ({ config }) => {
    const { EntityKindPicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityKindPicker, { initialFilter: config.initialFilter });
  }
});
const catalogTypeCatalogFilter = createCatalogFilterExtension({
  name: "type",
  loader: async () => {
    const { EntityTypePicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityTypePicker, null);
  }
});
const catalogModeCatalogFilter = createCatalogFilterExtension({
  name: "mode",
  configSchema: createSchemaFromZod(
    (z) => z.object({
      mode: z.enum(["owners-only", "all"]).optional()
    })
  ),
  loader: async ({ config }) => {
    const { EntityOwnerPicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityOwnerPicker, { mode: config.mode });
  }
});
const catalogNamespaceCatalogFilter = createCatalogFilterExtension({
  name: "namespace",
  loader: async () => {
    const { EntityNamespacePicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityNamespacePicker, null);
  }
});
const catalogLifecycleCatalogFilter = createCatalogFilterExtension({
  name: "lifecycle",
  loader: async () => {
    const { EntityLifecyclePicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityLifecyclePicker, null);
  }
});
const catalogProcessingStatusCatalogFilter = createCatalogFilterExtension({
  name: "processing-status",
  loader: async () => {
    const { EntityProcessingStatusPicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(EntityProcessingStatusPicker, null);
  }
});
const catalogListCatalogFilter = createCatalogFilterExtension({
  name: "list",
  configSchema: createSchemaFromZod(
    (z) => z.object({
      initialFilter: z.enum(["owned", "starred", "all"]).default("owned")
    })
  ),
  loader: async ({ config }) => {
    const { UserListPicker } = await import('@backstage/plugin-catalog-react');
    return /* @__PURE__ */ React.createElement(UserListPicker, { initialFilter: config.initialFilter });
  }
});
var filters = [
  catalogTagCatalogFilter,
  catalogKindCatalogFilter,
  catalogTypeCatalogFilter,
  catalogModeCatalogFilter,
  catalogNamespaceCatalogFilter,
  catalogLifecycleCatalogFilter,
  catalogProcessingStatusCatalogFilter,
  catalogListCatalogFilter
];

const catalogNavItem = createNavItemExtension({
  routeRef: convertLegacyRouteRef(rootRouteRef),
  title: "Catalog",
  icon: HomeIcon
});
var navItems = [catalogNavItem];

const catalogAboutEntityCard = createEntityCardExtension({
  name: "about",
  loader: async () => import('./esm/index-6ed25e48.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.AboutCard, { variant: "gridItem" }))
  )
});
const catalogLinksEntityCard = createEntityCardExtension({
  name: "links",
  filter: "has:links",
  loader: async () => import('./esm/index-a2f43c63.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.EntityLinksCard, { variant: "gridItem" }))
  )
});
const catalogLabelsEntityCard = createEntityCardExtension({
  name: "labels",
  filter: "has:labels",
  loader: async () => import('./esm/index-1819df86.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.EntityLabelsCard, { variant: "gridItem" }))
  )
});
const catalogDependsOnComponentsEntityCard = createEntityCardExtension({
  name: "depends-on-components",
  loader: async () => import('./esm/index-5d579387.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.DependsOnComponentsCard, { variant: "gridItem" }))
  )
});
const catalogDependsOnResourcesEntityCard = createEntityCardExtension({
  name: "depends-on-resources",
  loader: async () => import('./esm/index-2ae6a112.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.DependsOnResourcesCard, { variant: "gridItem" }))
  )
});
const catalogHasComponentsEntityCard = createEntityCardExtension({
  name: "has-components",
  loader: async () => import('./esm/index-151a7b53.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.HasComponentsCard, { variant: "gridItem" }))
  )
});
const catalogHasResourcesEntityCard = createEntityCardExtension({
  name: "has-resources",
  loader: async () => import('./esm/index-457f1bef.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.HasResourcesCard, { variant: "gridItem" }))
  )
});
const catalogHasSubcomponentsEntityCard = createEntityCardExtension({
  name: "has-subcomponents",
  loader: async () => import('./esm/index-df2397a2.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.HasSubcomponentsCard, { variant: "gridItem" }))
  )
});
const catalogHasSystemsEntityCard = createEntityCardExtension({
  name: "has-systems",
  loader: async () => import('./esm/index-b87e664e.esm.js').then(
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.HasSystemsCard, { variant: "gridItem" }))
  )
});
var entityCards = [
  catalogAboutEntityCard,
  catalogLinksEntityCard,
  catalogLabelsEntityCard,
  catalogDependsOnComponentsEntityCard,
  catalogDependsOnResourcesEntityCard,
  catalogHasComponentsEntityCard,
  catalogHasResourcesEntityCard,
  catalogHasSubcomponentsEntityCard,
  catalogHasSystemsEntityCard
];

const catalogOverviewEntityContent = createEntityContentExtension({
  name: "overview",
  defaultPath: "/",
  defaultTitle: "Overview",
  disabled: false,
  inputs: {
    cards: createExtensionInput({
      element: coreExtensionData.reactElement,
      filterFunction: catalogExtensionData.entityFilterFunction.optional(),
      filterExpression: catalogExtensionData.entityFilterExpression.optional()
    })
  },
  loader: async ({ inputs }) => import('./esm/EntityOverviewPage-f61e50bf.esm.js').then((m) => /* @__PURE__ */ React.createElement(m.EntityOverviewPage, { cards: inputs.cards.map((c) => c.output) }))
});
var entityContents = [catalogOverviewEntityContent];

const catalogSearchResultListItem = createSearchResultListItemExtension({
  predicate: (result) => result.type === "software-catalog",
  component: () => import('./esm/index-391ccf9c.esm.js').then(
    (m) => m.CatalogSearchResultListItem
  )
});
var searchResultItems = [catalogSearchResultListItem];

var plugin = createPlugin({
  id: "catalog",
  routes: {
    catalogIndex: convertLegacyRouteRef(rootRouteRef),
    catalogEntity: convertLegacyRouteRef(entityRouteRef)
  },
  externalRoutes: {
    viewTechDoc: convertLegacyRouteRef(viewTechDocRouteRef),
    createComponent: convertLegacyRouteRef(createComponentRouteRef),
    createFromTemplate: convertLegacyRouteRef(createFromTemplateRouteRef),
    unregisterRedirect: convertLegacyRouteRef(unregisterRedirectRouteRef)
  },
  extensions: [
    ...apis,
    ...pages,
    ...filters,
    ...navItems,
    ...entityCards,
    ...entityContents,
    ...searchResultItems
  ]
});

export { createCatalogFilterExtension, plugin as default };
//# sourceMappingURL=alpha.esm.js.map
