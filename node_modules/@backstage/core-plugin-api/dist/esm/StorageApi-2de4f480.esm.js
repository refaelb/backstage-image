import React from 'react';
import { useVersionedContext } from '@backstage/version-bridge';

function useApiHolder() {
  const versionedHolder = useVersionedContext("api-context");
  if (!versionedHolder) {
    throw new Error("API context is not available");
  }
  const apiHolder = versionedHolder.atVersion(1);
  if (!apiHolder) {
    throw new Error("ApiContext v1 not available");
  }
  return apiHolder;
}
function useApi(apiRef) {
  const apiHolder = useApiHolder();
  const api = apiHolder.get(apiRef);
  if (!api) {
    throw new Error(`No implementation available for ${apiRef}`);
  }
  return api;
}
function withApis(apis) {
  return function withApisWrapper(WrappedComponent) {
    const Hoc = (props) => {
      const apiHolder = useApiHolder();
      const impls = {};
      for (const key in apis) {
        if (apis.hasOwnProperty(key)) {
          const ref = apis[key];
          const api = apiHolder.get(ref);
          if (!api) {
            throw new Error(`No implementation available for ${ref}`);
          }
          impls[key] = api;
        }
      }
      return /* @__PURE__ */ React.createElement(WrappedComponent, { ...props, ...impls });
    };
    const displayName = WrappedComponent.displayName || WrappedComponent.name || "Component";
    Hoc.displayName = `withApis(${displayName})`;
    return Hoc;
  };
}

class ApiRefImpl {
  constructor(config) {
    this.config = config;
    const valid = config.id.split(".").flatMap((part) => part.split("-")).every((part) => part.match(/^[a-z][a-z0-9]*$/));
    if (!valid) {
      throw new Error(
        `API id must only contain period separated lowercase alphanum tokens with dashes, got '${config.id}'`
      );
    }
  }
  get id() {
    return this.config.id;
  }
  // Utility for getting type of an api, using `typeof apiRef.T`
  get T() {
    throw new Error(`tried to read ApiRef.T of ${this}`);
  }
  toString() {
    return `apiRef{${this.config.id}}`;
  }
}
function createApiRef(config) {
  return new ApiRefImpl(config);
}

var SessionState = /* @__PURE__ */ ((SessionState2) => {
  SessionState2["SignedIn"] = "SignedIn";
  SessionState2["SignedOut"] = "SignedOut";
  return SessionState2;
})(SessionState || {});
const googleAuthApiRef = createApiRef({
  id: "core.auth.google"
});
const githubAuthApiRef = createApiRef({
  id: "core.auth.github"
});
const oktaAuthApiRef = createApiRef({
  id: "core.auth.okta"
});
const gitlabAuthApiRef = createApiRef({
  id: "core.auth.gitlab"
});
const microsoftAuthApiRef = createApiRef({
  id: "core.auth.microsoft"
});
const oneloginAuthApiRef = createApiRef({
  id: "core.auth.onelogin"
});
const bitbucketAuthApiRef = createApiRef({
  id: "core.auth.bitbucket"
});
const bitbucketServerAuthApiRef = createApiRef({
  id: "core.auth.bitbucket-server"
});
const atlassianAuthApiRef = createApiRef({
  id: "core.auth.atlassian"
});

const alertApiRef = createApiRef({
  id: "core.alert"
});

const analyticsApiRef = createApiRef({
  id: "core.analytics"
});

const appThemeApiRef = createApiRef({
  id: "core.apptheme"
});

const configApiRef = createApiRef({
  id: "core.config"
});

const discoveryApiRef = createApiRef({
  id: "core.discovery"
});

const errorApiRef = createApiRef({
  id: "core.error"
});

var FeatureFlagState = /* @__PURE__ */ ((FeatureFlagState2) => {
  FeatureFlagState2[FeatureFlagState2["None"] = 0] = "None";
  FeatureFlagState2[FeatureFlagState2["Active"] = 1] = "Active";
  return FeatureFlagState2;
})(FeatureFlagState || {});
const featureFlagsApiRef = createApiRef({
  id: "core.featureflags"
});

const fetchApiRef = createApiRef({
  id: "core.fetch"
});

const identityApiRef = createApiRef({
  id: "core.identity"
});

const oauthRequestApiRef = createApiRef({
  id: "core.oauthrequest"
});

const storageApiRef = createApiRef({
  id: "core.storage"
});

export { FeatureFlagState as F, SessionState as S, analyticsApiRef as a, useApiHolder as b, createApiRef as c, githubAuthApiRef as d, gitlabAuthApiRef as e, featureFlagsApiRef as f, googleAuthApiRef as g, oneloginAuthApiRef as h, bitbucketAuthApiRef as i, bitbucketServerAuthApiRef as j, atlassianAuthApiRef as k, alertApiRef as l, microsoftAuthApiRef as m, appThemeApiRef as n, oktaAuthApiRef as o, configApiRef as p, discoveryApiRef as q, errorApiRef as r, fetchApiRef as s, identityApiRef as t, useApi as u, oauthRequestApiRef as v, withApis as w, storageApiRef as x };
//# sourceMappingURL=StorageApi-2de4f480.esm.js.map
