'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var router = require('./cjs/router-96222797.cjs.js');
var backendCommon = require('@backstage/backend-common');
var pluginAppNode = require('@backstage/plugin-app-node');
require('helmet');
require('express');
require('express-promise-router');
require('fs-extra');
require('path');
require('@backstage/config-loader');
require('luxon');
require('lodash/partition');
require('globby');

const appPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "app",
  register(env) {
    let staticFallbackHandler;
    env.registerExtensionPoint(pluginAppNode.staticFallbackHandlerExtensionPoint, {
      setStaticFallbackHandler(handler) {
        if (staticFallbackHandler) {
          throw new Error(
            "Attempted to install a static fallback handler for the app-backend twice"
          );
        }
        staticFallbackHandler = handler;
      }
    });
    env.registerInit({
      deps: {
        logger: backendPluginApi.coreServices.logger,
        config: backendPluginApi.coreServices.rootConfig,
        database: backendPluginApi.coreServices.database,
        httpRouter: backendPluginApi.coreServices.httpRouter
      },
      async init({ logger, config, database, httpRouter }) {
        var _a;
        const appPackageName = (_a = config.getOptionalString("app.packageName")) != null ? _a : "app";
        const winstonLogger = backendCommon.loggerToWinstonLogger(logger);
        const router$1 = await router.createRouter({
          logger: winstonLogger,
          config,
          database,
          appPackageName,
          staticFallbackHandler
        });
        httpRouter.use(router$1);
      }
    });
  }
});

exports["default"] = appPlugin;
//# sourceMappingURL=alpha.cjs.js.map
