{"version":3,"file":"alpha.cjs.js","sources":["../src/alpha.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from 'winston';\n\nimport {\n  createServiceRef,\n  createServiceFactory,\n  coreServices,\n} from '@backstage/backend-plugin-api';\nimport { loggerToWinstonLogger } from '@backstage/backend-common';\nimport {\n  DocumentTypeInfo,\n  SearchEngine,\n} from '@backstage/plugin-search-common';\nimport { createExtensionPoint } from '@backstage/backend-plugin-api';\n\nimport {\n  RegisterCollatorParameters,\n  RegisterDecoratorParameters,\n} from '@backstage/plugin-search-backend-node';\n\nimport { IndexBuilder } from './IndexBuilder';\n\n/**\n * @alpha\n * Options for build method on {@link SearchIndexService}.\n */\nexport type SearchIndexServiceStartOptions = {\n  searchEngine: SearchEngine;\n  collators: RegisterCollatorParameters[];\n  decorators: RegisterDecoratorParameters[];\n};\n\n/**\n * @alpha\n * Interface for implementation of index service.\n */\nexport interface SearchIndexService {\n  /**\n   * Starts indexing process\n   */\n  start(options: SearchIndexServiceStartOptions): Promise<void>;\n  /**\n   * Returns an index types list.\n   */\n  getDocumentTypes(): Record<string, DocumentTypeInfo>;\n}\n\n/**\n * @alpha\n * Interface for search index registry extension point.\n */\nexport interface SearchIndexRegistryExtensionPoint {\n  addCollator(options: RegisterCollatorParameters): void;\n  addDecorator(options: RegisterDecoratorParameters): void;\n}\n\n/**\n * @alpha\n * Interface for search engine registry extension point.\n */\nexport interface SearchEngineRegistryExtensionPoint {\n  setSearchEngine(searchEngine: SearchEngine): void;\n}\n\ntype DefaultSearchIndexServiceOptions = {\n  logger: Logger;\n};\n\n/**\n * @alpha\n * Reponsible for register the indexing task and start the schedule.\n */\nclass DefaultSearchIndexService implements SearchIndexService {\n  private logger: Logger;\n  private indexBuilder: IndexBuilder | null = null;\n\n  private constructor(options: DefaultSearchIndexServiceOptions) {\n    this.logger = options.logger;\n  }\n\n  static fromConfig(options: DefaultSearchIndexServiceOptions) {\n    return new DefaultSearchIndexService(options);\n  }\n\n  async start(options: SearchIndexServiceStartOptions): Promise<void> {\n    this.indexBuilder = new IndexBuilder({\n      logger: this.logger,\n      searchEngine: options.searchEngine,\n    });\n\n    options.collators.forEach(collator =>\n      this.indexBuilder?.addCollator(collator),\n    );\n\n    options.decorators.forEach(decorator =>\n      this.indexBuilder?.addDecorator(decorator),\n    );\n\n    const { scheduler } = await this.indexBuilder?.build();\n    scheduler.start();\n  }\n\n  getDocumentTypes(): Record<string, DocumentTypeInfo> {\n    return this.indexBuilder?.getDocumentTypes() ?? {};\n  }\n}\n\n/**\n * @alpha\n * Service that builds a search index.\n */\nexport const searchIndexServiceRef = createServiceRef<SearchIndexService>({\n  id: 'search.index.service',\n  defaultFactory: async service =>\n    createServiceFactory({\n      service,\n      deps: {\n        logger: coreServices.logger,\n      },\n      factory({ logger }) {\n        return DefaultSearchIndexService.fromConfig({\n          logger: loggerToWinstonLogger(logger),\n        });\n      },\n    }),\n});\n\n/**\n * @alpha\n * Extension point for register a search engine.\n */\nexport const searchEngineRegistryExtensionPoint =\n  createExtensionPoint<SearchEngineRegistryExtensionPoint>({\n    id: 'search.engine.registry',\n  });\n\n/**\n * @alpha\n * Extension point for registering collators and decorators\n */\nexport const searchIndexRegistryExtensionPoint =\n  createExtensionPoint<SearchIndexRegistryExtensionPoint>({\n    id: 'search.index.registry',\n  });\n"],"names":["IndexBuilder","_a","createServiceRef","createServiceFactory","coreServices","loggerToWinstonLogger","createExtensionPoint"],"mappings":";;;;;;;;;;;;;;;AAuFA,MAAM,yBAAwD,CAAA;AAAA,EAIpD,YAAY,OAA2C,EAAA;AAH/D,IAAQ,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACR,IAAA,aAAA,CAAA,IAAA,EAAQ,cAAoC,EAAA,IAAA,CAAA,CAAA;AAG1C,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,CAAA;AAAA,GACxB;AAAA,EAEA,OAAO,WAAW,OAA2C,EAAA;AAC3D,IAAO,OAAA,IAAI,0BAA0B,OAAO,CAAA,CAAA;AAAA,GAC9C;AAAA,EAEA,MAAM,MAAM,OAAwD,EAAA;AAnGtE,IAAA,IAAA,EAAA,CAAA;AAoGI,IAAK,IAAA,CAAA,YAAA,GAAe,IAAIA,yBAAa,CAAA;AAAA,MACnC,QAAQ,IAAK,CAAA,MAAA;AAAA,MACb,cAAc,OAAQ,CAAA,YAAA;AAAA,KACvB,CAAA,CAAA;AAED,IAAA,OAAA,CAAQ,SAAU,CAAA,OAAA;AAAA,MAAQ,CAAS,QAAA,KAAA;AAzGvC,QAAAC,IAAAA,GAAAA,CAAAA;AA0GM,QAAA,OAAA,CAAAA,GAAA,GAAA,IAAA,CAAK,YAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAmB,WAAY,CAAA,QAAA,CAAA,CAAA;AAAA,OAAA;AAAA,KACjC,CAAA;AAEA,IAAA,OAAA,CAAQ,UAAW,CAAA,OAAA;AAAA,MAAQ,CAAU,SAAA,KAAA;AA7GzC,QAAAA,IAAAA,GAAAA,CAAAA;AA8GM,QAAA,OAAA,CAAAA,GAAA,GAAA,IAAA,CAAK,YAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAmB,YAAa,CAAA,SAAA,CAAA,CAAA;AAAA,OAAA;AAAA,KAClC,CAAA;AAEA,IAAA,MAAM,EAAE,SAAU,EAAA,GAAI,OAAM,CAAA,EAAA,GAAA,IAAA,CAAK,iBAAL,IAAmB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAC/C,IAAA,SAAA,CAAU,KAAM,EAAA,CAAA;AAAA,GAClB;AAAA,EAEA,gBAAqD,GAAA;AArHvD,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAsHI,IAAA,OAAA,CAAO,EAAK,GAAA,CAAA,EAAA,GAAA,IAAA,CAAA,YAAA,KAAL,IAAmB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,gBAAA,EAAA,KAAnB,YAAyC,EAAC,CAAA;AAAA,GACnD;AACF,CAAA;AAMO,MAAM,wBAAwBC,iCAAqC,CAAA;AAAA,EACxE,EAAI,EAAA,sBAAA;AAAA,EACJ,cAAA,EAAgB,OAAM,OAAA,KACpBC,qCAAqB,CAAA;AAAA,IACnB,OAAA;AAAA,IACA,IAAM,EAAA;AAAA,MACJ,QAAQC,6BAAa,CAAA,MAAA;AAAA,KACvB;AAAA,IACA,OAAA,CAAQ,EAAE,MAAA,EAAU,EAAA;AAClB,MAAA,OAAO,0BAA0B,UAAW,CAAA;AAAA,QAC1C,MAAA,EAAQC,oCAAsB,MAAM,CAAA;AAAA,OACrC,CAAA,CAAA;AAAA,KACH;AAAA,GACD,CAAA;AACL,CAAC,EAAA;AAMM,MAAM,qCACXC,qCAAyD,CAAA;AAAA,EACvD,EAAI,EAAA,wBAAA;AACN,CAAC,EAAA;AAMI,MAAM,oCACXA,qCAAwD,CAAA;AAAA,EACtD,EAAI,EAAA,uBAAA;AACN,CAAC;;;;;;"}