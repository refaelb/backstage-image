{"version":3,"file":"MockTranslationApi-9ee7f90e.esm.js","sources":["../../../core-plugin-api/src/translation/TranslationRef.ts","../../src/testUtils/apis/TranslationApi/MockTranslationApi.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createTranslationResource,\n  TranslationResource,\n} from './TranslationResource';\n\n/** @alpha */\nexport interface TranslationRef<\n  TId extends string = string,\n  TMessages extends { [key in string]: string } = { [key in string]: string },\n> {\n  $$type: '@backstage/TranslationRef';\n\n  id: TId;\n\n  T: TMessages;\n}\n\n/** @internal */\ntype AnyMessages = { [key in string]: string };\n\n/** @ignore */\ntype AnyNestedMessages = { [key in string]: AnyNestedMessages | string };\n\n/**\n * Flattens a nested message declaration into a flat object with dot-separated keys.\n *\n * @ignore\n */\ntype FlattenedMessages<TMessages extends AnyNestedMessages> =\n  // Flatten out object keys into a union structure of objects, e.g. { a: 'a', b: 'b' } -> { a: 'a' } | { b: 'b' }\n  // Any nested object will be flattened into the individual unions, e.g. { a: 'a', b: { x: 'x', y: 'y' } } -> { a: 'a' } | { 'b.x': 'x', 'b.y': 'y' }\n  // We create this structure by first nesting the desired union types into the original object, and\n  // then extract them by indexing with `keyof TMessages` to form the union.\n  // Throughout this the objects are wrapped up in a function parameter, which allows us to have the\n  // final step of flipping this unions around to an intersection by inferring the function parameter.\n  {\n    [TKey in keyof TMessages]: (\n      _: TMessages[TKey] extends infer TValue // \"local variable\" for the value\n        ? TValue extends AnyNestedMessages\n          ? FlattenedMessages<TValue> extends infer TNested // Recurse into nested messages, \"local variable\" for the result\n            ? {\n                [TNestedKey in keyof TNested as `${TKey & string}.${TNestedKey &\n                  string}`]: TNested[TNestedKey];\n              }\n            : never\n          : { [_ in TKey]: TValue } // Primitive object values are passed through with the same key\n        : never,\n    ) => void;\n    // The `[keyof TMessages]` extracts the object values union from our flattened structure, still wrapped up in function parameters.\n    // The `extends (_: infer TIntersection) => void` flips the union to an intersection, at which point we have the correct type.\n  }[keyof TMessages] extends (_: infer TIntersection) => void\n    ? // This object mapping just expands similar to the Expand<> utility type, providing nicer type hints\n      {\n        readonly [TExpandKey in keyof TIntersection]: TIntersection[TExpandKey];\n      }\n    : never;\n\n/** @internal */\nexport interface InternalTranslationRef<\n  TId extends string = string,\n  TMessages extends { [key in string]: string } = { [key in string]: string },\n> extends TranslationRef<TId, TMessages> {\n  version: 'v1';\n\n  getDefaultMessages(): AnyMessages;\n\n  getDefaultResource(): TranslationResource | undefined;\n}\n\n/** @alpha */\nexport interface TranslationRefOptions<\n  TId extends string,\n  TNestedMessages extends AnyNestedMessages,\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default: {\n        [key in keyof FlattenedMessages<TNestedMessages>]: string | null;\n      };\n    }>;\n  },\n> {\n  id: TId;\n  messages: TNestedMessages;\n  translations?: TTranslations;\n}\n\nfunction flattenMessages(nested: AnyNestedMessages): AnyMessages {\n  const entries = new Array<[string, string]>();\n\n  function visit(obj: AnyNestedMessages, prefix: string): void {\n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === 'string') {\n        entries.push([prefix + key, value]);\n      } else {\n        visit(value, `${prefix}${key}.`);\n      }\n    }\n  }\n\n  visit(nested, '');\n\n  return Object.fromEntries(entries);\n}\n\n/** @internal */\nclass TranslationRefImpl<\n  TId extends string,\n  TNestedMessages extends AnyNestedMessages,\n> implements InternalTranslationRef<TId, FlattenedMessages<TNestedMessages>>\n{\n  #id: TId;\n  #messages: FlattenedMessages<TNestedMessages>;\n  #resources: TranslationResource | undefined;\n\n  constructor(options: TranslationRefOptions<TId, TNestedMessages, any>) {\n    this.#id = options.id;\n    this.#messages = flattenMessages(\n      options.messages,\n    ) as FlattenedMessages<TNestedMessages>;\n  }\n\n  $$type = '@backstage/TranslationRef' as const;\n\n  version = 'v1' as const;\n\n  get id(): TId {\n    return this.#id;\n  }\n\n  get T(): never {\n    throw new Error('Not implemented');\n  }\n\n  getDefaultMessages(): AnyMessages {\n    return this.#messages;\n  }\n\n  setDefaultResource(resources: TranslationResource): void {\n    this.#resources = resources;\n  }\n\n  getDefaultResource(): TranslationResource | undefined {\n    return this.#resources;\n  }\n\n  toString() {\n    return `TranslationRef{id=${this.id}}`;\n  }\n}\n\n/** @alpha */\nexport function createTranslationRef<\n  TId extends string,\n  const TNestedMessages extends AnyNestedMessages,\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default: {\n        [key in keyof FlattenedMessages<TNestedMessages>]: string | null;\n      };\n    }>;\n  },\n>(\n  config: TranslationRefOptions<TId, TNestedMessages, TTranslations>,\n): TranslationRef<TId, FlattenedMessages<TNestedMessages>> {\n  const ref = new TranslationRefImpl(config);\n  if (config.translations) {\n    ref.setDefaultResource(\n      createTranslationResource({\n        ref,\n        translations: config.translations as any,\n      }),\n    );\n  }\n  return ref;\n}\n\n/** @internal */\nexport function toInternalTranslationRef<\n  TId extends string,\n  TMessages extends AnyMessages,\n>(ref: TranslationRef<TId, TMessages>): InternalTranslationRef<TId, TMessages> {\n  const r = ref as InternalTranslationRef<TId, TMessages>;\n  if (r.$$type !== '@backstage/TranslationRef') {\n    throw new Error(`Invalid translation ref, bad type '${r.$$type}'`);\n  }\n  if (r.version !== 'v1') {\n    throw new Error(`Invalid translation ref, bad version '${r.version}'`);\n  }\n  return r;\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TranslationApi,\n  TranslationFunction,\n  TranslationRef,\n  TranslationSnapshot,\n} from '@backstage/core-plugin-api/alpha';\nimport { createInstance as createI18n, type i18n as I18n } from 'i18next';\nimport ObservableImpl from 'zen-observable';\n\nimport { Observable } from '@backstage/types';\n// Internal import to avoid code duplication, this will lead to duplication in build output\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalTranslationRef } from '../../../../../core-plugin-api/src/translation/TranslationRef';\n\nconst DEFAULT_LANGUAGE = 'en';\n\n/** @alpha */\nexport class MockTranslationApi implements TranslationApi {\n  static create() {\n    const i18n = createI18n({\n      fallbackLng: DEFAULT_LANGUAGE,\n      supportedLngs: [DEFAULT_LANGUAGE],\n      interpolation: {\n        escapeValue: false,\n      },\n      ns: [],\n      defaultNS: false,\n      fallbackNS: false,\n\n      // Disable resource loading on init, meaning i18n will be ready to use immediately\n      initImmediate: false,\n    });\n\n    i18n.init();\n    if (!i18n.isInitialized) {\n      throw new Error('i18next was unexpectedly not initialized');\n    }\n\n    return new MockTranslationApi(i18n);\n  }\n\n  #i18n: I18n;\n  #registeredRefs = new Set<string>();\n\n  private constructor(i18n: I18n) {\n    this.#i18n = i18n;\n  }\n\n  getTranslation<TMessages extends { [key in string]: string }>(\n    translationRef: TranslationRef<string, TMessages>,\n  ): TranslationSnapshot<TMessages> {\n    const internalRef = toInternalTranslationRef(translationRef);\n\n    if (!this.#registeredRefs.has(internalRef.id)) {\n      this.#registeredRefs.add(internalRef.id);\n      this.#i18n.addResourceBundle(\n        DEFAULT_LANGUAGE,\n        internalRef.id,\n        internalRef.getDefaultMessages(),\n        false, // do not merge\n        true, // overwrite existing\n      );\n    }\n\n    const t = this.#i18n.getFixedT(\n      null,\n      internalRef.id,\n    ) as TranslationFunction<TMessages>;\n\n    return {\n      ready: true,\n      t,\n    };\n  }\n\n  translation$<TMessages extends { [key in string]: string }>(): Observable<\n    TranslationSnapshot<TMessages>\n  > {\n    // No need to implement, getTranslation will always return a ready snapshot\n    return new ObservableImpl<TranslationSnapshot<TMessages>>(_subscriber => {\n      return () => {};\n    });\n  }\n}\n"],"names":["createI18n"],"mappings":"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"}