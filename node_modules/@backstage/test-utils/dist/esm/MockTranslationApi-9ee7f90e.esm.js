import { createInstance } from 'i18next';
import ObservableImpl from 'zen-observable';

function toInternalTranslationRef(ref) {
  const r = ref;
  if (r.$$type !== "@backstage/TranslationRef") {
    throw new Error(`Invalid translation ref, bad type '${r.$$type}'`);
  }
  if (r.version !== "v1") {
    throw new Error(`Invalid translation ref, bad version '${r.version}'`);
  }
  return r;
}

var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var _i18n, _registeredRefs;
const DEFAULT_LANGUAGE = "en";
const _MockTranslationApi = class _MockTranslationApi {
  constructor(i18n) {
    __privateAdd(this, _i18n, void 0);
    __privateAdd(this, _registeredRefs, /* @__PURE__ */ new Set());
    __privateSet(this, _i18n, i18n);
  }
  static create() {
    const i18n = createInstance({
      fallbackLng: DEFAULT_LANGUAGE,
      supportedLngs: [DEFAULT_LANGUAGE],
      interpolation: {
        escapeValue: false
      },
      ns: [],
      defaultNS: false,
      fallbackNS: false,
      // Disable resource loading on init, meaning i18n will be ready to use immediately
      initImmediate: false
    });
    i18n.init();
    if (!i18n.isInitialized) {
      throw new Error("i18next was unexpectedly not initialized");
    }
    return new _MockTranslationApi(i18n);
  }
  getTranslation(translationRef) {
    const internalRef = toInternalTranslationRef(translationRef);
    if (!__privateGet(this, _registeredRefs).has(internalRef.id)) {
      __privateGet(this, _registeredRefs).add(internalRef.id);
      __privateGet(this, _i18n).addResourceBundle(
        DEFAULT_LANGUAGE,
        internalRef.id,
        internalRef.getDefaultMessages(),
        false,
        // do not merge
        true
        // overwrite existing
      );
    }
    const t = __privateGet(this, _i18n).getFixedT(
      null,
      internalRef.id
    );
    return {
      ready: true,
      t
    };
  }
  translation$() {
    return new ObservableImpl((_subscriber) => {
      return () => {
      };
    });
  }
};
_i18n = new WeakMap();
_registeredRefs = new WeakMap();
let MockTranslationApi = _MockTranslationApi;

export { MockTranslationApi as M };
//# sourceMappingURL=MockTranslationApi-9ee7f90e.esm.js.map
