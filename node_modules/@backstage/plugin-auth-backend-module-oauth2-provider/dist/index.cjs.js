'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var passportOauth2 = require('passport-oauth2');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var backendPluginApi = require('@backstage/backend-plugin-api');

const oauth2Authenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  initialize({ callbackUrl, config }) {
    const clientId = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    const authorizationUrl = config.getString("authorizationUrl");
    const tokenUrl = config.getString("tokenUrl");
    const scope = config.getOptionalString("scope");
    const includeBasicAuth = config.getOptionalBoolean("includeBasicAuth");
    return pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new passportOauth2.Strategy(
        {
          clientID: clientId,
          clientSecret,
          callbackURL: callbackUrl,
          authorizationURL: authorizationUrl,
          tokenURL: tokenUrl,
          passReqToCallback: false,
          scope,
          customHeaders: includeBasicAuth ? {
            Authorization: `Basic ${encodeClientCredentials(
              clientId,
              clientSecret
            )}`
          } : void 0
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            { fullProfile, params, accessToken },
            { refreshToken }
          );
        }
      )
    );
  },
  async start(input, helper) {
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent"
    });
  },
  async authenticate(input, helper) {
    return helper.authenticate(input);
  },
  async refresh(input, helper) {
    return helper.refresh(input);
  }
});
function encodeClientCredentials(clientID, clientSecret) {
  return Buffer.from(`${clientID}:${clientSecret}`).toString("base64");
}

exports.oauth2SignInResolvers = void 0;
((oauth2SignInResolvers2) => {
  oauth2SignInResolvers2.usernameMatchingUserEntityName = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const { result } = info;
        const id = result.fullProfile.username;
        if (!id) {
          throw new Error(`Oauth2 user profile does not contain a username`);
        }
        return ctx.signInWithCatalogUser({ entityRef: { name: id } });
      };
    }
  });
})(exports.oauth2SignInResolvers || (exports.oauth2SignInResolvers = {}));

const authModuleOauth2Provider = backendPluginApi.createBackendModule({
  pluginId: "auth",
  moduleId: "oauth2-provider",
  register(reg) {
    reg.registerInit({
      deps: {
        providers: pluginAuthNode.authProvidersExtensionPoint
      },
      async init({ providers }) {
        providers.registerProvider({
          providerId: "oauth2",
          factory: pluginAuthNode.createOAuthProviderFactory({
            authenticator: oauth2Authenticator,
            signInResolverFactories: {
              ...exports.oauth2SignInResolvers,
              ...pluginAuthNode.commonSignInResolvers
            }
          })
        });
      }
    });
  }
});

exports["default"] = authModuleOauth2Provider;
exports.oauth2Authenticator = oauth2Authenticator;
//# sourceMappingURL=index.cjs.js.map
