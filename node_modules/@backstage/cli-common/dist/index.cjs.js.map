{"version":3,"file":"index.cjs.js","sources":["../src/paths.ts","../src/isChildPath.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport { dirname, resolve as resolvePath } from 'path';\n\n/**\n * A function that takes a set of path fragments and resolves them into a\n * single complete path, relative to some root.\n *\n * @public\n */\nexport type ResolveFunc = (...paths: string[]) => string;\n\n/**\n * Common paths and resolve functions used by the cli.\n * Currently assumes it is being executed within a monorepo.\n *\n * @public\n */\nexport type Paths = {\n  // Root dir of the cli itself, containing package.json\n  ownDir: string;\n\n  // Monorepo root dir of the cli itself. Only accessible when running inside Backstage repo.\n  ownRoot: string;\n\n  // The location of the app that the cli is being executed in\n  targetDir: string;\n\n  // The monorepo root package of the app that the cli is being executed in.\n  targetRoot: string;\n\n  // Resolve a path relative to own repo\n  resolveOwn: ResolveFunc;\n\n  // Resolve a path relative to own monorepo root. Only accessible when running inside Backstage repo.\n  resolveOwnRoot: ResolveFunc;\n\n  // Resolve a path relative to the app\n  resolveTarget: ResolveFunc;\n\n  // Resolve a path relative to the app repo root\n  resolveTargetRoot: ResolveFunc;\n};\n\n// Looks for a package.json with a workspace config to identify the root of the monorepo\nexport function findRootPath(\n  searchDir: string,\n  filterFunc: (pkgJsonPath: string) => boolean,\n): string | undefined {\n  let path = searchDir;\n\n  // Some confidence check to avoid infinite loop\n  for (let i = 0; i < 1000; i++) {\n    const packagePath = resolvePath(path, 'package.json');\n    const exists = fs.existsSync(packagePath);\n    if (exists && filterFunc(packagePath)) {\n      return path;\n    }\n\n    const newPath = dirname(path);\n    if (newPath === path) {\n      return undefined;\n    }\n    path = newPath;\n  }\n\n  throw new Error(\n    `Iteration limit reached when searching for root package.json at ${searchDir}`,\n  );\n}\n\n// Finds the root of a given package\nexport function findOwnDir(searchDir: string) {\n  const path = findRootPath(searchDir, () => true);\n  if (!path) {\n    throw new Error(\n      `No package.json found while searching for package root of ${searchDir}`,\n    );\n  }\n  return path;\n}\n\n// Finds the root of the monorepo that the package exists in. Only accessible when running inside Backstage repo.\nexport function findOwnRootDir(ownDir: string) {\n  const isLocal = fs.existsSync(resolvePath(ownDir, 'src'));\n  if (!isLocal) {\n    throw new Error(\n      'Tried to access monorepo package root dir outside of Backstage repository',\n    );\n  }\n\n  return resolvePath(ownDir, '../..');\n}\n\n/**\n * Find paths related to a package and its execution context.\n *\n * @public\n * @example\n *\n * const paths = findPaths(__dirname)\n */\nexport function findPaths(searchDir: string): Paths {\n  const ownDir = findOwnDir(searchDir);\n  // Drive letter can end up being lowercased here on Windows, bring back to uppercase for consistency\n  const targetDir = fs\n    .realpathSync(process.cwd())\n    .replace(/^[a-z]:/, str => str.toLocaleUpperCase('en-US'));\n\n  // Lazy load this as it will throw an error if we're not inside the Backstage repo.\n  let ownRoot = '';\n  const getOwnRoot = () => {\n    if (!ownRoot) {\n      ownRoot = findOwnRootDir(ownDir);\n    }\n    return ownRoot;\n  };\n\n  // We're not always running in a monorepo, so we lazy init this to only crash commands\n  // that require a monorepo when we're not in one.\n  let targetRoot = '';\n  const getTargetRoot = () => {\n    if (!targetRoot) {\n      targetRoot =\n        findRootPath(targetDir, path => {\n          try {\n            const content = fs.readFileSync(path, 'utf8');\n            const data = JSON.parse(content);\n            return Boolean(data.workspaces?.packages);\n          } catch (error) {\n            throw new Error(\n              `Failed to parse package.json file while searching for root, ${error}`,\n            );\n          }\n        }) ?? targetDir; // We didn't find any root package.json, assume we're not in a monorepo\n    }\n    return targetRoot;\n  };\n\n  return {\n    ownDir,\n    get ownRoot() {\n      return getOwnRoot();\n    },\n    targetDir,\n    get targetRoot() {\n      return getTargetRoot();\n    },\n    resolveOwn: (...paths) => resolvePath(ownDir, ...paths),\n    resolveOwnRoot: (...paths) => resolvePath(getOwnRoot(), ...paths),\n    resolveTarget: (...paths) => resolvePath(targetDir, ...paths),\n    resolveTargetRoot: (...paths) => resolvePath(getTargetRoot(), ...paths),\n  };\n}\n\n/**\n * The name of the backstage's config file\n *\n * @public\n */\nexport const BACKSTAGE_JSON = 'backstage.json';\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { relative, isAbsolute } from 'path';\n\n/**\n * Checks if path is the same as or a child path of base.\n *\n * @public\n */\nexport function isChildPath(base: string, path: string): boolean {\n  const relativePath = relative(base, path);\n  if (relativePath === '') {\n    // The same directory\n    return true;\n  }\n\n  const outsideBase = relativePath.startsWith('..'); // not outside base\n  const differentDrive = isAbsolute(relativePath); // on Windows, this means dir is on a different drive from base.\n\n  return !outsideBase && !differentDrive;\n}\n"],"names":["path","resolvePath","fs","dirname","_a","relative","isAbsolute"],"mappings":";;;;;;;;;;;AA4DgB,SAAA,YAAA,CACd,WACA,UACoB,EAAA;AACpB,EAAA,IAAIA,MAAO,GAAA,SAAA,CAAA;AAGX,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,EAAM,CAAK,EAAA,EAAA;AAC7B,IAAM,MAAA,WAAA,GAAcC,YAAY,CAAAD,MAAA,EAAM,cAAc,CAAA,CAAA;AACpD,IAAM,MAAA,MAAA,GAASE,sBAAG,CAAA,UAAA,CAAW,WAAW,CAAA,CAAA;AACxC,IAAI,IAAA,MAAA,IAAU,UAAW,CAAA,WAAW,CAAG,EAAA;AACrC,MAAO,OAAAF,MAAA,CAAA;AAAA,KACT;AAEA,IAAM,MAAA,OAAA,GAAUG,aAAQH,MAAI,CAAA,CAAA;AAC5B,IAAA,IAAI,YAAYA,MAAM,EAAA;AACpB,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT;AACA,IAAOA,MAAA,GAAA,OAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,IAAI,KAAA;AAAA,IACR,mEAAmE,SAAS,CAAA,CAAA;AAAA,GAC9E,CAAA;AACF,CAAA;AAGO,SAAS,WAAW,SAAmB,EAAA;AAC5C,EAAA,MAAM,IAAO,GAAA,YAAA,CAAa,SAAW,EAAA,MAAM,IAAI,CAAA,CAAA;AAC/C,EAAA,IAAI,CAAC,IAAM,EAAA;AACT,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,6DAA6D,SAAS,CAAA,CAAA;AAAA,KACxE,CAAA;AAAA,GACF;AACA,EAAO,OAAA,IAAA,CAAA;AACT,CAAA;AAGO,SAAS,eAAe,MAAgB,EAAA;AAC7C,EAAA,MAAM,UAAUE,sBAAG,CAAA,UAAA,CAAWD,YAAY,CAAA,MAAA,EAAQ,KAAK,CAAC,CAAA,CAAA;AACxD,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,2EAAA;AAAA,KACF,CAAA;AAAA,GACF;AAEA,EAAO,OAAAA,YAAA,CAAY,QAAQ,OAAO,CAAA,CAAA;AACpC,CAAA;AAUO,SAAS,UAAU,SAA0B,EAAA;AAClD,EAAM,MAAA,MAAA,GAAS,WAAW,SAAS,CAAA,CAAA;AAEnC,EAAA,MAAM,SAAY,GAAAC,sBAAA,CACf,YAAa,CAAA,OAAA,CAAQ,GAAI,EAAC,CAC1B,CAAA,OAAA,CAAQ,SAAW,EAAA,CAAA,GAAA,KAAO,GAAI,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAA,CAAA;AAG3D,EAAA,IAAI,OAAU,GAAA,EAAA,CAAA;AACd,EAAA,MAAM,aAAa,MAAM;AACvB,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAA,OAAA,GAAU,eAAe,MAAM,CAAA,CAAA;AAAA,KACjC;AACA,IAAO,OAAA,OAAA,CAAA;AAAA,GACT,CAAA;AAIA,EAAA,IAAI,UAAa,GAAA,EAAA,CAAA;AACjB,EAAA,MAAM,gBAAgB,MAAM;AAxI9B,IAAA,IAAA,EAAA,CAAA;AAyII,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MACE,UAAA,GAAA,CAAA,EAAA,GAAA,YAAA,CAAa,WAAW,CAAQ,IAAA,KAAA;AA3IxC,QAAAE,IAAAA,GAAAA,CAAAA;AA4IU,QAAI,IAAA;AACF,UAAA,MAAM,OAAU,GAAAF,sBAAA,CAAG,YAAa,CAAA,IAAA,EAAM,MAAM,CAAA,CAAA;AAC5C,UAAM,MAAA,IAAA,GAAO,IAAK,CAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AAC/B,UAAA,OAAO,SAAQE,GAAA,GAAA,IAAA,CAAK,UAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAiB,QAAQ,CAAA,CAAA;AAAA,iBACjC,KAAO,EAAA;AACd,UAAA,MAAM,IAAI,KAAA;AAAA,YACR,+DAA+D,KAAK,CAAA,CAAA;AAAA,WACtE,CAAA;AAAA,SACF;AAAA,OACD,MAVD,IAUM,GAAA,EAAA,GAAA,SAAA,CAAA;AAAA,KACV;AACA,IAAO,OAAA,UAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAO,OAAA;AAAA,IACL,MAAA;AAAA,IACA,IAAI,OAAU,GAAA;AACZ,MAAA,OAAO,UAAW,EAAA,CAAA;AAAA,KACpB;AAAA,IACA,SAAA;AAAA,IACA,IAAI,UAAa,GAAA;AACf,MAAA,OAAO,aAAc,EAAA,CAAA;AAAA,KACvB;AAAA,IACA,YAAY,CAAI,GAAA,KAAA,KAAUH,YAAY,CAAA,MAAA,EAAQ,GAAG,KAAK,CAAA;AAAA,IACtD,gBAAgB,CAAI,GAAA,KAAA,KAAUA,aAAY,UAAW,EAAA,EAAG,GAAG,KAAK,CAAA;AAAA,IAChE,eAAe,CAAI,GAAA,KAAA,KAAUA,YAAY,CAAA,SAAA,EAAW,GAAG,KAAK,CAAA;AAAA,IAC5D,mBAAmB,CAAI,GAAA,KAAA,KAAUA,aAAY,aAAc,EAAA,EAAG,GAAG,KAAK,CAAA;AAAA,GACxE,CAAA;AACF,CAAA;AAOO,MAAM,cAAiB,GAAA;;ACxJd,SAAA,WAAA,CAAY,MAAcD,MAAuB,EAAA;AAC/D,EAAM,MAAA,YAAA,GAAeK,aAAS,CAAA,IAAA,EAAML,MAAI,CAAA,CAAA;AACxC,EAAA,IAAI,iBAAiB,EAAI,EAAA;AAEvB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EAAM,MAAA,WAAA,GAAc,YAAa,CAAA,UAAA,CAAW,IAAI,CAAA,CAAA;AAChD,EAAM,MAAA,cAAA,GAAiBM,gBAAW,YAAY,CAAA,CAAA;AAE9C,EAAO,OAAA,CAAC,eAAe,CAAC,cAAA,CAAA;AAC1B;;;;;;"}