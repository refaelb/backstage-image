{"version":3,"file":"index.cjs.js","sources":["../src/processors/AzureDevOpsDiscoveryProcessor.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  AzureDevOpsCredentialsProvider,\n  DefaultAzureDevOpsCredentialsProvider,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { Logger } from 'winston';\nimport { codeSearch } from '../lib';\n\n/**\n * Extracts repositories out of an Azure DevOps org.\n *\n * The following will create locations for all projects which have a catalog-info.yaml\n * on the default branch. The first is shorthand for the second.\n *\n *    target: \"https://dev.azure.com/org/project\"\n *    or\n *    target: https://dev.azure.com/org/project?path=/catalog-info.yaml\n *\n * You may also explicitly specify a single repo:\n *\n *    target: https://dev.azure.com/org/project/_git/repo\n *\n * @public\n */\nexport class AzureDevOpsDiscoveryProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly credentialsProvider: AzureDevOpsCredentialsProvider;\n  private readonly logger: Logger;\n\n  static fromConfig(config: Config, options: { logger: Logger }) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new AzureDevOpsDiscoveryProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: Logger;\n  }) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.credentialsProvider =\n      DefaultAzureDevOpsCredentialsProvider.fromIntegrations(\n        options.integrations,\n      );\n  }\n\n  getProcessorName(): string {\n    return 'AzureDevOpsDiscoveryProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'azure-discovery') {\n      return false;\n    }\n\n    const azureConfig = this.integrations.azure.byUrl(location.target)?.config;\n    if (!azureConfig) {\n      throw new Error(\n        `There is no Azure integration that matches ${location.target}. Please add a configuration entry for it under integrations.azure`,\n      );\n    }\n\n    const { baseUrl, org, project, repo, catalogPath, branch } = parseUrl(\n      location.target,\n    );\n    this.logger.info(\n      `Reading Azure DevOps repositories from ${location.target}`,\n    );\n\n    const files = await codeSearch(\n      this.credentialsProvider,\n      azureConfig,\n      org,\n      project,\n      repo,\n      catalogPath,\n      branch,\n    );\n\n    this.logger.debug(\n      `Found ${files.length} files in Azure DevOps from ${location.target}.`,\n    );\n\n    for (const file of files) {\n      let target = `${baseUrl}/${org}/${project}/_git/${file.repository.name}?path=${file.path}`;\n\n      if (branch) {\n        target += `&version=GB${branch}`;\n      }\n\n      emit(\n        processingResult.location({\n          type: 'url',\n          target,\n          // Not all locations may actually exist, since the user defined them as a wildcard pattern.\n          // Thus, we emit them as optional and let the downstream processor find them while not outputting\n          // an error if it couldn't.\n          presence: 'optional',\n        }),\n      );\n    }\n\n    return true;\n  }\n}\n\n/**\n * parseUrl extracts segments from the Azure DevOps URL.\n */\nexport function parseUrl(urlString: string): {\n  baseUrl: string;\n  org: string;\n  project: string;\n  repo: string;\n  catalogPath: string;\n  branch: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.slice(1).split('/');\n\n  const catalogPath = url.searchParams.get('path') || '/catalog-info.yaml';\n  let branch = url.searchParams.get('version') || '';\n\n  if (branch.startsWith('GB')) {\n    // DevOps prefixes branch names with 'GB' in URLs\n    branch = branch.slice(2);\n  }\n\n  if (path.length === 2 && path[0].length && path[1].length) {\n    return {\n      baseUrl: url.origin,\n      org: decodeURIComponent(path[0]),\n      project: decodeURIComponent(path[1]),\n      repo: '',\n      catalogPath,\n      branch,\n    };\n  } else if (\n    path.length === 4 &&\n    path[0].length &&\n    path[1].length &&\n    path[2].length &&\n    path[3].length\n  ) {\n    return {\n      baseUrl: url.origin,\n      org: decodeURIComponent(path[0]),\n      project: decodeURIComponent(path[1]),\n      repo: decodeURIComponent(path[3]),\n      catalogPath,\n      branch,\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n"],"names":["DefaultAzureDevOpsCredentialsProvider","ScmIntegrations","codeSearch","processingResult"],"mappings":"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"}