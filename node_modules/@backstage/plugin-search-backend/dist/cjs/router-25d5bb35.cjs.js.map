{"version":3,"file":"router-25d5bb35.cjs.js","sources":["../../src/service/AuthorizedSearchEngine.ts","../../src/schema/openapi.generated.ts","../../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { compact, zipObject } from 'lodash';\nimport qs from 'qs';\nimport DataLoader from 'dataloader';\nimport {\n  EvaluatePermissionResponse,\n  EvaluatePermissionRequest,\n  AuthorizeResult,\n  isResourcePermission,\n  PermissionEvaluator,\n  AuthorizePermissionRequest,\n  QueryPermissionRequest,\n} from '@backstage/plugin-permission-common';\nimport {\n  DocumentTypeInfo,\n  IndexableResult,\n  IndexableResultSet,\n  QueryRequestOptions,\n  QueryTranslator,\n  SearchEngine,\n  SearchQuery,\n} from '@backstage/plugin-search-common';\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport { Writable } from 'stream';\n\nexport function decodePageCursor(pageCursor?: string): { page: number } {\n  if (!pageCursor) {\n    return { page: 0 };\n  }\n\n  const page = Number(Buffer.from(pageCursor, 'base64').toString('utf-8'));\n  if (isNaN(page)) {\n    throw new InputError('Invalid page cursor');\n  }\n\n  if (page < 0) {\n    throw new InputError('Invalid page cursor');\n  }\n\n  return {\n    page,\n  };\n}\n\nexport function encodePageCursor({ page }: { page: number }): string {\n  return Buffer.from(`${page}`, 'utf-8').toString('base64');\n}\n\nexport class AuthorizedSearchEngine implements SearchEngine {\n  private readonly pageSize = 25;\n  private readonly queryLatencyBudgetMs: number;\n\n  constructor(\n    private readonly searchEngine: SearchEngine,\n    private readonly types: Record<string, DocumentTypeInfo>,\n    private readonly permissions: PermissionEvaluator,\n    config: Config,\n  ) {\n    this.queryLatencyBudgetMs =\n      config.getOptionalNumber('search.permissions.queryLatencyBudgetMs') ??\n      1000;\n  }\n\n  setTranslator(translator: QueryTranslator): void {\n    this.searchEngine.setTranslator(translator);\n  }\n\n  async getIndexer(type: string): Promise<Writable> {\n    return this.searchEngine.getIndexer(type);\n  }\n\n  async query(\n    query: SearchQuery,\n    options: QueryRequestOptions,\n  ): Promise<IndexableResultSet> {\n    const queryStartTime = Date.now();\n\n    const conditionFetcher = new DataLoader(\n      (requests: readonly QueryPermissionRequest[]) =>\n        this.permissions.authorizeConditional(requests.slice(), options),\n      {\n        cacheKeyFn: ({ permission: { name } }) => name,\n      },\n    );\n\n    const authorizer = new DataLoader(\n      (requests: readonly AuthorizePermissionRequest[]) =>\n        this.permissions.authorize(requests.slice(), options),\n      {\n        // Serialize the permission name and resourceRef as\n        // a query string to avoid collisions from overlapping\n        // permission names and resourceRefs.\n        cacheKeyFn: ({ permission: { name }, resourceRef }) =>\n          qs.stringify({ name, resourceRef }),\n      },\n    );\n\n    const requestedTypes = query.types || Object.keys(this.types);\n\n    const typeDecisions = zipObject(\n      requestedTypes,\n      await Promise.all(\n        requestedTypes.map(type => {\n          const permission = this.types[type]?.visibilityPermission;\n\n          // No permission configured for this document type - always allow.\n          if (!permission) {\n            return { result: AuthorizeResult.ALLOW as const };\n          }\n\n          // Resource permission supplied, so we need to check for conditional decisions.\n          if (isResourcePermission(permission)) {\n            return conditionFetcher.load({ permission });\n          }\n\n          // Non-resource permission supplied - we can perform a standard authorization.\n          return authorizer.load({ permission });\n        }),\n      ),\n    );\n\n    const authorizedTypes = requestedTypes.filter(\n      type => typeDecisions[type]?.result !== AuthorizeResult.DENY,\n    );\n\n    const resultByResultFilteringRequired = authorizedTypes.some(\n      type => typeDecisions[type]?.result === AuthorizeResult.CONDITIONAL,\n    );\n\n    // When there are no CONDITIONAL decisions for any of the requested\n    // result types, we can skip filtering result by result by simply\n    // skipping the types the user is not permitted to see, which will\n    // be much more efficient.\n    //\n    // Since it's not currently possible to configure the page size used\n    // by search engines, this detail means that a single user might see\n    // a different page size depending on whether their search required\n    // result-by-result filtering or not. We can fix this minor\n    // inconsistency by introducing a configurable page size.\n    //\n    // cf. https://github.com/backstage/backstage/issues/9162\n    if (!resultByResultFilteringRequired) {\n      return this.searchEngine.query(\n        { ...query, types: authorizedTypes },\n        options,\n      );\n    }\n\n    const { page } = decodePageCursor(query.pageCursor);\n    const targetResults = (page + 1) * this.pageSize;\n\n    let filteredResults: IndexableResult[] = [];\n    let nextPageCursor: string | undefined;\n    let latencyBudgetExhausted = false;\n\n    do {\n      const nextPage = await this.searchEngine.query(\n        { ...query, types: authorizedTypes, pageCursor: nextPageCursor },\n        options,\n      );\n\n      filteredResults = filteredResults.concat(\n        await this.filterResults(nextPage.results, typeDecisions, authorizer),\n      );\n\n      nextPageCursor = nextPage.nextPageCursor;\n      latencyBudgetExhausted =\n        Date.now() - queryStartTime > this.queryLatencyBudgetMs;\n    } while (\n      nextPageCursor &&\n      filteredResults.length < targetResults &&\n      !latencyBudgetExhausted\n    );\n\n    return {\n      results: filteredResults\n        .slice(page * this.pageSize, (page + 1) * this.pageSize)\n        .map((result, index) => {\n          // Overwrite any/all rank entries to avoid leaking knowledge of filtered results.\n          return {\n            ...result,\n            rank: page * this.pageSize + index + 1,\n          };\n        }),\n      previousPageCursor:\n        page === 0 ? undefined : encodePageCursor({ page: page - 1 }),\n      nextPageCursor:\n        !latencyBudgetExhausted &&\n        (nextPageCursor || filteredResults.length > targetResults)\n          ? encodePageCursor({ page: page + 1 })\n          : undefined,\n      numberOfResults: undefined,\n    };\n  }\n\n  private async filterResults(\n    results: IndexableResult[],\n    typeDecisions: Record<string, EvaluatePermissionResponse>,\n    authorizer: DataLoader<\n      EvaluatePermissionRequest,\n      EvaluatePermissionResponse\n    >,\n  ) {\n    return compact(\n      await Promise.all(\n        results.map(result => {\n          if (typeDecisions[result.type]?.result === AuthorizeResult.ALLOW) {\n            return result;\n          }\n\n          const permission = this.types[result.type]?.visibilityPermission;\n          const resourceRef = result.document.authorization?.resourceRef;\n\n          if (!permission || !resourceRef) {\n            return result;\n          }\n\n          // We only reach this point in the code for types where the initial\n          // authorization returned CONDITIONAL -- ALLOWs return early\n          // immediately above, and types where the decision was DENY get\n          // filtered out entirely when querying.\n          //\n          // This means the call to isResourcePermission here is mostly about\n          // narrowing the type of permission - the only way to get here with a\n          // non-resource permission is if the PermissionPolicy returns a\n          // CONDITIONAL decision for a non-resource permission, which can't\n          // happen - it would throw an error during validation in the\n          // permission-backend.\n          if (!isResourcePermission(permission)) {\n            throw new Error(\n              `Unexpected conditional decision returned for non-resource permission \"${permission.name}\"`,\n            );\n          }\n\n          return authorizer\n            .load({ permission, resourceRef })\n            .then(decision =>\n              decision.result === AuthorizeResult.ALLOW ? result : undefined,\n            );\n        }),\n      ),\n    );\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// ******************************************************************\n// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *\n// ******************************************************************\nimport { createValidatedOpenApiRouter } from '@backstage/backend-openapi-utils';\n\nexport const spec = {\n  openapi: '3.0.3',\n  info: {\n    title: '@backstage/plugin-search-backend',\n    version: '1',\n    description:\n      'The Backstage backend plugin that provides search functionality.',\n    license: {\n      name: 'Apache-2.0',\n      url: 'http://www.apache.org/licenses/LICENSE-2.0.html',\n    },\n    contact: {},\n  },\n  servers: [\n    {\n      url: '/',\n    },\n  ],\n  components: {\n    examples: {},\n    headers: {},\n    parameters: {},\n    requestBodies: {},\n    responses: {\n      ErrorResponse: {\n        description: 'An error response from the backend.',\n        content: {\n          'application/json; charset=utf-8': {\n            schema: {\n              $ref: '#/components/schemas/Error',\n            },\n          },\n        },\n      },\n    },\n    schemas: {\n      Error: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              name: {\n                type: 'string',\n              },\n              message: {\n                type: 'string',\n              },\n            },\n            required: ['name', 'message'],\n          },\n          request: {\n            type: 'object',\n            properties: {\n              method: {\n                type: 'string',\n              },\n              url: {\n                type: 'string',\n              },\n            },\n            required: ['method', 'url'],\n          },\n          response: {\n            type: 'object',\n            properties: {\n              statusCode: {\n                type: 'number',\n              },\n            },\n            required: ['statusCode'],\n          },\n        },\n        required: ['error', 'request', 'response'],\n      },\n      JsonObject: {\n        type: 'object',\n        properties: {},\n        additionalProperties: {},\n      },\n    },\n    securitySchemes: {\n      JWT: {\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'JWT',\n      },\n    },\n  },\n  paths: {\n    '/query': {\n      get: {\n        operationId: 'Query',\n        description: 'Query documents with a given filter.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    results: {\n                      type: 'array',\n                      items: {\n                        type: 'object',\n                        properties: {\n                          type: {\n                            type: 'string',\n                            description: 'The \"type\" of the given document.',\n                          },\n                          document: {\n                            type: 'object',\n                            description:\n                              'The raw value of the document, as indexed.',\n                            properties: {\n                              title: {\n                                type: 'string',\n                                description:\n                                  'The primary name of the document (e.g. name, title, identifier, etc).',\n                              },\n                              text: {\n                                type: 'string',\n                                description:\n                                  'Free-form text of the document (e.g. description, content, etc).',\n                              },\n                              location: {\n                                type: 'string',\n                                description:\n                                  'The relative or absolute URL of the document (target when a search result is clicked).',\n                              },\n                            },\n                          },\n                          highlight: {\n                            type: 'object',\n                            description:\n                              'Optional result highlight. Useful for improving the search result\\ndisplay/experience.',\n                          },\n                          rank: {\n                            type: 'integer',\n                            description:\n                              'Optional result rank, where 1 is the first/top result returned. \\nUseful for understanding search effectiveness in analytics.',\n                          },\n                        },\n                        required: ['type', 'document'],\n                        additionalProperties: false,\n                      },\n                    },\n                    nextPageCursor: {\n                      type: 'string',\n                    },\n                    previousPageCursor: {\n                      type: 'string',\n                    },\n                    numberOfResults: {\n                      type: 'integer',\n                    },\n                  },\n                  required: ['results'],\n                },\n              },\n            },\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            name: 'term',\n            in: 'query',\n            required: false,\n            schema: {\n              type: 'string',\n              default: '',\n            },\n          },\n          {\n            name: 'filters',\n            in: 'query',\n            required: false,\n            style: 'deepObject',\n            explode: true,\n            schema: {\n              $ref: '#/components/schemas/JsonObject',\n            },\n          },\n          {\n            name: 'types',\n            in: 'query',\n            required: false,\n            schema: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n          },\n          {\n            name: 'pageCursor',\n            in: 'query',\n            required: false,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            name: 'pageLimit',\n            in: 'query',\n            required: false,\n            schema: {\n              type: 'integer',\n            },\n          },\n        ],\n      },\n    },\n  },\n} as const;\nexport const createOpenApiRouter = async (\n  options?: Parameters<typeof createValidatedOpenApiRouter>['1'],\n) => createValidatedOpenApiRouter<typeof spec>(spec, options);\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport { Logger } from 'winston';\nimport { z } from 'zod';\nimport { errorHandler } from '@backstage/backend-common';\nimport { InputError } from '@backstage/errors';\nimport { Config } from '@backstage/config';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { getBearerTokenFromAuthorizationHeader } from '@backstage/plugin-auth-node';\nimport {\n  PermissionAuthorizer,\n  PermissionEvaluator,\n  toPermissionEvaluator,\n} from '@backstage/plugin-permission-common';\nimport {\n  DocumentTypeInfo,\n  IndexableResultSet,\n  SearchResultSet,\n} from '@backstage/plugin-search-common';\nimport { SearchEngine } from '@backstage/plugin-search-common';\nimport { AuthorizedSearchEngine } from './AuthorizedSearchEngine';\nimport { createOpenApiRouter } from '../schema/openapi.generated';\n\nconst jsonObjectSchema: z.ZodSchema<JsonObject> = z.lazy(() => {\n  const jsonValueSchema: z.ZodSchema<JsonValue> = z.lazy(() =>\n    z.union([\n      z.string(),\n      z.number(),\n      z.boolean(),\n      z.null(),\n      z.array(jsonValueSchema),\n      jsonObjectSchema,\n    ]),\n  );\n\n  return z.record(jsonValueSchema);\n});\n\n/**\n * @public\n */\nexport type RouterOptions = {\n  engine: SearchEngine;\n  types: Record<string, DocumentTypeInfo>;\n  permissions: PermissionEvaluator | PermissionAuthorizer;\n  config: Config;\n  logger: Logger;\n};\n\nconst defaultMaxPageLimit = 100;\nconst defaultMaxTermLength = 100;\nconst allowedLocationProtocols = ['http:', 'https:'];\n\n/**\n * @public\n */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const router = await createOpenApiRouter();\n  const { engine: inputEngine, types, permissions, config, logger } = options;\n\n  const maxPageLimit =\n    config.getOptionalNumber('search.maxPageLimit') ?? defaultMaxPageLimit;\n\n  const maxTermLength =\n    config.getOptionalNumber('search.maxTermLength') ?? defaultMaxTermLength;\n\n  const requestSchema = z.object({\n    term: z\n      .string()\n      .refine(\n        term => term.length <= maxTermLength,\n        term => ({\n          message: `The term length \"${term.length}\" is greater than \"${maxTermLength}\"`,\n        }),\n      )\n      .default(''),\n    filters: jsonObjectSchema.optional(),\n    types: z\n      .array(z.string().refine(type => Object.keys(types).includes(type)))\n      .optional(),\n    pageCursor: z.string().optional(),\n    pageLimit: z\n      .number()\n      .refine(\n        pageLimit => pageLimit <= maxPageLimit,\n        pageLimit => ({\n          message: `The page limit \"${pageLimit}\" is greater than \"${maxPageLimit}\"`,\n        }),\n      )\n      .optional(),\n  });\n\n  let permissionEvaluator: PermissionEvaluator;\n  if ('authorizeConditional' in permissions) {\n    permissionEvaluator = permissions as PermissionEvaluator;\n  } else {\n    logger.warn(\n      'PermissionAuthorizer is deprecated. Please use an instance of PermissionEvaluator instead of PermissionAuthorizer in PluginEnvironment#permissions',\n    );\n    permissionEvaluator = toPermissionEvaluator(permissions);\n  }\n\n  const engine = config.getOptionalBoolean('permission.enabled')\n    ? new AuthorizedSearchEngine(\n        inputEngine,\n        types,\n        permissionEvaluator,\n        config,\n      )\n    : inputEngine;\n\n  const filterResultSet = ({ results, ...resultSet }: SearchResultSet) => ({\n    ...resultSet,\n    results: results.filter(result => {\n      const protocol = new URL(result.document.location, 'https://example.com')\n        .protocol;\n      const isAllowed = allowedLocationProtocols.includes(protocol);\n      if (!isAllowed) {\n        logger.info(\n          `Rejected search result for \"${result.document.title}\" as location protocol \"${protocol}\" is unsafe`,\n        );\n      }\n      return isAllowed;\n    }),\n  });\n\n  const toSearchResults = (resultSet: IndexableResultSet): SearchResultSet => ({\n    ...resultSet,\n    results: resultSet.results.map(result => ({\n      ...result,\n      document: {\n        ...result.document,\n        authorization: undefined,\n      },\n    })),\n  });\n\n  router.get('/query', async (req, res) => {\n    const parseResult = requestSchema.passthrough().safeParse(req.query);\n\n    if (!parseResult.success) {\n      throw new InputError(`Invalid query string: ${parseResult.error}`);\n    }\n\n    const query = parseResult.data;\n\n    logger.info(\n      `Search request received: term=\"${query.term}\", filters=${JSON.stringify(\n        query.filters,\n      )}, types=${query.types ? query.types.join(',') : ''}, pageCursor=${\n        query.pageCursor ?? ''\n      }`,\n    );\n\n    const token = getBearerTokenFromAuthorizationHeader(\n      req.header('authorization'),\n    );\n\n    try {\n      const resultSet = await engine?.query(query, { token });\n\n      res.json(filterResultSet(toSearchResults(resultSet)));\n    } catch (error) {\n      if (error.name === 'MissingIndexError') {\n        // re-throw and let the default error handler middleware captures it and serializes it with the right response code on the standard form\n        throw error;\n      }\n\n      throw new Error(\n        `There was a problem performing the search query: ${error.message}`,\n      );\n    }\n  });\n\n  router.use(errorHandler());\n\n  return router;\n}\n"],"names":["InputError","DataLoader","qs","zipObject","AuthorizeResult","isResourcePermission","compact","createValidatedOpenApiRouter","z","toPermissionEvaluator","_a","getBearerTokenFromAuthorizationHeader","errorHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAyCO,SAAS,iBAAiB,UAAuC,EAAA;AACtE,EAAA,IAAI,CAAC,UAAY,EAAA;AACf,IAAO,OAAA,EAAE,MAAM,CAAE,EAAA,CAAA;AAAA,GACnB;AAEA,EAAM,MAAA,IAAA,GAAO,OAAO,MAAO,CAAA,IAAA,CAAK,YAAY,QAAQ,CAAA,CAAE,QAAS,CAAA,OAAO,CAAC,CAAA,CAAA;AACvE,EAAI,IAAA,KAAA,CAAM,IAAI,CAAG,EAAA;AACf,IAAM,MAAA,IAAIA,kBAAW,qBAAqB,CAAA,CAAA;AAAA,GAC5C;AAEA,EAAA,IAAI,OAAO,CAAG,EAAA;AACZ,IAAM,MAAA,IAAIA,kBAAW,qBAAqB,CAAA,CAAA;AAAA,GAC5C;AAEA,EAAO,OAAA;AAAA,IACL,IAAA;AAAA,GACF,CAAA;AACF,CAAA;AAEgB,SAAA,gBAAA,CAAiB,EAAE,IAAA,EAAkC,EAAA;AACnE,EAAO,OAAA,MAAA,CAAO,KAAK,CAAG,EAAA,IAAI,IAAI,OAAO,CAAA,CAAE,SAAS,QAAQ,CAAA,CAAA;AAC1D,CAAA;AAEO,MAAM,sBAA+C,CAAA;AAAA,EAI1D,WACmB,CAAA,YAAA,EACA,KACA,EAAA,WAAA,EACjB,MACA,EAAA;AAJiB,IAAA,IAAA,CAAA,YAAA,GAAA,YAAA,CAAA;AACA,IAAA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;AACA,IAAA,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA;AANnB,IAAA,aAAA,CAAA,IAAA,EAAiB,UAAW,EAAA,EAAA,CAAA,CAAA;AAC5B,IAAiB,aAAA,CAAA,IAAA,EAAA,sBAAA,CAAA,CAAA;AAlEnB,IAAA,IAAA,EAAA,CAAA;AA0EI,IAAA,IAAA,CAAK,oBACH,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,iBAAkB,CAAA,yCAAyC,MAAlE,IACA,GAAA,EAAA,GAAA,GAAA,CAAA;AAAA,GACJ;AAAA,EAEA,cAAc,UAAmC,EAAA;AAC/C,IAAK,IAAA,CAAA,YAAA,CAAa,cAAc,UAAU,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEA,MAAM,WAAW,IAAiC,EAAA;AAChD,IAAO,OAAA,IAAA,CAAK,YAAa,CAAA,UAAA,CAAW,IAAI,CAAA,CAAA;AAAA,GAC1C;AAAA,EAEA,MAAM,KACJ,CAAA,KAAA,EACA,OAC6B,EAAA;AAC7B,IAAM,MAAA,cAAA,GAAiB,KAAK,GAAI,EAAA,CAAA;AAEhC,IAAA,MAAM,mBAAmB,IAAIC,8BAAA;AAAA,MAC3B,CAAC,aACC,IAAK,CAAA,WAAA,CAAY,qBAAqB,QAAS,CAAA,KAAA,IAAS,OAAO,CAAA;AAAA,MACjE;AAAA,QACE,YAAY,CAAC,EAAE,YAAY,EAAE,IAAA,IAAa,KAAA,IAAA;AAAA,OAC5C;AAAA,KACF,CAAA;AAEA,IAAA,MAAM,aAAa,IAAIA,8BAAA;AAAA,MACrB,CAAC,aACC,IAAK,CAAA,WAAA,CAAY,UAAU,QAAS,CAAA,KAAA,IAAS,OAAO,CAAA;AAAA,MACtD;AAAA;AAAA;AAAA;AAAA,QAIE,UAAY,EAAA,CAAC,EAAE,UAAA,EAAY,EAAE,IAAK,EAAA,EAAG,WAAY,EAAA,KAC/CC,sBAAG,CAAA,SAAA,CAAU,EAAE,IAAA,EAAM,aAAa,CAAA;AAAA,OACtC;AAAA,KACF,CAAA;AAEA,IAAA,MAAM,iBAAiB,KAAM,CAAA,KAAA,IAAS,MAAO,CAAA,IAAA,CAAK,KAAK,KAAK,CAAA,CAAA;AAE5D,IAAA,MAAM,aAAgB,GAAAC,gBAAA;AAAA,MACpB,cAAA;AAAA,MACA,MAAM,OAAQ,CAAA,GAAA;AAAA,QACZ,cAAA,CAAe,IAAI,CAAQ,IAAA,KAAA;AAtHnC,UAAA,IAAA,EAAA,CAAA;AAuHU,UAAA,MAAM,UAAa,GAAA,CAAA,EAAA,GAAA,IAAA,CAAK,KAAM,CAAA,IAAI,MAAf,IAAkB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,oBAAA,CAAA;AAGrC,UAAA,IAAI,CAAC,UAAY,EAAA;AACf,YAAO,OAAA,EAAE,MAAQ,EAAAC,sCAAA,CAAgB,KAAe,EAAA,CAAA;AAAA,WAClD;AAGA,UAAI,IAAAC,2CAAA,CAAqB,UAAU,CAAG,EAAA;AACpC,YAAA,OAAO,gBAAiB,CAAA,IAAA,CAAK,EAAE,UAAA,EAAY,CAAA,CAAA;AAAA,WAC7C;AAGA,UAAA,OAAO,UAAW,CAAA,IAAA,CAAK,EAAE,UAAA,EAAY,CAAA,CAAA;AAAA,SACtC,CAAA;AAAA,OACH;AAAA,KACF,CAAA;AAEA,IAAA,MAAM,kBAAkB,cAAe,CAAA,MAAA;AAAA,MACrC,CAAK,IAAA,KAAA;AA1IX,QAAA,IAAA,EAAA,CAAA;AA0Ic,QAAA,OAAA,CAAA,CAAA,EAAA,GAAA,aAAA,CAAc,IAAI,CAAA,KAAlB,IAAqB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,MAAWD,sCAAgB,CAAA,IAAA,CAAA;AAAA,OAAA;AAAA,KAC1D,CAAA;AAEA,IAAA,MAAM,kCAAkC,eAAgB,CAAA,IAAA;AAAA,MACtD,CAAK,IAAA,KAAA;AA9IX,QAAA,IAAA,EAAA,CAAA;AA8Ic,QAAA,OAAA,CAAA,CAAA,EAAA,GAAA,aAAA,CAAc,IAAI,CAAA,KAAlB,IAAqB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,MAAWA,sCAAgB,CAAA,WAAA,CAAA;AAAA,OAAA;AAAA,KAC1D,CAAA;AAcA,IAAA,IAAI,CAAC,+BAAiC,EAAA;AACpC,MAAA,OAAO,KAAK,YAAa,CAAA,KAAA;AAAA,QACvB,EAAE,GAAG,KAAO,EAAA,KAAA,EAAO,eAAgB,EAAA;AAAA,QACnC,OAAA;AAAA,OACF,CAAA;AAAA,KACF;AAEA,IAAA,MAAM,EAAE,IAAA,EAAS,GAAA,gBAAA,CAAiB,MAAM,UAAU,CAAA,CAAA;AAClD,IAAM,MAAA,aAAA,GAAA,CAAiB,IAAO,GAAA,CAAA,IAAK,IAAK,CAAA,QAAA,CAAA;AAExC,IAAA,IAAI,kBAAqC,EAAC,CAAA;AAC1C,IAAI,IAAA,cAAA,CAAA;AACJ,IAAA,IAAI,sBAAyB,GAAA,KAAA,CAAA;AAE7B,IAAG,GAAA;AACD,MAAM,MAAA,QAAA,GAAW,MAAM,IAAA,CAAK,YAAa,CAAA,KAAA;AAAA,QACvC,EAAE,GAAG,KAAA,EAAO,KAAO,EAAA,eAAA,EAAiB,YAAY,cAAe,EAAA;AAAA,QAC/D,OAAA;AAAA,OACF,CAAA;AAEA,MAAA,eAAA,GAAkB,eAAgB,CAAA,MAAA;AAAA,QAChC,MAAM,IAAK,CAAA,aAAA,CAAc,QAAS,CAAA,OAAA,EAAS,eAAe,UAAU,CAAA;AAAA,OACtE,CAAA;AAEA,MAAA,cAAA,GAAiB,QAAS,CAAA,cAAA,CAAA;AAC1B,MAAA,sBAAA,GACE,IAAK,CAAA,GAAA,EAAQ,GAAA,cAAA,GAAiB,IAAK,CAAA,oBAAA,CAAA;AAAA,KAErC,QAAA,cAAA,IACA,eAAgB,CAAA,MAAA,GAAS,iBACzB,CAAC,sBAAA,EAAA;AAGH,IAAO,OAAA;AAAA,MACL,OAAS,EAAA,eAAA,CACN,KAAM,CAAA,IAAA,GAAO,KAAK,QAAW,EAAA,CAAA,IAAA,GAAO,CAAK,IAAA,IAAA,CAAK,QAAQ,CAAA,CACtD,GAAI,CAAA,CAAC,QAAQ,KAAU,KAAA;AAEtB,QAAO,OAAA;AAAA,UACL,GAAG,MAAA;AAAA,UACH,IAAM,EAAA,IAAA,GAAO,IAAK,CAAA,QAAA,GAAW,KAAQ,GAAA,CAAA;AAAA,SACvC,CAAA;AAAA,OACD,CAAA;AAAA,MACH,kBAAA,EACE,SAAS,CAAI,GAAA,KAAA,CAAA,GAAY,iBAAiB,EAAE,IAAA,EAAM,IAAO,GAAA,CAAA,EAAG,CAAA;AAAA,MAC9D,cACE,EAAA,CAAC,sBACA,KAAA,cAAA,IAAkB,eAAgB,CAAA,MAAA,GAAS,aACxC,CAAA,GAAA,gBAAA,CAAiB,EAAE,IAAA,EAAM,IAAO,GAAA,CAAA,EAAG,CACnC,GAAA,KAAA,CAAA;AAAA,MACN,eAAiB,EAAA,KAAA,CAAA;AAAA,KACnB,CAAA;AAAA,GACF;AAAA,EAEA,MAAc,aAAA,CACZ,OACA,EAAA,aAAA,EACA,UAIA,EAAA;AACA,IAAO,OAAAE,cAAA;AAAA,MACL,MAAM,OAAQ,CAAA,GAAA;AAAA,QACZ,OAAA,CAAQ,IAAI,CAAU,MAAA,KAAA;AA7N9B,UAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA8NU,UAAA,IAAA,CAAA,CAAI,mBAAc,MAAO,CAAA,IAAI,MAAzB,IAA4B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,MAAWF,uCAAgB,KAAO,EAAA;AAChE,YAAO,OAAA,MAAA,CAAA;AAAA,WACT;AAEA,UAAA,MAAM,cAAa,EAAK,GAAA,IAAA,CAAA,KAAA,CAAM,MAAO,CAAA,IAAI,MAAtB,IAAyB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,oBAAA,CAAA;AAC5C,UAAA,MAAM,WAAc,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,QAAS,CAAA,aAAA,KAAhB,IAA+B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAA,CAAA;AAEnD,UAAI,IAAA,CAAC,UAAc,IAAA,CAAC,WAAa,EAAA;AAC/B,YAAO,OAAA,MAAA,CAAA;AAAA,WACT;AAaA,UAAI,IAAA,CAACC,2CAAqB,CAAA,UAAU,CAAG,EAAA;AACrC,YAAA,MAAM,IAAI,KAAA;AAAA,cACR,CAAA,sEAAA,EAAyE,WAAW,IAAI,CAAA,CAAA,CAAA;AAAA,aAC1F,CAAA;AAAA,WACF;AAEA,UAAA,OAAO,WACJ,IAAK,CAAA,EAAE,UAAY,EAAA,WAAA,EAAa,CAChC,CAAA,IAAA;AAAA,YAAK,CACJ,QAAA,KAAA,QAAA,CAAS,MAAW,KAAAD,sCAAA,CAAgB,QAAQ,MAAS,GAAA,KAAA,CAAA;AAAA,WACvD,CAAA;AAAA,SACH,CAAA;AAAA,OACH;AAAA,KACF,CAAA;AAAA,GACF;AACF;;AC9OO,MAAM,IAAO,GAAA;AAAA,EAClB,OAAS,EAAA,OAAA;AAAA,EACT,IAAM,EAAA;AAAA,IACJ,KAAO,EAAA,kCAAA;AAAA,IACP,OAAS,EAAA,GAAA;AAAA,IACT,WACE,EAAA,kEAAA;AAAA,IACF,OAAS,EAAA;AAAA,MACP,IAAM,EAAA,YAAA;AAAA,MACN,GAAK,EAAA,iDAAA;AAAA,KACP;AAAA,IACA,SAAS,EAAC;AAAA,GACZ;AAAA,EACA,OAAS,EAAA;AAAA,IACP;AAAA,MACE,GAAK,EAAA,GAAA;AAAA,KACP;AAAA,GACF;AAAA,EACA,UAAY,EAAA;AAAA,IACV,UAAU,EAAC;AAAA,IACX,SAAS,EAAC;AAAA,IACV,YAAY,EAAC;AAAA,IACb,eAAe,EAAC;AAAA,IAChB,SAAW,EAAA;AAAA,MACT,aAAe,EAAA;AAAA,QACb,WAAa,EAAA,qCAAA;AAAA,QACb,OAAS,EAAA;AAAA,UACP,iCAAmC,EAAA;AAAA,YACjC,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,4BAAA;AAAA,aACR;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,OAAS,EAAA;AAAA,MACP,KAAO,EAAA;AAAA,QACL,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,UAAY,EAAA;AAAA,cACV,IAAM,EAAA;AAAA,gBACJ,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,cACA,OAAS,EAAA;AAAA,gBACP,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,aACF;AAAA,YACA,QAAA,EAAU,CAAC,MAAA,EAAQ,SAAS,CAAA;AAAA,WAC9B;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,QAAA;AAAA,YACN,UAAY,EAAA;AAAA,cACV,MAAQ,EAAA;AAAA,gBACN,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,cACA,GAAK,EAAA;AAAA,gBACH,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,aACF;AAAA,YACA,QAAA,EAAU,CAAC,QAAA,EAAU,KAAK,CAAA;AAAA,WAC5B;AAAA,UACA,QAAU,EAAA;AAAA,YACR,IAAM,EAAA,QAAA;AAAA,YACN,UAAY,EAAA;AAAA,cACV,UAAY,EAAA;AAAA,gBACV,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,aACF;AAAA,YACA,QAAA,EAAU,CAAC,YAAY,CAAA;AAAA,WACzB;AAAA,SACF;AAAA,QACA,QAAU,EAAA,CAAC,OAAS,EAAA,SAAA,EAAW,UAAU,CAAA;AAAA,OAC3C;AAAA,MACA,UAAY,EAAA;AAAA,QACV,IAAM,EAAA,QAAA;AAAA,QACN,YAAY,EAAC;AAAA,QACb,sBAAsB,EAAC;AAAA,OACzB;AAAA,KACF;AAAA,IACA,eAAiB,EAAA;AAAA,MACf,GAAK,EAAA;AAAA,QACH,IAAM,EAAA,MAAA;AAAA,QACN,MAAQ,EAAA,QAAA;AAAA,QACR,YAAc,EAAA,KAAA;AAAA,OAChB;AAAA,KACF;AAAA,GACF;AAAA,EACA,KAAO,EAAA;AAAA,IACL,QAAU,EAAA;AAAA,MACR,GAAK,EAAA;AAAA,QACH,WAAa,EAAA,OAAA;AAAA,QACb,WAAa,EAAA,sCAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,QAAA;AAAA,kBACN,UAAY,EAAA;AAAA,oBACV,OAAS,EAAA;AAAA,sBACP,IAAM,EAAA,OAAA;AAAA,sBACN,KAAO,EAAA;AAAA,wBACL,IAAM,EAAA,QAAA;AAAA,wBACN,UAAY,EAAA;AAAA,0BACV,IAAM,EAAA;AAAA,4BACJ,IAAM,EAAA,QAAA;AAAA,4BACN,WAAa,EAAA,mCAAA;AAAA,2BACf;AAAA,0BACA,QAAU,EAAA;AAAA,4BACR,IAAM,EAAA,QAAA;AAAA,4BACN,WACE,EAAA,4CAAA;AAAA,4BACF,UAAY,EAAA;AAAA,8BACV,KAAO,EAAA;AAAA,gCACL,IAAM,EAAA,QAAA;AAAA,gCACN,WACE,EAAA,uEAAA;AAAA,+BACJ;AAAA,8BACA,IAAM,EAAA;AAAA,gCACJ,IAAM,EAAA,QAAA;AAAA,gCACN,WACE,EAAA,kEAAA;AAAA,+BACJ;AAAA,8BACA,QAAU,EAAA;AAAA,gCACR,IAAM,EAAA,QAAA;AAAA,gCACN,WACE,EAAA,wFAAA;AAAA,+BACJ;AAAA,6BACF;AAAA,2BACF;AAAA,0BACA,SAAW,EAAA;AAAA,4BACT,IAAM,EAAA,QAAA;AAAA,4BACN,WACE,EAAA,wFAAA;AAAA,2BACJ;AAAA,0BACA,IAAM,EAAA;AAAA,4BACJ,IAAM,EAAA,SAAA;AAAA,4BACN,WACE,EAAA,+HAAA;AAAA,2BACJ;AAAA,yBACF;AAAA,wBACA,QAAA,EAAU,CAAC,MAAA,EAAQ,UAAU,CAAA;AAAA,wBAC7B,oBAAsB,EAAA,KAAA;AAAA,uBACxB;AAAA,qBACF;AAAA,oBACA,cAAgB,EAAA;AAAA,sBACd,IAAM,EAAA,QAAA;AAAA,qBACR;AAAA,oBACA,kBAAoB,EAAA;AAAA,sBAClB,IAAM,EAAA,QAAA;AAAA,qBACR;AAAA,oBACA,eAAiB,EAAA;AAAA,sBACf,IAAM,EAAA,SAAA;AAAA,qBACR;AAAA,mBACF;AAAA,kBACA,QAAA,EAAU,CAAC,SAAS,CAAA;AAAA,iBACtB;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,IAAM,EAAA,MAAA;AAAA,YACN,EAAI,EAAA,OAAA;AAAA,YACJ,QAAU,EAAA,KAAA;AAAA,YACV,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,QAAA;AAAA,cACN,OAAS,EAAA,EAAA;AAAA,aACX;AAAA,WACF;AAAA,UACA;AAAA,YACE,IAAM,EAAA,SAAA;AAAA,YACN,EAAI,EAAA,OAAA;AAAA,YACJ,QAAU,EAAA,KAAA;AAAA,YACV,KAAO,EAAA,YAAA;AAAA,YACP,OAAS,EAAA,IAAA;AAAA,YACT,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,iCAAA;AAAA,aACR;AAAA,WACF;AAAA,UACA;AAAA,YACE,IAAM,EAAA,OAAA;AAAA,YACN,EAAI,EAAA,OAAA;AAAA,YACJ,QAAU,EAAA,KAAA;AAAA,YACV,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,OAAA;AAAA,cACN,KAAO,EAAA;AAAA,gBACL,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,aACF;AAAA,WACF;AAAA,UACA;AAAA,YACE,IAAM,EAAA,YAAA;AAAA,YACN,EAAI,EAAA,OAAA;AAAA,YACJ,QAAU,EAAA,KAAA;AAAA,YACV,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,QAAA;AAAA,aACR;AAAA,WACF;AAAA,UACA;AAAA,YACE,IAAM,EAAA,WAAA;AAAA,YACN,EAAI,EAAA,OAAA;AAAA,YACJ,QAAU,EAAA,KAAA;AAAA,YACV,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,SAAA;AAAA,aACR;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,GACF;AACF,CAAA,CAAA;AACO,MAAM,mBAAsB,GAAA,OACjC,OACG,KAAAG,gDAAA,CAA0C,MAAM,OAAO,CAAA;;AClN5D,MAAM,gBAAA,GAA4CC,KAAE,CAAA,IAAA,CAAK,MAAM;AAC7D,EAAA,MAAM,kBAA0CA,KAAE,CAAA,IAAA;AAAA,IAAK,MACrDA,MAAE,KAAM,CAAA;AAAA,MACNA,MAAE,MAAO,EAAA;AAAA,MACTA,MAAE,MAAO,EAAA;AAAA,MACTA,MAAE,OAAQ,EAAA;AAAA,MACVA,MAAE,IAAK,EAAA;AAAA,MACPA,KAAA,CAAE,MAAM,eAAe,CAAA;AAAA,MACvB,gBAAA;AAAA,KACD,CAAA;AAAA,GACH,CAAA;AAEA,EAAO,OAAAA,KAAA,CAAE,OAAO,eAAe,CAAA,CAAA;AACjC,CAAC,CAAA,CAAA;AAaD,MAAM,mBAAsB,GAAA,GAAA,CAAA;AAC5B,MAAM,oBAAuB,GAAA,GAAA,CAAA;AAC7B,MAAM,wBAAA,GAA2B,CAAC,OAAA,EAAS,QAAQ,CAAA,CAAA;AAKnD,eAAsB,aACpB,OACyB,EAAA;AAzE3B,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA0EE,EAAM,MAAA,MAAA,GAAS,MAAM,mBAAoB,EAAA,CAAA;AACzC,EAAA,MAAM,EAAE,MAAQ,EAAA,WAAA,EAAa,OAAO,WAAa,EAAA,MAAA,EAAQ,QAAW,GAAA,OAAA,CAAA;AAEpE,EAAA,MAAM,YACJ,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,iBAAkB,CAAA,qBAAqB,MAA9C,IAAmD,GAAA,EAAA,GAAA,mBAAA,CAAA;AAErD,EAAA,MAAM,aACJ,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,iBAAkB,CAAA,sBAAsB,MAA/C,IAAoD,GAAA,EAAA,GAAA,oBAAA,CAAA;AAEtD,EAAM,MAAA,aAAA,GAAgBA,MAAE,MAAO,CAAA;AAAA,IAC7B,IAAA,EAAMA,KACH,CAAA,MAAA,EACA,CAAA,MAAA;AAAA,MACC,CAAA,IAAA,KAAQ,KAAK,MAAU,IAAA,aAAA;AAAA,MACvB,CAAS,IAAA,MAAA;AAAA,QACP,OAAS,EAAA,CAAA,iBAAA,EAAoB,IAAK,CAAA,MAAM,sBAAsB,aAAa,CAAA,CAAA,CAAA;AAAA,OAC7E,CAAA;AAAA,KACF,CACC,QAAQ,EAAE,CAAA;AAAA,IACb,OAAA,EAAS,iBAAiB,QAAS,EAAA;AAAA,IACnC,OAAOA,KACJ,CAAA,KAAA,CAAMA,KAAE,CAAA,MAAA,GAAS,MAAO,CAAA,CAAA,IAAA,KAAQ,MAAO,CAAA,IAAA,CAAK,KAAK,CAAE,CAAA,QAAA,CAAS,IAAI,CAAC,CAAC,EAClE,QAAS,EAAA;AAAA,IACZ,UAAY,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,IAChC,SAAA,EAAWA,KACR,CAAA,MAAA,EACA,CAAA,MAAA;AAAA,MACC,eAAa,SAAa,IAAA,YAAA;AAAA,MAC1B,CAAc,SAAA,MAAA;AAAA,QACZ,OAAS,EAAA,CAAA,gBAAA,EAAmB,SAAS,CAAA,mBAAA,EAAsB,YAAY,CAAA,CAAA,CAAA;AAAA,OACzE,CAAA;AAAA,MAED,QAAS,EAAA;AAAA,GACb,CAAA,CAAA;AAED,EAAI,IAAA,mBAAA,CAAA;AACJ,EAAA,IAAI,0BAA0B,WAAa,EAAA;AACzC,IAAsB,mBAAA,GAAA,WAAA,CAAA;AAAA,GACjB,MAAA;AACL,IAAO,MAAA,CAAA,IAAA;AAAA,MACL,oJAAA;AAAA,KACF,CAAA;AACA,IAAA,mBAAA,GAAsBC,6CAAsB,WAAW,CAAA,CAAA;AAAA,GACzD;AAEA,EAAA,MAAM,MAAS,GAAA,MAAA,CAAO,kBAAmB,CAAA,oBAAoB,IACzD,IAAI,sBAAA;AAAA,IACF,WAAA;AAAA,IACA,KAAA;AAAA,IACA,mBAAA;AAAA,IACA,MAAA;AAAA,GAEF,GAAA,WAAA,CAAA;AAEJ,EAAA,MAAM,kBAAkB,CAAC,EAAE,OAAS,EAAA,GAAG,WAAkC,MAAA;AAAA,IACvE,GAAG,SAAA;AAAA,IACH,OAAA,EAAS,OAAQ,CAAA,MAAA,CAAO,CAAU,MAAA,KAAA;AAChC,MAAA,MAAM,WAAW,IAAI,GAAA,CAAI,OAAO,QAAS,CAAA,QAAA,EAAU,qBAAqB,CACrE,CAAA,QAAA,CAAA;AACH,MAAM,MAAA,SAAA,GAAY,wBAAyB,CAAA,QAAA,CAAS,QAAQ,CAAA,CAAA;AAC5D,MAAA,IAAI,CAAC,SAAW,EAAA;AACd,QAAO,MAAA,CAAA,IAAA;AAAA,UACL,CAA+B,4BAAA,EAAA,MAAA,CAAO,QAAS,CAAA,KAAK,2BAA2B,QAAQ,CAAA,WAAA,CAAA;AAAA,SACzF,CAAA;AAAA,OACF;AACA,MAAO,OAAA,SAAA,CAAA;AAAA,KACR,CAAA;AAAA,GACH,CAAA,CAAA;AAEA,EAAM,MAAA,eAAA,GAAkB,CAAC,SAAoD,MAAA;AAAA,IAC3E,GAAG,SAAA;AAAA,IACH,OAAS,EAAA,SAAA,CAAU,OAAQ,CAAA,GAAA,CAAI,CAAW,MAAA,MAAA;AAAA,MACxC,GAAG,MAAA;AAAA,MACH,QAAU,EAAA;AAAA,QACR,GAAG,MAAO,CAAA,QAAA;AAAA,QACV,aAAe,EAAA,KAAA,CAAA;AAAA,OACjB;AAAA,KACA,CAAA,CAAA;AAAA,GACJ,CAAA,CAAA;AAEA,EAAA,MAAA,CAAO,GAAI,CAAA,QAAA,EAAU,OAAO,GAAA,EAAK,GAAQ,KAAA;AA1J3C,IAAAC,IAAAA,GAAAA,CAAAA;AA2JI,IAAA,MAAM,cAAc,aAAc,CAAA,WAAA,EAAc,CAAA,SAAA,CAAU,IAAI,KAAK,CAAA,CAAA;AAEnE,IAAI,IAAA,CAAC,YAAY,OAAS,EAAA;AACxB,MAAA,MAAM,IAAIV,iBAAA,CAAW,CAAyB,sBAAA,EAAA,WAAA,CAAY,KAAK,CAAE,CAAA,CAAA,CAAA;AAAA,KACnE;AAEA,IAAA,MAAM,QAAQ,WAAY,CAAA,IAAA,CAAA;AAE1B,IAAO,MAAA,CAAA,IAAA;AAAA,MACL,CAAkC,+BAAA,EAAA,KAAA,CAAM,IAAI,CAAA,WAAA,EAAc,IAAK,CAAA,SAAA;AAAA,QAC7D,KAAM,CAAA,OAAA;AAAA,OACP,CAAW,QAAA,EAAA,KAAA,CAAM,KAAQ,GAAA,KAAA,CAAM,MAAM,IAAK,CAAA,GAAG,CAAI,GAAA,EAAE,iBAClDU,GAAA,GAAA,KAAA,CAAM,UAAN,KAAA,IAAA,GAAAA,MAAoB,EACtB,CAAA,CAAA;AAAA,KACF,CAAA;AAEA,IAAA,MAAM,KAAQ,GAAAC,oDAAA;AAAA,MACZ,GAAA,CAAI,OAAO,eAAe,CAAA;AAAA,KAC5B,CAAA;AAEA,IAAI,IAAA;AACF,MAAA,MAAM,YAAY,OAAM,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAQ,KAAM,CAAA,KAAA,EAAO,EAAE,KAAM,EAAA,CAAA,CAAA,CAAA;AAErD,MAAA,GAAA,CAAI,IAAK,CAAA,eAAA,CAAgB,eAAgB,CAAA,SAAS,CAAC,CAAC,CAAA,CAAA;AAAA,aAC7C,KAAO,EAAA;AACd,MAAI,IAAA,KAAA,CAAM,SAAS,mBAAqB,EAAA;AAEtC,QAAM,MAAA,KAAA,CAAA;AAAA,OACR;AAEA,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,iDAAA,EAAoD,MAAM,OAAO,CAAA,CAAA;AAAA,OACnE,CAAA;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AAED,EAAO,MAAA,CAAA,GAAA,CAAIC,4BAAc,CAAA,CAAA;AAEzB,EAAO,OAAA,MAAA,CAAA;AACT;;;;"}