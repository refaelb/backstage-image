{"version":3,"file":"index.cjs.js","sources":["../src/providers/createAuthProviderIntegration.ts","../src/lib/legacy/adaptLegacyOAuthHandler.ts","../src/lib/legacy/adaptLegacyOAuthSignInResolver.ts","../src/lib/legacy/adaptOAuthSignInResolverToLegacy.ts","../src/providers/atlassian/provider.ts","../src/providers/auth0/strategy.ts","../src/lib/oauth/OAuthEnvironmentHandler.ts","../src/lib/oauth/helpers.ts","../src/lib/flow/authFlowHelpers.ts","../src/providers/prepareBackstageIdentityResponse.ts","../src/lib/oauth/OAuthAdapter.ts","../src/lib/passport/PassportStrategyHelper.ts","../src/providers/auth0/provider.ts","../src/providers/aws-alb/provider.ts","../src/providers/bitbucket/provider.ts","../src/providers/resolvers.ts","../src/providers/cloudflare-access/provider.ts","../src/providers/gcp-iap/provider.ts","../src/providers/github/provider.ts","../src/providers/gitlab/provider.ts","../src/providers/google/provider.ts","../src/lib/session/constants.ts","../src/providers/microsoft/provider.ts","../src/providers/oauth2/provider.ts","../src/providers/oauth2-proxy/provider.ts","../src/providers/oidc/provider.ts","../src/providers/okta/provider.ts","../src/providers/onelogin/provider.ts","../src/providers/saml/provider.ts","../src/providers/bitbucketServer/provider.ts","../src/providers/azure-easyauth/provider.ts","../src/providers/providers.ts","../src/identity/router.ts","../src/identity/TokenFactory.ts","../src/identity/DatabaseKeyStore.ts","../src/identity/MemoryKeyStore.ts","../src/identity/FirestoreKeyStore.ts","../src/identity/StaticKeyStore.ts","../src/identity/KeyStores.ts","../src/lib/catalog/CatalogIdentityClient.ts","../src/lib/resolvers/CatalogAuthResolverContext.ts","../src/database/AuthDatabase.ts","../src/identity/StaticTokenIssuer.ts","../src/service/router.ts","../src/authPlugin.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProviderFactory, SignInResolver } from './types';\n\n/**\n * Creates a standardized representation of an integration with a third-party\n * auth provider.\n *\n * The returned object facilitates the creation of provider instances, and\n * supplies built-in sign-in resolvers for the specific provider.\n *\n * @public\n */\nexport function createAuthProviderIntegration<\n  TCreateOptions extends unknown[],\n  TResolvers extends\n    | {\n        [name in string]: (...args: any[]) => SignInResolver<any>;\n      },\n>(config: {\n  create: (...args: TCreateOptions) => AuthProviderFactory;\n  resolvers?: TResolvers;\n}): Readonly<{\n  create: (...args: TCreateOptions) => AuthProviderFactory;\n  // If no resolvers are defined, this receives the type `never`\n  resolvers: Readonly<string extends keyof TResolvers ? never : TResolvers>;\n}> {\n  return Object.freeze({\n    ...config,\n    resolvers: Object.freeze(config.resolvers ?? ({} as any)),\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  OAuthAuthenticatorResult,\n  ProfileTransform,\n} from '@backstage/plugin-auth-node';\nimport { AuthHandler } from '../../providers';\nimport { OAuthResult } from '../oauth';\nimport { PassportProfile } from '../passport/types';\n\n/** @internal */\nexport function adaptLegacyOAuthHandler(\n  authHandler?: AuthHandler<OAuthResult>,\n): ProfileTransform<OAuthAuthenticatorResult<PassportProfile>> | undefined {\n  return (\n    authHandler &&\n    (async (result, ctx) =>\n      authHandler(\n        {\n          fullProfile: result.fullProfile,\n          accessToken: result.session.accessToken,\n          params: {\n            scope: result.session.scope,\n            id_token: result.session.idToken,\n            token_type: result.session.tokenType,\n            expires_in: result.session.expiresInSeconds!,\n          },\n        },\n        ctx,\n      ))\n  );\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  OAuthAuthenticatorResult,\n  PassportProfile,\n  SignInResolver,\n} from '@backstage/plugin-auth-node';\nimport { OAuthResult } from '../oauth';\n\n/** @internal */\nexport function adaptLegacyOAuthSignInResolver(\n  signInResolver?: SignInResolver<OAuthResult>,\n): SignInResolver<OAuthAuthenticatorResult<PassportProfile>> | undefined {\n  return (\n    signInResolver &&\n    (async (input, ctx) =>\n      signInResolver(\n        {\n          profile: input.profile,\n          result: {\n            fullProfile: input.result.fullProfile,\n            accessToken: input.result.session.accessToken,\n            refreshToken: input.result.session.refreshToken,\n            params: {\n              scope: input.result.session.scope,\n              id_token: input.result.session.idToken,\n              token_type: input.result.session.tokenType,\n              expires_in: input.result.session.expiresInSeconds!,\n            },\n          },\n        },\n        ctx,\n      ))\n  );\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  OAuthAuthenticatorResult,\n  PassportProfile,\n  SignInResolver,\n} from '@backstage/plugin-auth-node';\nimport { OAuthResult } from '../oauth';\n\n/** @internal */\nexport function adaptOAuthSignInResolverToLegacy<\n  TKeys extends string,\n>(resolvers: {\n  [key in TKeys]: SignInResolver<OAuthAuthenticatorResult<PassportProfile>>;\n}): { [key in TKeys]: () => SignInResolver<OAuthResult> } {\n  const legacyResolvers = {} as {\n    [key in TKeys]: () => SignInResolver<OAuthResult>;\n  };\n  for (const name of Object.keys(resolvers) as TKeys[]) {\n    const resolver = resolvers[name];\n    legacyResolvers[name] = () => async (input, ctx) =>\n      resolver(\n        {\n          profile: input.profile,\n          result: {\n            fullProfile: input.result.fullProfile,\n            session: {\n              accessToken: input.result.accessToken,\n              expiresInSeconds: input.result.params.expires_in,\n              scope: input.result.params.scope,\n              idToken: input.result.params.id_token,\n              tokenType: input.result.params.token_type ?? 'bearer',\n              refreshToken: input.result.refreshToken,\n            },\n          },\n        },\n        ctx,\n      );\n  }\n  return legacyResolvers;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SignInResolver, AuthHandler } from '../types';\nimport { OAuthResult } from '../../lib/oauth';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport { createOAuthProviderFactory } from '@backstage/plugin-auth-node';\nimport {\n  adaptLegacyOAuthHandler,\n  adaptLegacyOAuthSignInResolver,\n} from '../../lib/legacy';\nimport { atlassianAuthenticator } from '@backstage/plugin-auth-backend-module-atlassian-provider';\n\n/**\n * Auth provider integration for Atlassian auth\n *\n * @public\n */\nexport const atlassian = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<OAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      resolver: SignInResolver<OAuthResult>;\n    };\n  }) {\n    return createOAuthProviderFactory({\n      authenticator: atlassianAuthenticator,\n      profileTransform: adaptLegacyOAuthHandler(options?.authHandler),\n      signInResolver: adaptLegacyOAuthSignInResolver(options?.signIn?.resolver),\n    });\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Auth0InternalStrategy from 'passport-auth0';\nimport { StateStore } from 'passport-oauth2';\n\nexport interface Auth0StrategyOptionsWithRequest {\n  clientID: string;\n  clientSecret: string;\n  callbackURL: string;\n  domain: string;\n  passReqToCallback: true;\n  store: StateStore;\n}\n\nexport default class Auth0Strategy extends Auth0InternalStrategy {\n  constructor(\n    options: Auth0StrategyOptionsWithRequest,\n    verify: Auth0InternalStrategy.VerifyFunction,\n  ) {\n    const optionsWithURLs = {\n      ...options,\n      authorizationURL: `https://${options.domain}/authorize`,\n      tokenURL: `https://${options.domain}/oauth/token`,\n      userInfoURL: `https://${options.domain}/userinfo`,\n      apiUrl: `https://${options.domain}/api`,\n    };\n    super(optionsWithURLs, verify);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OAuthEnvironmentHandler as _OAuthEnvironmentHandler } from '@backstage/plugin-auth-node';\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-auth-node` instead\n */\nexport const OAuthEnvironmentHandler = _OAuthEnvironmentHandler;\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport { OAuthState } from './types';\nimport { CookieConfigurer } from '../../providers/types';\nimport {\n  decodeOAuthState,\n  encodeOAuthState,\n} from '@backstage/plugin-auth-node';\n\n/**\n * @public\n * @deprecated Use `decodeOAuthState` from `@backstage/plugin-auth-node` instead\n */\nexport const readState = decodeOAuthState;\n\n/**\n * @public\n * @deprecated Use `encodeOAuthState` from `@backstage/plugin-auth-node` instead\n */\nexport const encodeState = encodeOAuthState;\n\n/**\n * @public\n * @deprecated Use inline logic to make sure the session and state nonce matches instead.\n */\nexport const verifyNonce = (req: express.Request, providerId: string) => {\n  const cookieNonce = req.cookies[`${providerId}-nonce`];\n  const state: OAuthState = readState(req.query.state?.toString() ?? '');\n  const stateNonce = state.nonce;\n\n  if (!cookieNonce) {\n    throw new Error('Auth response is missing cookie nonce');\n  }\n  if (stateNonce.length === 0) {\n    throw new Error('Auth response is missing state nonce');\n  }\n  if (cookieNonce !== stateNonce) {\n    throw new Error('Invalid nonce');\n  }\n};\n\nexport const defaultCookieConfigurer: CookieConfigurer = ({\n  callbackUrl,\n  providerId,\n  appOrigin,\n}) => {\n  const { hostname: domain, pathname, protocol } = new URL(callbackUrl);\n  const secure = protocol === 'https:';\n\n  // For situations where the auth-backend is running on a\n  // different domain than the app, we set the SameSite attribute\n  // to 'none' to allow third-party access to the cookie, but\n  // only if it's in a secure context (https).\n  let sameSite: ReturnType<CookieConfigurer>['sameSite'] = 'lax';\n  if (new URL(appOrigin).hostname !== domain && secure) {\n    sameSite = 'none';\n  }\n\n  // If the provider supports callbackUrls, the pathname will\n  // contain the complete path to the frame handler so we need\n  // to slice off the trailing part of the path.\n  const path = pathname.endsWith(`${providerId}/handler/frame`)\n    ? pathname.slice(0, -'/handler/frame'.length)\n    : `${pathname}/${providerId}`;\n\n  return { domain, path, secure, sameSite };\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport crypto from 'crypto';\nimport { WebMessageResponse } from './types';\n\nexport const safelyEncodeURIComponent = (value: string) => {\n  // Note the g at the end of the regex; all occurrences of single quotes must\n  // be replaced, which encodeURIComponent does not do itself by default\n  return encodeURIComponent(value).replace(/'/g, '%27');\n};\n\n/**\n * @public\n * @deprecated Use `sendWebMessageResponse` from `@backstage/plugin-auth-node` instead\n */\nexport const postMessageResponse = (\n  res: express.Response,\n  appOrigin: string,\n  response: WebMessageResponse,\n) => {\n  const jsonData = JSON.stringify(response);\n  const base64Data = safelyEncodeURIComponent(jsonData);\n  const base64Origin = safelyEncodeURIComponent(appOrigin);\n\n  // NOTE: It is absolutely imperative that we use the safe encoder above, to\n  // be sure that the js code below does not allow the injection of malicious\n  // data.\n\n  // TODO: Make target app origin configurable globally\n\n  //\n  // postMessage fails silently if the targetOrigin is disallowed.\n  // So 2 postMessages are sent from the popup to the parent window.\n  // First, the origin being used to post the actual authorization response is\n  // shared with the parent window with a postMessage with targetOrigin '*'.\n  // Second, the actual authorization response is sent with the app origin\n  // as the targetOrigin.\n  // If the first message was received but the actual auth response was\n  // never received, the event listener can conclude that targetOrigin\n  // was disallowed, indicating potential misconfiguration.\n  //\n  const script = `\n    var authResponse = decodeURIComponent('${base64Data}');\n    var origin = decodeURIComponent('${base64Origin}');\n    var originInfo = {'type': 'config_info', 'targetOrigin': origin};\n    (window.opener || window.parent).postMessage(originInfo, '*');\n    (window.opener || window.parent).postMessage(JSON.parse(authResponse), origin);\n    setTimeout(() => {\n      window.close();\n    }, 100); // same as the interval of the core-app-api lib/loginPopup.ts (to address race conditions)\n  `;\n  const hash = crypto.createHash('sha256').update(script).digest('base64');\n\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Frame-Options', 'sameorigin');\n  res.setHeader('Content-Security-Policy', `script-src 'sha256-${hash}'`);\n  res.end(`<html><body><script>${script}</script></body></html>`);\n};\n\n/**\n * @public\n * @deprecated Use inline logic to check that the `X-Requested-With` header is set to `'XMLHttpRequest'` instead.\n */\nexport const ensuresXRequestedWith = (req: express.Request) => {\n  const requiredHeader = req.header('X-Requested-With');\n  if (!requiredHeader || requiredHeader !== 'XMLHttpRequest') {\n    return false;\n  }\n  return true;\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { prepareBackstageIdentityResponse as _prepareBackstageIdentityResponse } from '@backstage/plugin-auth-node';\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-auth-node` instead\n */\nexport const prepareBackstageIdentityResponse =\n  _prepareBackstageIdentityResponse;\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express, { CookieOptions } from 'express';\nimport crypto from 'crypto';\nimport { URL } from 'url';\nimport {\n  BackstageIdentityResponse,\n  BackstageSignInResult,\n} from '@backstage/plugin-auth-node';\nimport {\n  AuthProviderRouteHandlers,\n  AuthProviderConfig,\n  CookieConfigurer,\n} from '../../providers/types';\nimport {\n  AuthenticationError,\n  InputError,\n  isError,\n  NotAllowedError,\n} from '@backstage/errors';\nimport { defaultCookieConfigurer, readState, verifyNonce } from './helpers';\nimport {\n  postMessageResponse,\n  ensuresXRequestedWith,\n  WebMessageResponse,\n} from '../flow';\nimport {\n  OAuthHandlers,\n  OAuthStartRequest,\n  OAuthRefreshRequest,\n  OAuthState,\n  OAuthLogoutRequest,\n} from './types';\nimport { prepareBackstageIdentityResponse } from '../../providers/prepareBackstageIdentityResponse';\n\nexport const THOUSAND_DAYS_MS = 1000 * 24 * 60 * 60 * 1000;\nexport const TEN_MINUTES_MS = 600 * 1000;\n\n/**\n * @public\n * @deprecated Use `createOAuthRouteHandlers` from `@backstage/plugin-auth-node` instead\n */\nexport type OAuthAdapterOptions = {\n  providerId: string;\n  persistScopes?: boolean;\n  appOrigin: string;\n  baseUrl: string;\n  cookieConfigurer: CookieConfigurer;\n  isOriginAllowed: (origin: string) => boolean;\n  callbackUrl: string;\n};\n\n/**\n * @public\n * @deprecated Use `createOAuthRouteHandlers` from `@backstage/plugin-auth-node` instead\n */\nexport class OAuthAdapter implements AuthProviderRouteHandlers {\n  static fromConfig(\n    config: AuthProviderConfig,\n    handlers: OAuthHandlers,\n    options: Pick<\n      OAuthAdapterOptions,\n      'providerId' | 'persistScopes' | 'callbackUrl'\n    >,\n  ): OAuthAdapter {\n    const { appUrl, baseUrl, isOriginAllowed } = config;\n    const { origin: appOrigin } = new URL(appUrl);\n\n    const cookieConfigurer = config.cookieConfigurer ?? defaultCookieConfigurer;\n\n    return new OAuthAdapter(handlers, {\n      ...options,\n      appOrigin,\n      baseUrl,\n      cookieConfigurer,\n      isOriginAllowed,\n    });\n  }\n\n  private readonly baseCookieOptions: CookieOptions;\n\n  constructor(\n    private readonly handlers: OAuthHandlers,\n    private readonly options: OAuthAdapterOptions,\n  ) {\n    this.baseCookieOptions = {\n      httpOnly: true,\n      sameSite: 'lax',\n    };\n  }\n\n  async start(req: express.Request, res: express.Response): Promise<void> {\n    // retrieve scopes from request\n    const scope = req.query.scope?.toString() ?? '';\n    const env = req.query.env?.toString();\n    const origin = req.query.origin?.toString();\n    const redirectUrl = req.query.redirectUrl?.toString();\n    const flow = req.query.flow?.toString();\n\n    if (!env) {\n      throw new InputError('No env provided in request query parameters');\n    }\n\n    const cookieConfig = this.getCookieConfig(origin);\n\n    const nonce = crypto.randomBytes(16).toString('base64');\n    // set a nonce cookie before redirecting to oauth provider\n    this.setNonceCookie(res, nonce, cookieConfig);\n\n    const state: OAuthState = { nonce, env, origin, redirectUrl, flow };\n\n    // If scopes are persisted then we pass them through the state so that we\n    // can set the cookie on successful auth\n    if (this.options.persistScopes) {\n      state.scope = scope;\n    }\n    const forwardReq = Object.assign(req, { scope, state });\n\n    const { url, status } = await this.handlers.start(\n      forwardReq as OAuthStartRequest,\n    );\n\n    res.statusCode = status || 302;\n    res.setHeader('Location', url);\n    res.setHeader('Content-Length', '0');\n    res.end();\n  }\n\n  async frameHandler(\n    req: express.Request,\n    res: express.Response,\n  ): Promise<void> {\n    let appOrigin = this.options.appOrigin;\n\n    try {\n      const state: OAuthState = readState(req.query.state?.toString() ?? '');\n\n      if (state.origin) {\n        try {\n          appOrigin = new URL(state.origin).origin;\n        } catch {\n          throw new NotAllowedError('App origin is invalid, failed to parse');\n        }\n        if (!this.options.isOriginAllowed(appOrigin)) {\n          throw new NotAllowedError(`Origin '${appOrigin}' is not allowed`);\n        }\n      }\n\n      // verify nonce cookie and state cookie on callback\n      verifyNonce(req, this.options.providerId);\n\n      const { response, refreshToken } = await this.handlers.handler(req);\n\n      const cookieConfig = this.getCookieConfig(appOrigin);\n\n      // Store the scope that we have been granted for this session. This is useful if\n      // the provider does not return granted scopes on refresh or if they are normalized.\n      if (this.options.persistScopes && state.scope) {\n        this.setGrantedScopeCookie(res, state.scope, cookieConfig);\n        response.providerInfo.scope = state.scope;\n      }\n\n      if (refreshToken) {\n        // set new refresh token\n        this.setRefreshTokenCookie(res, refreshToken, cookieConfig);\n      }\n\n      const identity = await this.populateIdentity(response.backstageIdentity);\n\n      const responseObj: WebMessageResponse = {\n        type: 'authorization_response',\n        response: { ...response, backstageIdentity: identity },\n      };\n\n      if (state.flow === 'redirect') {\n        if (!state.redirectUrl) {\n          throw new InputError(\n            'No redirectUrl provided in request query parameters',\n          );\n        }\n        res.redirect(state.redirectUrl);\n        return undefined;\n      }\n      // post message back to popup if successful\n      return postMessageResponse(res, appOrigin, responseObj);\n    } catch (error) {\n      const { name, message } = isError(error)\n        ? error\n        : new Error('Encountered invalid error'); // Being a bit safe and not forwarding the bad value\n      // post error message back to popup if failure\n      return postMessageResponse(res, appOrigin, {\n        type: 'authorization_response',\n        error: { name, message },\n      });\n    }\n  }\n\n  async logout(req: express.Request, res: express.Response): Promise<void> {\n    if (!ensuresXRequestedWith(req)) {\n      throw new AuthenticationError('Invalid X-Requested-With header');\n    }\n\n    if (this.handlers.logout) {\n      const refreshToken = this.getRefreshTokenFromCookie(req);\n      const revokeRequest: OAuthLogoutRequest = Object.assign(req, {\n        refreshToken,\n      });\n      await this.handlers.logout(revokeRequest);\n    }\n\n    // remove refresh token cookie if it is set\n    const origin = req.get('origin');\n    const cookieConfig = this.getCookieConfig(origin);\n    this.removeRefreshTokenCookie(res, cookieConfig);\n\n    res.status(200).end();\n  }\n\n  async refresh(req: express.Request, res: express.Response): Promise<void> {\n    if (!ensuresXRequestedWith(req)) {\n      throw new AuthenticationError('Invalid X-Requested-With header');\n    }\n\n    if (!this.handlers.refresh) {\n      throw new InputError(\n        `Refresh token is not supported for provider ${this.options.providerId}`,\n      );\n    }\n\n    try {\n      const refreshToken = this.getRefreshTokenFromCookie(req);\n\n      // throw error if refresh token is missing in the request\n      if (!refreshToken) {\n        throw new InputError('Missing session cookie');\n      }\n\n      let scope = req.query.scope?.toString() ?? '';\n      if (this.options.persistScopes) {\n        scope = this.getGrantedScopeFromCookie(req);\n      }\n      const forwardReq = Object.assign(req, { scope, refreshToken });\n\n      // get new access_token\n      const { response, refreshToken: newRefreshToken } =\n        await this.handlers.refresh(forwardReq as OAuthRefreshRequest);\n\n      const backstageIdentity = await this.populateIdentity(\n        response.backstageIdentity,\n      );\n\n      if (newRefreshToken && newRefreshToken !== refreshToken) {\n        const origin = req.get('origin');\n        const cookieConfig = this.getCookieConfig(origin);\n        this.setRefreshTokenCookie(res, newRefreshToken, cookieConfig);\n      }\n\n      res.status(200).json({ ...response, backstageIdentity });\n    } catch (error) {\n      throw new AuthenticationError('Refresh failed', error);\n    }\n  }\n\n  /**\n   * If the response from the OAuth provider includes a Backstage identity, we\n   * make sure it's populated with all the information we can derive from the user ID.\n   */\n  private async populateIdentity(\n    identity?: BackstageSignInResult,\n  ): Promise<BackstageIdentityResponse | undefined> {\n    if (!identity) {\n      return undefined;\n    }\n    if (!identity.token) {\n      throw new InputError(`Identity response must return a token`);\n    }\n\n    return prepareBackstageIdentityResponse(identity);\n  }\n\n  private setNonceCookie = (\n    res: express.Response,\n    nonce: string,\n    cookieConfig: ReturnType<CookieConfigurer>,\n  ) => {\n    res.cookie(`${this.options.providerId}-nonce`, nonce, {\n      maxAge: TEN_MINUTES_MS,\n      ...this.baseCookieOptions,\n      ...cookieConfig,\n      path: `${cookieConfig.path}/handler`,\n    });\n  };\n\n  private setGrantedScopeCookie = (\n    res: express.Response,\n    scope: string,\n    cookieConfig: ReturnType<CookieConfigurer>,\n  ) => {\n    res.cookie(`${this.options.providerId}-granted-scope`, scope, {\n      maxAge: THOUSAND_DAYS_MS,\n      ...this.baseCookieOptions,\n      ...cookieConfig,\n    });\n  };\n\n  private getRefreshTokenFromCookie = (req: express.Request) => {\n    return req.cookies[`${this.options.providerId}-refresh-token`];\n  };\n\n  private getGrantedScopeFromCookie = (req: express.Request) => {\n    return req.cookies[`${this.options.providerId}-granted-scope`];\n  };\n\n  private setRefreshTokenCookie = (\n    res: express.Response,\n    refreshToken: string,\n    cookieConfig: ReturnType<CookieConfigurer>,\n  ) => {\n    res.cookie(`${this.options.providerId}-refresh-token`, refreshToken, {\n      maxAge: THOUSAND_DAYS_MS,\n      ...this.baseCookieOptions,\n      ...cookieConfig,\n    });\n  };\n\n  private removeRefreshTokenCookie = (\n    res: express.Response,\n    cookieConfig: ReturnType<CookieConfigurer>,\n  ) => {\n    res.cookie(`${this.options.providerId}-refresh-token`, '', {\n      maxAge: 0,\n      ...this.baseCookieOptions,\n      ...cookieConfig,\n    });\n  };\n\n  private getCookieConfig = (origin?: string) => {\n    return this.options.cookieConfigurer({\n      providerId: this.options.providerId,\n      baseUrl: this.options.baseUrl,\n      callbackUrl: this.options.callbackUrl,\n      appOrigin: origin ?? this.options.appOrigin,\n    });\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport passport from 'passport';\nimport jwtDecoder from 'jwt-decode';\nimport { InternalOAuthError } from 'passport-oauth2';\n\nimport { PassportProfile } from './types';\nimport { ProfileInfo, OAuthStartResponse } from '../../providers/types';\n\nexport type PassportDoneCallback<Res, Private = never> = (\n  err?: Error,\n  response?: Res,\n  privateInfo?: Private,\n) => void;\n\nexport const makeProfileInfo = (\n  profile: PassportProfile,\n  idToken?: string,\n): ProfileInfo => {\n  let email: string | undefined = undefined;\n  if (profile.emails && profile.emails.length > 0) {\n    const [firstEmail] = profile.emails;\n    email = firstEmail.value;\n  }\n\n  let picture: string | undefined = undefined;\n  if (profile.avatarUrl) {\n    picture = profile.avatarUrl;\n  } else if (profile.photos && profile.photos.length > 0) {\n    const [firstPhoto] = profile.photos;\n    picture = firstPhoto.value;\n  }\n\n  let displayName: string | undefined =\n    profile.displayName ?? profile.username ?? profile.id;\n\n  if ((!email || !picture || !displayName) && idToken) {\n    try {\n      const decoded: Record<string, string> = jwtDecoder(idToken);\n      if (!email && decoded.email) {\n        email = decoded.email;\n      }\n      if (!picture && decoded.picture) {\n        picture = decoded.picture;\n      }\n      if (!displayName && decoded.name) {\n        displayName = decoded.name;\n      }\n    } catch (e) {\n      throw new Error(`Failed to parse id token and get profile info, ${e}`);\n    }\n  }\n\n  return {\n    email,\n    picture,\n    displayName,\n  };\n};\n\nexport const executeRedirectStrategy = async (\n  req: express.Request,\n  providerStrategy: passport.Strategy,\n  options: Record<string, string>,\n): Promise<OAuthStartResponse> => {\n  return new Promise(resolve => {\n    const strategy = Object.create(providerStrategy);\n    strategy.redirect = (url: string, status?: number) => {\n      resolve({ url, status: status ?? undefined });\n    };\n\n    strategy.authenticate(req, { ...options });\n  });\n};\n\nexport const executeFrameHandlerStrategy = async <Result, PrivateInfo = never>(\n  req: express.Request,\n  providerStrategy: passport.Strategy,\n  options?: Record<string, string>,\n) => {\n  return new Promise<{ result: Result; privateInfo: PrivateInfo }>(\n    (resolve, reject) => {\n      const strategy = Object.create(providerStrategy);\n      strategy.success = (result: any, privateInfo: any) => {\n        resolve({ result, privateInfo });\n      };\n      strategy.fail = (\n        info: { type: 'success' | 'error'; message?: string },\n        // _status: number,\n      ) => {\n        reject(new Error(`Authentication rejected, ${info.message ?? ''}`));\n      };\n      strategy.error = (error: InternalOAuthError) => {\n        let message = `Authentication failed, ${error.message}`;\n\n        if (error.oauthError?.data) {\n          try {\n            const errorData = JSON.parse(error.oauthError.data);\n\n            if (errorData.message) {\n              message += ` - ${errorData.message}`;\n            }\n          } catch (parseError) {\n            message += ` - ${error.oauthError}`;\n          }\n        }\n\n        reject(new Error(message));\n      };\n      strategy.redirect = () => {\n        reject(new Error('Unexpected redirect'));\n      };\n      strategy.authenticate(req, { ...(options ?? {}) });\n    },\n  );\n};\n\ntype RefreshTokenResponse = {\n  /**\n   * An access token issued for the signed in user.\n   */\n  accessToken: string;\n  /**\n   * Optionally, the server can issue a new Refresh Token for the user\n   */\n  refreshToken?: string;\n  params: any;\n};\n\nexport const executeRefreshTokenStrategy = async (\n  providerStrategy: passport.Strategy,\n  refreshToken: string,\n  scope: string,\n): Promise<RefreshTokenResponse> => {\n  return new Promise((resolve, reject) => {\n    const anyStrategy = providerStrategy as any;\n    const OAuth2 = anyStrategy._oauth2.constructor;\n    const oauth2 = new OAuth2(\n      anyStrategy._oauth2._clientId,\n      anyStrategy._oauth2._clientSecret,\n      anyStrategy._oauth2._baseSite,\n      anyStrategy._oauth2._authorizeUrl,\n      anyStrategy._refreshURL || anyStrategy._oauth2._accessTokenUrl,\n      anyStrategy._oauth2._customHeaders,\n    );\n\n    oauth2.getOAuthAccessToken(\n      refreshToken,\n      {\n        scope,\n        grant_type: 'refresh_token',\n      },\n      (\n        err: Error | null,\n        accessToken: string,\n        newRefreshToken: string,\n        params: any,\n      ) => {\n        if (err) {\n          reject(new Error(`Failed to refresh access token ${err.toString()}`));\n        }\n        if (!accessToken) {\n          reject(\n            new Error(\n              `Failed to refresh access token, no access token received`,\n            ),\n          );\n        }\n\n        resolve({\n          accessToken,\n          refreshToken: newRefreshToken,\n          params,\n        });\n      },\n    );\n  });\n};\n\ntype ProviderStrategy = {\n  userProfile(accessToken: string, callback: Function): void;\n};\n\nexport const executeFetchUserProfileStrategy = async (\n  providerStrategy: passport.Strategy,\n  accessToken: string,\n): Promise<PassportProfile> => {\n  return new Promise((resolve, reject) => {\n    const anyStrategy = providerStrategy as unknown as ProviderStrategy;\n    anyStrategy.userProfile(\n      accessToken,\n      (error: Error, rawProfile: PassportProfile) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(rawProfile);\n        }\n      },\n    );\n  });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport passport from 'passport';\nimport Auth0Strategy from './strategy';\nimport {\n  OAuthAdapter,\n  OAuthProviderOptions,\n  OAuthHandlers,\n  OAuthResponse,\n  OAuthEnvironmentHandler,\n  OAuthStartRequest,\n  encodeState,\n  OAuthRefreshRequest,\n  OAuthResult,\n} from '../../lib/oauth';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  OAuthStartResponse,\n  AuthHandler,\n  SignInResolver,\n  AuthResolverContext,\n} from '../types';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport { StateStore } from 'passport-oauth2';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\nexport type Auth0AuthProviderOptions = OAuthProviderOptions & {\n  domain: string;\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  resolverContext: AuthResolverContext;\n  audience?: string;\n  connection?: string;\n  connectionScope?: string;\n};\n\nexport class Auth0AuthProvider implements OAuthHandlers {\n  private readonly _strategy: Auth0Strategy;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly resolverContext: AuthResolverContext;\n  private readonly audience?: string;\n  private readonly connection?: string;\n  private readonly connectionScope?: string;\n\n  /**\n   * Due to passport-auth0 forcing options.state = true,\n   * passport-oauth2 requires express-session to be installed\n   * so that the 'state' parameter of the oauth2 flow can be stored.\n   * This implementation of StateStore matches the NullStore found within\n   * passport-oauth2, which is the StateStore implementation used when options.state = false,\n   * allowing us to avoid using express-session in order to integrate with auth0.\n   */\n  private store: StateStore = {\n    store(_req: express.Request, cb: any) {\n      cb(null, null);\n    },\n    verify(_req: express.Request, _state: string, cb: any) {\n      cb(null, true);\n    },\n  };\n\n  constructor(options: Auth0AuthProviderOptions) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.resolverContext = options.resolverContext;\n    this.audience = options.audience;\n    this.connection = options.connection;\n    this.connectionScope = options.connectionScope;\n    this._strategy = new Auth0Strategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        domain: options.domain,\n        // We need passReqToCallback set to false to get params, but there's\n        // no matching type signature for that, so instead behold this beauty\n        passReqToCallback: false as true,\n        store: this.store,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(\n          undefined,\n          {\n            fullProfile,\n            accessToken,\n            refreshToken,\n            params,\n          },\n          {\n            refreshToken,\n          },\n        );\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<OAuthStartResponse> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      accessType: 'offline',\n      prompt: 'consent',\n      scope: req.scope,\n      state: encodeState(req.state),\n      ...(this.audience ? { audience: this.audience } : {}),\n      ...(this.connection ? { connection: this.connection } : {}),\n      ...(this.connectionScope\n        ? { connection_scope: this.connectionScope }\n        : {}),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy, {\n      ...(this.audience ? { audience: this.audience } : {}),\n      ...(this.connection ? { connection: this.connection } : {}),\n      ...(this.connectionScope\n        ? { connection_scope: this.connectionScope }\n        : {}),\n    });\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: OAuthResult) {\n    const { profile } = await this.authHandler(result, this.resolverContext);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        this.resolverContext,\n      );\n    }\n\n    return response;\n  }\n}\n\n/**\n * Auth provider integration for auth0 auth\n *\n * @public\n */\nexport const auth0 = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<OAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<OAuthResult>;\n    };\n  }) {\n    return ({ providerId, globalConfig, config, resolverContext }) =>\n      OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n        const clientId = envConfig.getString('clientId');\n        const clientSecret = envConfig.getString('clientSecret');\n        const domain = envConfig.getString('domain');\n        const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n        const audience = envConfig.getOptionalString('audience');\n        const connection = envConfig.getOptionalString('connection');\n        const connectionScope = envConfig.getOptionalString('connectionScope');\n        const callbackUrl =\n          customCallbackUrl ||\n          `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n        const authHandler: AuthHandler<OAuthResult> = options?.authHandler\n          ? options.authHandler\n          : async ({ fullProfile, params }) => ({\n              profile: makeProfileInfo(fullProfile, params.id_token),\n            });\n\n        const signInResolver = options?.signIn?.resolver;\n\n        const provider = new Auth0AuthProvider({\n          clientId,\n          clientSecret,\n          callbackUrl,\n          domain,\n          authHandler,\n          signInResolver,\n          resolverContext,\n          audience,\n          connection,\n          connectionScope,\n        });\n\n        return OAuthAdapter.fromConfig(globalConfig, provider, {\n          providerId,\n          callbackUrl,\n        });\n      });\n  },\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthHandler,\n  AuthProviderRouteHandlers,\n  AuthResolverContext,\n  AuthResponse,\n  SignInResolver,\n} from '../types';\nimport express from 'express';\nimport fetch from 'node-fetch';\nimport * as crypto from 'crypto';\nimport { KeyObject } from 'crypto';\nimport NodeCache from 'node-cache';\nimport { JWTHeaderParameters, jwtVerify } from 'jose';\nimport { Profile as PassportProfile } from 'passport';\nimport { makeProfileInfo } from '../../lib/passport';\nimport { AuthenticationError } from '@backstage/errors';\nimport { prepareBackstageIdentityResponse } from '../prepareBackstageIdentityResponse';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\n\nexport const ALB_JWT_HEADER = 'x-amzn-oidc-data';\nexport const ALB_ACCESS_TOKEN_HEADER = 'x-amzn-oidc-accesstoken';\n\ntype Options = {\n  region: string;\n  issuer?: string;\n  authHandler: AuthHandler<AwsAlbResult>;\n  signInResolver: SignInResolver<AwsAlbResult>;\n  resolverContext: AuthResolverContext;\n};\n\nexport type AwsAlbHeaders = {\n  alg: string;\n  kid: string;\n  signer: string;\n  iss: string;\n  client: string;\n  exp: number;\n};\n\nexport type AwsAlbClaims = {\n  sub: string;\n  name: string;\n  family_name: string;\n  given_name: string;\n  picture: string;\n  email: string;\n  exp: number;\n  iss: string;\n};\n\n/** @public */\nexport type AwsAlbResult = {\n  fullProfile: PassportProfile;\n  expiresInSeconds?: number;\n  accessToken: string;\n};\n\nexport type AwsAlbProviderInfo = {\n  /**\n   * An access token issued for the signed in user.\n   */\n  accessToken: string;\n  /**\n   * Expiry of the access token in seconds.\n   */\n  expiresInSeconds?: number;\n};\n\nexport type AwsAlbResponse = AuthResponse<AwsAlbProviderInfo>;\n\nexport class AwsAlbAuthProvider implements AuthProviderRouteHandlers {\n  private readonly region: string;\n  private readonly issuer?: string;\n  private readonly resolverContext: AuthResolverContext;\n  private readonly keyCache: NodeCache;\n  private readonly authHandler: AuthHandler<AwsAlbResult>;\n  private readonly signInResolver: SignInResolver<AwsAlbResult>;\n\n  constructor(options: Options) {\n    this.region = options.region;\n    this.issuer = options.issuer;\n    this.authHandler = options.authHandler;\n    this.signInResolver = options.signInResolver;\n    this.resolverContext = options.resolverContext;\n    this.keyCache = new NodeCache({ stdTTL: 3600 });\n  }\n\n  frameHandler(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  async refresh(req: express.Request, res: express.Response): Promise<void> {\n    try {\n      const result = await this.getResult(req);\n      const response = await this.handleResult(result);\n      res.json(response);\n    } catch (e) {\n      throw new AuthenticationError(\n        'Exception occurred during AWS ALB token refresh',\n        e,\n      );\n    }\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  private async getResult(req: express.Request): Promise<AwsAlbResult> {\n    const jwt = req.header(ALB_JWT_HEADER);\n    const accessToken = req.header(ALB_ACCESS_TOKEN_HEADER);\n\n    if (jwt === undefined) {\n      throw new AuthenticationError(\n        `Missing ALB OIDC header: ${ALB_JWT_HEADER}`,\n      );\n    }\n\n    if (accessToken === undefined) {\n      throw new AuthenticationError(\n        `Missing ALB OIDC header: ${ALB_ACCESS_TOKEN_HEADER}`,\n      );\n    }\n\n    try {\n      const verifyResult = await jwtVerify(jwt, this.getKey);\n      const claims = verifyResult.payload as AwsAlbClaims;\n\n      if (this.issuer && claims.iss !== this.issuer) {\n        throw new AuthenticationError('Issuer mismatch on JWT token');\n      }\n\n      const fullProfile: PassportProfile = {\n        provider: 'unknown',\n        id: claims.sub,\n        displayName: claims.name,\n        username: claims.email.split('@')[0].toLowerCase(),\n        name: {\n          familyName: claims.family_name,\n          givenName: claims.given_name,\n        },\n        emails: [{ value: claims.email.toLowerCase() }],\n        photos: [{ value: claims.picture }],\n      };\n\n      return {\n        fullProfile,\n        expiresInSeconds: claims.exp,\n        accessToken,\n      };\n    } catch (e) {\n      throw new Error(`Exception occurred during JWT processing: ${e}`);\n    }\n  }\n\n  private async handleResult(result: AwsAlbResult): Promise<AwsAlbResponse> {\n    const { profile } = await this.authHandler(result, this.resolverContext);\n    const backstageIdentity = await this.signInResolver(\n      {\n        result,\n        profile,\n      },\n      this.resolverContext,\n    );\n\n    return {\n      providerInfo: {\n        accessToken: result.accessToken,\n        expiresInSeconds: result.expiresInSeconds,\n      },\n      backstageIdentity: prepareBackstageIdentityResponse(backstageIdentity),\n      profile,\n    };\n  }\n\n  getKey = async (header: JWTHeaderParameters): Promise<KeyObject> => {\n    if (!header.kid) {\n      throw new AuthenticationError('No key id was specified in header');\n    }\n    const optionalCacheKey = this.keyCache.get<KeyObject>(header.kid);\n    if (optionalCacheKey) {\n      return crypto.createPublicKey(optionalCacheKey);\n    }\n    const keyText: string = await fetch(\n      `https://public-keys.auth.elb.${encodeURIComponent(\n        this.region,\n      )}.amazonaws.com/${encodeURIComponent(header.kid)}`,\n    ).then(response => response.text());\n    const keyValue = crypto.createPublicKey(keyText);\n    this.keyCache.set(\n      header.kid,\n      keyValue.export({ format: 'pem', type: 'spki' }),\n    );\n    return keyValue;\n  };\n}\n\n/**\n * Auth provider integration for AWS ALB auth\n *\n * @public\n */\nexport const awsAlb = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<AwsAlbResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<AwsAlbResult>;\n    };\n  }) {\n    return ({ config, resolverContext }) => {\n      const region = config.getString('region');\n      const issuer = config.getOptionalString('iss');\n\n      if (options?.signIn.resolver === undefined) {\n        throw new Error(\n          'SignInResolver is required to use this authentication provider',\n        );\n      }\n\n      const authHandler: AuthHandler<AwsAlbResult> = options?.authHandler\n        ? options.authHandler\n        : async ({ fullProfile }) => ({\n            profile: makeProfileInfo(fullProfile),\n          });\n\n      return new AwsAlbAuthProvider({\n        region,\n        issuer,\n        signInResolver: options?.signIn.resolver,\n        authHandler,\n        resolverContext,\n      });\n    };\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport passport, { Profile as PassportProfile } from 'passport';\nimport { Strategy as BitbucketStrategy } from 'passport-bitbucket-oauth2';\nimport {\n  encodeState,\n  OAuthAdapter,\n  OAuthEnvironmentHandler,\n  OAuthHandlers,\n  OAuthProviderOptions,\n  OAuthRefreshRequest,\n  OAuthResponse,\n  OAuthResult,\n  OAuthStartRequest,\n} from '../../lib/oauth';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport {\n  AuthHandler,\n  OAuthStartResponse,\n  SignInResolver,\n  AuthResolverContext,\n} from '../types';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\ntype Options = OAuthProviderOptions & {\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<BitbucketOAuthResult>;\n  resolverContext: AuthResolverContext;\n};\n\n/** @public */\nexport type BitbucketOAuthResult = {\n  fullProfile: BitbucketPassportProfile;\n  params: {\n    id_token?: string;\n    scope: string;\n    expires_in: number;\n  };\n  accessToken: string;\n  refreshToken?: string;\n};\n\n/** @public */\nexport type BitbucketPassportProfile = PassportProfile & {\n  id?: string;\n  displayName?: string;\n  username?: string;\n  avatarUrl?: string;\n  _json?: {\n    links?: {\n      avatar?: {\n        href?: string;\n      };\n    };\n  };\n};\n\nexport class BitbucketAuthProvider implements OAuthHandlers {\n  private readonly _strategy: BitbucketStrategy;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly resolverContext: AuthResolverContext;\n\n  constructor(options: Options) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.resolverContext = options.resolverContext;\n    this._strategy = new BitbucketStrategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        passReqToCallback: false,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(\n          undefined,\n          {\n            fullProfile,\n            params,\n            accessToken,\n            refreshToken,\n          },\n          {\n            refreshToken,\n          },\n        );\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<OAuthStartResponse> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      accessType: 'offline',\n      prompt: 'consent',\n      scope: req.scope,\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: BitbucketOAuthResult) {\n    result.fullProfile.avatarUrl =\n      result.fullProfile._json!.links!.avatar!.href;\n    const { profile } = await this.authHandler(result, this.resolverContext);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        this.resolverContext,\n      );\n    }\n\n    return response;\n  }\n}\n\n/**\n * Auth provider integration for BitBucket auth\n *\n * @public\n */\nexport const bitbucket = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<OAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<OAuthResult>;\n    };\n  }) {\n    return ({ providerId, globalConfig, config, resolverContext }) =>\n      OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n        const clientId = envConfig.getString('clientId');\n        const clientSecret = envConfig.getString('clientSecret');\n        const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n        const callbackUrl =\n          customCallbackUrl ||\n          `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n        const authHandler: AuthHandler<BitbucketOAuthResult> =\n          options?.authHandler\n            ? options.authHandler\n            : async ({ fullProfile, params }) => ({\n                profile: makeProfileInfo(fullProfile, params.id_token),\n              });\n\n        const provider = new BitbucketAuthProvider({\n          clientId,\n          clientSecret,\n          callbackUrl,\n          signInResolver: options?.signIn?.resolver,\n          authHandler,\n          resolverContext,\n        });\n\n        return OAuthAdapter.fromConfig(globalConfig, provider, {\n          providerId,\n          callbackUrl,\n        });\n      });\n  },\n  resolvers: {\n    /**\n     * Looks up the user by matching their username to the `bitbucket.org/username` annotation.\n     */\n    usernameMatchingUserEntityAnnotation(): SignInResolver<OAuthResult> {\n      return async (info, ctx) => {\n        const { result } = info;\n\n        if (!result.fullProfile.username) {\n          throw new Error('Bitbucket profile contained no Username');\n        }\n\n        return ctx.signInWithCatalogUser({\n          annotations: {\n            'bitbucket.org/username': result.fullProfile.username,\n          },\n        });\n      };\n    },\n    /**\n     * Looks up the user by matching their user ID to the `bitbucket.org/user-id` annotation.\n     */\n    userIdMatchingUserEntityAnnotation(): SignInResolver<OAuthResult> {\n      return async (info, ctx) => {\n        const { result } = info;\n\n        if (!result.fullProfile.id) {\n          throw new Error('Bitbucket profile contained no User ID');\n        }\n\n        return ctx.signInWithCatalogUser({\n          annotations: {\n            'bitbucket.org/user-id': result.fullProfile.id,\n          },\n        });\n      };\n    },\n  },\n});\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SignInResolver } from './types';\n\n/**\n * A common sign-in resolver that looks up the user using the local part of\n * their email address as the entity name.\n */\nexport const commonByEmailLocalPartResolver: SignInResolver<unknown> = async (\n  info,\n  ctx,\n) => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Login failed, user profile does not contain an email');\n  }\n  const [localPart] = profile.email.split('@');\n\n  return ctx.signInWithCatalogUser({\n    entityRef: { name: localPart },\n  });\n};\n\n/**\n * A common sign-in resolver that looks up the user using their email address\n * as email of the entity.\n */\nexport const commonByEmailResolver: SignInResolver<unknown> = async (\n  info,\n  ctx,\n) => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Login failed, user profile does not contain an email');\n  }\n\n  return ctx.signInWithCatalogUser({\n    filter: {\n      'spec.profile.email': profile.email,\n    },\n  });\n};\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  AuthHandler,\n  AuthProviderRouteHandlers,\n  AuthResolverContext,\n  AuthResponse,\n  SignInResolver,\n} from '../types';\nimport fetch, { Headers } from 'node-fetch';\nimport express from 'express';\nimport * as _ from 'lodash';\nimport { jwtVerify, createRemoteJWKSet } from 'jose';\nimport {\n  AuthenticationError,\n  ResponseError,\n  ForwardedError,\n} from '@backstage/errors';\nimport { CacheClient } from '@backstage/backend-common';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport { prepareBackstageIdentityResponse } from '../prepareBackstageIdentityResponse';\nimport { commonByEmailResolver } from '../resolvers';\n\n// JWT Web Token definitions are in the URL below\n// https://developers.cloudflare.com/cloudflare-one/identity/users/validating-json/\nexport const CF_JWT_HEADER = 'cf-access-jwt-assertion';\nexport const CF_AUTH_IDENTITY = 'cf-access-authenticated-user-email';\nconst COOKIE_AUTH_NAME = 'CF_Authorization';\nconst CACHE_PREFIX = 'providers/cloudflare-access/profile-v1';\n\n/**\n * Default cache TTL\n *\n * @public\n */\nexport const CF_DEFAULT_CACHE_TTL = 3600;\n\n/** @public */\nexport type Options = {\n  /**\n   * Access team name\n   *\n   * When you configure Access, the public certificates are available at this\n   * URL, where your-team-name is your team name:\n   * https://<your-team-name>.cloudflareaccess.com/cdn-cgi/access/certs\n   */\n  teamName: string;\n  authHandler: AuthHandler<CloudflareAccessResult>;\n  signInResolver: SignInResolver<CloudflareAccessResult>;\n  resolverContext: AuthResolverContext;\n  cache?: CacheClient;\n};\n\n/**\n * CloudflareAccessClaims\n *\n * Can be used in externally provided auth handler or sign in resolver to\n * enrich user profile for sign-in user entity\n *\n * @public\n */\nexport type CloudflareAccessClaims = {\n  /**\n   * `aud` identifies the application to which the JWT is issued.\n   */\n  aud: string[];\n  /**\n   * `email` contains the email address of the authenticated user.\n   */\n  email: string;\n  /**\n   * iat and exp are the issuance and expiration timestamps.\n   */\n  exp: number;\n  iat: number;\n  /**\n   * `nonce` is the session identifier.\n   */\n  nonce: string;\n  /**\n   * `identity_nonce` is available in the Application Token and can be used to\n   * query all group membership for a given user.\n   */\n  identity_nonce: string;\n  /**\n   * `sub` contains the identifier of the authenticated user.\n   */\n  sub: string;\n  /**\n   * `iss` the issuer is the application’s Cloudflare Access Domain URL.\n   */\n  iss: string;\n  /**\n   * `custom` contains SAML attributes in the Application Token specified by an\n   * administrator in the identity provider configuration.\n   */\n  custom: string;\n};\n\n/**\n * CloudflareAccessGroup\n *\n * @public\n */\nexport type CloudflareAccessGroup = {\n  /**\n   * Group id\n   */\n  id: string;\n  /**\n   * Name of group as defined in Cloudflare zero trust dashboard\n   */\n  name: string;\n  /**\n   * Access group email address\n   */\n  email: string;\n};\n\n/**\n * CloudflareAccessIdentityProfile\n *\n * Can be used in externally provided auth handler or sign in resolver to\n * enrich user profile for sign-in user entity\n *\n * @public\n */\nexport type CloudflareAccessIdentityProfile = {\n  id: string;\n  name: string;\n  email: string;\n  groups: CloudflareAccessGroup[];\n};\n\n/**\n * @public\n */\nexport type CloudflareAccessResult = {\n  claims: CloudflareAccessClaims;\n  cfIdentity: CloudflareAccessIdentityProfile;\n  expiresInSeconds?: number;\n  token: string;\n};\n\n/**\n * @public\n */\nexport type CloudflareAccessProviderInfo = {\n  /**\n   * Expiry of the access token in seconds.\n   */\n  expiresInSeconds?: number;\n  /**\n   * Cloudflare access identity profile with cloudflare access groups\n   */\n  cfAccessIdentityProfile?: CloudflareAccessIdentityProfile;\n  /**\n   * Cloudflare access claims\n   */\n  claims: CloudflareAccessClaims;\n};\n\nexport type CloudflareAccessResponse =\n  AuthResponse<CloudflareAccessProviderInfo>;\n\nexport class CloudflareAccessAuthProvider implements AuthProviderRouteHandlers {\n  private readonly teamName: string;\n  private readonly resolverContext: AuthResolverContext;\n  private readonly authHandler: AuthHandler<CloudflareAccessResult>;\n  private readonly signInResolver: SignInResolver<CloudflareAccessResult>;\n  private readonly jwtKeySet: any;\n  private readonly cache?: CacheClient;\n\n  constructor(options: Options) {\n    this.teamName = options.teamName;\n    this.authHandler = options.authHandler;\n    this.signInResolver = options.signInResolver;\n    this.resolverContext = options.resolverContext;\n    this.jwtKeySet = createRemoteJWKSet(\n      new URL(\n        `https://${this.teamName}.cloudflareaccess.com/cdn-cgi/access/certs`,\n      ),\n    );\n    this.cache = options.cache;\n  }\n\n  frameHandler(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  async refresh(req: express.Request, res: express.Response): Promise<void> {\n    // ProxiedSignInPage calls `/refresh` implicitly each time the backstage\n    // app is refreshed on the browser.\n    // User authentication is then checked here.\n    const result = await this.getResult(req);\n    const response = await this.handleResult(result);\n    res.json(response);\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  private async getIdentityProfile(\n    jwt: string,\n  ): Promise<CloudflareAccessIdentityProfile> {\n    const headers = new Headers();\n    // set both headers just the way inbound responses are set\n    headers.set(CF_JWT_HEADER, jwt);\n    headers.set('cookie', `${COOKIE_AUTH_NAME}=${jwt}`);\n    try {\n      const res = await fetch(\n        `https://${this.teamName}.cloudflareaccess.com/cdn-cgi/access/get-identity`,\n        { headers },\n      );\n      if (!res.ok) {\n        throw await ResponseError.fromResponse(res);\n      }\n      const cfIdentity = await res.json();\n      return cfIdentity as unknown as CloudflareAccessIdentityProfile;\n    } catch (err) {\n      throw new ForwardedError('getIdentityProfile failed', err);\n    }\n  }\n\n  private async getResult(\n    req: express.Request,\n  ): Promise<CloudflareAccessResult> {\n    // JWTs generated by Access are available in a request header as\n    // Cf-Access-Jwt-Assertion and as cookies as CF_Authorization.\n    let jwt = req.header(CF_JWT_HEADER);\n    if (!jwt) {\n      jwt = req.cookies.CF_Authorization;\n    }\n    if (!jwt) {\n      // Only throw if both are not provided by Cloudflare Access since either\n      // can be used.\n      throw new AuthenticationError(\n        `Missing ${CF_JWT_HEADER} from Cloudflare Access`,\n      );\n    }\n\n    // Cloudflare signs the JWT using the RSA Signature with SHA-256 (RS256).\n    // RS256 follows an asymmetric algorithm; a private key signs the JWTs and\n    // a separate public key verifies the signature.\n    const verifyResult = await jwtVerify(jwt, this.jwtKeySet, {\n      issuer: `https://${this.teamName}.cloudflareaccess.com`,\n    });\n    const sub = verifyResult.payload.sub;\n    const cfAccessResultStr = await this.cache?.get(`${CACHE_PREFIX}/${sub}`);\n    if (typeof cfAccessResultStr === 'string') {\n      const result = JSON.parse(cfAccessResultStr) as CloudflareAccessResult;\n      return {\n        ...result,\n        token: jwt,\n      };\n    }\n    const claims = verifyResult.payload as CloudflareAccessClaims;\n    // Builds a passport profile from JWT claims first\n    try {\n      // If we successfully fetch the get-identity endpoint,\n      // We supplement the passport profile with richer user identity\n      // information here.\n      const cfIdentity = await this.getIdentityProfile(jwt);\n      // Stores a stringified JSON object in cfaccess provider cache only when\n      // we complete all steps\n      const cfAccessResult = {\n        claims,\n        cfIdentity,\n        expiresInSeconds: claims.exp - claims.iat,\n      };\n      this.cache?.set(`${CACHE_PREFIX}/${sub}`, JSON.stringify(cfAccessResult));\n      return {\n        ...cfAccessResult,\n        token: jwt,\n      };\n    } catch (err) {\n      throw new ForwardedError(\n        'Failed to populate access identity information',\n        err,\n      );\n    }\n  }\n\n  private async handleResult(\n    result: CloudflareAccessResult,\n  ): Promise<CloudflareAccessResponse> {\n    const { profile } = await this.authHandler(result, this.resolverContext);\n    const backstageIdentity = await this.signInResolver(\n      {\n        result,\n        profile,\n      },\n      this.resolverContext,\n    );\n\n    return {\n      providerInfo: {\n        expiresInSeconds: result.expiresInSeconds,\n        claims: result.claims,\n        cfAccessIdentityProfile: result.cfIdentity,\n      },\n      backstageIdentity: prepareBackstageIdentityResponse(backstageIdentity),\n      profile,\n    };\n  }\n}\n\n/**\n * Auth provider integration for Cloudflare Access auth\n *\n * @public\n */\nexport const cfAccess = createAuthProviderIntegration({\n  create(options: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<CloudflareAccessResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<CloudflareAccessResult>;\n    };\n    /**\n     * CacheClient object that was configured for the Backstage backend,\n     * should be provided via the backend auth plugin.\n     */\n    cache?: CacheClient;\n  }) {\n    return ({ config, resolverContext }) => {\n      const teamName = config.getString('teamName');\n\n      if (!options.signIn.resolver) {\n        throw new Error(\n          'SignInResolver is required to use this authentication provider',\n        );\n      }\n\n      const authHandler: AuthHandler<CloudflareAccessResult> =\n        options?.authHandler\n          ? options.authHandler\n          : async ({ claims, cfIdentity }) => {\n              return {\n                profile: {\n                  email: claims.email,\n                  displayName: cfIdentity.name,\n                },\n              };\n            };\n\n      return new CloudflareAccessAuthProvider({\n        teamName,\n        signInResolver: options?.signIn.resolver,\n        authHandler,\n        resolverContext,\n        ...(options.cache && { cache: options.cache }),\n      });\n    };\n  },\n  resolvers: {\n    /**\n     * Looks up the user by matching their email to the entity email.\n     */\n    emailMatchingUserEntityProfileEmail: () => commonByEmailResolver,\n  },\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { gcpIapAuthenticator } from '@backstage/plugin-auth-backend-module-gcp-iap-provider';\nimport { createProxyAuthProviderFactory } from '@backstage/plugin-auth-node';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport { AuthHandler, SignInResolver } from '../types';\nimport { GcpIapResult } from './types';\n\n/**\n * Auth provider integration for Google Identity-Aware Proxy auth\n *\n * @public\n */\nexport const gcpIap = createAuthProviderIntegration({\n  create(options: {\n    /**\n     * The profile transformation function used to verify and convert the auth\n     * response into the profile that will be presented to the user. The default\n     * implementation just provides the authenticated email that the IAP\n     * presented.\n     */\n    authHandler?: AuthHandler<GcpIapResult>;\n\n    /**\n     * Configures sign-in for this provider.\n     */\n    signIn: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<GcpIapResult>;\n    };\n  }) {\n    return createProxyAuthProviderFactory({\n      authenticator: gcpIapAuthenticator,\n      profileTransform: options?.authHandler,\n      signInResolver: options?.signIn?.resolver,\n    });\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Profile as PassportProfile } from 'passport';\nimport { AuthHandler, StateEncoder } from '../types';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport {\n  createOAuthProviderFactory,\n  OAuthAuthenticatorResult,\n  ProfileTransform,\n  SignInResolver,\n} from '@backstage/plugin-auth-node';\nimport { githubAuthenticator } from '@backstage/plugin-auth-backend-module-github-provider';\n\n/** @public */\nexport type GithubOAuthResult = {\n  fullProfile: PassportProfile;\n  params: {\n    scope: string;\n    expires_in?: string;\n    refresh_token_expires_in?: string;\n  };\n  accessToken: string;\n  refreshToken?: string;\n};\n\n/**\n * Auth provider integration for GitHub auth\n *\n * @public\n */\nexport const github = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<GithubOAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<GithubOAuthResult>;\n    };\n\n    /**\n     * The state encoder used to encode the 'state' parameter on the OAuth request.\n     *\n     * It should return a string that takes the state params (from the request), url encodes the params\n     * and finally base64 encodes them.\n     *\n     * Providing your own stateEncoder will allow you to add addition parameters to the state field.\n     *\n     * It is typed as follows:\n     *   `export type StateEncoder = (input: OAuthState) => Promise<{encodedState: string}>;`\n     *\n     * Note: the stateEncoder must encode a 'nonce' value and an 'env' value. Without this, the OAuth flow will fail\n     * (These two values will be set by the req.state by default)\n     *\n     * For more information, please see the helper module in ../../oauth/helpers #readState\n     */\n    stateEncoder?: StateEncoder;\n  }) {\n    const authHandler = options?.authHandler;\n    const signInResolver = options?.signIn?.resolver;\n    return createOAuthProviderFactory({\n      authenticator: githubAuthenticator,\n      profileTransform:\n        authHandler &&\n        ((async (result, ctx) =>\n          authHandler!(\n            {\n              fullProfile: result.fullProfile,\n              accessToken: result.session.accessToken,\n              params: {\n                scope: result.session.scope,\n                expires_in: result.session.expiresInSeconds\n                  ? String(result.session.expiresInSeconds)\n                  : '',\n                refresh_token_expires_in: result.session\n                  .refreshTokenExpiresInSeconds\n                  ? String(result.session.refreshTokenExpiresInSeconds)\n                  : '',\n              },\n            },\n            ctx,\n          )) as ProfileTransform<OAuthAuthenticatorResult<PassportProfile>>),\n      signInResolver:\n        signInResolver &&\n        ((async ({ profile, result }, ctx) =>\n          signInResolver(\n            {\n              profile: profile,\n              result: {\n                fullProfile: result.fullProfile,\n                accessToken: result.session.accessToken,\n                refreshToken: result.session.refreshToken,\n                params: {\n                  scope: result.session.scope,\n                  expires_in: result.session.expiresInSeconds\n                    ? String(result.session.expiresInSeconds)\n                    : '',\n                  refresh_token_expires_in: result.session\n                    .refreshTokenExpiresInSeconds\n                    ? String(result.session.refreshTokenExpiresInSeconds)\n                    : '',\n                },\n              },\n            },\n            ctx,\n          )) as SignInResolver<OAuthAuthenticatorResult<PassportProfile>>),\n    });\n  },\n  resolvers: {\n    /**\n     * Looks up the user by matching their GitHub username to the entity name.\n     */\n    usernameMatchingUserEntityName: (): SignInResolver<GithubOAuthResult> => {\n      return async (info, ctx) => {\n        const { fullProfile } = info.result;\n\n        const userId = fullProfile.username;\n        if (!userId) {\n          throw new Error(`GitHub user profile does not contain a username`);\n        }\n\n        return ctx.signInWithCatalogUser({ entityRef: { name: userId } });\n      };\n    },\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SignInResolver, AuthHandler } from '../types';\nimport { OAuthResult } from '../../lib/oauth';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport { createOAuthProviderFactory } from '@backstage/plugin-auth-node';\nimport {\n  adaptLegacyOAuthHandler,\n  adaptLegacyOAuthSignInResolver,\n} from '../../lib/legacy';\nimport { gitlabAuthenticator } from '@backstage/plugin-auth-backend-module-gitlab-provider';\n\n/**\n * Auth provider integration for GitLab auth\n *\n * @public\n */\nexport const gitlab = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<OAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      resolver: SignInResolver<OAuthResult>;\n    };\n  }) {\n    return createOAuthProviderFactory({\n      authenticator: gitlabAuthenticator,\n      profileTransform: adaptLegacyOAuthHandler(options?.authHandler),\n      signInResolver: adaptLegacyOAuthSignInResolver(options?.signIn?.resolver),\n    });\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  googleAuthenticator,\n  googleSignInResolvers,\n} from '@backstage/plugin-auth-backend-module-google-provider';\nimport {\n  commonSignInResolvers,\n  createOAuthProviderFactory,\n} from '@backstage/plugin-auth-node';\nimport {\n  adaptLegacyOAuthHandler,\n  adaptLegacyOAuthSignInResolver,\n  adaptOAuthSignInResolverToLegacy,\n} from '../../lib/legacy';\nimport { OAuthResult } from '../../lib/oauth';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport { AuthHandler, SignInResolver } from '../types';\n\n/**\n * Auth provider integration for Google auth\n *\n * @public\n */\nexport const google = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<OAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<OAuthResult>;\n    };\n  }) {\n    return createOAuthProviderFactory({\n      authenticator: googleAuthenticator,\n      profileTransform: adaptLegacyOAuthHandler(options?.authHandler),\n      signInResolver: adaptLegacyOAuthSignInResolver(options?.signIn?.resolver),\n    });\n  },\n  resolvers: adaptOAuthSignInResolverToLegacy({\n    emailLocalPartMatchingUserEntityName:\n      commonSignInResolvers.emailLocalPartMatchingUserEntityName(),\n    emailMatchingUserEntityProfileEmail:\n      commonSignInResolvers.emailMatchingUserEntityProfileEmail(),\n    emailMatchingUserEntityAnnotation:\n      googleSignInResolvers.emailMatchingUserEntityAnnotation(),\n  }),\n});\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// BACKSTAGE_SESSION_EXPIRATION the default session expiration time\n// TODO: find a less hard-coded way to access this, perhaps by reading it from the configuration.\nexport const BACKSTAGE_SESSION_EXPIRATION = 3600;\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport passport from 'passport';\nimport { Strategy as MicrosoftStrategy } from 'passport-microsoft';\nimport {\n  encodeState,\n  OAuthAdapter,\n  OAuthEnvironmentHandler,\n  OAuthHandlers,\n  OAuthProviderOptions,\n  OAuthRefreshRequest,\n  OAuthResponse,\n  OAuthResult,\n  OAuthStartRequest,\n} from '../../lib/oauth';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthHandler,\n  OAuthStartResponse,\n  SignInResolver,\n  AuthResolverContext,\n} from '../types';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport {\n  commonByEmailLocalPartResolver,\n  commonByEmailResolver,\n} from '../resolvers';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport fetch from 'node-fetch';\nimport { decodeJwt } from 'jose';\nimport { Profile as PassportProfile } from 'passport';\nimport { BACKSTAGE_SESSION_EXPIRATION } from '../../lib/session';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\ntype Options = OAuthProviderOptions & {\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  logger: LoggerService;\n  resolverContext: AuthResolverContext;\n  authorizationUrl?: string;\n  tokenUrl?: string;\n};\n\nexport class MicrosoftAuthProvider implements OAuthHandlers {\n  private readonly _strategy: MicrosoftStrategy;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly logger: LoggerService;\n  private readonly resolverContext: AuthResolverContext;\n\n  constructor(options: Options) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.logger = options.logger;\n    this.resolverContext = options.resolverContext;\n\n    this._strategy = new MicrosoftStrategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        authorizationURL: options.authorizationUrl,\n        tokenURL: options.tokenUrl,\n        passReqToCallback: false,\n        skipUserProfile: (\n          accessToken: string,\n          done: (err: unknown, skip: boolean) => void,\n        ) => {\n          done(null, this.skipUserProfile(accessToken));\n        },\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(undefined, { fullProfile, accessToken, params }, { refreshToken });\n      },\n    );\n  }\n\n  private skipUserProfile = (accessToken: string): boolean => {\n    const { aud, scp } = decodeJwt(accessToken);\n    const hasGraphReadScope =\n      aud === '00000003-0000-0000-c000-000000000000' &&\n      (scp as string)\n        .split(' ')\n        .map(s => s.toLowerCase())\n        .includes('user.read');\n    return !hasGraphReadScope;\n  };\n\n  async start(req: OAuthStartRequest): Promise<OAuthStartResponse> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      scope: req.scope,\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n\n    return {\n      response: await this.handleResult({\n        params,\n        accessToken,\n        ...(!this.skipUserProfile(accessToken) && {\n          fullProfile: await executeFetchUserProfileStrategy(\n            this._strategy,\n            accessToken,\n          ),\n        }),\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: {\n    fullProfile?: PassportProfile;\n    params: {\n      id_token?: string;\n      scope: string;\n      expires_in: number;\n    };\n    accessToken: string;\n    refreshToken?: string;\n  }): Promise<OAuthResponse> {\n    let profile = {};\n    if (result.fullProfile) {\n      const photo = await this.getUserPhoto(result.accessToken);\n      result.fullProfile.photos = photo ? [{ value: photo }] : undefined;\n      ({ profile } = await this.authHandler(\n        result as OAuthResult,\n        this.resolverContext,\n      ));\n    }\n\n    const expiresInSeconds =\n      result.params.expires_in === undefined\n        ? BACKSTAGE_SESSION_EXPIRATION\n        : Math.min(result.params.expires_in, BACKSTAGE_SESSION_EXPIRATION);\n\n    return {\n      providerInfo: {\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds,\n        ...{ idToken: result.params.id_token },\n      },\n      profile,\n      ...(result.fullProfile &&\n        this.signInResolver && {\n          backstageIdentity: await this.signInResolver(\n            { result: result as OAuthResult, profile },\n            this.resolverContext,\n          ),\n        }),\n    };\n  }\n\n  private async getUserPhoto(accessToken: string): Promise<string | undefined> {\n    try {\n      const res = await fetch(\n        'https://graph.microsoft.com/v1.0/me/photos/48x48/$value',\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        },\n      );\n      const data = await res.buffer();\n\n      return `data:image/jpeg;base64,${data.toString('base64')}`;\n    } catch (error) {\n      this.logger.warn(\n        `Could not retrieve user profile photo from Microsoft Graph API: ${error}`,\n      );\n      return undefined;\n    }\n  }\n}\n\n/**\n * Auth provider integration for Microsoft auth\n *\n * @public\n */\nexport const microsoft = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<OAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<OAuthResult>;\n    };\n  }) {\n    return ({ providerId, globalConfig, config, logger, resolverContext }) =>\n      OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n        const clientId = envConfig.getString('clientId');\n        const clientSecret = envConfig.getString('clientSecret');\n        const tenantId = envConfig.getString('tenantId');\n\n        const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n        const callbackUrl =\n          customCallbackUrl ||\n          `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n        const authorizationUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/authorize`;\n        const tokenUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`;\n\n        const authHandler: AuthHandler<OAuthResult> = options?.authHandler\n          ? options.authHandler\n          : async ({ fullProfile, params }) => ({\n              profile: makeProfileInfo(fullProfile ?? {}, params.id_token),\n            });\n\n        const provider = new MicrosoftAuthProvider({\n          clientId,\n          clientSecret,\n          callbackUrl,\n          authorizationUrl,\n          tokenUrl,\n          authHandler,\n          signInResolver: options?.signIn?.resolver,\n          logger,\n          resolverContext,\n        });\n\n        return OAuthAdapter.fromConfig(globalConfig, provider, {\n          providerId,\n          callbackUrl,\n        });\n      });\n  },\n  resolvers: {\n    /**\n     * Looks up the user by matching their email local part to the entity name.\n     */\n    emailLocalPartMatchingUserEntityName: () => commonByEmailLocalPartResolver,\n    /**\n     * Looks up the user by matching their email to the entity email.\n     */\n    emailMatchingUserEntityProfileEmail: () => commonByEmailResolver,\n    /**\n     * Looks up the user by matching their email to the `microsoft.com/email` annotation.\n     */\n    emailMatchingUserEntityAnnotation(): SignInResolver<OAuthResult> {\n      return async (info, ctx) => {\n        const { profile } = info;\n\n        if (!profile.email) {\n          throw new Error('Microsoft profile contained no email');\n        }\n\n        return ctx.signInWithCatalogUser({\n          annotations: {\n            'microsoft.com/email': profile.email,\n          },\n        });\n      };\n    },\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OAuthResult } from '../../lib/oauth';\nimport { AuthHandler, SignInResolver } from '../types';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport {\n  adaptLegacyOAuthHandler,\n  adaptLegacyOAuthSignInResolver,\n} from '../../lib/legacy';\nimport { createOAuthProviderFactory } from '@backstage/plugin-auth-node';\nimport { oauth2Authenticator } from '@backstage/plugin-auth-backend-module-oauth2-provider';\n\n/**\n * Auth provider integration for generic OAuth2 auth\n *\n * @public\n */\nexport const oauth2 = createAuthProviderIntegration({\n  create(options?: {\n    authHandler?: AuthHandler<OAuthResult>;\n\n    signIn?: {\n      resolver: SignInResolver<OAuthResult>;\n    };\n  }) {\n    return createOAuthProviderFactory({\n      authenticator: oauth2Authenticator,\n      profileTransform: adaptLegacyOAuthHandler(options?.authHandler),\n      signInResolver: adaptLegacyOAuthSignInResolver(options?.signIn?.resolver),\n    });\n  },\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createProxyAuthProviderFactory } from '@backstage/plugin-auth-node';\nimport { AuthHandler, SignInResolver } from '../types';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport {\n  type OAuth2ProxyResult,\n  oauth2ProxyAuthenticator,\n} from '@backstage/plugin-auth-backend-module-oauth2-proxy-provider';\n\n/**\n * Auth provider integration for oauth2-proxy auth\n *\n * @public\n */\nexport const oauth2Proxy = createAuthProviderIntegration({\n  create(options: {\n    /**\n     * Configure an auth handler to generate a profile for the user.\n     *\n     * The default implementation uses the value of the `X-Forwarded-Preferred-Username`\n     * header as the display name, falling back to `X-Forwarded-User`, and the value of\n     * the `X-Forwarded-Email` header as the email address.\n     */\n    authHandler?: AuthHandler<OAuth2ProxyResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<OAuth2ProxyResult>;\n    };\n  }) {\n    return createProxyAuthProviderFactory({\n      authenticator: oauth2ProxyAuthenticator,\n      profileTransform: options?.authHandler,\n      signInResolver: options?.signIn?.resolver,\n    });\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport {\n  Client,\n  ClientAuthMethod,\n  Issuer,\n  Strategy as OidcStrategy,\n  TokenSet,\n  UserinfoResponse,\n} from 'openid-client';\nimport {\n  encodeState,\n  OAuthAdapter,\n  OAuthEnvironmentHandler,\n  OAuthHandlers,\n  OAuthProviderOptions,\n  OAuthRefreshRequest,\n  OAuthResponse,\n  OAuthStartRequest,\n} from '../../lib/oauth';\nimport {\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthHandler,\n  AuthResolverContext,\n  OAuthStartResponse,\n  SignInResolver,\n} from '../types';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport {\n  commonByEmailLocalPartResolver,\n  commonByEmailResolver,\n} from '../resolvers';\nimport { BACKSTAGE_SESSION_EXPIRATION } from '../../lib/session';\n\ntype PrivateInfo = {\n  refreshToken?: string;\n};\n\ntype OidcImpl = {\n  strategy: OidcStrategy<UserinfoResponse, Client>;\n  client: Client;\n};\n\n/**\n * authentication result for the OIDC which includes the token set and user information (a profile response sent by OIDC server)\n * @public\n */\nexport type OidcAuthResult = {\n  tokenset: TokenSet;\n  userinfo: UserinfoResponse;\n};\n\nexport type Options = OAuthProviderOptions & {\n  metadataUrl: string;\n  scope?: string;\n  prompt?: string;\n  tokenEndpointAuthMethod?: ClientAuthMethod;\n  tokenSignedResponseAlg?: string;\n  signInResolver?: SignInResolver<OidcAuthResult>;\n  authHandler: AuthHandler<OidcAuthResult>;\n  resolverContext: AuthResolverContext;\n};\n\nexport class OidcAuthProvider implements OAuthHandlers {\n  private readonly implementation: Promise<OidcImpl>;\n  private readonly scope?: string;\n  private readonly prompt?: string;\n\n  private readonly signInResolver?: SignInResolver<OidcAuthResult>;\n  private readonly authHandler: AuthHandler<OidcAuthResult>;\n  private readonly resolverContext: AuthResolverContext;\n\n  constructor(options: Options) {\n    this.implementation = this.setupStrategy(options);\n    this.scope = options.scope;\n    this.prompt = options.prompt;\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.resolverContext = options.resolverContext;\n  }\n\n  async start(req: OAuthStartRequest): Promise<OAuthStartResponse> {\n    const { strategy } = await this.implementation;\n    const options: Record<string, string> = {\n      scope: req.scope || this.scope || 'openid profile email',\n      state: encodeState(req.state),\n    };\n    const prompt = this.prompt || 'none';\n    if (prompt !== 'auto') {\n      options.prompt = prompt;\n    }\n    return await executeRedirectStrategy(req, strategy, options);\n  }\n\n  async handler(req: express.Request) {\n    const { strategy } = await this.implementation;\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OidcAuthResult,\n      PrivateInfo\n    >(req, strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { client } = await this.implementation;\n    const tokenset = await client.refresh(req.refreshToken);\n    if (!tokenset.access_token) {\n      throw new Error('Refresh failed');\n    }\n    if (!tokenset.scope) {\n      tokenset.scope = req.scope;\n    }\n    const userinfo = await client.userinfo(tokenset.access_token);\n\n    return {\n      response: await this.handleResult({ tokenset, userinfo }),\n      refreshToken: tokenset.refresh_token,\n    };\n  }\n\n  private async setupStrategy(options: Options): Promise<OidcImpl> {\n    const issuer = await Issuer.discover(options.metadataUrl);\n    const client = new issuer.Client({\n      access_type: 'offline', // this option must be passed to provider to receive a refresh token\n      client_id: options.clientId,\n      client_secret: options.clientSecret,\n      redirect_uris: [options.callbackUrl],\n      response_types: ['code'],\n      token_endpoint_auth_method:\n        options.tokenEndpointAuthMethod || 'client_secret_basic',\n      id_token_signed_response_alg: options.tokenSignedResponseAlg || 'RS256',\n      scope: options.scope || '',\n    });\n\n    const strategy = new OidcStrategy(\n      {\n        client,\n        passReqToCallback: false,\n      },\n      (\n        tokenset: TokenSet,\n        userinfo: UserinfoResponse,\n        done: PassportDoneCallback<OidcAuthResult, PrivateInfo>,\n      ) => {\n        if (typeof done !== 'function') {\n          throw new Error(\n            'OIDC IdP must provide a userinfo_endpoint in the metadata response',\n          );\n        }\n        done(\n          undefined,\n          { tokenset, userinfo },\n          {\n            refreshToken: tokenset.refresh_token,\n          },\n        );\n      },\n    );\n    strategy.error = console.error;\n    return { strategy, client };\n  }\n\n  // Use this function to grab the user profile info from the token\n  // Then populate the profile with it\n  private async handleResult(result: OidcAuthResult): Promise<OAuthResponse> {\n    const { profile } = await this.authHandler(result, this.resolverContext);\n\n    const expiresInSeconds =\n      result.tokenset.expires_in === undefined\n        ? BACKSTAGE_SESSION_EXPIRATION\n        : Math.min(result.tokenset.expires_in, BACKSTAGE_SESSION_EXPIRATION);\n\n    let backstageIdentity = undefined;\n    if (this.signInResolver) {\n      backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        this.resolverContext,\n      );\n    }\n\n    return {\n      backstageIdentity,\n      providerInfo: {\n        idToken: result.tokenset.id_token,\n        accessToken: result.tokenset.access_token!,\n        scope: result.tokenset.scope!,\n        expiresInSeconds,\n      },\n      profile,\n    };\n  }\n}\n\n/**\n * Auth provider integration for generic OpenID Connect auth\n *\n * @public\n */\nexport const oidc = createAuthProviderIntegration({\n  create(options?: {\n    authHandler?: AuthHandler<OidcAuthResult>;\n\n    signIn?: {\n      resolver: SignInResolver<OidcAuthResult>;\n    };\n  }) {\n    return ({ providerId, globalConfig, config, resolverContext }) =>\n      OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n        const clientId = envConfig.getString('clientId');\n        const clientSecret = envConfig.getString('clientSecret');\n        const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n        const callbackUrl =\n          customCallbackUrl ||\n          `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n        const metadataUrl = envConfig.getString('metadataUrl');\n        const tokenEndpointAuthMethod = envConfig.getOptionalString(\n          'tokenEndpointAuthMethod',\n        ) as ClientAuthMethod;\n        const tokenSignedResponseAlg = envConfig.getOptionalString(\n          'tokenSignedResponseAlg',\n        );\n        const scope = envConfig.getOptionalString('scope');\n        const prompt = envConfig.getOptionalString('prompt');\n\n        const authHandler: AuthHandler<OidcAuthResult> = options?.authHandler\n          ? options.authHandler\n          : async ({ userinfo }) => ({\n              profile: {\n                displayName: userinfo.name,\n                email: userinfo.email,\n                picture: userinfo.picture,\n              },\n            });\n\n        const provider = new OidcAuthProvider({\n          clientId,\n          clientSecret,\n          callbackUrl,\n          tokenEndpointAuthMethod,\n          tokenSignedResponseAlg,\n          metadataUrl,\n          scope,\n          prompt,\n          signInResolver: options?.signIn?.resolver,\n          authHandler,\n          resolverContext,\n        });\n\n        return OAuthAdapter.fromConfig(globalConfig, provider, {\n          providerId,\n          callbackUrl,\n        });\n      });\n  },\n  resolvers: {\n    /**\n     * Looks up the user by matching their email local part to the entity name.\n     */\n    emailLocalPartMatchingUserEntityName: () => commonByEmailLocalPartResolver,\n    /**\n     * Looks up the user by matching their email to the entity email.\n     */\n    emailMatchingUserEntityProfileEmail: () => commonByEmailResolver,\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthHandler, SignInResolver } from '../types';\nimport { OAuthResult } from '../../lib/oauth';\n\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport { createOAuthProviderFactory } from '@backstage/plugin-auth-node';\nimport {\n  adaptLegacyOAuthHandler,\n  adaptLegacyOAuthSignInResolver,\n} from '../../lib/legacy';\nimport { oktaAuthenticator } from '@backstage/plugin-auth-backend-module-okta-provider';\nimport {\n  commonByEmailLocalPartResolver,\n  commonByEmailResolver,\n} from '../resolvers';\n\n/**\n * Auth provider integration for Okta auth\n *\n * @public\n */\nexport const okta = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<OAuthResult>;\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      resolver: SignInResolver<OAuthResult>;\n    };\n  }) {\n    return createOAuthProviderFactory({\n      authenticator: oktaAuthenticator,\n      profileTransform: adaptLegacyOAuthHandler(options?.authHandler),\n      signInResolver: adaptLegacyOAuthSignInResolver(options?.signIn?.resolver),\n    });\n  },\n  resolvers: {\n    /**\n     * Looks up the user by matching their email local part to the entity name.\n     */\n    emailLocalPartMatchingUserEntityName: () => commonByEmailLocalPartResolver,\n    /**\n     * Looks up the user by matching their email to the entity email.\n     */\n    emailMatchingUserEntityProfileEmail: () => commonByEmailResolver,\n    /**\n     * Looks up the user by matching their email to the `okta.com/email` annotation.\n     */\n    emailMatchingUserEntityAnnotation(): SignInResolver<OAuthResult> {\n      return async (info, ctx) => {\n        const { profile } = info;\n\n        if (!profile.email) {\n          throw new Error('Okta profile contained no email');\n        }\n\n        return ctx.signInWithCatalogUser({\n          annotations: {\n            'okta.com/email': profile.email,\n          },\n        });\n      };\n    },\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Strategy as OneLoginStrategy } from 'passport-onelogin-oauth';\nimport express from 'express';\nimport {\n  OAuthAdapter,\n  OAuthProviderOptions,\n  OAuthHandlers,\n  OAuthResponse,\n  OAuthEnvironmentHandler,\n  OAuthStartRequest,\n  encodeState,\n  OAuthRefreshRequest,\n  OAuthResult,\n} from '../../lib/oauth';\nimport passport from 'passport';\nimport {\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  executeFetchUserProfileStrategy,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  OAuthStartResponse,\n  AuthHandler,\n  SignInResolver,\n  AuthResolverContext,\n} from '../types';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\nexport type Options = OAuthProviderOptions & {\n  issuer: string;\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  resolverContext: AuthResolverContext;\n};\n\nexport class OneLoginProvider implements OAuthHandlers {\n  private readonly _strategy: any;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly resolverContext: AuthResolverContext;\n\n  constructor(options: Options) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.resolverContext = options.resolverContext;\n    this._strategy = new OneLoginStrategy(\n      {\n        issuer: options.issuer,\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        passReqToCallback: false,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(\n          undefined,\n          {\n            accessToken,\n            refreshToken,\n            params,\n            fullProfile,\n          },\n          {\n            refreshToken,\n          },\n        );\n      },\n    );\n  }\n  async start(req: OAuthStartRequest): Promise<OAuthStartResponse> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      accessType: 'offline',\n      prompt: 'consent',\n      scope: 'openid',\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: OAuthResult) {\n    const { profile } = await this.authHandler(result, this.resolverContext);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        this.resolverContext,\n      );\n    }\n\n    return response;\n  }\n}\n\n/**\n * Auth provider integration for OneLogin auth\n *\n * @public\n */\nexport const onelogin = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<OAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<OAuthResult>;\n    };\n  }) {\n    return ({ providerId, globalConfig, config, resolverContext }) =>\n      OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n        const clientId = envConfig.getString('clientId');\n        const clientSecret = envConfig.getString('clientSecret');\n        const issuer = envConfig.getString('issuer');\n        const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n        const callbackUrl =\n          customCallbackUrl ||\n          `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n        const authHandler: AuthHandler<OAuthResult> = options?.authHandler\n          ? options.authHandler\n          : async ({ fullProfile, params }) => ({\n              profile: makeProfileInfo(fullProfile, params.id_token),\n            });\n\n        const provider = new OneLoginProvider({\n          clientId,\n          clientSecret,\n          callbackUrl,\n          issuer,\n          authHandler,\n          signInResolver: options?.signIn?.resolver,\n          resolverContext,\n        });\n\n        return OAuthAdapter.fromConfig(globalConfig, provider, {\n          providerId,\n          callbackUrl,\n        });\n      });\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport { SamlConfig } from 'passport-saml/lib/passport-saml/types';\nimport {\n  Strategy as SamlStrategy,\n  Profile as SamlProfile,\n  VerifyWithoutRequest,\n} from 'passport-saml';\nimport {\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthProviderRouteHandlers,\n  AuthHandler,\n  SignInResolver,\n  AuthResponse,\n  AuthResolverContext,\n} from '../types';\nimport { postMessageResponse } from '../../lib/flow';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport { AuthenticationError, isError } from '@backstage/errors';\nimport { prepareBackstageIdentityResponse } from '../prepareBackstageIdentityResponse';\n\n/** @public */\nexport type SamlAuthResult = {\n  fullProfile: any;\n};\n\ntype Options = SamlConfig & {\n  signInResolver?: SignInResolver<SamlAuthResult>;\n  authHandler: AuthHandler<SamlAuthResult>;\n  resolverContext: AuthResolverContext;\n  appUrl: string;\n};\n\nexport class SamlAuthProvider implements AuthProviderRouteHandlers {\n  private readonly strategy: SamlStrategy;\n  private readonly signInResolver?: SignInResolver<SamlAuthResult>;\n  private readonly authHandler: AuthHandler<SamlAuthResult>;\n  private readonly resolverContext: AuthResolverContext;\n  private readonly appUrl: string;\n\n  constructor(options: Options) {\n    this.appUrl = options.appUrl;\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.resolverContext = options.resolverContext;\n    this.strategy = new SamlStrategy({ ...options }, ((\n      fullProfile: SamlProfile,\n      done: PassportDoneCallback<SamlAuthResult>,\n    ) => {\n      // TODO: There's plenty more validation and profile handling to do here,\n      //       this provider is currently only intended to validate the provider pattern\n      //       for non-oauth auth flows.\n      // TODO: This flow doesn't issue an identity token that can be used to validate\n      //       the identity of the user in other backends, which we need in some form.\n      done(undefined, { fullProfile });\n    }) as VerifyWithoutRequest);\n  }\n\n  async start(req: express.Request, res: express.Response): Promise<void> {\n    const { url } = await executeRedirectStrategy(req, this.strategy, {});\n    res.redirect(url);\n  }\n\n  async frameHandler(\n    req: express.Request,\n    res: express.Response,\n  ): Promise<void> {\n    try {\n      const { result } = await executeFrameHandlerStrategy<SamlAuthResult>(\n        req,\n        this.strategy,\n      );\n\n      const { profile } = await this.authHandler(result, this.resolverContext);\n\n      const response: AuthResponse<{}> = {\n        profile,\n        providerInfo: {},\n      };\n\n      if (this.signInResolver) {\n        const signInResponse = await this.signInResolver(\n          {\n            result,\n            profile,\n          },\n          this.resolverContext,\n        );\n\n        response.backstageIdentity =\n          prepareBackstageIdentityResponse(signInResponse);\n      }\n\n      return postMessageResponse(res, this.appUrl, {\n        type: 'authorization_response',\n        response,\n      });\n    } catch (error) {\n      const { name, message } = isError(error)\n        ? error\n        : new Error('Encountered invalid error'); // Being a bit safe and not forwarding the bad value\n      return postMessageResponse(res, this.appUrl, {\n        type: 'authorization_response',\n        error: { name, message },\n      });\n    }\n  }\n\n  async logout(_req: express.Request, res: express.Response): Promise<void> {\n    res.end();\n  }\n}\n\ntype SignatureAlgorithm = 'sha1' | 'sha256' | 'sha512';\n\n/**\n * Auth provider integration for SAML auth\n *\n * @public\n */\nexport const saml = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<SamlAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<SamlAuthResult>;\n    };\n  }) {\n    return ({ providerId, globalConfig, config, resolverContext }) => {\n      const authHandler: AuthHandler<SamlAuthResult> = options?.authHandler\n        ? options.authHandler\n        : async ({ fullProfile }) => ({\n            profile: {\n              email: fullProfile.email,\n              displayName: fullProfile.displayName,\n            },\n          });\n\n      return new SamlAuthProvider({\n        callbackUrl: `${globalConfig.baseUrl}/${providerId}/handler/frame`,\n        entryPoint: config.getString('entryPoint'),\n        logoutUrl: config.getOptionalString('logoutUrl'),\n        audience: config.getOptionalString('audience'),\n        issuer: config.getString('issuer'),\n        cert: config.getString('cert'),\n        privateKey: config.getOptionalString('privateKey'),\n        authnContext: config.getOptionalStringArray('authnContext'),\n        identifierFormat: config.getOptionalString('identifierFormat'),\n        decryptionPvk: config.getOptionalString('decryptionPvk'),\n        signatureAlgorithm: config.getOptionalString('signatureAlgorithm') as\n          | SignatureAlgorithm\n          | undefined,\n        digestAlgorithm: config.getOptionalString('digestAlgorithm'),\n        acceptedClockSkewMs: config.getOptionalNumber('acceptedClockSkewMs'),\n\n        appUrl: globalConfig.appUrl,\n        authHandler,\n        signInResolver: options?.signIn?.resolver,\n        resolverContext,\n      });\n    };\n  },\n  resolvers: {\n    /**\n     * Looks up the user by matching their nameID to the entity name.\n     */\n    nameIdMatchingUserEntityName(): SignInResolver<SamlAuthResult> {\n      return async (info, ctx) => {\n        const id = info.result.fullProfile.nameID;\n\n        if (!id) {\n          throw new AuthenticationError('No nameID found in SAML response');\n        }\n\n        return ctx.signInWithCatalogUser({\n          entityRef: { name: id },\n        });\n      };\n    },\n  },\n});\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  encodeState,\n  OAuthAdapter,\n  OAuthEnvironmentHandler,\n  OAuthHandlers,\n  OAuthProviderOptions,\n  OAuthRefreshRequest,\n  OAuthResponse,\n  OAuthStartRequest,\n} from '../../lib/oauth';\nimport { Strategy as OAuth2Strategy, VerifyCallback } from 'passport-oauth2';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n} from '../../lib/passport';\nimport {\n  AuthHandler,\n  AuthResolverContext,\n  OAuthStartResponse,\n  SignInResolver,\n} from '../types';\nimport express from 'express';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport { Profile as PassportProfile } from 'passport';\nimport { commonByEmailResolver } from '../resolvers';\nimport fetch from 'node-fetch';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\n/** @public */\nexport type BitbucketServerOAuthResult = {\n  fullProfile: PassportProfile;\n  params: {\n    scope: string;\n    access_token?: string;\n    token_type?: string;\n    expires_in?: number;\n  };\n  accessToken: string;\n  refreshToken?: string;\n};\n\nexport type BitbucketServerAuthProviderOptions = OAuthProviderOptions & {\n  host: string;\n  authorizationUrl: string;\n  tokenUrl: string;\n  authHandler: AuthHandler<BitbucketServerOAuthResult>;\n  signInResolver?: SignInResolver<BitbucketServerOAuthResult>;\n  resolverContext: AuthResolverContext;\n};\n\nexport class BitbucketServerAuthProvider implements OAuthHandlers {\n  private readonly signInResolver?: SignInResolver<BitbucketServerOAuthResult>;\n  private readonly authHandler: AuthHandler<BitbucketServerOAuthResult>;\n  private readonly resolverContext: AuthResolverContext;\n  private readonly strategy: OAuth2Strategy;\n  private readonly host: string;\n\n  constructor(options: BitbucketServerAuthProviderOptions) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.resolverContext = options.resolverContext;\n    this.strategy = new OAuth2Strategy(\n      {\n        authorizationURL: options.authorizationUrl,\n        tokenURL: options.tokenUrl,\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n      },\n      (\n        accessToken: string,\n        refreshToken: string,\n        params: any,\n        fullProfile: PassportProfile,\n        done: VerifyCallback,\n      ) => {\n        done(undefined, { fullProfile, params, accessToken }, { refreshToken });\n      },\n    );\n    this.host = options.host;\n  }\n\n  async start(req: OAuthStartRequest): Promise<OAuthStartResponse> {\n    return await executeRedirectStrategy(req, this.strategy, {\n      accessType: 'offline',\n      prompt: 'consent',\n      scope: req.scope,\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(\n    req: express.Request,\n  ): Promise<{ response: OAuthResponse; refreshToken?: string }> {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      BitbucketServerOAuthResult,\n      PrivateInfo\n    >(req, this.strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(\n    req: OAuthRefreshRequest,\n  ): Promise<{ response: OAuthResponse; refreshToken?: string }> {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this.strategy,\n        req.refreshToken,\n        req.scope,\n      );\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this.strategy,\n      accessToken,\n    );\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(\n    result: BitbucketServerOAuthResult,\n  ): Promise<OAuthResponse> {\n    // The OAuth2 strategy does not return a user profile -> let's fetch it before calling the auth handler\n    result.fullProfile = await this.fetchProfile(result);\n    const { profile } = await this.authHandler(result, this.resolverContext);\n\n    let backstageIdentity = undefined;\n    if (this.signInResolver) {\n      backstageIdentity = await this.signInResolver(\n        { result, profile },\n        this.resolverContext,\n      );\n    }\n\n    return {\n      providerInfo: {\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n      backstageIdentity,\n    };\n  }\n\n  private async fetchProfile(\n    result: BitbucketServerOAuthResult,\n  ): Promise<PassportProfile> {\n    // Get current user name\n    let whoAmIResponse;\n    try {\n      whoAmIResponse = await fetch(\n        `https://${this.host}/plugins/servlet/applinks/whoami`,\n        {\n          headers: {\n            Authorization: `Bearer ${result.accessToken}`,\n          },\n        },\n      );\n    } catch (e) {\n      throw new Error(`Failed to retrieve the username of the logged in user`);\n    }\n\n    // A response.ok check here would be worthless as the Bitbucket API always returns 200 OK for this call\n    const username = whoAmIResponse.headers.get('X-Ausername');\n    if (!username) {\n      throw new Error(`Failed to retrieve the username of the logged in user`);\n    }\n\n    let userResponse;\n    try {\n      userResponse = await fetch(\n        `https://${this.host}/rest/api/latest/users/${username}?avatarSize=256`,\n        {\n          headers: {\n            Authorization: `Bearer ${result.accessToken}`,\n          },\n        },\n      );\n    } catch (e) {\n      throw new Error(`Failed to retrieve the user '${username}'`);\n    }\n\n    if (!userResponse.ok) {\n      throw new Error(`Failed to retrieve the user '${username}'`);\n    }\n\n    const user = await userResponse.json();\n\n    const passportProfile = {\n      provider: 'bitbucketServer',\n      id: user.id.toString(),\n      displayName: user.displayName,\n      username: user.name,\n      emails: [\n        {\n          value: user.emailAddress,\n        },\n      ],\n    } as PassportProfile;\n\n    if (user.avatarUrl) {\n      passportProfile.photos = [\n        { value: `https://${this.host}${user.avatarUrl}` },\n      ];\n    }\n\n    return passportProfile;\n  }\n}\n\nexport const bitbucketServer = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<BitbucketServerOAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn?: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<BitbucketServerOAuthResult>;\n    };\n  }) {\n    return ({ providerId, globalConfig, config, resolverContext }) =>\n      OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n        const clientId = envConfig.getString('clientId');\n        const clientSecret = envConfig.getString('clientSecret');\n        const host = envConfig.getString('host');\n        const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n        const callbackUrl =\n          customCallbackUrl ||\n          `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n        const authorizationUrl = `https://${host}/rest/oauth2/latest/authorize`;\n        const tokenUrl = `https://${host}/rest/oauth2/latest/token`;\n\n        const authHandler: AuthHandler<BitbucketServerOAuthResult> =\n          options?.authHandler\n            ? options.authHandler\n            : async ({ fullProfile }) => ({\n                profile: makeProfileInfo(fullProfile),\n              });\n\n        const provider = new BitbucketServerAuthProvider({\n          callbackUrl,\n          clientId,\n          clientSecret,\n          host,\n          authorizationUrl,\n          tokenUrl,\n          authHandler,\n          signInResolver: options?.signIn?.resolver,\n          resolverContext,\n        });\n\n        return OAuthAdapter.fromConfig(globalConfig, provider, {\n          providerId,\n          callbackUrl,\n        });\n      });\n  },\n  resolvers: {\n    /**\n     * Looks up the user by matching their email to the entity email.\n     */\n    emailMatchingUserEntityProfileEmail:\n      (): SignInResolver<BitbucketServerOAuthResult> => commonByEmailResolver,\n  },\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthHandler,\n  AuthProviderRouteHandlers,\n  AuthResolverContext,\n  AuthResponse,\n  SignInResolver,\n} from '../types';\nimport { Request, Response } from 'express';\nimport { makeProfileInfo } from '../../lib/passport';\nimport { AuthenticationError } from '@backstage/errors';\nimport { prepareBackstageIdentityResponse } from '../prepareBackstageIdentityResponse';\nimport { createAuthProviderIntegration } from '../createAuthProviderIntegration';\nimport { Profile } from 'passport';\nimport { decodeJwt } from 'jose';\n\nexport const ID_TOKEN_HEADER = 'x-ms-token-aad-id-token';\nexport const ACCESS_TOKEN_HEADER = 'x-ms-token-aad-access-token';\n\ntype Options = {\n  authHandler: AuthHandler<EasyAuthResult>;\n  signInResolver: SignInResolver<EasyAuthResult>;\n  resolverContext: AuthResolverContext;\n};\n\n/** @public */\nexport type EasyAuthResult = {\n  fullProfile: Profile;\n  accessToken?: string;\n};\n\nexport type EasyAuthResponse = AuthResponse<{}>;\n\nexport class EasyAuthAuthProvider implements AuthProviderRouteHandlers {\n  private readonly resolverContext: AuthResolverContext;\n  private readonly authHandler: AuthHandler<EasyAuthResult>;\n  private readonly signInResolver: SignInResolver<EasyAuthResult>;\n\n  constructor(options: Options) {\n    this.authHandler = options.authHandler;\n    this.signInResolver = options.signInResolver;\n    this.resolverContext = options.resolverContext;\n  }\n\n  frameHandler(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  async refresh(req: Request, res: Response): Promise<void> {\n    const result = await this.getResult(req);\n    const response = await this.handleResult(result);\n    res.json(response);\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  private async getResult(req: Request): Promise<EasyAuthResult> {\n    const idToken = req.header(ID_TOKEN_HEADER);\n    const accessToken = req.header(ACCESS_TOKEN_HEADER);\n    if (idToken === undefined) {\n      throw new AuthenticationError(`Missing ${ID_TOKEN_HEADER} header`);\n    }\n\n    return {\n      fullProfile: this.idTokenToProfile(idToken),\n      accessToken: accessToken,\n    };\n  }\n\n  private idTokenToProfile(idToken: string) {\n    const claims = decodeJwt(idToken);\n\n    if (claims.ver !== '2.0') {\n      throw new Error('id_token is not version 2.0 ');\n    }\n\n    return {\n      id: claims.oid,\n      displayName: claims.name,\n      provider: 'easyauth',\n      emails: [{ value: claims.email }],\n      username: claims.preferred_username,\n    } as Profile;\n  }\n\n  private async handleResult(\n    result: EasyAuthResult,\n  ): Promise<EasyAuthResponse> {\n    const { profile } = await this.authHandler(result, this.resolverContext);\n\n    const backstageIdentity = await this.signInResolver(\n      {\n        result,\n        profile,\n      },\n      this.resolverContext,\n    );\n\n    return {\n      providerInfo: {\n        accessToken: result.accessToken,\n      },\n      backstageIdentity: prepareBackstageIdentityResponse(backstageIdentity),\n      profile,\n    };\n  }\n}\n\n/**\n * Auth provider integration for Azure EasyAuth\n *\n * @public\n */\nexport const easyAuth = createAuthProviderIntegration({\n  create(options?: {\n    /**\n     * The profile transformation function used to verify and convert the auth response\n     * into the profile that will be presented to the user.\n     */\n    authHandler?: AuthHandler<EasyAuthResult>;\n\n    /**\n     * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n     */\n    signIn: {\n      /**\n       * Maps an auth result to a Backstage identity for the user.\n       */\n      resolver: SignInResolver<EasyAuthResult>;\n    };\n  }) {\n    return ({ resolverContext }) => {\n      validateAppServiceConfiguration(process.env);\n\n      if (options?.signIn.resolver === undefined) {\n        throw new Error(\n          'SignInResolver is required to use this authentication provider',\n        );\n      }\n\n      const authHandler =\n        options.authHandler ??\n        (async ({ fullProfile }) => ({\n          profile: makeProfileInfo(fullProfile),\n        }));\n\n      return new EasyAuthAuthProvider({\n        signInResolver: options.signIn.resolver,\n        authHandler,\n        resolverContext,\n      });\n    };\n  },\n});\n\nfunction validateAppServiceConfiguration(env: NodeJS.ProcessEnv) {\n  // Based on https://github.com/AzureAD/microsoft-identity-web/blob/f7403779d1a91f4a3fec0ed0993bd82f50f299e1/src/Microsoft.Identity.Web/AppServicesAuth/AppServicesAuthenticationInformation.cs#L38-L59\n  //\n  // It's critical to validate we're really running in a correctly configured Azure App Services,\n  // As we rely on App Services to manage & validate the ID and Access Token headers\n  // Without that, this users can be trivially impersonated.\n  if (env.WEBSITE_SKU === undefined) {\n    throw new Error('Backstage is not running on Azure App Services');\n  }\n  if (env.WEBSITE_AUTH_ENABLED?.toLowerCase() !== 'true') {\n    throw new Error('Azure App Services does not have authentication enabled');\n  }\n  if (\n    env.WEBSITE_AUTH_DEFAULT_PROVIDER?.toLowerCase() !== 'azureactivedirectory'\n  ) {\n    throw new Error('Authentication provider is not Entra ID');\n  }\n  if (process.env.WEBSITE_AUTH_TOKEN_STORE?.toLowerCase() !== 'true') {\n    throw new Error('Token Store is not enabled');\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { atlassian } from './atlassian';\nimport { auth0 } from './auth0';\nimport { awsAlb } from './aws-alb';\nimport { bitbucket } from './bitbucket';\nimport { cfAccess } from './cloudflare-access';\nimport { gcpIap } from './gcp-iap';\nimport { github } from './github';\nimport { gitlab } from './gitlab';\nimport { google } from './google';\nimport { microsoft } from './microsoft';\nimport { oauth2 } from './oauth2';\nimport { oauth2Proxy } from './oauth2-proxy';\nimport { oidc } from './oidc';\nimport { okta } from './okta';\nimport { onelogin } from './onelogin';\nimport { saml } from './saml';\nimport { AuthProviderFactory } from './types';\nimport { bitbucketServer } from './bitbucketServer';\nimport { easyAuth } from './azure-easyauth';\n\n/**\n * All built-in auth provider integrations.\n *\n * @public\n */\nexport const providers = Object.freeze({\n  atlassian,\n  auth0,\n  awsAlb,\n  bitbucket,\n  bitbucketServer,\n  cfAccess,\n  gcpIap,\n  github,\n  gitlab,\n  google,\n  microsoft,\n  oauth2,\n  oauth2Proxy,\n  oidc,\n  okta,\n  onelogin,\n  saml,\n  easyAuth,\n});\n\n/**\n * All auth provider factories that are installed by default.\n *\n * @public\n */\nexport const defaultAuthProviderFactories: {\n  [providerId: string]: AuthProviderFactory;\n} = {\n  google: google.create(),\n  github: github.create(),\n  gitlab: gitlab.create(),\n  saml: saml.create(),\n  okta: okta.create(),\n  auth0: auth0.create(),\n  microsoft: microsoft.create(),\n  easyAuth: easyAuth.create(),\n  oauth2: oauth2.create(),\n  oidc: oidc.create(),\n  onelogin: onelogin.create(),\n  awsalb: awsAlb.create(),\n  bitbucket: bitbucket.create(),\n  bitbucketServer: bitbucketServer.create(),\n  atlassian: atlassian.create(),\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Router from 'express-promise-router';\nimport { TokenIssuer } from './types';\n\nexport type Options = {\n  baseUrl: string;\n  tokenIssuer: TokenIssuer;\n};\n\nexport function createOidcRouter(options: Options) {\n  const { baseUrl, tokenIssuer } = options;\n\n  const router = Router();\n\n  const config = {\n    issuer: baseUrl,\n    token_endpoint: `${baseUrl}/v1/token`,\n    userinfo_endpoint: `${baseUrl}/v1/userinfo`,\n    jwks_uri: `${baseUrl}/.well-known/jwks.json`,\n    response_types_supported: ['id_token'],\n    subject_types_supported: ['public'],\n    id_token_signing_alg_values_supported: ['RS256'],\n    scopes_supported: ['openid'],\n    token_endpoint_auth_methods_supported: [],\n    claims_supported: ['sub'],\n    grant_types_supported: [],\n  };\n\n  router.get('/.well-known/openid-configuration', (_req, res) => {\n    res.json(config);\n  });\n\n  router.get('/.well-known/jwks.json', async (_req, res) => {\n    const { keys } = await tokenIssuer.listPublicKeys();\n    res.json({ keys });\n  });\n\n  router.get('/v1/token', (_req, res) => {\n    res.status(501).send('Not Implemented');\n  });\n\n  router.get('/v1/userinfo', (_req, res) => {\n    res.status(501).send('Not Implemented');\n  });\n\n  return router;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { parseEntityRef } from '@backstage/catalog-model';\nimport { AuthenticationError } from '@backstage/errors';\nimport { exportJWK, generateKeyPair, importJWK, JWK, SignJWT } from 'jose';\nimport { DateTime } from 'luxon';\nimport { v4 as uuid } from 'uuid';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nimport { AnyJWK, KeyStore, TokenIssuer, TokenParams } from './types';\n\nconst MS_IN_S = 1000;\n\ntype Options = {\n  logger: LoggerService;\n  /** Value of the issuer claim in issued tokens */\n  issuer: string;\n  /** Key store used for storing signing keys */\n  keyStore: KeyStore;\n  /** Expiration time of signing keys in seconds */\n  keyDurationSeconds: number;\n  /** JWS \"alg\" (Algorithm) Header Parameter value. Defaults to ES256.\n   * Must match one of the algorithms defined for IdentityClient.\n   * When setting a different algorithm, check if the `key` field\n   * of the `signing_keys` table can fit the length of the generated keys.\n   * If not, add a knex migration file in the migrations folder.\n   * More info on supported algorithms: https://github.com/panva/jose */\n  algorithm?: string;\n};\n\n/**\n * A token issuer that is able to issue tokens in a distributed system\n * backed by a single database. Tokens are issued using lazily generated\n * signing keys, where each running instance of the auth service uses its own\n * signing key.\n *\n * The public parts of the keys are all stored in the shared key storage,\n * and any of the instances of the auth service will return the full list\n * of public keys that are currently in storage.\n *\n * Signing keys are automatically rotated at the same interval as the token\n * duration. Expired keys are kept in storage until there are no valid tokens\n * in circulation that could have been signed by that key.\n */\nexport class TokenFactory implements TokenIssuer {\n  private readonly issuer: string;\n  private readonly logger: LoggerService;\n  private readonly keyStore: KeyStore;\n  private readonly keyDurationSeconds: number;\n  private readonly algorithm: string;\n\n  private keyExpiry?: Date;\n  private privateKeyPromise?: Promise<JWK>;\n\n  constructor(options: Options) {\n    this.issuer = options.issuer;\n    this.logger = options.logger;\n    this.keyStore = options.keyStore;\n    this.keyDurationSeconds = options.keyDurationSeconds;\n    this.algorithm = options.algorithm ?? 'ES256';\n  }\n\n  async issueToken(params: TokenParams): Promise<string> {\n    const key = await this.getKey();\n\n    const iss = this.issuer;\n    const { sub, ent, ...additionalClaims } = params.claims;\n    const aud = 'backstage';\n    const iat = Math.floor(Date.now() / MS_IN_S);\n    const exp = iat + this.keyDurationSeconds;\n\n    // Validate that the subject claim is a valid EntityRef\n    try {\n      parseEntityRef(sub);\n    } catch (error) {\n      throw new Error(\n        '\"sub\" claim provided by the auth resolver is not a valid EntityRef.',\n      );\n    }\n\n    this.logger.info(`Issuing token for ${sub}, with entities ${ent ?? []}`);\n\n    if (!key.alg) {\n      throw new AuthenticationError('No algorithm was provided in the key');\n    }\n\n    return new SignJWT({ ...additionalClaims, iss, sub, ent, aud, iat, exp })\n      .setProtectedHeader({ alg: key.alg, kid: key.kid })\n      .setIssuer(iss)\n      .setAudience(aud)\n      .setSubject(sub)\n      .setIssuedAt(iat)\n      .setExpirationTime(exp)\n      .sign(await importJWK(key));\n  }\n\n  // This will be called by other services that want to verify ID tokens.\n  // It is important that it returns a list of all public keys that could\n  // have been used to sign tokens that have not yet expired.\n  async listPublicKeys(): Promise<{ keys: AnyJWK[] }> {\n    const { items: keys } = await this.keyStore.listKeys();\n\n    const validKeys = [];\n    const expiredKeys = [];\n\n    for (const key of keys) {\n      // Allow for a grace period of another full key duration before we remove the keys from the database\n      const expireAt = DateTime.fromJSDate(key.createdAt).plus({\n        seconds: 3 * this.keyDurationSeconds,\n      });\n      if (expireAt < DateTime.local()) {\n        expiredKeys.push(key);\n      } else {\n        validKeys.push(key);\n      }\n    }\n\n    // Lazily prune expired keys. This may cause duplicate removals if we have concurrent callers, but w/e\n    if (expiredKeys.length > 0) {\n      const kids = expiredKeys.map(({ key }) => key.kid);\n\n      this.logger.info(`Removing expired signing keys, '${kids.join(\"', '\")}'`);\n\n      // We don't await this, just let it run in the background\n      this.keyStore.removeKeys(kids).catch(error => {\n        this.logger.error(`Failed to remove expired keys, ${error}`);\n      });\n    }\n\n    // NOTE: we're currently only storing public keys, but if we start storing private keys we'd have to convert here\n    return { keys: validKeys.map(({ key }) => key) };\n  }\n\n  private async getKey(): Promise<JWK> {\n    // Make sure that we only generate one key at a time\n    if (this.privateKeyPromise) {\n      if (\n        this.keyExpiry &&\n        DateTime.fromJSDate(this.keyExpiry) > DateTime.local()\n      ) {\n        return this.privateKeyPromise;\n      }\n      this.logger.info(`Signing key has expired, generating new key`);\n      delete this.privateKeyPromise;\n    }\n\n    this.keyExpiry = DateTime.utc()\n      .plus({\n        seconds: this.keyDurationSeconds,\n      })\n      .toJSDate();\n    const promise = (async () => {\n      // This generates a new signing key to be used to sign tokens until the next key rotation\n      const key = await generateKeyPair(this.algorithm);\n      const publicKey = await exportJWK(key.publicKey);\n      const privateKey = await exportJWK(key.privateKey);\n      publicKey.kid = privateKey.kid = uuid();\n      publicKey.alg = privateKey.alg = this.algorithm;\n\n      // We're not allowed to use the key until it has been successfully stored\n      // TODO: some token verification implementations aggressively cache the list of keys, and\n      //       don't attempt to fetch new ones even if they encounter an unknown kid. Therefore we\n      //       may want to keep using the existing key for some period of time until we switch to\n      //       the new one. This also needs to be implemented cross-service though, meaning new services\n      //       that boot up need to be able to grab an existing key to use for signing.\n      this.logger.info(`Created new signing key ${publicKey.kid}`);\n      await this.keyStore.addKey(publicKey as AnyJWK);\n\n      // At this point we are allowed to start using the new key\n      return privateKey;\n    })();\n\n    this.privateKeyPromise = promise;\n\n    try {\n      // If we fail to generate a new key, we need to clear the state so that\n      // the next caller will try to generate another key.\n      await promise;\n    } catch (error) {\n      this.logger.error(`Failed to generate new signing key, ${error}`);\n      delete this.keyExpiry;\n      delete this.privateKeyPromise;\n    }\n\n    return promise;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { DateTime } from 'luxon';\nimport { AnyJWK, KeyStore, StoredKey } from './types';\n\nconst TABLE = 'signing_keys';\n\ntype Row = {\n  created_at: Date; // row.created_at is a string after being returned from the database\n  kid: string;\n  key: string;\n};\n\nconst parseDate = (date: string | Date) => {\n  const parsedDate =\n    typeof date === 'string'\n      ? DateTime.fromSQL(date, { zone: 'UTC' })\n      : DateTime.fromJSDate(date);\n\n  if (!parsedDate.isValid) {\n    throw new Error(\n      `Failed to parse date, reason: ${parsedDate.invalidReason}, explanation: ${parsedDate.invalidExplanation}`,\n    );\n  }\n\n  return parsedDate.toJSDate();\n};\n\nexport class DatabaseKeyStore implements KeyStore {\n  constructor(private readonly client: Knex) {}\n\n  async addKey(key: AnyJWK): Promise<void> {\n    await this.client<Row>(TABLE).insert({\n      kid: key.kid,\n      key: JSON.stringify(key),\n    });\n  }\n\n  async listKeys(): Promise<{ items: StoredKey[] }> {\n    const rows = await this.client<Row>(TABLE).select();\n\n    return {\n      items: rows.map(row => ({\n        key: JSON.parse(row.key),\n        createdAt: parseDate(row.created_at),\n      })),\n    };\n  }\n\n  async removeKeys(kids: string[]): Promise<void> {\n    await this.client(TABLE).delete().whereIn('kid', kids);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { KeyStore, AnyJWK, StoredKey } from './types';\nimport { DateTime } from 'luxon';\n\nexport class MemoryKeyStore implements KeyStore {\n  private readonly keys = new Map<string, { createdAt: Date; key: string }>();\n\n  async addKey(key: AnyJWK): Promise<void> {\n    this.keys.set(key.kid, {\n      createdAt: DateTime.utc().toJSDate(),\n      key: JSON.stringify(key),\n    });\n  }\n\n  async removeKeys(kids: string[]): Promise<void> {\n    for (const kid of kids) {\n      this.keys.delete(kid);\n    }\n  }\n\n  async listKeys(): Promise<{ items: StoredKey[] }> {\n    return {\n      items: Array.from(this.keys).map(([, { createdAt, key: keyStr }]) => ({\n        createdAt,\n        key: JSON.parse(keyStr),\n      })),\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport {\n  DocumentData,\n  Firestore,\n  QuerySnapshot,\n  Settings,\n  WriteResult,\n} from '@google-cloud/firestore';\n\nimport { AnyJWK, KeyStore, StoredKey } from './types';\n\nexport type FirestoreKeyStoreSettings = Settings & Options;\n\ntype Options = {\n  path?: string;\n  timeout?: number;\n};\n\nexport const DEFAULT_TIMEOUT_MS = 10000;\nexport const DEFAULT_DOCUMENT_PATH = 'sessions';\n\nexport class FirestoreKeyStore implements KeyStore {\n  static async create(\n    settings?: FirestoreKeyStoreSettings,\n  ): Promise<FirestoreKeyStore> {\n    const { path, timeout, ...firestoreSettings } = settings ?? {};\n    const database = new Firestore(firestoreSettings);\n\n    return new FirestoreKeyStore(\n      database,\n      path ?? DEFAULT_DOCUMENT_PATH,\n      timeout ?? DEFAULT_TIMEOUT_MS,\n    );\n  }\n\n  private constructor(\n    private readonly database: Firestore,\n    private readonly path: string,\n    private readonly timeout: number,\n  ) {}\n\n  static async verifyConnection(\n    keyStore: FirestoreKeyStore,\n    logger?: LoggerService,\n  ): Promise<void> {\n    try {\n      await keyStore.verify();\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'development') {\n        throw new Error(\n          `Failed to connect to database: ${(error as Error).message}`,\n        );\n      }\n      logger?.warn(\n        `Failed to connect to database: ${(error as Error).message}`,\n      );\n    }\n  }\n\n  async addKey(key: AnyJWK): Promise<void> {\n    await this.withTimeout<WriteResult>(\n      this.database\n        .collection(this.path)\n        .doc(key.kid)\n        .set({\n          kid: key.kid,\n          key: JSON.stringify(key),\n        }),\n    );\n  }\n\n  async listKeys(): Promise<{ items: StoredKey[] }> {\n    const keys = await this.withTimeout<QuerySnapshot<DocumentData>>(\n      this.database.collection(this.path).get(),\n    );\n\n    return {\n      items: keys.docs.map(key => ({\n        key: key.data() as AnyJWK,\n        createdAt: key.createTime.toDate(),\n      })),\n    };\n  }\n\n  async removeKeys(kids: string[]): Promise<void> {\n    // This is probably really slow, but it's done async in the background\n    for (const kid of kids) {\n      await this.withTimeout<WriteResult>(\n        this.database.collection(this.path).doc(kid).delete(),\n      );\n    }\n\n    /**\n     * This could be achieved with batching but there's a couple of limitations with that:\n     *\n     * - A batched write can contain a maximum of 500 operations\n     *  https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes\n     *\n     * - The \"in\" operator can combine a maximum of 10 equality clauses\n     *  https://firebase.google.com/docs/firestore/query-data/queries#in_not-in_and_array-contains-any\n     *\n     * Example:\n     *\n     *  const batch = this.database.batch();\n     *  const docs = await this.database\n     *    .collection(this.path)\n     *    .where('kid', 'in', kids)\n     *    .get();\n     *  docs.forEach(doc => {\n     *    batch.delete(doc.ref);\n     *  });\n     *  await batch.commit();\n     *\n     */\n  }\n\n  /**\n   * Helper function to allow us to modify the timeout used when\n   * performing Firestore database operations.\n   *\n   * The reason for this is that it seems that there's no other\n   * practical solution to change the default timeout of 10mins\n   * that Firestore has.\n   *\n   */\n  private async withTimeout<T>(operation: Promise<T>): Promise<T> {\n    const timer = new Promise<never>((_, reject) =>\n      setTimeout(() => {\n        reject(new Error(`Operation timed out after ${this.timeout}ms`));\n      }, this.timeout),\n    );\n    return Promise.race<T>([operation, timer]);\n  }\n\n  /**\n   * Used to verify that the database is reachable.\n   */\n  private async verify(): Promise<void> {\n    await this.withTimeout(this.database.collection(this.path).limit(1).get());\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AnyJWK, KeyStore, StoredKey } from './types';\nimport { exportJWK, importPKCS8, importSPKI, JWK } from 'jose';\nimport { KeyLike } from 'jose/dist/types/types';\nimport { promises as fs } from 'fs';\nimport { Config } from '@backstage/config';\n\nexport type KeyPair = {\n  publicKey: JWK;\n  privateKey: JWK;\n};\n\nexport type StaticKeyConfig = {\n  publicKeyFile: string;\n  privateKeyFile: string;\n  keyId: string;\n  algorithm: string;\n};\n\nconst DEFAULT_ALGORITHM = 'ES256';\n\n/**\n * Key store that loads predefined public/private key pairs from disk\n *\n * The private key should be represented using the PKCS#8 format,\n * while the public key should be in the SPKI format.\n *\n * @remarks\n *\n * You can generate a public and private key pair, using\n * openssl:\n *\n * Generate a private key using the ES256 algorithm\n * ```sh\n * openssl ecparam -name prime256v1 -genkey -out private.ec.key\n * ```\n * Convert it to PKCS#8 format\n * ```sh\n * openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in private.ec.key -out private.key\n * ```\n * Extract the public key\n * ```sh\n * openssl ec -inform PEM -outform PEM -pubout -in private.key -out public.key\n * ```\n *\n * Provide the paths to private.key and public.key as the respective\n * private and public key paths in the StaticKeyStore.create(...) method.\n */\nexport class StaticKeyStore implements KeyStore {\n  private readonly keyPairs: KeyPair[];\n  private readonly createdAt: Date;\n\n  private constructor(keyPairs: KeyPair[]) {\n    if (keyPairs.length === 0) {\n      throw new Error('Should provide at least one key pair');\n    }\n\n    this.keyPairs = keyPairs;\n    this.createdAt = new Date();\n  }\n\n  public static async fromConfig(config: Config): Promise<StaticKeyStore> {\n    const keyConfigs = config\n      .getConfigArray('auth.keyStore.static.keys')\n      .map(c => {\n        const staticKeyConfig: StaticKeyConfig = {\n          publicKeyFile: c.getString('publicKeyFile'),\n          privateKeyFile: c.getString('privateKeyFile'),\n          keyId: c.getString('keyId'),\n          algorithm: c.getOptionalString('algorithm') ?? DEFAULT_ALGORITHM,\n        };\n\n        return staticKeyConfig;\n      });\n\n    const keyPairs = await Promise.all(\n      keyConfigs.map(async k => await this.loadKeyPair(k)),\n    );\n\n    return new StaticKeyStore(keyPairs);\n  }\n\n  addKey(_key: AnyJWK): Promise<void> {\n    throw new Error('Cannot add keys to the static key store');\n  }\n\n  listKeys(): Promise<{ items: StoredKey[] }> {\n    const keys = this.keyPairs.map(k => this.keyPairToStoredKey(k));\n    return Promise.resolve({ items: keys });\n  }\n\n  getPrivateKey(keyId: string): JWK {\n    const keyPair = this.keyPairs.find(k => k.publicKey.kid === keyId);\n    if (keyPair === undefined) {\n      throw new Error(`Could not find key with keyId: ${keyId}`);\n    }\n\n    return keyPair.privateKey;\n  }\n\n  removeKeys(_kids: string[]): Promise<void> {\n    throw new Error('Cannot remove keys from the static key store');\n  }\n\n  private keyPairToStoredKey(keyPair: KeyPair): StoredKey {\n    const publicKey = {\n      ...keyPair.publicKey,\n      use: 'sig',\n    };\n\n    return {\n      key: publicKey as AnyJWK,\n      createdAt: this.createdAt,\n    };\n  }\n\n  private static async loadKeyPair(options: StaticKeyConfig): Promise<KeyPair> {\n    const algorithm = options.algorithm;\n    const keyId = options.keyId;\n    const publicKey = await this.loadPublicKeyFromFile(\n      options.publicKeyFile,\n      keyId,\n      algorithm,\n    );\n    const privateKey = await this.loadPrivateKeyFromFile(\n      options.privateKeyFile,\n      keyId,\n      algorithm,\n    );\n\n    return { publicKey, privateKey };\n  }\n\n  private static async loadPublicKeyFromFile(\n    path: string,\n    keyId: string,\n    algorithm: string,\n  ): Promise<JWK> {\n    return this.loadKeyFromFile(path, keyId, algorithm, importSPKI);\n  }\n\n  private static async loadPrivateKeyFromFile(\n    path: string,\n    keyId: string,\n    algorithm: string,\n  ): Promise<JWK> {\n    return this.loadKeyFromFile(path, keyId, algorithm, importPKCS8);\n  }\n\n  private static async loadKeyFromFile(\n    path: string,\n    keyId: string,\n    algorithm: string,\n    importer: (content: string, algorithm: string) => Promise<KeyLike>,\n  ): Promise<JWK> {\n    const content = await fs.readFile(path, { encoding: 'utf8', flag: 'r' });\n    const key = await importer(content, algorithm);\n    const jwk = await exportJWK(key);\n    jwk.kid = keyId;\n    jwk.alg = algorithm;\n\n    return jwk;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { pickBy } from 'lodash';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nimport { Config } from '@backstage/config';\nimport { AuthDatabase } from '../database/AuthDatabase';\nimport { DatabaseKeyStore } from './DatabaseKeyStore';\nimport { FirestoreKeyStore } from './FirestoreKeyStore';\nimport { MemoryKeyStore } from './MemoryKeyStore';\nimport { KeyStore } from './types';\nimport { StaticKeyStore } from './StaticKeyStore';\n\ntype Options = {\n  logger: LoggerService;\n  database: AuthDatabase;\n};\n\nexport class KeyStores {\n  /**\n   * Looks at the `auth.keyStore` section in the application configuration\n   * and returns a KeyStore store. Defaults to `database`\n   *\n   * @returns a KeyStore store\n   */\n  static async fromConfig(config: Config, options: Options): Promise<KeyStore> {\n    const { logger, database } = options;\n\n    const ks = config.getOptionalConfig('auth.keyStore');\n    const provider = ks?.getOptionalString('provider') ?? 'database';\n\n    logger.info(`Configuring \"${provider}\" as KeyStore provider`);\n\n    if (provider === 'database') {\n      return new DatabaseKeyStore(await database.get());\n    }\n\n    if (provider === 'memory') {\n      return new MemoryKeyStore();\n    }\n\n    if (provider === 'firestore') {\n      const settings = ks?.getConfig(provider);\n\n      const keyStore = await FirestoreKeyStore.create(\n        pickBy(\n          {\n            projectId: settings?.getOptionalString('projectId'),\n            keyFilename: settings?.getOptionalString('keyFilename'),\n            host: settings?.getOptionalString('host'),\n            port: settings?.getOptionalNumber('port'),\n            ssl: settings?.getOptionalBoolean('ssl'),\n            path: settings?.getOptionalString('path'),\n            timeout: settings?.getOptionalNumber('timeout'),\n          },\n          value => value !== undefined,\n        ),\n      );\n      await FirestoreKeyStore.verifyConnection(keyStore, logger);\n\n      return keyStore;\n    }\n\n    if (provider === 'static') {\n      return await StaticKeyStore.fromConfig(config);\n    }\n\n    throw new Error(`Unknown KeyStore provider: ${provider}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport {\n  CompoundEntityRef,\n  parseEntityRef,\n  RELATION_MEMBER_OF,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport { TokenManager } from '@backstage/backend-common';\n\n/**\n * A catalog client tailored for reading out identity data from the catalog.\n *\n * @public\n */\nexport class CatalogIdentityClient {\n  private readonly catalogApi: CatalogApi;\n  private readonly tokenManager: TokenManager;\n\n  constructor(options: { catalogApi: CatalogApi; tokenManager: TokenManager }) {\n    this.catalogApi = options.catalogApi;\n    this.tokenManager = options.tokenManager;\n  }\n\n  /**\n   * Looks up a single user using a query.\n   *\n   * Throws a NotFoundError or ConflictError if 0 or multiple users are found.\n   */\n  async findUser(query: {\n    annotations: Record<string, string>;\n  }): Promise<UserEntity> {\n    const filter: Record<string, string> = {\n      kind: 'user',\n    };\n    for (const [key, value] of Object.entries(query.annotations)) {\n      filter[`metadata.annotations.${key}`] = value;\n    }\n\n    const { token } = await this.tokenManager.getToken();\n    const { items } = await this.catalogApi.getEntities({ filter }, { token });\n\n    if (items.length !== 1) {\n      if (items.length > 1) {\n        throw new ConflictError('User lookup resulted in multiple matches');\n      } else {\n        throw new NotFoundError('User not found');\n      }\n    }\n\n    return items[0] as UserEntity;\n  }\n\n  /**\n   * Resolve additional entity claims from the catalog, using the passed-in entity names. Designed\n   * to be used within a `signInResolver` where additional entity claims might be provided, but\n   * group membership and transient group membership lean on imported catalog relations.\n   *\n   * Returns a superset of the entity names that can be passed directly to `issueToken` as `ent`.\n   */\n  async resolveCatalogMembership(query: {\n    entityRefs: string[];\n    logger?: LoggerService;\n  }): Promise<string[]> {\n    const { entityRefs, logger } = query;\n    const resolvedEntityRefs = entityRefs\n      .map((ref: string) => {\n        try {\n          const parsedRef = parseEntityRef(ref.toLocaleLowerCase('en-US'), {\n            defaultKind: 'user',\n            defaultNamespace: 'default',\n          });\n          return parsedRef;\n        } catch {\n          logger?.warn(`Failed to parse entityRef from ${ref}, ignoring`);\n          return null;\n        }\n      })\n      .filter((ref): ref is CompoundEntityRef => ref !== null);\n\n    const filter = resolvedEntityRefs.map(ref => ({\n      kind: ref.kind,\n      'metadata.namespace': ref.namespace,\n      'metadata.name': ref.name,\n    }));\n    const { token } = await this.tokenManager.getToken();\n    const entities = await this.catalogApi\n      .getEntities({ filter }, { token })\n      .then(r => r.items);\n\n    if (entityRefs.length !== entities.length) {\n      const foundEntityNames = entities.map(stringifyEntityRef);\n      const missingEntityNames = resolvedEntityRefs\n        .map(stringifyEntityRef)\n        .filter(s => !foundEntityNames.includes(s));\n      logger?.debug(`Entities not found for refs ${missingEntityNames.join()}`);\n    }\n\n    const memberOf = entities.flatMap(\n      e =>\n        e!.relations\n          ?.filter(r => r.type === RELATION_MEMBER_OF)\n          .map(r => r.targetRef) ?? [],\n    );\n\n    const newEntityRefs = [\n      ...new Set(resolvedEntityRefs.map(stringifyEntityRef).concat(memberOf)),\n    ];\n\n    logger?.debug(`Found catalog membership: ${newEntityRefs.join()}`);\n    return newEntityRefs;\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TokenManager } from '@backstage/backend-common';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport {\n  DEFAULT_NAMESPACE,\n  Entity,\n  parseEntityRef,\n  RELATION_MEMBER_OF,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { ConflictError, InputError, NotFoundError } from '@backstage/errors';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { TokenIssuer, TokenParams } from '../../identity/types';\nimport { AuthResolverContext } from '../../providers';\nimport { AuthResolverCatalogUserQuery } from '../../providers/types';\nimport { CatalogIdentityClient } from '../catalog';\n\n/**\n * Uses the default ownership resolution logic to return an array\n * of entity refs that the provided entity claims ownership through.\n *\n * A reference to the entity itself will also be included in the returned array.\n *\n * @public\n */\nexport function getDefaultOwnershipEntityRefs(entity: Entity) {\n  const membershipRefs =\n    entity.relations\n      ?.filter(\n        r => r.type === RELATION_MEMBER_OF && r.targetRef.startsWith('group:'),\n      )\n      .map(r => r.targetRef) ?? [];\n\n  return Array.from(new Set([stringifyEntityRef(entity), ...membershipRefs]));\n}\n\n/**\n * @internal\n */\nexport class CatalogAuthResolverContext implements AuthResolverContext {\n  static create(options: {\n    logger: LoggerService;\n    catalogApi: CatalogApi;\n    tokenIssuer: TokenIssuer;\n    tokenManager: TokenManager;\n  }): CatalogAuthResolverContext {\n    const catalogIdentityClient = new CatalogIdentityClient({\n      catalogApi: options.catalogApi,\n      tokenManager: options.tokenManager,\n    });\n    return new CatalogAuthResolverContext(\n      options.logger,\n      options.tokenIssuer,\n      catalogIdentityClient,\n      options.catalogApi,\n      options.tokenManager,\n    );\n  }\n\n  private constructor(\n    public readonly logger: LoggerService,\n    public readonly tokenIssuer: TokenIssuer,\n    public readonly catalogIdentityClient: CatalogIdentityClient,\n    private readonly catalogApi: CatalogApi,\n    private readonly tokenManager: TokenManager,\n  ) {}\n\n  async issueToken(params: TokenParams) {\n    const token = await this.tokenIssuer.issueToken(params);\n    return { token };\n  }\n\n  async findCatalogUser(query: AuthResolverCatalogUserQuery) {\n    let result: Entity[] | Entity | undefined = undefined;\n    const { token } = await this.tokenManager.getToken();\n\n    if ('entityRef' in query) {\n      const entityRef = parseEntityRef(query.entityRef, {\n        defaultKind: 'User',\n        defaultNamespace: DEFAULT_NAMESPACE,\n      });\n      result = await this.catalogApi.getEntityByRef(entityRef, { token });\n    } else if ('annotations' in query) {\n      const filter: Record<string, string> = {\n        kind: 'user',\n      };\n      for (const [key, value] of Object.entries(query.annotations)) {\n        filter[`metadata.annotations.${key}`] = value;\n      }\n      const res = await this.catalogApi.getEntities({ filter }, { token });\n      result = res.items;\n    } else if ('filter' in query) {\n      const res = await this.catalogApi.getEntities(\n        { filter: query.filter },\n        { token },\n      );\n      result = res.items;\n    } else {\n      throw new InputError('Invalid user lookup query');\n    }\n\n    if (Array.isArray(result)) {\n      if (result.length > 1) {\n        throw new ConflictError('User lookup resulted in multiple matches');\n      }\n      result = result[0];\n    }\n    if (!result) {\n      throw new NotFoundError('User not found');\n    }\n\n    return { entity: result };\n  }\n\n  async signInWithCatalogUser(query: AuthResolverCatalogUserQuery) {\n    const { entity } = await this.findCatalogUser(query);\n    const ownershipRefs = getDefaultOwnershipEntityRefs(entity);\n\n    const token = await this.tokenIssuer.issueToken({\n      claims: {\n        sub: stringifyEntityRef(entity),\n        ent: ownershipRefs,\n      },\n    });\n    return { token };\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DatabaseManager,\n  PluginDatabaseManager,\n  resolvePackagePath,\n} from '@backstage/backend-common';\nimport { ConfigReader } from '@backstage/config';\nimport { Knex } from 'knex';\n\nconst migrationsDir = resolvePackagePath(\n  '@backstage/plugin-auth-backend',\n  'migrations',\n);\n\n/**\n * Ensures that a database connection is established exactly once and only when\n * asked for, and runs migrations.\n */\nexport class AuthDatabase {\n  readonly #database: PluginDatabaseManager;\n  #promise: Promise<Knex> | undefined;\n\n  static create(database: PluginDatabaseManager): AuthDatabase {\n    return new AuthDatabase(database);\n  }\n\n  /** @internal */\n  static forTesting(): AuthDatabase {\n    const config = new ConfigReader({\n      backend: {\n        database: {\n          client: 'better-sqlite3',\n          connection: ':memory:',\n          useNullAsDefault: true,\n        },\n      },\n    });\n    const database = DatabaseManager.fromConfig(config).forPlugin('auth');\n    return new AuthDatabase(database);\n  }\n\n  static async runMigrations(knex: Knex): Promise<void> {\n    await knex.migrate.latest({\n      directory: migrationsDir,\n    });\n  }\n\n  private constructor(database: PluginDatabaseManager) {\n    this.#database = database;\n  }\n\n  get(): Promise<Knex> {\n    this.#promise ??= this.#database.getClient().then(async client => {\n      if (!this.#database.migrations?.skip) {\n        await AuthDatabase.runMigrations(client);\n      }\n      return client;\n    });\n\n    return this.#promise;\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AnyJWK, TokenIssuer, TokenParams } from './types';\nimport { SignJWT, importJWK, JWK } from 'jose';\nimport { parseEntityRef } from '@backstage/catalog-model';\nimport { AuthenticationError } from '@backstage/errors';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { StaticKeyStore } from './StaticKeyStore';\n\nconst MS_IN_S = 1000;\n\nexport type Config = {\n  publicKeyFile: string;\n  privateKeyFile: string;\n  keyId: string;\n  algorithm?: string;\n};\n\nexport type Options = {\n  logger: LoggerService;\n  /** Value of the issuer claim in issued tokens */\n  issuer: string;\n  /** Expiration time of the JWT in seconds */\n  sessionExpirationSeconds: number;\n};\n\n/**\n * A token issuer that issues tokens from predefined\n * public/private key pair stored in the static key store.\n */\nexport class StaticTokenIssuer implements TokenIssuer {\n  private readonly issuer: string;\n  private readonly logger: LoggerService;\n  private readonly keyStore: StaticKeyStore;\n  private readonly sessionExpirationSeconds: number;\n\n  public constructor(options: Options, keyStore: StaticKeyStore) {\n    this.issuer = options.issuer;\n    this.logger = options.logger;\n    this.sessionExpirationSeconds = options.sessionExpirationSeconds;\n    this.keyStore = keyStore;\n  }\n\n  public async issueToken(params: TokenParams): Promise<string> {\n    const key = await this.getSigningKey();\n\n    // TODO: code shared with TokenFactory.ts\n    const iss = this.issuer;\n    const { sub, ent, ...additionalClaims } = params.claims;\n    const aud = 'backstage';\n    const iat = Math.floor(Date.now() / MS_IN_S);\n    const exp = iat + this.sessionExpirationSeconds;\n\n    // Validate that the subject claim is a valid EntityRef\n    try {\n      parseEntityRef(sub);\n    } catch (error) {\n      throw new Error(\n        '\"sub\" claim provided by the auth resolver is not a valid EntityRef.',\n      );\n    }\n\n    this.logger.info(`Issuing token for ${sub}, with entities ${ent ?? []}`);\n\n    if (!key.alg) {\n      throw new AuthenticationError('No algorithm was provided in the key');\n    }\n\n    return new SignJWT({ ...additionalClaims, iss, sub, ent, aud, iat, exp })\n      .setProtectedHeader({ alg: key.alg, kid: key.kid })\n      .setIssuer(iss)\n      .setAudience(aud)\n      .setSubject(sub)\n      .setIssuedAt(iat)\n      .setExpirationTime(exp)\n      .sign(await importJWK(key));\n  }\n\n  private async getSigningKey(): Promise<JWK> {\n    const { items: keys } = await this.keyStore.listKeys();\n    if (keys.length >= 1) {\n      return this.keyStore.getPrivateKey(keys[0].key.kid);\n    }\n    throw new Error('Keystore should hold at least 1 key');\n  }\n\n  public async listPublicKeys(): Promise<{ keys: AnyJWK[] }> {\n    const { items: keys } = await this.keyStore.listKeys();\n    return { keys: keys.map(({ key }) => key) };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport cookieParser from 'cookie-parser';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport {\n  defaultAuthProviderFactories,\n  AuthProviderFactory,\n} from '../providers';\nimport {\n  PluginDatabaseManager,\n  PluginEndpointDiscovery,\n  TokenManager,\n} from '@backstage/backend-common';\nimport { assertError, NotFoundError } from '@backstage/errors';\nimport { CatalogApi, CatalogClient } from '@backstage/catalog-client';\nimport { Config } from '@backstage/config';\nimport { createOidcRouter, TokenFactory, KeyStores } from '../identity';\nimport session from 'express-session';\nimport connectSessionKnex from 'connect-session-knex';\nimport passport from 'passport';\nimport { Minimatch } from 'minimatch';\nimport { CatalogAuthResolverContext } from '../lib/resolvers';\nimport { AuthDatabase } from '../database/AuthDatabase';\nimport { BACKSTAGE_SESSION_EXPIRATION } from '../lib/session';\nimport { TokenIssuer } from '../identity/types';\nimport { StaticTokenIssuer } from '../identity/StaticTokenIssuer';\nimport { StaticKeyStore } from '../identity/StaticKeyStore';\n\n/** @public */\nexport type ProviderFactories = { [s: string]: AuthProviderFactory };\n\n/** @public */\nexport interface RouterOptions {\n  logger: LoggerService;\n  database: PluginDatabaseManager;\n  config: Config;\n  discovery: PluginEndpointDiscovery;\n  tokenManager: TokenManager;\n  tokenFactoryAlgorithm?: string;\n  providerFactories?: ProviderFactories;\n  disableDefaultProviderFactories?: boolean;\n  catalogApi?: CatalogApi;\n}\n\n/** @public */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const {\n    logger,\n    config,\n    discovery,\n    database,\n    tokenManager,\n    tokenFactoryAlgorithm,\n    providerFactories = {},\n    catalogApi,\n  } = options;\n  const router = Router();\n\n  const appUrl = config.getString('app.baseUrl');\n  const authUrl = await discovery.getExternalBaseUrl('auth');\n\n  const authDb = AuthDatabase.create(database);\n  const sessionExpirationSeconds = BACKSTAGE_SESSION_EXPIRATION;\n\n  const keyStore = await KeyStores.fromConfig(config, {\n    logger,\n    database: authDb,\n  });\n\n  let tokenIssuer: TokenIssuer;\n  if (keyStore instanceof StaticKeyStore) {\n    tokenIssuer = new StaticTokenIssuer(\n      {\n        logger: logger.child({ component: 'token-factory' }),\n        issuer: authUrl,\n        sessionExpirationSeconds: sessionExpirationSeconds,\n      },\n      keyStore as StaticKeyStore,\n    );\n  } else {\n    tokenIssuer = new TokenFactory({\n      issuer: authUrl,\n      keyStore,\n      keyDurationSeconds: sessionExpirationSeconds,\n      logger: logger.child({ component: 'token-factory' }),\n      algorithm:\n        tokenFactoryAlgorithm ??\n        config.getOptionalString('auth.identityTokenAlgorithm'),\n    });\n  }\n  const secret = config.getOptionalString('auth.session.secret');\n  if (secret) {\n    router.use(cookieParser(secret));\n    const enforceCookieSSL = authUrl.startsWith('https');\n    const KnexSessionStore = connectSessionKnex(session);\n    router.use(\n      session({\n        secret,\n        saveUninitialized: false,\n        resave: false,\n        cookie: { secure: enforceCookieSSL ? 'auto' : false },\n        store: new KnexSessionStore({\n          createtable: false,\n          knex: await authDb.get(),\n        }),\n      }),\n    );\n    router.use(passport.initialize());\n    router.use(passport.session());\n  } else {\n    router.use(cookieParser());\n  }\n  router.use(express.urlencoded({ extended: false }));\n  router.use(express.json());\n\n  const allProviderFactories = options.disableDefaultProviderFactories\n    ? providerFactories\n    : {\n        ...defaultAuthProviderFactories,\n        ...providerFactories,\n      };\n\n  const providersConfig = config.getOptionalConfig('auth.providers');\n\n  const isOriginAllowed = createOriginFilter(config);\n\n  for (const [providerId, providerFactory] of Object.entries(\n    allProviderFactories,\n  )) {\n    if (providersConfig?.has(providerId)) {\n      logger.info(`Configuring auth provider: ${providerId}`);\n      try {\n        const provider = providerFactory({\n          providerId,\n          appUrl,\n          baseUrl: authUrl,\n          isOriginAllowed,\n          globalConfig: {\n            baseUrl: authUrl,\n            appUrl,\n            isOriginAllowed,\n          },\n          config: providersConfig.getConfig(providerId),\n          logger,\n          resolverContext: CatalogAuthResolverContext.create({\n            logger,\n            catalogApi:\n              catalogApi ?? new CatalogClient({ discoveryApi: discovery }),\n            tokenIssuer,\n            tokenManager,\n          }),\n        });\n\n        const r = Router();\n\n        r.get('/start', provider.start.bind(provider));\n        r.get('/handler/frame', provider.frameHandler.bind(provider));\n        r.post('/handler/frame', provider.frameHandler.bind(provider));\n        if (provider.logout) {\n          r.post('/logout', provider.logout.bind(provider));\n        }\n        if (provider.refresh) {\n          r.get('/refresh', provider.refresh.bind(provider));\n          r.post('/refresh', provider.refresh.bind(provider));\n        }\n\n        router.use(`/${providerId}`, r);\n      } catch (e) {\n        assertError(e);\n        if (process.env.NODE_ENV !== 'development') {\n          throw new Error(\n            `Failed to initialize ${providerId} auth provider, ${e.message}`,\n          );\n        }\n\n        logger.warn(`Skipping ${providerId} auth provider, ${e.message}`);\n\n        router.use(`/${providerId}`, () => {\n          // If the user added the provider under auth.providers but the clientId and clientSecret etc. were not found.\n          throw new NotFoundError(\n            `Auth provider registered for '${providerId}' is misconfigured. This could mean the configs under ` +\n              `auth.providers.${providerId} are missing or the environment variables used are not defined. ` +\n              `Check the auth backend plugin logs when the backend starts to see more details.`,\n          );\n        });\n      }\n    } else {\n      router.use(`/${providerId}`, () => {\n        throw new NotFoundError(\n          `No auth provider registered for '${providerId}'`,\n        );\n      });\n    }\n  }\n\n  router.use(\n    createOidcRouter({\n      tokenIssuer,\n      baseUrl: authUrl,\n    }),\n  );\n\n  router.use('/:provider/', req => {\n    const { provider } = req.params;\n    throw new NotFoundError(`Unknown auth provider '${provider}'`);\n  });\n\n  return router;\n}\n\n/** @public */\nexport function createOriginFilter(\n  config: Config,\n): (origin: string) => boolean {\n  const appUrl = config.getString('app.baseUrl');\n  const { origin: appOrigin } = new URL(appUrl);\n\n  const allowedOrigins = config.getOptionalStringArray(\n    'auth.experimentalExtraAllowedOrigins',\n  );\n\n  const allowedOriginPatterns =\n    allowedOrigins?.map(\n      pattern => new Minimatch(pattern, { nocase: true, noglobstar: true }),\n    ) ?? [];\n\n  return origin => {\n    if (origin === appOrigin) {\n      return true;\n    }\n    return allowedOriginPatterns.some(pattern => pattern.match(origin));\n  };\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport {\n  AuthProviderFactory,\n  authProvidersExtensionPoint,\n} from '@backstage/plugin-auth-node';\nimport { catalogServiceRef } from '@backstage/plugin-catalog-node/alpha';\nimport { createRouter } from './service/router';\n\n/**\n * Auth plugin\n *\n * @public\n */\nexport const authPlugin = createBackendPlugin({\n  pluginId: 'auth',\n  register(reg) {\n    const providers = new Map<string, AuthProviderFactory>();\n\n    reg.registerExtensionPoint(authProvidersExtensionPoint, {\n      registerProvider({ providerId, factory }) {\n        if (providers.has(providerId)) {\n          throw new Error(\n            `Auth provider '${providerId}' was already registered`,\n          );\n        }\n        providers.set(providerId, factory);\n      },\n    });\n\n    reg.registerInit({\n      deps: {\n        httpRouter: coreServices.httpRouter,\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n        database: coreServices.database,\n        discovery: coreServices.discovery,\n        tokenManager: coreServices.tokenManager,\n        catalogApi: catalogServiceRef,\n      },\n      async init({\n        httpRouter,\n        logger,\n        config,\n        database,\n        discovery,\n        tokenManager,\n        catalogApi,\n      }) {\n        const router = await createRouter({\n          logger,\n          config,\n          database,\n          discovery,\n          tokenManager,\n          catalogApi,\n          providerFactories: Object.fromEntries(providers),\n          disableDefaultProviderFactories: true,\n        });\n        httpRouter.use(router);\n      },\n    });\n  },\n});\n"],"names":["createOAuthProviderFactory","atlassianAuthenticator","Auth0InternalStrategy","_OAuthEnvironmentHandler","decodeOAuthState","encodeOAuthState","crypto","_prepareBackstageIdentityResponse","__publicField","URL","InputError","NotAllowedError","isError","AuthenticationError","jwtDecoder","fetch","NodeCache","jwtVerify","BitbucketStrategy","createRemoteJWKSet","Headers","ResponseError","ForwardedError","createProxyAuthProviderFactory","gcpIapAuthenticator","githubAuthenticator","gitlabAuthenticator","googleAuthenticator","commonSignInResolvers","googleSignInResolvers","decodeJwt","MicrosoftStrategy","oauth2Authenticator","oauth2ProxyAuthenticator","Issuer","OidcStrategy","oktaAuthenticator","OneLoginStrategy","SamlStrategy","OAuth2Strategy","Router","MS_IN_S","parseEntityRef","SignJWT","importJWK","DateTime","generateKeyPair","exportJWK","uuid","Firestore","importSPKI","importPKCS8","fs","pickBy","ConflictError","NotFoundError","stringifyEntityRef","RELATION_MEMBER_OF","DEFAULT_NAMESPACE","resolvePackagePath","config","ConfigReader","DatabaseManager","_a","cookieParser","connectSessionKnex","session","passport","express","CatalogClient","assertError","Minimatch","createBackendPlugin","authProvidersExtensionPoint","coreServices","catalogServiceRef"],"mappings":"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"}