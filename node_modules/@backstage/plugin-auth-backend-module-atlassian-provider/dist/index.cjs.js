'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var passportAtlassianOauth2 = require('passport-atlassian-oauth2');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var backendPluginApi = require('@backstage/backend-plugin-api');

const atlassianAuthenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  initialize({ callbackUrl, config }) {
    const clientId = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    const baseUrl = config.getOptionalString("audience") || "https://atlassian.com";
    return pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new passportAtlassianOauth2.Strategy(
        {
          clientID: clientId,
          clientSecret,
          callbackURL: callbackUrl,
          baseURL: baseUrl,
          authorizationURL: `${baseUrl}/oauth/authorize`,
          tokenURL: `${baseUrl}/oauth/token`,
          profileURL: `${baseUrl}/api/v4/user`
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            { fullProfile, params, accessToken },
            { refreshToken }
          );
        }
      )
    );
  },
  async start(input, helper) {
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent"
    });
  },
  async authenticate(input, helper) {
    return helper.authenticate(input);
  },
  async refresh(input, helper) {
    return helper.refresh(input);
  }
});

exports.atlassianSignInResolvers = void 0;
((atlassianSignInResolvers2) => {
  atlassianSignInResolvers2.usernameMatchingUserEntityName = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const { result } = info;
        const id = result.fullProfile.username;
        if (!id) {
          throw new Error(`Atlassian user profile does not contain a username`);
        }
        return ctx.signInWithCatalogUser({ entityRef: { name: id } });
      };
    }
  });
})(exports.atlassianSignInResolvers || (exports.atlassianSignInResolvers = {}));

const authModuleAtlassianProvider = backendPluginApi.createBackendModule({
  pluginId: "auth",
  moduleId: "atlassian-provider",
  register(reg) {
    reg.registerInit({
      deps: {
        providers: pluginAuthNode.authProvidersExtensionPoint
      },
      async init({ providers }) {
        providers.registerProvider({
          providerId: "atlassian",
          factory: pluginAuthNode.createOAuthProviderFactory({
            authenticator: atlassianAuthenticator,
            signInResolverFactories: {
              ...exports.atlassianSignInResolvers,
              ...pluginAuthNode.commonSignInResolvers
            }
          })
        });
      }
    });
  }
});

exports.atlassianAuthenticator = atlassianAuthenticator;
exports["default"] = authModuleAtlassianProvider;
//# sourceMappingURL=index.cjs.js.map
