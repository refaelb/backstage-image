{"version":3,"file":"index.cjs.js","sources":["../src/commonGitlabConfig.ts","../src/util.ts","../src/actions/createGitlabGroupEnsureExistsAction.ts","../src/actions/createGitlabProjectDeployTokenAction.ts","../src/actions/createGitlabProjectAccessTokenAction.examples.ts","../src/actions/createGitlabProjectAccessTokenAction.ts","../src/actions/createGitlabProjectVariableAction.ts","../src/actions/createGitlabIssueAction.examples.ts","../src/actions/createGitlabIssueAction.ts","../src/actions/gitlab.examples.ts","../src/actions/gitlab.ts","../src/actions/helpers.ts","../src/actions/gitlabMergeRequest.ts","../src/actions/gitlabRepoPush.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { z } from 'zod';\n\nconst commonGitlabConfig = z.object({\n  repoUrl: z.string({ description: 'Repository Location' }),\n  token: z\n    .string({ description: 'The token to use for authorization to GitLab' })\n    .optional(),\n});\n\nexport default commonGitlabConfig;\n\nexport const commonGitlabConfigExample = {\n  repoUrl: 'gitlab.com?owner=namespace-or-owner&repo=project-name',\n  token: '${{ secrets.USER_OAUTH_TOKEN }}',\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  GitLabIntegration,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { z } from 'zod';\nimport commonGitlabConfig from './commonGitlabConfig';\nimport { Gitlab, GroupSchema } from '@gitbeaker/rest';\nimport * as util from './util';\n\nexport const parseRepoHost = (repoUrl: string): string => {\n  let parsed;\n  try {\n    parsed = new URL(`https://${repoUrl}`);\n  } catch (error) {\n    throw new InputError(\n      `Invalid repo URL passed to publisher, got ${repoUrl}, ${error}`,\n    );\n  }\n  return parsed.host;\n};\n\nexport const getToken = (\n  config: z.infer<typeof commonGitlabConfig>,\n  integrations: ScmIntegrationRegistry,\n): { token: string; integrationConfig: GitLabIntegration } => {\n  const host = parseRepoHost(config.repoUrl);\n  const integrationConfig = integrations.gitlab.byHost(host);\n\n  if (!integrationConfig) {\n    throw new InputError(\n      `No matching integration configuration for host ${host}, please check your integrations config`,\n    );\n  }\n\n  const token = config.token || integrationConfig.config.token!;\n  const tokenType = config.token ? 'oauthToken' : 'token';\n\n  if (tokenType === 'oauthToken') {\n    throw new InputError(`OAuth Token is currently not supported`);\n  }\n\n  return { token: token, integrationConfig: integrationConfig };\n};\n\nexport type RepoSpec = {\n  repo: string;\n  host: string;\n  owner?: string;\n};\n\nexport const parseRepoUrl = (\n  repoUrl: string,\n  integrations: ScmIntegrationRegistry,\n): RepoSpec => {\n  let parsed;\n  try {\n    parsed = new URL(`https://${repoUrl}`);\n  } catch (error) {\n    throw new InputError(\n      `Invalid repo URL passed to publisher, got ${repoUrl}, ${error}`,\n    );\n  }\n  const host = parsed.host;\n  const owner = parsed.searchParams.get('owner') ?? undefined;\n  const repo: string = parsed.searchParams.get('repo')!;\n\n  const type = integrations.byHost(host)?.type;\n\n  if (!type) {\n    throw new InputError(\n      `No matching integration configuration for host ${host}, please check your integrations config`,\n    );\n  }\n\n  return { host, owner, repo };\n};\n\nexport function getClient(props: {\n  host: string;\n  token?: string;\n  integrations: ScmIntegrationRegistry;\n}): InstanceType<typeof Gitlab> {\n  const { host, token, integrations } = props;\n  const integrationConfig = integrations.gitlab.byHost(host);\n\n  if (!integrationConfig) {\n    throw new InputError(\n      `No matching integration configuration for host ${host}, please check your integrations config`,\n    );\n  }\n\n  const { config } = integrationConfig;\n\n  if (!config.token && !token) {\n    throw new InputError(`No token available for host ${host}`);\n  }\n\n  const requestToken = token || config.token!;\n  const tokenType = token ? 'oauthToken' : 'token';\n\n  const gitlabOptions: any = {\n    host: config.baseUrl,\n  };\n\n  gitlabOptions[tokenType] = requestToken;\n  return new Gitlab(gitlabOptions);\n}\n\nexport function convertDate(\n  inputDate: string | undefined,\n  defaultDate: string,\n) {\n  try {\n    return inputDate\n      ? new Date(inputDate).toISOString()\n      : new Date(defaultDate).toISOString();\n  } catch (error) {\n    throw new InputError(`Error converting input date - ${error}`);\n  }\n}\n\nexport async function getTopLevelParentGroup(\n  client: InstanceType<typeof Gitlab>,\n  groupId: number,\n): Promise<GroupSchema> {\n  try {\n    const topParentGroup = await client.Groups.show(groupId);\n    if (topParentGroup.parent_id) {\n      return util.getTopLevelParentGroup(\n        client,\n        topParentGroup.parent_id as number,\n      );\n    }\n    return topParentGroup as GroupSchema;\n  } catch (error: any) {\n    throw new InputError(\n      `Error finding top-level parent group ID: ${error.message}`,\n    );\n  }\n}\n\nexport async function checkEpicScope(\n  client: InstanceType<typeof Gitlab>,\n  projectId: number,\n  epicId: number,\n) {\n  try {\n    // If project exists, get the top level group id\n    const project = await client.Projects.show(projectId);\n    if (!project) {\n      throw new InputError(\n        `Project with id ${projectId} not found. Check your GitLab instance.`,\n      );\n    }\n    const topParentGroup = await getTopLevelParentGroup(\n      client,\n      project.namespace.id,\n    );\n    if (!topParentGroup) {\n      throw new InputError(`Couldn't find a suitable top-level parent group.`);\n    }\n    // Get the epic\n    const epic = (await client.Epics.all(topParentGroup.id)).find(\n      (x: any) => x.id === epicId,\n    );\n    if (!epic) {\n      throw new InputError(\n        `Epic with id ${epicId} not found in the top-level parent group ${topParentGroup.name}.`,\n      );\n    }\n\n    const epicGroup = await client.Groups.show(epic.group_id as number);\n    const projectNamespace: string = project.path_with_namespace as string;\n    return projectNamespace.startsWith(epicGroup.full_path as string);\n  } catch (error: any) {\n    throw new InputError(`Could not find epic scope: ${error.message}`);\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { Gitlab } from '@gitbeaker/node';\nimport { GroupSchema } from '@gitbeaker/core/dist/types/resources/Groups';\nimport commonGitlabConfig from '../commonGitlabConfig';\nimport { getToken } from '../util';\nimport { z } from 'zod';\n\n/**\n * Creates an `gitlab:group:ensureExists` Scaffolder action.\n *\n * @public\n */\nexport const createGitlabGroupEnsureExistsAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction({\n    id: 'gitlab:group:ensureExists',\n    description: 'Ensures a Gitlab group exists',\n    supportsDryRun: true,\n    schema: {\n      input: commonGitlabConfig.merge(\n        z.object({\n          path: z\n            .array(z.string(), {\n              description: 'A path of group names that is ensured to exist',\n            })\n            .min(1),\n        }),\n      ),\n      output: z.object({\n        groupId: z\n          .number({ description: 'The id of the innermost sub-group' })\n          .optional(),\n      }),\n    },\n    async handler(ctx) {\n      if (ctx.isDryRun) {\n        ctx.output('groupId', 42);\n        return;\n      }\n\n      const { path } = ctx.input;\n      const { token, integrationConfig } = getToken(ctx.input, integrations);\n\n      const api = new Gitlab({\n        host: integrationConfig.config.baseUrl,\n        token: token,\n      });\n\n      let currentPath: string | null = null;\n      let parent: GroupSchema | null = null;\n      for (const pathElement of path) {\n        const fullPath: string = currentPath\n          ? `${currentPath}/${pathElement}`\n          : pathElement;\n        const result = (await api.Groups.search(\n          fullPath,\n        )) as unknown as Array<GroupSchema>; // recast since the return type for search is wrong in the gitbeaker typings\n        const subGroup = result.find(\n          searchPathElem => searchPathElem.full_path === fullPath,\n        );\n        if (!subGroup) {\n          ctx.logger.info(`creating missing group ${fullPath}`);\n          parent = await api.Groups.create(\n            pathElement,\n            pathElement,\n            parent\n              ? {\n                  parent_id: parent.id,\n                }\n              : {},\n          );\n        } else {\n          parent = subGroup;\n        }\n        currentPath = fullPath;\n      }\n      if (parent !== null) {\n        ctx.output('groupId', parent?.id);\n      }\n    },\n  });\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { Gitlab } from '@gitbeaker/node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { DeployTokenScope } from '@gitbeaker/core/dist/types/templates/ResourceDeployTokens';\nimport commonGitlabConfig from '../commonGitlabConfig';\nimport { getToken } from '../util';\nimport { InputError } from '@backstage/errors';\nimport { z } from 'zod';\n\n/**\n * Creates a `gitlab:projectDeployToken:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabProjectDeployTokenAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:projectDeployToken:create',\n    schema: {\n      input: commonGitlabConfig.merge(\n        z.object({\n          projectId: z.union([z.number(), z.string()], {\n            description: 'Project ID',\n          }),\n          name: z.string({ description: 'Deploy Token Name' }),\n          username: z\n            .string({ description: 'Deploy Token Username' })\n            .optional(),\n          scopes: z.array(z.string(), { description: 'Scopes' }).optional(),\n        }),\n      ),\n      output: z.object({\n        deploy_token: z.string({ description: 'Deploy Token' }),\n        user: z.string({ description: 'User' }),\n      }),\n    },\n    async handler(ctx) {\n      ctx.logger.info(`Creating Token for Project \"${ctx.input.projectId}\"`);\n      const { projectId, name, username, scopes } = ctx.input;\n      const { token, integrationConfig } = getToken(ctx.input, integrations);\n\n      const api = new Gitlab({\n        host: integrationConfig.config.baseUrl,\n        token: token,\n      });\n\n      const deployToken = await api.ProjectDeployTokens.add(\n        projectId,\n        name,\n        scopes as DeployTokenScope[],\n        {\n          username: username,\n        },\n      );\n\n      if (!deployToken.hasOwnProperty('token')) {\n        throw new InputError(`No deploy_token given from gitlab instance`);\n      }\n\n      ctx.output('deploy_token', deployToken.token as string);\n      ctx.output('user', deployToken.username);\n    },\n  });\n};\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'Create a GitLab project access token with minimal options.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'createAccessToken',\n          action: 'gitlab:projectAccessToken:create',\n          name: 'Create GitLab Project Access Token',\n          input: {\n            repoUrl: 'gitlab.com?repo=repo&owner=owner',\n            projectId: '456',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a GitLab project access token with custom scopes.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'createAccessToken',\n          action: 'gitlab:projectAccessToken:create',\n          name: 'Create GitLab Project Access Token',\n          input: {\n            repoUrl: 'gitlab.com?repo=repo&owner=owner',\n            projectId: '789',\n            scopes: ['read_registry', 'write_repository'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a GitLab project access token with a specified name.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'createAccessToken',\n          action: 'gitlab:projectAccessToken:create',\n          name: 'Create GitLab Project Access Token',\n          input: {\n            repoUrl: 'gitlab.com?repo=repo&owner=owner',\n            projectId: '101112',\n            name: 'my-custom-token',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create a GitLab project access token with a numeric project ID.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'createAccessToken',\n          action: 'gitlab:projectAccessToken:create',\n          name: 'Create GitLab Project Access Token',\n          input: {\n            repoUrl: 'gitlab.com?repo=repo&owner=owner',\n            projectId: 42,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create a GitLab project access token using specific GitLab integrations.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'createAccessToken',\n          action: 'gitlab:projectAccessToken:create',\n          name: 'Create GitLab Project Access Token',\n          input: {\n            repoUrl: 'gitlab.com?repo=repo&owner=owner',\n            projectId: '123',\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport commonGitlabConfig from '../commonGitlabConfig';\nimport { getToken } from '../util';\nimport { z } from 'zod';\nimport { examples } from './createGitlabProjectAccessTokenAction.examples';\n\n/**\n * Creates a `gitlab:projectAccessToken:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabProjectAccessTokenAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:projectAccessToken:create',\n    examples,\n    schema: {\n      input: commonGitlabConfig.merge(\n        z.object({\n          projectId: z.union([z.number(), z.string()], {\n            description: 'Project ID',\n          }),\n          name: z.string({ description: 'Deploy Token Name' }).optional(),\n          accessLevel: z\n            .number({ description: 'Access Level of the Token' })\n            .optional(),\n          scopes: z.array(z.string(), { description: 'Scopes' }).optional(),\n        }),\n      ),\n      output: z.object({\n        access_token: z.string({ description: 'Access Token' }),\n      }),\n    },\n    async handler(ctx) {\n      ctx.logger.info(`Creating Token for Project \"${ctx.input.projectId}\"`);\n      const { projectId, name, accessLevel, scopes } = ctx.input;\n      const { token, integrationConfig } = getToken(ctx.input, integrations);\n\n      const response = await fetch(\n        `${integrationConfig.config.baseUrl}/api/v4/projects/${projectId}/access_tokens`,\n        {\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\n          headers: {\n            'PRIVATE-TOKEN': token,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            name: name,\n            scopes: scopes,\n            access_level: accessLevel,\n          }),\n        },\n      );\n\n      const result = await response.json();\n\n      ctx.output('access_token', result.token);\n    },\n  });\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { Gitlab } from '@gitbeaker/node';\nimport { getToken } from '../util';\nimport commonGitlabConfig from '../commonGitlabConfig';\nimport { z } from 'zod';\n\n/**\n * Creates a `gitlab:projectVariable:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabProjectVariableAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:projectVariable:create',\n    schema: {\n      input: commonGitlabConfig.merge(\n        z.object({\n          projectId: z.union([z.number(), z.string()], {\n            description: 'Project ID',\n          }),\n          key: z\n            .string({\n              description:\n                'The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed',\n            })\n            .regex(/^[A-Za-z0-9_]{1,255}$/),\n          value: z.string({ description: 'The value of a variable' }),\n          variableType: z.string({\n            description: 'Variable Type (env_var or file)',\n          }),\n          variableProtected: z\n            .boolean({ description: 'Whether the variable is protected' })\n            .default(false)\n            .optional(),\n          masked: z\n            .boolean({ description: 'Whether the variable is masked' })\n            .default(false)\n            .optional(),\n          raw: z\n            .boolean({ description: 'Whether the variable is expandable' })\n            .default(false)\n            .optional(),\n          environmentScope: z\n            .string({ description: 'The environment_scope of the variable' })\n            .default('*')\n            .optional(),\n        }),\n      ),\n    },\n    async handler(ctx) {\n      const {\n        projectId,\n        key,\n        value,\n        variableType,\n        variableProtected = false,\n        masked = false,\n        raw = false,\n        environmentScope = '*',\n      } = ctx.input;\n      const { token, integrationConfig } = getToken(ctx.input, integrations);\n\n      const api = new Gitlab({\n        host: integrationConfig.config.baseUrl,\n        token: token,\n      });\n\n      await api.ProjectVariables.create(projectId, {\n        key: key,\n        value: value,\n        variable_type: variableType,\n        protected: variableProtected,\n        masked: masked,\n        raw: raw,\n        environment_scope: environmentScope,\n      });\n    },\n  });\n};\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\nimport { commonGitlabConfigExample } from '../commonGitlabConfig';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'Create a GitLab issue with minimal options',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'gitlabIssue',\n          name: 'Issues',\n          action: 'gitlab:issues:create',\n          input: {\n            ...commonGitlabConfigExample,\n            projectId: 12,\n            title: 'Test Issue',\n            description: 'This is the description of the issue',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a GitLab issue with assignees and date options',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'gitlabIssue',\n          name: 'Issues',\n          action: 'gitlab:issues:create',\n          input: {\n            ...commonGitlabConfigExample,\n            projectId: 12,\n            title: 'Test Issue',\n            assignees: [18],\n            description: 'This is the description of the issue',\n            createdAt: '2022-09-27 18:00:00.000',\n            dueDate: '2022-09-28 12:00:00.000',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a GitLab Issue with several options',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'gitlabIssue',\n          name: 'Issues',\n          action: 'gitlab:issues:create',\n          input: {\n            ...commonGitlabConfigExample,\n            projectId: 12,\n            title: 'Test Issue',\n            assignees: [18, 15],\n            description: 'This is the description of the issue',\n            confidential: false,\n            createdAt: '2022-09-27 18:00:00.000',\n            dueDate: '2022-09-28 12:00:00.000',\n            discussionToResolve: 1,\n            epicId: 1,\n            labels: 'phase1:label1,phase2:label2',\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport commonGitlabConfig from '../commonGitlabConfig';\nimport { examples } from './createGitlabIssueAction.examples';\nimport { z } from 'zod';\nimport { checkEpicScope, convertDate, getClient, parseRepoUrl } from '../util';\nimport { Gitlab, CreateIssueOptions, IssueSchema } from '@gitbeaker/rest';\n\n/**\n * Gitlab issue types\n *\n * @public\n */\nexport enum IssueType {\n  ISSUE = 'issue',\n  INCIDENT = 'incident',\n  TEST = 'test_case',\n}\n\nconst issueInputProperties = z.object({\n  projectId: z.number().describe('Project Id'),\n  title: z.string({ description: 'Title of the issue' }),\n  assignees: z\n    .array(z.number(), {\n      description: 'IDs of the users to assign the issue to.',\n    })\n    .optional(),\n  confidential: z.boolean({ description: 'Issue Confidentiality' }).optional(),\n  description: z.string().describe('Issue description').max(1048576).optional(),\n  createdAt: z\n    .string()\n    .describe('Creation date/time')\n    .regex(\n      /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/,\n      'Invalid date format. Use YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.SSSZ',\n    )\n    .optional(),\n  dueDate: z\n    .string()\n    .describe('Due date/time')\n    .regex(\n      /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/,\n      'Invalid date format. Use YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.SSSZ',\n    )\n    .optional(),\n  discussionToResolve: z\n    .string({\n      description:\n        'Id of a discussion to resolve. Use in combination with \"merge_request_to_resolve_discussions_of\"',\n    })\n    .optional(),\n  epicId: z\n    .number({ description: 'Id of the linked Epic' })\n    .min(0, 'Valid values should be equal or greater than zero')\n    .optional(),\n  labels: z.string({ description: 'Labels to apply' }).optional(),\n  issueType: z\n    .nativeEnum(IssueType, {\n      description: 'Type of the issue',\n    })\n    .optional(),\n  mergeRequestToResolveDiscussionsOf: z\n    .number({\n      description: 'IID of a merge request in which to resolve all issues',\n    })\n    .optional(),\n  milestoneId: z\n    .number({ description: 'Global ID of a milestone to assign the issue' })\n    .optional(),\n  weight: z\n    .number({ description: 'The issue weight' })\n    .min(0)\n    .refine(value => {\n      const isValid = value >= 0;\n      if (!isValid) {\n        return {\n          message: 'Valid values should be equal or greater than zero',\n        };\n      }\n      return isValid;\n    })\n    .optional(),\n});\n\nconst issueOutputProperties = z.object({\n  issueUrl: z.string({ description: 'Issue Url' }),\n  issueId: z.number({ description: 'Issue Id' }),\n});\n\n/**\n * Creates a `gitlab:issues:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabIssueAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:issues:create',\n    description: 'Creates a Gitlab issue.',\n    examples,\n    schema: {\n      input: commonGitlabConfig.merge(issueInputProperties),\n      output: issueOutputProperties,\n    },\n    async handler(ctx) {\n      try {\n        const {\n          repoUrl,\n          projectId,\n          title,\n          description = '',\n          confidential = false,\n          assignees = [],\n          createdAt = '',\n          dueDate,\n          discussionToResolve = '',\n          epicId,\n          labels = '',\n          issueType,\n          mergeRequestToResolveDiscussionsOf,\n          milestoneId,\n          weight,\n          token,\n        } = commonGitlabConfig.merge(issueInputProperties).parse(ctx.input);\n\n        const { host } = parseRepoUrl(repoUrl, integrations);\n        const api = getClient({ host, integrations, token });\n\n        let isEpicScoped = false;\n\n        if (epicId) {\n          isEpicScoped = await checkEpicScope(\n            api as any as InstanceType<typeof Gitlab>,\n            projectId,\n            epicId,\n          );\n\n          if (isEpicScoped) {\n            ctx.logger.info('Epic is within Project Scope');\n          } else {\n            ctx.logger.warn(\n              'Chosen epic is not within the Project Scope. The issue will be created without an associated epic.',\n            );\n          }\n        }\n        const mappedCreatedAt = convertDate(\n          String(createdAt),\n          new Date().toISOString(),\n        );\n        const mappedDueDate = dueDate\n          ? convertDate(String(dueDate), new Date().toISOString())\n          : undefined;\n\n        const issueOptions: CreateIssueOptions = {\n          description,\n          assigneeIds: assignees,\n          confidential,\n          epicId: isEpicScoped ? epicId : undefined,\n          labels,\n          createdAt: mappedCreatedAt,\n          dueDate: mappedDueDate,\n          discussionToResolve,\n          issueType,\n          mergeRequestToResolveDiscussionsOf,\n          milestoneId,\n          weight,\n        };\n\n        const response = (await api.Issues.create(\n          projectId,\n          title,\n          issueOptions,\n        )) as IssueSchema;\n\n        ctx.output('issueId', response.id);\n        ctx.output('issueUrl', response.web_url);\n      } catch (error: any) {\n        if (error instanceof z.ZodError) {\n          // Handling Zod validation errors\n          throw new InputError(`Validation error: ${error.message}`, {\n            validationErrors: error.errors,\n          });\n        }\n        // Handling other errors\n        throw new InputError(`Failed to create GitLab issue: ${error.message}`);\n      }\n    },\n  });\n};\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to GitLab.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:gitlab',\n          name: 'Publish to GitLab',\n          input: {\n            repoUrl: 'gitlab.com?repo=project_name&owner=group_name',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Add a description.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:gitlab',\n          name: 'Publish to GitLab',\n          input: {\n            repoUrl: 'gitlab.com?repo=project_name&owner=group_name',\n            description: 'Initialize a git repository',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Sets the commit message on the repository. The default value is `initial commit`.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:gitlab',\n          name: 'Publish to GitLab',\n          input: {\n            repoUrl: 'gitlab.com?repo=project_name&owner=group_name',\n            description: 'Initialize a git repository',\n            gitCommitMessage: 'Started a project.',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Initializes a git repository with additional settings.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:gitlab',\n          name: 'Publish to GitLab',\n          input: {\n            repoUrl: 'gitlab.com?repo=project_name&owner=group_name',\n            settings: {\n              ci_config_path: '.gitlab-ci.yml',\n              visibility: 'public',\n            },\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Initializes a git repository with branches settings',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:gitlab',\n          name: 'Publish to GitLab',\n          input: {\n            repoUrl: 'gitlab.com?repo=project_name&owner=group_name',\n            branches: [\n              {\n                name: 'dev',\n                create: true,\n                protected: true,\n                ref: 'master',\n              },\n              {\n                name: 'master',\n                protected: true,\n              },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Initializes a git repository with environment variables',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:gitlab',\n          name: 'Publish to GitLab',\n          input: {\n            repoUrl: 'gitlab.com?repo=project_name&owner=group_name',\n            projectVariables: [\n              {\n                key: 'key1',\n                value: 'value1',\n                protected: true,\n                masked: false,\n              },\n              {\n                key: 'key2',\n                value: 'value2',\n                protected: true,\n                masked: false,\n              },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { Gitlab } from '@gitbeaker/node';\nimport {\n  initRepoAndPush,\n  getRepoSourceDirectory,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { Config } from '@backstage/config';\nimport { examples } from './gitlab.examples';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to GitLab.\n *\n * @public\n */\nexport function createPublishGitlabAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    defaultBranch?: string;\n    /** @deprecated in favour of settings.visibility field */\n    repoVisibility?: 'private' | 'internal' | 'public';\n    sourcePath?: string;\n    token?: string;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    setUserAsOwner?: boolean;\n    /** @deprecated in favour of settings.topics field */\n    topics?: string[];\n    settings?: {\n      path?: string;\n      auto_devops_enabled?: boolean;\n      ci_config_path?: string;\n      description?: string;\n      topics?: string[];\n      visibility?: 'private' | 'internal' | 'public';\n    };\n    branches?: Array<{\n      name: string;\n      protect?: boolean;\n      create?: boolean;\n      ref?: string;\n    }>;\n    projectVariables?: Array<{\n      key: string;\n      value: string;\n      description?: string;\n      variable_type?: string;\n      protected?: boolean;\n      masked?: boolean;\n      raw?: boolean;\n      environment_scope?: string;\n    }>;\n  }>({\n    id: 'publish:gitlab',\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to GitLab.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          },\n          repoVisibility: {\n            title: 'Repository Visibility',\n            description: `Sets the visibility of the repository. The default value is 'private'. (deprecated, use settings.visibility instead)`,\n            type: 'string',\n            enum: ['private', 'public', 'internal'],\n          },\n          defaultBranch: {\n            title: 'Default Branch',\n            type: 'string',\n            description: `Sets the default branch on the repository. The default value is 'master'`,\n          },\n          gitCommitMessage: {\n            title: 'Git Commit Message',\n            type: 'string',\n            description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n          },\n          gitAuthorName: {\n            title: 'Default Author Name',\n            type: 'string',\n            description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n          },\n          gitAuthorEmail: {\n            title: 'Default Author Email',\n            type: 'string',\n            description: `Sets the default author email for the commit.`,\n          },\n          sourcePath: {\n            title: 'Source Path',\n            description:\n              'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            type: 'string',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitLab',\n          },\n          setUserAsOwner: {\n            title: 'Set User As Owner',\n            type: 'boolean',\n            description:\n              'Set the token user as owner of the newly created repository. Requires a token authorized to do the edit in the integration configuration for the matching host',\n          },\n          topics: {\n            title: 'Topic labels',\n            description:\n              'Topic labels to apply on the repository. (deprecated, use settings.topics instead)',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          settings: {\n            title: 'Project settings',\n            description:\n              'Additional project settings, based on https://docs.gitlab.com/ee/api/projects.html#create-project attributes',\n            type: 'object',\n            properties: {\n              path: {\n                title: 'Project path',\n                description:\n                  'Repository name for new project. Generated based on name if not provided (generated as lowercase with dashes).',\n                type: 'string',\n              },\n              auto_devops_enabled: {\n                title: 'Auto DevOps enabled',\n                description: 'Enable Auto DevOps for this project',\n                type: 'boolean',\n              },\n              ci_config_path: {\n                title: 'CI config path',\n                description: 'Custom CI config path for this project',\n                type: 'string',\n              },\n              description: {\n                title: 'Project description',\n                description: 'Short project description',\n                type: 'string',\n              },\n              topics: {\n                title: 'Topic labels',\n                description: 'Topic labels to apply on the repository',\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n              visibility: {\n                title: 'Project visibility',\n                description:\n                  'The visibility of the project. Can be private, internal, or public. The default value is private.',\n                type: 'string',\n                enum: ['private', 'public', 'internal'],\n              },\n            },\n          },\n          branches: {\n            title: 'Project branches settings',\n            type: 'array',\n            items: {\n              type: 'object',\n              required: ['name'],\n              properties: {\n                name: {\n                  title: 'Branch name',\n                  type: 'string',\n                },\n                protect: {\n                  title: 'Should branch be protected',\n                  description: `Will mark branch as protected. The default value is 'false'`,\n                  type: 'boolean',\n                },\n                create: {\n                  title: 'Should branch be created',\n                  description: `If branch does not exist, it will be created from provided ref. The default value is 'false'`,\n                  type: 'boolean',\n                },\n                ref: {\n                  title: 'Branch reference',\n                  description: `Branch reference to create branch from. The default value is 'master'`,\n                  type: 'string',\n                },\n              },\n            },\n          },\n          projectVariables: {\n            title: 'Project variables',\n            description:\n              'Project variables settings based on Gitlab Project Environments API - https://docs.gitlab.com/ee/api/project_level_variables.html#create-a-variable',\n            type: 'array',\n            items: {\n              type: 'object',\n              required: ['key', 'value'],\n              properties: {\n                key: {\n                  title: 'Variable key',\n                  description:\n                    'The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed',\n                  type: 'string',\n                },\n                value: {\n                  title: 'Variable value',\n                  description: 'The value of a variable',\n                  type: 'string',\n                },\n                description: {\n                  title: 'Variable description',\n                  description: `The description of the variable. The default value is 'null'`,\n                  type: 'string',\n                },\n                variable_type: {\n                  title: 'Variable type',\n                  description: `The type of a variable. The default value is 'env_var'`,\n                  type: 'string',\n                  enum: ['env_var', 'file'],\n                },\n                protected: {\n                  title: 'Variable protection',\n                  description: `Whether the variable is protected. The default value is 'false'`,\n                  type: 'boolean',\n                },\n                raw: {\n                  title: 'Variable raw',\n                  description: `Whether the variable is in raw format. The default value is 'false'`,\n                  type: 'boolean',\n                },\n                environment_scope: {\n                  title: 'Variable environment scope',\n                  description: `The environment_scope of the variable. The default value is '*'`,\n                  type: 'string',\n                },\n              },\n            },\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: {\n            title: 'A URL to the repository with the provider',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the root of the repository',\n            type: 'string',\n          },\n          projectId: {\n            title: 'The ID of the project',\n            type: 'string',\n          },\n          commitHash: {\n            title: 'The git commit hash of the initial commit',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        repoVisibility = 'private',\n        defaultBranch = 'master',\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n        setUserAsOwner = false,\n        topics = [],\n        settings = {},\n        branches = [],\n        projectVariables = [],\n      } = ctx.input;\n      const { owner, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(\n          `No owner provided for host: ${host}, and repo ${repo}`,\n        );\n      }\n\n      const integrationConfig = integrations.gitlab.byHost(host);\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      if (!integrationConfig.config.token && !ctx.input.token) {\n        throw new InputError(`No token available for host ${host}`);\n      }\n\n      const token = ctx.input.token || integrationConfig.config.token!;\n      const tokenType = ctx.input.token ? 'oauthToken' : 'token';\n\n      const client = new Gitlab({\n        host: integrationConfig.config.baseUrl,\n        [tokenType]: token,\n      });\n\n      let targetNamespaceId;\n\n      try {\n        const namespaceResponse = (await client.Namespaces.show(owner)) as {\n          id: number;\n        };\n\n        targetNamespaceId = namespaceResponse.id;\n      } catch (e) {\n        if (e.response && e.response.statusCode === 404) {\n          throw new InputError(\n            `The namespace ${owner} is not found or the user doesn't have permissions to access it`,\n          );\n        }\n        throw e;\n      }\n\n      const { id: userId } = (await client.Users.current()) as {\n        id: number;\n      };\n\n      if (!targetNamespaceId) {\n        targetNamespaceId = userId;\n      }\n\n      const { id: projectId, http_url_to_repo } = await client.Projects.create({\n        namespace_id: targetNamespaceId,\n        name: repo,\n        visibility: repoVisibility,\n        ...(topics.length ? { topics } : {}),\n        ...(Object.keys(settings).length ? { ...settings } : {}),\n      });\n\n      // When setUserAsOwner is true the input token is expected to come from an unprivileged user GitLab\n      // OAuth flow. In this case GitLab works in a way that allows the unprivileged user to\n      // create the repository, but not to push the default protected branch (e.g. master).\n      // In order to set the user as owner of the newly created repository we need to check that the\n      // GitLab integration configuration for the matching host contains a token and use\n      // such token to bootstrap a new privileged client.\n      if (setUserAsOwner && integrationConfig.config.token) {\n        const adminClient = new Gitlab({\n          host: integrationConfig.config.baseUrl,\n          token: integrationConfig.config.token,\n        });\n\n        await adminClient.ProjectMembers.add(projectId, userId, 50);\n      }\n\n      const remoteUrl = (http_url_to_repo as string).replace(/\\.git$/, '');\n      const repoContentsUrl = `${remoteUrl}/-/blob/${defaultBranch}`;\n\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n      const commitResult = await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),\n        remoteUrl: http_url_to_repo as string,\n        defaultBranch,\n        auth: {\n          username: 'oauth2',\n          password: token,\n        },\n        logger: ctx.logger,\n        commitMessage: gitCommitMessage\n          ? gitCommitMessage\n          : config.getOptionalString('scaffolder.defaultCommitMessage'),\n        gitAuthorInfo,\n      });\n\n      if (branches) {\n        for (const branch of branches) {\n          const {\n            name,\n            protect = false,\n            create = false,\n            ref = 'master',\n          } = branch;\n\n          if (create) {\n            try {\n              await client.Branches.create(projectId, name, ref);\n            } catch (e) {\n              throw new InputError(\n                `Branch creation failed for ${name}. ${printGitlabError(e)}`,\n              );\n            }\n            ctx.logger.info(\n              `Branch ${name} created for ${projectId} with ref ${ref}`,\n            );\n          }\n\n          if (protect) {\n            try {\n              await client.ProtectedBranches.protect(projectId, name);\n            } catch (e) {\n              throw new InputError(\n                `Branch protection failed for ${name}. ${printGitlabError(e)}`,\n              );\n            }\n            ctx.logger.info(`Branch ${name} protected for ${projectId}`);\n          }\n        }\n      }\n\n      if (projectVariables) {\n        for (const variable of projectVariables) {\n          const variableWithDefaults = Object.assign(variable, {\n            variable_type: variable.variable_type ?? 'env_var',\n            protected: variable.protected ?? false,\n            masked: variable.masked ?? false,\n            raw: variable.raw ?? false,\n            environment_scope: variable.environment_scope ?? '*',\n          });\n\n          try {\n            await client.ProjectVariables.create(\n              projectId,\n              variableWithDefaults,\n            );\n          } catch (e) {\n            throw new InputError(\n              `Environment variable creation failed for ${\n                variableWithDefaults.key\n              }. ${printGitlabError(e)}`,\n            );\n          }\n        }\n      }\n\n      ctx.output('commitHash', commitResult?.commitHash);\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n      ctx.output('projectId', projectId);\n    },\n  });\n}\n\nfunction printGitlabError(error: any): string {\n  return JSON.stringify({ code: error.code, message: error.description });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { parseRepoUrl } from '@backstage/plugin-scaffolder-node';\nimport { InputError } from '@backstage/errors';\nimport { Gitlab } from '@gitbeaker/node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { Resources } from '@gitbeaker/core';\n\nexport function createGitlabApi(options: {\n  integrations: ScmIntegrationRegistry;\n  token?: string;\n  repoUrl: string;\n}): Resources.Gitlab {\n  const { integrations, token: providedToken, repoUrl } = options;\n\n  const { host } = parseRepoUrl(repoUrl, integrations);\n\n  const integrationConfig = integrations.gitlab.byHost(host);\n\n  if (!integrationConfig) {\n    throw new InputError(\n      `No matching integration configuration for host ${host}, please check your integrations config`,\n    );\n  }\n\n  if (!integrationConfig.config.token && !providedToken) {\n    throw new InputError(`No token available for host ${host}`);\n  }\n\n  const token = providedToken ?? integrationConfig.config.token!;\n  const tokenType = providedToken ? 'oauthToken' : 'token';\n\n  return new Gitlab({\n    host: integrationConfig.config.baseUrl,\n    [tokenType]: token,\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n  serializeDirectoryContents,\n} from '@backstage/plugin-scaffolder-node';\nimport { Types } from '@gitbeaker/core';\nimport path from 'path';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { InputError } from '@backstage/errors';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\nimport { createGitlabApi } from './helpers';\n\n/**\n * Create a new action that creates a gitlab merge request.\n *\n * @public\n */\nexport const createPublishGitlabMergeRequestAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    title: string;\n    description: string;\n    branchName: string;\n    targetBranchName?: string;\n    sourcePath?: string;\n    targetPath?: string;\n    token?: string;\n    commitAction?: 'create' | 'delete' | 'update';\n    /** @deprecated projectID passed as query parameters in the repoUrl */\n    projectid?: string;\n    removeSourceBranch?: boolean;\n    assignee?: string;\n  }>({\n    id: 'publish:gitlab:merge-request',\n    schema: {\n      input: {\n        required: ['repoUrl', 'branchName'],\n        type: 'object',\n        properties: {\n          repoUrl: {\n            type: 'string',\n            title: 'Repository Location',\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          },\n          /** @deprecated projectID is passed as query parameters in the repoUrl */\n          projectid: {\n            type: 'string',\n            title: 'projectid',\n            description: 'Project ID/Name(slug) of the Gitlab Project',\n          },\n          title: {\n            type: 'string',\n            title: 'Merge Request Name',\n            description: 'The name for the merge request',\n          },\n          description: {\n            type: 'string',\n            title: 'Merge Request Description',\n            description: 'The description of the merge request',\n          },\n          branchName: {\n            type: 'string',\n            title: 'Source Branch Name',\n            description: 'The source branch name of the merge request',\n          },\n          targetBranchName: {\n            type: 'string',\n            title: 'Target Branch Name',\n            description: 'The target branch name of the merge request',\n          },\n          sourcePath: {\n            type: 'string',\n            title: 'Working Subdirectory',\n            description:\n              'Subdirectory of working directory to copy changes from',\n          },\n          targetPath: {\n            type: 'string',\n            title: 'Repository Subdirectory',\n            description: 'Subdirectory of repository to apply changes to',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitLab',\n          },\n          commitAction: {\n            title: 'Commit action',\n            type: 'string',\n            enum: ['create', 'update', 'delete'],\n            description:\n              'The action to be used for git commit. Defaults to create.',\n          },\n          removeSourceBranch: {\n            title: 'Delete source branch',\n            type: 'boolean',\n            description:\n              'Option to delete source branch once the MR has been merged. Default: false',\n          },\n          assignee: {\n            title: 'Merge Request Assignee',\n            type: 'string',\n            description: 'User this merge request will be assigned to',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          targetBranchName: {\n            title: 'Target branch name of the merge request',\n            type: 'string',\n          },\n          projectid: {\n            title: 'Gitlab Project id/Name(slug)',\n            type: 'string',\n          },\n          projectPath: {\n            title: 'Gitlab Project path',\n            type: 'string',\n          },\n          mergeRequestUrl: {\n            title: 'MergeRequest(MR) URL',\n            type: 'string',\n            description: 'Link to the merge request in GitLab',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        assignee,\n        branchName,\n        targetBranchName,\n        description,\n        repoUrl,\n        removeSourceBranch,\n        targetPath,\n        sourcePath,\n        title,\n        token,\n      } = ctx.input;\n\n      const { owner, repo, project } = parseRepoUrl(repoUrl, integrations);\n      const repoID = project ? project : `${owner}/${repo}`;\n\n      const api = createGitlabApi({\n        integrations,\n        token,\n        repoUrl,\n      });\n\n      let assigneeId = undefined;\n\n      if (assignee !== undefined) {\n        try {\n          const assigneeUser = await api.Users.username(assignee);\n          assigneeId = assigneeUser[0].id;\n        } catch (e) {\n          ctx.logger.warn(\n            `Failed to find gitlab user id for ${assignee}: ${e}. Proceeding with MR creation without an assignee.`,\n          );\n        }\n      }\n\n      let fileRoot: string;\n      if (sourcePath) {\n        fileRoot = resolveSafeChildPath(ctx.workspacePath, sourcePath);\n      } else if (targetPath) {\n        // for backward compatibility\n        fileRoot = resolveSafeChildPath(ctx.workspacePath, targetPath);\n      } else {\n        fileRoot = ctx.workspacePath;\n      }\n\n      const fileContents = await serializeDirectoryContents(fileRoot, {\n        gitignore: true,\n      });\n\n      const actions: Types.CommitAction[] = fileContents.map(file => ({\n        action: ctx.input.commitAction ?? 'create',\n        filePath: targetPath\n          ? path.posix.join(targetPath, file.path)\n          : file.path,\n        encoding: 'base64',\n        content: file.content.toString('base64'),\n        execute_filemode: file.executable,\n      }));\n\n      let targetBranch = targetBranchName;\n      if (!targetBranch) {\n        const projects = await api.Projects.show(repoID);\n\n        const { default_branch: defaultBranch } = projects;\n        targetBranch = defaultBranch!;\n      }\n\n      try {\n        await api.Branches.create(repoID, branchName, String(targetBranch));\n      } catch (e) {\n        throw new InputError(\n          `The branch creation failed. Please check that your repo does not already contain a branch named '${branchName}'. ${e}`,\n        );\n      }\n\n      try {\n        await api.Commits.create(repoID, branchName, ctx.input.title, actions);\n      } catch (e) {\n        throw new InputError(\n          `Committing the changes to ${branchName} failed. Please check that none of the files created by the template already exists. ${e}`,\n        );\n      }\n\n      try {\n        const mergeRequestUrl = await api.MergeRequests.create(\n          repoID,\n          branchName,\n          String(targetBranch),\n          title,\n          {\n            description,\n            removeSourceBranch: removeSourceBranch ? removeSourceBranch : false,\n            assigneeId,\n          },\n        ).then((mergeRequest: { web_url: string }) => {\n          return mergeRequest.web_url;\n        });\n        ctx.output('projectid', repoID);\n        ctx.output('targetBranchName', targetBranch);\n        ctx.output('projectPath', repoID);\n        ctx.output('mergeRequestUrl', mergeRequestUrl);\n      } catch (e) {\n        throw new InputError(`Merge request creation failed${e}`);\n      }\n    },\n  });\n};\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n  serializeDirectoryContents,\n} from '@backstage/plugin-scaffolder-node';\nimport { Types } from '@gitbeaker/core';\nimport path from 'path';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { InputError } from '@backstage/errors';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\nimport { createGitlabApi } from './helpers';\n\n/**\n * Create a new action that commits into a gitlab repository.\n *\n * @public\n */\nexport const createGitlabRepoPushAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    branchName: string;\n    commitMessage: string;\n    sourcePath?: string;\n    targetPath?: string;\n    token?: string;\n    commitAction?: 'create' | 'delete' | 'update';\n  }>({\n    id: 'gitlab:repo:push',\n    schema: {\n      input: {\n        required: ['repoUrl', 'branchName', 'commitMessage'],\n        type: 'object',\n        properties: {\n          repoUrl: {\n            type: 'string',\n            title: 'Repository Location',\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          },\n          branchName: {\n            type: 'string',\n            title: 'Source Branch Name',\n            description: 'The branch name for the commit',\n          },\n          commitMessage: {\n            type: 'string',\n            title: 'Commit Message',\n            description: `The commit message`,\n          },\n          sourcePath: {\n            type: 'string',\n            title: 'Working Subdirectory',\n            description:\n              'Subdirectory of working directory to copy changes from',\n          },\n          targetPath: {\n            type: 'string',\n            title: 'Repository Subdirectory',\n            description: 'Subdirectory of repository to apply changes to',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitLab',\n          },\n          commitAction: {\n            title: 'Commit action',\n            type: 'string',\n            enum: ['create', 'update', 'delete'],\n            description:\n              'The action to be used for git commit. Defaults to create.',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          projectid: {\n            title: 'Gitlab Project id/Name(slug)',\n            type: 'string',\n          },\n          projectPath: {\n            title: 'Gitlab Project path',\n            type: 'string',\n          },\n          commitHash: {\n            title: 'The git commit hash of the commit',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        branchName,\n        repoUrl,\n        targetPath,\n        sourcePath,\n        token,\n        commitAction,\n      } = ctx.input;\n\n      const { owner, repo, project } = parseRepoUrl(repoUrl, integrations);\n      const repoID = project ? project : `${owner}/${repo}`;\n\n      const api = createGitlabApi({\n        integrations,\n        token,\n        repoUrl,\n      });\n\n      let fileRoot: string;\n      if (sourcePath) {\n        fileRoot = resolveSafeChildPath(ctx.workspacePath, sourcePath);\n      } else {\n        fileRoot = ctx.workspacePath;\n      }\n\n      const fileContents = await serializeDirectoryContents(fileRoot, {\n        gitignore: true,\n      });\n\n      const actions: Types.CommitAction[] = fileContents.map(file => ({\n        action: commitAction ?? 'create',\n        filePath: targetPath\n          ? path.posix.join(targetPath, file.path)\n          : file.path,\n        encoding: 'base64',\n        content: file.content.toString('base64'),\n        execute_filemode: file.executable,\n      }));\n\n      let branchExists = false;\n      try {\n        await api.Branches.show(repoID, branchName);\n        branchExists = true;\n      } catch (e: any) {\n        if (e.response?.statusCode !== 404) {\n          throw new InputError(\n            `Failed to check status of branch '${branchName}'. Please make sure that branch already exists or Backstage has permissions to create one. ${e}`,\n          );\n        }\n      }\n\n      if (!branchExists) {\n        // create a branch using the default branch as ref\n        try {\n          const projects = await api.Projects.show(repoID);\n          const { default_branch: defaultBranch } = projects;\n          await api.Branches.create(repoID, branchName, String(defaultBranch));\n        } catch (e) {\n          throw new InputError(\n            `The branch '${branchName}' was not found and creation failed with error. Please make sure that branch already exists or Backstage has permissions to create one. ${e}`,\n          );\n        }\n      }\n\n      try {\n        const commit = await api.Commits.create(\n          repoID,\n          branchName,\n          ctx.input.commitMessage,\n          actions,\n        );\n        ctx.output('projectid', repoID);\n        ctx.output('projectPath', repoID);\n        ctx.output('commitHash', commit.id);\n      } catch (e) {\n        throw new InputError(\n          `Committing the changes to ${branchName} failed. Please check that none of the files created by the template already exists. ${e}`,\n        );\n      }\n    },\n  });\n};\n"],"names":["z","InputError","Gitlab","util.getTopLevelParentGroup","createTemplateAction","examples","yaml","IssueType","parseRepoUrl","initRepoAndPush","getRepoSourceDirectory","resolveSafeChildPath","serializeDirectoryContents","path"],"mappings":"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"}