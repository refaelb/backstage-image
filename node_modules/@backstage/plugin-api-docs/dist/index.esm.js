import React, { Suspense, useEffect, useState } from 'react';
import { useOutlet } from 'react-router-dom';
import { PageWithHeader, Content, ContentHeader, CreateButton, SupportButton, CodeSnippet, TabbedCard, CardTab, Progress, InfoCard, WarningPanel, Link } from '@backstage/core-components';
import { createRouteRef, createExternalRouteRef, useApi, configApiRef, useRouteRef, createApiRef, createPlugin, createApiFactory, createRoutableExtension, createComponentExtension } from '@backstage/core-plugin-api';
import { CatalogTable } from '@backstage/plugin-catalog';
import { EntityListProvider, CatalogFilterLayout, EntityKindPicker, EntityTypePicker, UserListPicker, EntityOwnerPicker, EntityLifecyclePicker, EntityTagPicker, useEntity, EntityTable, useRelatedEntities } from '@backstage/plugin-catalog-react';
import { usePermission } from '@backstage/plugin-permission-react';
import { catalogEntityCreatePermission } from '@backstage/plugin-catalog-common/alpha';
import { Alert, ToggleButton } from '@material-ui/lab';
import { useTheme } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import { makeStyles, Dialog, DialogTitle, Typography as Typography$1, DialogContent, Tabs, Tab, DialogActions, Button, Box } from '@material-ui/core';
import { RELATION_CONSUMES_API, RELATION_HAS_PART, RELATION_PROVIDES_API, RELATION_API_CONSUMED_BY, RELATION_API_PROVIDED_BY } from '@backstage/catalog-model';
import ExtensionIcon from '@material-ui/icons/Extension';

const rootRoute = createRouteRef({
  id: "api-docs"
});
const registerComponentRouteRef = createExternalRouteRef({
  id: "register-component",
  optional: true
});

const defaultColumns = [
  CatalogTable.columns.createTitleColumn({ hidden: true }),
  CatalogTable.columns.createNameColumn({ defaultKind: "API" }),
  CatalogTable.columns.createSystemColumn(),
  CatalogTable.columns.createOwnerColumn(),
  CatalogTable.columns.createSpecTypeColumn(),
  CatalogTable.columns.createSpecLifecycleColumn(),
  CatalogTable.columns.createMetadataDescriptionColumn(),
  CatalogTable.columns.createTagsColumn()
];
const DefaultApiExplorerPage = (props) => {
  var _a;
  const { initiallySelectedFilter = "all", columns, actions } = props;
  const configApi = useApi(configApiRef);
  const generatedSubtitle = `${(_a = configApi.getOptionalString("organization.name")) != null ? _a : "Backstage"} API Explorer`;
  const registerComponentLink = useRouteRef(registerComponentRouteRef);
  const { allowed } = usePermission({
    permission: catalogEntityCreatePermission
  });
  return /* @__PURE__ */ React.createElement(
    PageWithHeader,
    {
      themeId: "apis",
      title: "APIs",
      subtitle: generatedSubtitle,
      pageTitleOverride: "APIs"
    },
    /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(ContentHeader, { title: "" }, allowed && /* @__PURE__ */ React.createElement(
      CreateButton,
      {
        title: "Register Existing API",
        to: registerComponentLink == null ? void 0 : registerComponentLink()
      }
    ), /* @__PURE__ */ React.createElement(SupportButton, null, "All your APIs")), /* @__PURE__ */ React.createElement(EntityListProvider, null, /* @__PURE__ */ React.createElement(CatalogFilterLayout, null, /* @__PURE__ */ React.createElement(CatalogFilterLayout.Filters, null, /* @__PURE__ */ React.createElement(EntityKindPicker, { initialFilter: "api", hidden: true }), /* @__PURE__ */ React.createElement(EntityTypePicker, null), /* @__PURE__ */ React.createElement(UserListPicker, { initialFilter: initiallySelectedFilter }), /* @__PURE__ */ React.createElement(EntityOwnerPicker, null), /* @__PURE__ */ React.createElement(EntityLifecyclePicker, null), /* @__PURE__ */ React.createElement(EntityTagPicker, null)), /* @__PURE__ */ React.createElement(CatalogFilterLayout.Content, null, /* @__PURE__ */ React.createElement(
      CatalogTable,
      {
        columns: columns || defaultColumns,
        actions
      }
    )))))
  );
};

const ApiExplorerPage$1 = (props) => {
  const outlet = useOutlet();
  return outlet || /* @__PURE__ */ React.createElement(DefaultApiExplorerPage, { ...props });
};

const apiDocsConfigRef = createApiRef({
  id: "plugin.api-docs.config"
});

const PlainApiDefinitionWidget = (props) => {
  return /* @__PURE__ */ React.createElement(
    CodeSnippet,
    {
      text: props.definition,
      language: props.language,
      showCopyCodeButton: true
    }
  );
};

const ApiDefinitionCard = () => {
  var _a;
  const { entity } = useEntity();
  const config = useApi(apiDocsConfigRef);
  const { getApiDefinitionWidget } = config;
  if (!entity) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, "Could not fetch the API");
  }
  const definitionWidget = getApiDefinitionWidget(entity);
  const entityTitle = (_a = entity.metadata.title) != null ? _a : entity.metadata.name;
  if (definitionWidget) {
    return /* @__PURE__ */ React.createElement(TabbedCard, { title: entityTitle }, /* @__PURE__ */ React.createElement(CardTab, { label: definitionWidget.title, key: "widget" }, definitionWidget.component(entity.spec.definition)), /* @__PURE__ */ React.createElement(CardTab, { label: "Raw", key: "raw" }, /* @__PURE__ */ React.createElement(
      PlainApiDefinitionWidget,
      {
        definition: entity.spec.definition,
        language: definitionWidget.rawLanguage || entity.spec.type
      }
    )));
  }
  return /* @__PURE__ */ React.createElement(
    TabbedCard,
    {
      title: entityTitle,
      children: [
        // Has to be an array, otherwise typescript doesn't like that this has only a single child
        /* @__PURE__ */ React.createElement(CardTab, { label: entity.spec.type, key: "raw" }, /* @__PURE__ */ React.createElement(
          PlainApiDefinitionWidget,
          {
            definition: entity.spec.definition,
            language: entity.spec.type
          }
        ))
      ]
    }
  );
};

const LazyAsyncApiDefinition = React.lazy(
  () => import('./esm/AsyncApiDefinition-ffed9c50.esm.js').then((m) => ({
    default: m.AsyncApiDefinition
  }))
);
const AsyncApiDefinitionWidget = (props) => {
  return /* @__PURE__ */ React.createElement(Suspense, { fallback: /* @__PURE__ */ React.createElement(Progress, null) }, /* @__PURE__ */ React.createElement(LazyAsyncApiDefinition, { ...props }));
};

const LazyGraphQlDefinition = React.lazy(
  () => import('./esm/GraphQlDefinition-49cc2c3b.esm.js').then((m) => ({
    default: m.GraphQlDefinition
  }))
);
const GraphQlDefinitionWidget = (props) => {
  return /* @__PURE__ */ React.createElement(Suspense, { fallback: /* @__PURE__ */ React.createElement(Progress, null) }, /* @__PURE__ */ React.createElement(LazyGraphQlDefinition, { ...props }));
};

const LazyOpenApiDefinition = React.lazy(
  () => import('./esm/OpenApiDefinition-20ae2e8c.esm.js').then((m) => ({
    default: m.OpenApiDefinition
  }))
);
const OpenApiDefinitionWidget = (props) => {
  return /* @__PURE__ */ React.createElement(Suspense, { fallback: /* @__PURE__ */ React.createElement(Progress, null) }, /* @__PURE__ */ React.createElement(LazyOpenApiDefinition, { ...props }));
};

const GrpcApiDefinitionWidget = (props) => {
  const theme = useTheme();
  return /* @__PURE__ */ React.createElement(
    CodeSnippet,
    {
      customStyle: { backgroundColor: theme.palette.background.default },
      text: props.definition,
      language: "protobuf",
      showCopyCodeButton: true
    }
  );
};

const TrpcApiDefinitionWidget = (props) => {
  const { definition } = props;
  const theme = useTheme();
  return /* @__PURE__ */ React.createElement(
    CodeSnippet,
    {
      customStyle: { backgroundColor: theme.palette.background.default },
      text: definition,
      language: "typescript",
      showCopyCodeButton: true
    }
  );
};

function defaultDefinitionWidgets() {
  return [
    {
      type: "openapi",
      title: "OpenAPI",
      rawLanguage: "yaml",
      component: (definition) => /* @__PURE__ */ React.createElement(OpenApiDefinitionWidget, { definition })
    },
    {
      type: "asyncapi",
      title: "AsyncAPI",
      rawLanguage: "yaml",
      component: (definition) => /* @__PURE__ */ React.createElement(AsyncApiDefinitionWidget, { definition })
    },
    {
      type: "graphql",
      title: "GraphQL",
      rawLanguage: "graphql",
      component: (definition) => /* @__PURE__ */ React.createElement(GraphQlDefinitionWidget, { definition })
    },
    {
      type: "grpc",
      title: "gRPC",
      component: (definition) => /* @__PURE__ */ React.createElement(GrpcApiDefinitionWidget, { definition })
    },
    {
      type: "trpc",
      title: "tRPC",
      component: (definition) => /* @__PURE__ */ React.createElement(TrpcApiDefinitionWidget, { definition })
    }
  ];
}

const ApiTypeTitle = (props) => {
  const { apiEntity } = props;
  const config = useApi(apiDocsConfigRef);
  const definition = config.getApiDefinitionWidget(apiEntity);
  const type = definition ? definition.title : apiEntity.spec.type;
  return /* @__PURE__ */ React.createElement(Typography, { component: "span" }, type);
};

const useStyles = makeStyles((theme) => ({
  fullHeightDialog: {
    height: "calc(100% - 64px)"
  },
  root: {
    display: "flex",
    flexGrow: 1,
    width: "100%",
    height: "100%"
  },
  tabs: {
    borderRight: `1px solid ${theme.palette.divider}`,
    flexShrink: 0
  },
  tabContents: {
    flexGrow: 1,
    overflowX: "auto"
  },
  title: {
    color: theme.palette.text.primary,
    wordBreak: "break-word",
    fontSize: theme.typography.h3.fontSize,
    marginBottom: 0
  },
  type: {
    textTransform: "uppercase",
    fontSize: 11,
    opacity: 0.8,
    marginBottom: theme.spacing(1),
    color: theme.palette.text.primary
  }
}));
function TabPanel(props) {
  const { children, value, index, ...other } = props;
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(
    "div",
    {
      role: "tabpanel",
      hidden: value !== index,
      id: `vertical-tabpanel-${index}`,
      "aria-labelledby": `vertical-tab-${index}`,
      className: classes.tabContents,
      ...other
    },
    value === index && /* @__PURE__ */ React.createElement(Box, { pl: 3, pr: 3 }, children)
  );
}
function a11yProps(index) {
  return {
    id: `vertical-tab-${index}`,
    "aria-controls": `vertical-tabpanel-${index}`
  };
}
function ApiDefinitionDialog(props) {
  var _a, _b, _c;
  const { open, entity, onClose } = props;
  const [activeTab, setActiveTab] = React.useState(0);
  const classes = useStyles();
  useEffect(() => {
    setActiveTab(0);
  }, [open]);
  const config = useApi(apiDocsConfigRef);
  const definitionWidget = config.getApiDefinitionWidget(entity);
  let tabIndex = 0;
  let tabPanelIndex = 0;
  return /* @__PURE__ */ React.createElement(
    Dialog,
    {
      fullWidth: true,
      maxWidth: "xl",
      open,
      onClose,
      "aria-labelledby": "api-definition-dialog-title",
      PaperProps: { className: classes.fullHeightDialog }
    },
    /* @__PURE__ */ React.createElement(DialogTitle, { id: "api-definition-dialog-title", disableTypography: true }, /* @__PURE__ */ React.createElement(Typography$1, { className: classes.type }, "API - ", (_a = definitionWidget == null ? void 0 : definitionWidget.title) != null ? _a : "Raw"), /* @__PURE__ */ React.createElement(Typography$1, { className: classes.title, variant: "h1" }, (_b = entity.metadata.title) != null ? _b : entity.metadata.name)),
    /* @__PURE__ */ React.createElement(DialogContent, { dividers: true, className: classes.root }, /* @__PURE__ */ React.createElement(
      Tabs,
      {
        orientation: "vertical",
        variant: "scrollable",
        value: activeTab,
        onChange: (_, newValue) => setActiveTab(newValue),
        "aria-label": "API definition options",
        className: classes.tabs
      },
      definitionWidget ? /* @__PURE__ */ React.createElement(Tab, { label: definitionWidget.title, ...a11yProps(tabIndex++) }) : null,
      /* @__PURE__ */ React.createElement(Tab, { label: "Raw", ...a11yProps(tabIndex++) })
    ), definitionWidget ? /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: tabPanelIndex++ }, definitionWidget.component(entity.spec.definition)) : null, /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: tabPanelIndex++ }, /* @__PURE__ */ React.createElement(
      PlainApiDefinitionWidget,
      {
        definition: entity.spec.definition,
        language: (_c = definitionWidget == null ? void 0 : definitionWidget.rawLanguage) != null ? _c : entity.spec.type
      }
    ))),
    /* @__PURE__ */ React.createElement(DialogActions, null, /* @__PURE__ */ React.createElement(Button, { onClick: onClose, color: "primary" }, "Close"))
  );
}

function createSpecApiTypeColumn() {
  return {
    title: "Type",
    field: "spec.type",
    render: (entity) => /* @__PURE__ */ React.createElement(ApiTypeTitle, { apiEntity: entity })
  };
}
const ApiDefinitionButton = ({ apiEntity }) => {
  const [dialogOpen, setDialogOpen] = useState(false);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    ToggleButton,
    {
      "aria-label": "Toggle API Definition Dialog",
      onClick: () => setDialogOpen(!dialogOpen)
    },
    /* @__PURE__ */ React.createElement(ExtensionIcon, null)
  ), /* @__PURE__ */ React.createElement(
    ApiDefinitionDialog,
    {
      entity: apiEntity,
      open: dialogOpen,
      onClose: () => setDialogOpen(false)
    }
  ));
};
function createApiDefinitionColumn() {
  return {
    title: "API Definition",
    render: (entity) => /* @__PURE__ */ React.createElement(ApiDefinitionButton, { apiEntity: entity })
  };
}
const apiEntityColumns = [
  EntityTable.columns.createEntityRefColumn({ defaultKind: "API" }),
  EntityTable.columns.createSystemColumn(),
  EntityTable.columns.createOwnerColumn(),
  createSpecApiTypeColumn(),
  EntityTable.columns.createSpecLifecycleColumn(),
  EntityTable.columns.createMetadataDescriptionColumn(),
  createApiDefinitionColumn()
];

const ConsumedApisCard = (props) => {
  const { variant = "gridItem", columns = apiEntityColumns } = props;
  const { entity } = useEntity();
  const { entities, loading, error } = useRelatedEntities(entity, {
    type: RELATION_CONSUMES_API
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Consumed APIs" }, /* @__PURE__ */ React.createElement(Progress, null));
  }
  if (error || !entities) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Consumed APIs" }, /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not load APIs",
        message: /* @__PURE__ */ React.createElement(CodeSnippet, { text: `${error}`, language: "text" })
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(
    EntityTable,
    {
      title: "Consumed APIs",
      variant,
      emptyContent: /* @__PURE__ */ React.createElement("div", { style: { textAlign: "center" } }, /* @__PURE__ */ React.createElement(Typography$1, { variant: "body1" }, "This ", entity.kind.toLocaleLowerCase("en-US"), " does not consume any APIs."), /* @__PURE__ */ React.createElement(Typography$1, { variant: "body2" }, /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/software-catalog/descriptor-format#specconsumesapis-optional" }, "Learn how to change this."))),
      columns,
      entities
    }
  );
};

const presetColumns = [
  EntityTable.columns.createEntityRefColumn({ defaultKind: "API" }),
  EntityTable.columns.createOwnerColumn(),
  createSpecApiTypeColumn(),
  EntityTable.columns.createSpecLifecycleColumn(),
  EntityTable.columns.createMetadataDescriptionColumn()
];
const HasApisCard = (props) => {
  const { variant = "gridItem", columns = presetColumns } = props;
  const { entity } = useEntity();
  const { entities, loading, error } = useRelatedEntities(entity, {
    type: RELATION_HAS_PART,
    kind: "API"
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "APIs" }, /* @__PURE__ */ React.createElement(Progress, null));
  }
  if (error || !entities) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "APIs" }, /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not load APIs",
        message: /* @__PURE__ */ React.createElement(CodeSnippet, { text: `${error}`, language: "text" })
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(
    EntityTable,
    {
      title: "APIs",
      variant,
      emptyContent: /* @__PURE__ */ React.createElement("div", { style: { textAlign: "center" } }, /* @__PURE__ */ React.createElement(Typography$1, { variant: "body1" }, "This ", entity.kind.toLocaleLowerCase("en-US"), " does not contain any APIs."), /* @__PURE__ */ React.createElement(Typography$1, { variant: "body2" }, /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/software-catalog/descriptor-format#kind-api" }, "Learn how to change this."))),
      columns,
      entities
    }
  );
};

const ProvidedApisCard = (props) => {
  const { variant = "gridItem", columns = apiEntityColumns } = props;
  const { entity } = useEntity();
  const { entities, loading, error } = useRelatedEntities(entity, {
    type: RELATION_PROVIDES_API
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Provided APIs" }, /* @__PURE__ */ React.createElement(Progress, null));
  }
  if (error || !entities) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Provided APIs" }, /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not load APIs",
        message: /* @__PURE__ */ React.createElement(CodeSnippet, { text: `${error}`, language: "text" })
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(
    EntityTable,
    {
      title: "Provided APIs",
      variant,
      emptyContent: /* @__PURE__ */ React.createElement("div", { style: { textAlign: "center" } }, /* @__PURE__ */ React.createElement(Typography$1, { variant: "body1" }, "This ", entity.kind.toLocaleLowerCase("en-US"), " does not provide any APIs."), /* @__PURE__ */ React.createElement(Typography$1, { variant: "body2" }, /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/software-catalog/descriptor-format#specprovidesapis-optional" }, "Learn how to change this."))),
      columns,
      entities
    }
  );
};

const ConsumingComponentsCard = (props) => {
  const { variant = "gridItem" } = props;
  const { entity } = useEntity();
  const { entities, loading, error } = useRelatedEntities(entity, {
    type: RELATION_API_CONSUMED_BY
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Consumers" }, /* @__PURE__ */ React.createElement(Progress, null));
  }
  if (error || !entities) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Consumers" }, /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not load components",
        message: /* @__PURE__ */ React.createElement(CodeSnippet, { text: `${error}`, language: "text" })
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(
    EntityTable,
    {
      title: "Consumers",
      variant,
      emptyContent: /* @__PURE__ */ React.createElement("div", { style: { textAlign: "center" } }, /* @__PURE__ */ React.createElement(Typography$1, { variant: "body1" }, "No component consumes this API."), /* @__PURE__ */ React.createElement(Typography$1, { variant: "body2" }, /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/software-catalog/descriptor-format#specconsumesapis-optional" }, "Learn how to change this."))),
      columns: EntityTable.componentEntityColumns,
      entities
    }
  );
};

const ProvidingComponentsCard = (props) => {
  const { variant = "gridItem" } = props;
  const { entity } = useEntity();
  const { entities, loading, error } = useRelatedEntities(entity, {
    type: RELATION_API_PROVIDED_BY
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Providers" }, /* @__PURE__ */ React.createElement(Progress, null));
  }
  if (error || !entities) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Providers" }, /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not load components",
        message: /* @__PURE__ */ React.createElement(CodeSnippet, { text: `${error}`, language: "text" })
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(
    EntityTable,
    {
      title: "Providers",
      variant,
      emptyContent: /* @__PURE__ */ React.createElement("div", { style: { textAlign: "center" } }, /* @__PURE__ */ React.createElement(Typography$1, { variant: "body1" }, "No component provides this API."), /* @__PURE__ */ React.createElement(Typography$1, { variant: "body2" }, /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/software-catalog/descriptor-format#specprovidesapis-optional" }, "Learn how to change this."))),
      columns: EntityTable.componentEntityColumns,
      entities
    }
  );
};

const apiDocsPlugin = createPlugin({
  id: "api-docs",
  routes: {
    root: rootRoute
  },
  apis: [
    createApiFactory({
      api: apiDocsConfigRef,
      deps: {},
      factory: () => {
        const definitionWidgets = defaultDefinitionWidgets();
        return {
          getApiDefinitionWidget: (apiEntity) => {
            return definitionWidgets.find((d) => d.type === apiEntity.spec.type);
          }
        };
      }
    })
  ],
  externalRoutes: {
    registerApi: registerComponentRouteRef
  }
});
const ApiExplorerPage = apiDocsPlugin.provide(
  createRoutableExtension({
    name: "ApiExplorerPage",
    component: () => import('./esm/index-4c150471.esm.js').then((m) => m.ApiExplorerIndexPage),
    mountPoint: rootRoute
  })
);
const EntityApiDefinitionCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityApiDefinitionCard",
    component: {
      lazy: () => import('./esm/index-ca3db15b.esm.js').then((m) => m.ApiDefinitionCard)
    }
  })
);
const EntityConsumedApisCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityConsumedApisCard",
    component: {
      lazy: () => import('./esm/index-8fdc7e42.esm.js').then((m) => m.ConsumedApisCard)
    }
  })
);
const EntityConsumingComponentsCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityConsumingComponentsCard",
    component: {
      lazy: () => import('./esm/index-6b9880ea.esm.js').then(
        (m) => m.ConsumingComponentsCard
      )
    }
  })
);
const EntityProvidedApisCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityProvidedApisCard",
    component: {
      lazy: () => import('./esm/index-8fdc7e42.esm.js').then((m) => m.ProvidedApisCard)
    }
  })
);
const EntityProvidingComponentsCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityProvidingComponentsCard",
    component: {
      lazy: () => import('./esm/index-6b9880ea.esm.js').then(
        (m) => m.ProvidingComponentsCard
      )
    }
  })
);
const EntityHasApisCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityHasApisCard",
    component: {
      lazy: () => import('./esm/index-8fdc7e42.esm.js').then((m) => m.HasApisCard)
    }
  })
);

export { ApiDefinitionCard, ApiDefinitionDialog, ApiExplorerPage$1 as ApiExplorerIndexPage, ApiExplorerPage, ApiTypeTitle, AsyncApiDefinitionWidget, ConsumedApisCard, ConsumingComponentsCard, DefaultApiExplorerPage, EntityApiDefinitionCard, EntityConsumedApisCard, EntityConsumingComponentsCard, EntityHasApisCard, EntityProvidedApisCard, EntityProvidingComponentsCard, GraphQlDefinitionWidget, HasApisCard, OpenApiDefinitionWidget, PlainApiDefinitionWidget, ProvidedApisCard, ProvidingComponentsCard, TrpcApiDefinitionWidget, apiDocsConfigRef, apiDocsPlugin, defaultDefinitionWidgets, apiDocsPlugin as plugin };
//# sourceMappingURL=index.esm.js.map
