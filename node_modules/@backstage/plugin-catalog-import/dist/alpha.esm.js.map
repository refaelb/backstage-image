{"version":3,"file":"alpha.esm.js","sources":["../src/alpha.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  configApiRef,\n  createApiFactory,\n  discoveryApiRef,\n  identityApiRef,\n} from '@backstage/core-plugin-api';\nimport {\n  compatWrapper,\n  convertLegacyRouteRef,\n} from '@backstage/core-compat-api';\nimport {\n  createApiExtension,\n  createPageExtension,\n  createPlugin,\n} from '@backstage/frontend-plugin-api';\nimport {\n  scmAuthApiRef,\n  scmIntegrationsApiRef,\n} from '@backstage/integration-react';\nimport React from 'react';\nimport { CatalogImportClient, catalogImportApiRef } from './api';\nimport { rootRouteRef } from './plugin';\nimport { catalogApiRef } from '@backstage/plugin-catalog-react';\n\n// TODO: It's currently possible to override the import page with a custom one. We need to decide\n//       whether this type of override is typically done with an input or by overriding the entire extension.\nconst catalogImportPage = createPageExtension({\n  defaultPath: '/catalog-import',\n  routeRef: convertLegacyRouteRef(rootRouteRef),\n  loader: () =>\n    import('./components/ImportPage').then(m =>\n      compatWrapper(<m.ImportPage />),\n    ),\n});\n\nconst catalogImportApi = createApiExtension({\n  factory: createApiFactory({\n    api: catalogImportApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      scmAuthApi: scmAuthApiRef,\n      identityApi: identityApiRef,\n      scmIntegrationsApi: scmIntegrationsApiRef,\n      catalogApi: catalogApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({\n      discoveryApi,\n      scmAuthApi,\n      identityApi,\n      scmIntegrationsApi,\n      catalogApi,\n      configApi,\n    }) =>\n      new CatalogImportClient({\n        discoveryApi,\n        scmAuthApi,\n        scmIntegrationsApi,\n        identityApi,\n        catalogApi,\n        configApi,\n      }),\n  }),\n});\n\n/** @alpha */\nexport default createPlugin({\n  id: 'catalog-import',\n  extensions: [catalogImportApi, catalogImportPage],\n  routes: {\n    importPage: convertLegacyRouteRef(rootRouteRef),\n  },\n});\n"],"names":[],"mappings":";;;;;;;;;;;AA0CA,MAAM,oBAAoB,mBAAoB,CAAA;AAAA,EAC5C,WAAa,EAAA,iBAAA;AAAA,EACb,QAAA,EAAU,sBAAsB,YAAY,CAAA;AAAA,EAC5C,MAAQ,EAAA,MACN,OAAO,6BAAyB,CAAE,CAAA,IAAA;AAAA,IAAK,OACrC,aAAc,iBAAA,KAAA,CAAA,aAAA,CAAC,CAAE,CAAA,UAAA,EAAF,IAAa,CAAE,CAAA;AAAA,GAChC;AACJ,CAAC,CAAA,CAAA;AAED,MAAM,mBAAmB,kBAAmB,CAAA;AAAA,EAC1C,SAAS,gBAAiB,CAAA;AAAA,IACxB,GAAK,EAAA,mBAAA;AAAA,IACL,IAAM,EAAA;AAAA,MACJ,YAAc,EAAA,eAAA;AAAA,MACd,UAAY,EAAA,aAAA;AAAA,MACZ,WAAa,EAAA,cAAA;AAAA,MACb,kBAAoB,EAAA,qBAAA;AAAA,MACpB,UAAY,EAAA,aAAA;AAAA,MACZ,SAAW,EAAA,YAAA;AAAA,KACb;AAAA,IACA,SAAS,CAAC;AAAA,MACR,YAAA;AAAA,MACA,UAAA;AAAA,MACA,WAAA;AAAA,MACA,kBAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,KACF,KACE,IAAI,mBAAoB,CAAA;AAAA,MACtB,YAAA;AAAA,MACA,UAAA;AAAA,MACA,kBAAA;AAAA,MACA,WAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,KACD,CAAA;AAAA,GACJ,CAAA;AACH,CAAC,CAAA,CAAA;AAGD,YAAe,YAAa,CAAA;AAAA,EAC1B,EAAI,EAAA,gBAAA;AAAA,EACJ,UAAA,EAAY,CAAC,gBAAA,EAAkB,iBAAiB,CAAA;AAAA,EAChD,MAAQ,EAAA;AAAA,IACN,UAAA,EAAY,sBAAsB,YAAY,CAAA;AAAA,GAChD;AACF,CAAC,CAAA;;;;"}