{"version":3,"file":"index.cjs.js","sources":["../src/analyzers/GithubLocationAnalyzer.ts","../src/lib/config.ts","../src/lib/org.ts","../src/processors/GithubDiscoveryProcessor.ts","../src/lib/guards.ts","../src/processors/GithubMultiOrgReaderProcessor.ts","../src/processors/GithubOrgReaderProcessor.ts","../src/providers/GithubMultiOrgEntityProvider.ts","../src/providers/GithubOrgEntityProvider.ts","../src/deprecated.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CatalogApi, CatalogClient } from '@backstage/catalog-client';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { Octokit } from '@octokit/rest';\nimport { trimEnd } from 'lodash';\nimport parseGitUrl from 'git-url-parse';\nimport {\n  AnalyzeOptions,\n  ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport {\n  PluginEndpointDiscovery,\n  TokenManager,\n} from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\n\n/** @public */\nexport type GithubLocationAnalyzerOptions = {\n  config: Config;\n  discovery: PluginEndpointDiscovery;\n  tokenManager: TokenManager;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n};\n\n/** @public */\nexport class GithubLocationAnalyzer implements ScmLocationAnalyzer {\n  private readonly catalogClient: CatalogApi;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly tokenManager: TokenManager;\n\n  constructor(options: GithubLocationAnalyzerOptions) {\n    this.catalogClient = new CatalogClient({ discoveryApi: options.discovery });\n    this.integrations = ScmIntegrations.fromConfig(options.config);\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n    this.tokenManager = options.tokenManager;\n  }\n\n  supports(url: string) {\n    const integration = this.integrations.byUrl(url);\n    return integration?.type === 'github';\n  }\n\n  async analyze(options: AnalyzeOptions) {\n    const { url, catalogFilename } = options;\n    const { owner, name: repo } = parseGitUrl(url);\n\n    const catalogFile = catalogFilename || 'catalog-info.yaml';\n\n    const query = `filename:${catalogFile} repo:${owner}/${repo}`;\n\n    const integration = this.integrations.github.byUrl(url);\n    if (!integration) {\n      throw new Error('Make sure you have a GitHub integration configured');\n    }\n\n    const { token: githubToken } =\n      await this.githubCredentialsProvider.getCredentials({\n        url,\n      });\n\n    const octokitClient = new Octokit({\n      auth: githubToken,\n      baseUrl: integration.config.apiBaseUrl,\n    });\n\n    const searchResult = await octokitClient.search\n      .code({ q: query })\n      .catch(e => {\n        throw new Error(`Couldn't search repository for metadata file, ${e}`);\n      });\n\n    const exists = searchResult.data.total_count > 0;\n    if (exists) {\n      const repoInformation = await octokitClient.repos\n        .get({ owner, repo })\n        .catch(e => {\n          throw new Error(`Couldn't fetch repo data, ${e}`);\n        });\n      const defaultBranch = repoInformation.data.default_branch;\n\n      const { token: serviceToken } = await this.tokenManager.getToken();\n\n      const result = await Promise.all(\n        searchResult.data.items\n          .map(i => `${trimEnd(url, '/')}/blob/${defaultBranch}/${i.path}`)\n          .map(async target => {\n            const addLocationResult = await this.catalogClient.addLocation(\n              {\n                type: 'url',\n                target,\n                dryRun: true,\n              },\n              { token: serviceToken },\n            );\n            return addLocationResult.entities.map(e => ({\n              location: { type: 'url', target },\n              isRegistered: !!addLocationResult.exists,\n              entity: e,\n            }));\n          }),\n      );\n\n      return { existing: result.flat() };\n    }\n    return { existing: [] };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\n/**\n * The configuration parameters for a multi-org GitHub processor.\n * @public\n */\nexport type GithubMultiOrgConfig = Array<{\n  /**\n   * The name of the GitHub org to process.\n   */\n  name: string;\n  /**\n   * The namespace of the group created for this org.\n   */\n  groupNamespace: string;\n  /**\n   * The namespace of the users created for this org. If not specified defaults to undefined.\n   */\n  userNamespace: string | undefined;\n}>;\n\nexport function readGithubMultiOrgConfig(config: Config): GithubMultiOrgConfig {\n  const orgConfigs = config.getOptionalConfigArray('orgs') ?? [];\n  return orgConfigs.map(c => ({\n    name: c.getString('name'),\n    groupNamespace: (\n      c.getOptionalString('groupNamespace') ?? c.getString('name')\n    ).toLowerCase(),\n    userNamespace: c.getOptionalString('userNamespace') ?? undefined,\n  }));\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  GroupEntity,\n  parseEntityRef,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\n\nexport function buildOrgHierarchy(groups: GroupEntity[]) {\n  const groupsByName = new Map(groups.map(g => [g.metadata.name, g]));\n\n  //\n  // Make sure that g.parent.children contain g\n  //\n\n  for (const group of groups) {\n    const selfName = group.metadata.name;\n    const parentName = group.spec.parent;\n    if (parentName) {\n      const parent = groupsByName.get(parentName);\n      if (parent && !parent.spec.children.includes(selfName)) {\n        parent.spec.children.push(selfName);\n      }\n    }\n  }\n\n  //\n  // Make sure that g.children.parent is g\n  //\n\n  for (const group of groups) {\n    const selfName = group.metadata.name;\n    for (const childName of group.spec.children) {\n      const child = groupsByName.get(childName);\n      if (child && !child.spec.parent) {\n        child.spec.parent = selfName;\n      }\n    }\n  }\n}\n\n// Ensure that users have their direct group memberships.\nexport function assignGroupsToUsers(\n  users: UserEntity[],\n  groups: GroupEntity[],\n) {\n  const groupMemberUsers = new Map(\n    groups.map(group => {\n      const groupKey =\n        group.metadata.namespace &&\n        group.metadata.namespace !== DEFAULT_NAMESPACE\n          ? `${group.metadata.namespace}/${group.metadata.name}`\n          : group.metadata.name;\n      // Fully qualify member refs so they can be keyed off of since they may contain namespace prefixes\n      return [\n        groupKey,\n        group.spec.members?.map(m =>\n          stringifyEntityRef(parseEntityRef(m, { defaultKind: 'user' })),\n        ) || [],\n      ];\n    }),\n  );\n\n  const usersByRef = new Map(users.map(u => [stringifyEntityRef(u), u]));\n  for (const [groupName, userRefs] of groupMemberUsers.entries()) {\n    for (const ref of userRefs) {\n      const user = usersByRef.get(ref);\n      if (user && !user.spec.memberOf?.includes(groupName)) {\n        if (!user.spec.memberOf) {\n          user.spec.memberOf = [];\n        }\n        user.spec.memberOf.push(groupName);\n      }\n    }\n  }\n}\n\n// Ensure that users have their transitive group memberships. Requires that\n// the groups were previously processed with buildOrgHierarchy()\nexport function buildMemberOf(groups: GroupEntity[], users: UserEntity[]) {\n  const groupsByName = new Map(groups.map(g => [g.metadata.name, g]));\n\n  users.forEach(user => {\n    const transitiveMemberOf = new Set<string>();\n\n    const todo = [\n      ...(user.spec.memberOf ?? []),\n      ...groups\n        .filter(g => g.spec.members?.includes(user.metadata.name))\n        .map(g => g.metadata.name),\n    ];\n\n    for (;;) {\n      const current = todo.pop();\n      if (!current) {\n        break;\n      }\n\n      if (!transitiveMemberOf.has(current)) {\n        transitiveMemberOf.add(current);\n        const group = groupsByName.get(current);\n        if (group?.spec.parent) {\n          todo.push(group.spec.parent);\n        }\n      }\n    }\n\n    user.spec.memberOf = [...transitiveMemberOf];\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { graphql } from '@octokit/graphql';\nimport { Logger } from 'winston';\nimport { getOrganizationRepositories } from '../lib';\n\n/**\n * Extracts repositories out of a GitHub org.\n *\n * The following will create locations for all projects which have a catalog-info.yaml\n * on the default branch. The first is shorthand for the second.\n *\n *    target: \"https://github.com/backstage\"\n *    or\n *    target: https://github.com/backstage/*\\/blob/-/catalog-info.yaml\n *\n * You may also explicitly specify the source branch:\n *\n *    target: https://github.com/backstage/*\\/blob/main/catalog-info.yaml\n *\n * @public\n */\nexport class GithubDiscoveryProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: Logger;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n    },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new GithubDiscoveryProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: Logger;\n    githubCredentialsProvider?: GithubCredentialsProvider;\n  }) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n  }\n  getProcessorName(): string {\n    return 'GithubDiscoveryProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'github-discovery') {\n      return false;\n    }\n\n    const gitHubConfig = this.integrations.github.byUrl(\n      location.target,\n    )?.config;\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub integration that matches ${location.target}. Please add a configuration entry for it under integrations.github`,\n      );\n    }\n\n    const { org, repoSearchPath, catalogPath, branch, host } = parseUrl(\n      location.target,\n    );\n\n    // Building the org url here so that the github creds provider doesn't need to know\n    // about how to handle the wild card which is special for this processor.\n    const orgUrl = `https://${host}/${org}`;\n\n    const { headers } = await this.githubCredentialsProvider.getCredentials({\n      url: orgUrl,\n    });\n\n    const client = graphql.defaults({\n      baseUrl: gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    // Read out all of the raw data\n    const startTimestamp = Date.now();\n    this.logger.info(`Reading GitHub repositories from ${location.target}`);\n\n    const { repositories } = await getOrganizationRepositories(\n      client,\n      org,\n      catalogPath,\n    );\n    const matching = repositories.filter(\n      r => !r.isArchived && repoSearchPath.test(r.name),\n    );\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${repositories.length} GitHub repositories (${matching.length} matching the pattern) in ${duration} seconds`,\n    );\n\n    for (const repository of matching) {\n      const branchName =\n        branch === '-' ? repository.defaultBranchRef?.name : branch;\n\n      if (!branchName) {\n        this.logger.info(\n          `the repository ${repository.url} does not have a default branch, skipping`,\n        );\n        continue;\n      }\n\n      const path = `/blob/${branchName}${catalogPath}`;\n\n      emit(\n        processingResult.location({\n          type: 'url',\n          target: `${repository.url}${path}`,\n          // Not all locations may actually exist, since the user defined them as a wildcard pattern.\n          // Thus, we emit them as optional and let the downstream processor find them while not outputting\n          // an error if it couldn't.\n          presence: 'optional',\n        }),\n      );\n    }\n\n    return true;\n  }\n}\n\n/*\n * Helpers\n */\n\nexport function parseUrl(urlString: string): {\n  org: string;\n  repoSearchPath: RegExp;\n  catalogPath: string;\n  branch: string;\n  host: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.slice(1).split('/');\n\n  // /backstage/techdocs-*/blob/master/catalog-info.yaml\n  // can also be\n  // /backstage\n  if (path.length > 2 && path[0].length && path[1].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      repoSearchPath: escapeRegExp(decodeURIComponent(path[1])),\n      branch: decodeURIComponent(path[3]),\n      catalogPath: `/${decodeURIComponent(path.slice(4).join('/'))}`,\n      host: url.host,\n    };\n  } else if (path.length === 1 && path[0].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      host: url.host,\n      repoSearchPath: escapeRegExp('*'),\n      catalogPath: '/catalog-info.yaml',\n      branch: '-',\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n\nexport function escapeRegExp(str: string): RegExp {\n  return new RegExp(`^${str.replace(/\\*/g, '.*')}$`);\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Entity,\n  GroupEntity,\n  UserEntity,\n  isGroupEntity,\n  isUserEntity,\n} from '@backstage/catalog-model';\n\nexport function areGroupEntities(\n  entities: Entity[],\n): entities is GroupEntity[] {\n  return entities.every(e => isGroupEntity(e));\n}\n\nexport function areUserEntities(entities: Entity[]): entities is UserEntity[] {\n  return entities.every(e => isUserEntity(e));\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  Entity,\n  isGroupEntity,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubAppCredentialsMux,\n  GithubCredentialsProvider,\n  GithubIntegrationConfig,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { graphql } from '@octokit/graphql';\nimport { Logger } from 'winston';\nimport {\n  assignGroupsToUsers,\n  buildOrgHierarchy,\n  defaultOrganizationTeamTransformer,\n  defaultUserTransformer,\n  getOrganizationTeams,\n  getOrganizationUsers,\n  GithubMultiOrgConfig,\n  readGithubMultiOrgConfig,\n  TeamTransformer,\n  UserTransformer,\n} from '../lib';\nimport { areGroupEntities, areUserEntities } from '../lib/guards';\n\n/**\n * Extracts teams and users out of a multiple GitHub orgs namespaced per org.\n *\n * Be aware that this processor may not be compatible with future org structures in the catalog.\n *\n * @public\n */\nexport class GithubMultiOrgReaderProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly orgs: GithubMultiOrgConfig;\n  private readonly logger: Logger;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n      userTransformer?: UserTransformer;\n      teamTransformer?: TeamTransformer;\n    },\n  ) {\n    const c = config.getOptionalConfig('catalog.processors.githubMultiOrg');\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new GithubMultiOrgReaderProcessor({\n      ...options,\n      integrations,\n      orgs: c ? readGithubMultiOrgConfig(c) : [],\n    });\n  }\n\n  constructor(\n    private options: {\n      integrations: ScmIntegrationRegistry;\n      logger: Logger;\n      orgs: GithubMultiOrgConfig;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n      userTransformer?: UserTransformer;\n      teamTransformer?: TeamTransformer;\n    },\n  ) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.orgs = options.orgs;\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n  }\n  getProcessorName(): string {\n    return 'GithubMultiOrgReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'github-multi-org') {\n      return false;\n    }\n\n    const gitHubConfig = this.integrations.github.byUrl(\n      location.target,\n    )?.config;\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub integration that matches ${location.target}. Please add a configuration entry for it under integrations.github`,\n      );\n    }\n\n    const allUsersMap = new Map();\n    const baseUrl = new URL(location.target).origin;\n\n    const orgsToProcess = this.orgs.length\n      ? this.orgs\n      : await this.getAllOrgs(gitHubConfig);\n\n    for (const orgConfig of orgsToProcess) {\n      try {\n        const { headers, type: tokenType } =\n          await this.githubCredentialsProvider.getCredentials({\n            url: `${baseUrl}/${orgConfig.name}`,\n          });\n        const client = graphql.defaults({\n          baseUrl: gitHubConfig.apiBaseUrl,\n          headers,\n        });\n\n        const startTimestamp = Date.now();\n        this.logger.info(\n          `Reading GitHub users and teams for org: ${orgConfig.name}`,\n        );\n        const { users } = await getOrganizationUsers(\n          client,\n          orgConfig.name,\n          tokenType,\n          async (githubUser, ctx): Promise<Entity | undefined> => {\n            const result = this.options.userTransformer\n              ? await this.options.userTransformer(githubUser, ctx)\n              : await defaultUserTransformer(githubUser, ctx);\n\n            if (result) {\n              result.metadata.namespace = orgConfig.userNamespace;\n            }\n\n            return result;\n          },\n        );\n\n        const { teams } = await getOrganizationTeams(\n          client,\n          orgConfig.name,\n          async (team, ctx): Promise<Entity | undefined> => {\n            const result = this.options.teamTransformer\n              ? await this.options.teamTransformer(team, ctx)\n              : await defaultOrganizationTeamTransformer(team, ctx);\n\n            if (result && isGroupEntity(result)) {\n              result.metadata.namespace = orgConfig.groupNamespace;\n              // Group `spec.members` inherits the namespace of it's group so need to explicitly specify refs here\n              result.spec.members = team.members.map(\n                user =>\n                  `${orgConfig.userNamespace ?? DEFAULT_NAMESPACE}/${\n                    user.login\n                  }`,\n              );\n            }\n\n            return result;\n          },\n        );\n\n        const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n        this.logger.debug(\n          `Read ${users.length} GitHub users and ${teams.length} GitHub teams from ${orgConfig.name} in ${duration} seconds`,\n        );\n\n        // Grab current users from `allUsersMap` if they already exist in our\n        // pending users so we can append to their group membership relations\n        const pendingUsers = users.map(u => {\n          const userRef = stringifyEntityRef(u);\n          if (!allUsersMap.has(userRef)) {\n            allUsersMap.set(userRef, u);\n          }\n\n          return allUsersMap.get(userRef);\n        });\n\n        if (areGroupEntities(teams)) {\n          buildOrgHierarchy(teams);\n          if (areUserEntities(pendingUsers)) {\n            assignGroupsToUsers(pendingUsers, teams);\n          }\n        }\n\n        for (const team of teams) {\n          emit(processingResult.entity(location, team));\n        }\n      } catch (e) {\n        this.logger.error(\n          `Failed to read GitHub org data for ${orgConfig.name}: ${e}`,\n        );\n      }\n    }\n\n    // Emit all users at the end after all orgs have been processed\n    // so all memberships across org groups are accounted for\n    const allUsers = Array.from(allUsersMap.values());\n    for (const user of allUsers) {\n      emit(processingResult.entity(location, user));\n    }\n\n    return true;\n  }\n\n  // Note: Does not support usage of PATs\n  private async getAllOrgs(\n    gitHubConfig: GithubIntegrationConfig,\n  ): Promise<GithubMultiOrgConfig> {\n    const githubAppMux = new GithubAppCredentialsMux(gitHubConfig);\n    const installs = await githubAppMux.getAllInstallations();\n\n    return installs\n      .map(install =>\n        install.target_type === 'Organization' &&\n        install.account &&\n        'login' in install.account &&\n        install.account.login\n          ? {\n              name: install.account.login,\n              groupNamespace: install.account.login.toLowerCase(),\n            }\n          : undefined,\n      )\n      .filter(Boolean) as GithubMultiOrgConfig;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GithubCredentialType,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { graphql } from '@octokit/graphql';\nimport { Logger } from 'winston';\nimport {\n  assignGroupsToUsers,\n  buildOrgHierarchy,\n  getOrganizationTeams,\n  getOrganizationUsers,\n  parseGithubOrgUrl,\n} from '../lib';\nimport { areGroupEntities, areUserEntities } from '../lib/guards';\n\ntype GraphQL = typeof graphql;\n\n/**\n * Extracts teams and users out of a GitHub org.\n *\n * @remarks\n *\n * Consider using {@link GithubOrgEntityProvider} instead.\n *\n * @public\n */\nexport class GithubOrgReaderProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: Logger;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n    },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new GithubOrgReaderProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: Logger;\n    githubCredentialsProvider?: GithubCredentialsProvider;\n  }) {\n    this.integrations = options.integrations;\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n    this.logger = options.logger;\n  }\n  getProcessorName(): string {\n    return 'GithubOrgReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'github-org') {\n      return false;\n    }\n\n    const { client, tokenType } = await this.createClient(location.target);\n    const { org } = parseGithubOrgUrl(location.target);\n\n    // Read out all of the raw data\n    const startTimestamp = Date.now();\n    this.logger.info('Reading GitHub users and groups');\n\n    const { users } = await getOrganizationUsers(client, org, tokenType);\n    const { teams } = await getOrganizationTeams(client, org);\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${users.length} GitHub users and ${teams.length} GitHub teams in ${duration} seconds`,\n    );\n\n    if (areGroupEntities(teams)) {\n      buildOrgHierarchy(teams);\n      if (areUserEntities(users)) {\n        assignGroupsToUsers(users, teams);\n      }\n    }\n\n    // Done!\n    for (const team of teams) {\n      emit(processingResult.entity(location, team));\n    }\n    for (const user of users) {\n      emit(processingResult.entity(location, user));\n    }\n\n    return true;\n  }\n\n  private async createClient(\n    orgUrl: string,\n  ): Promise<{ client: GraphQL; tokenType: GithubCredentialType }> {\n    const gitHubConfig = this.integrations.github.byUrl(orgUrl)?.config;\n\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub Org provider that matches ${orgUrl}. Please add a configuration for an integration.`,\n      );\n    }\n\n    const { headers, type: tokenType } =\n      await this.githubCredentialsProvider.getCredentials({\n        url: orgUrl,\n      });\n\n    const client = graphql.defaults({\n      baseUrl: gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    return { client, tokenType };\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskRunner } from '@backstage/backend-tasks';\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  DEFAULT_NAMESPACE,\n  Entity,\n  isGroupEntity,\n  isUserEntity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubAppCredentialsMux,\n  GithubCredentialsProvider,\n  GithubIntegrationConfig,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  DeferredEntity,\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { EventBroker, EventParams } from '@backstage/plugin-events-node';\nimport { graphql } from '@octokit/graphql';\nimport {\n  InstallationCreatedEvent,\n  InstallationEvent,\n  OrganizationEvent,\n  OrganizationMemberAddedEvent,\n  OrganizationMemberRemovedEvent,\n  MembershipEvent,\n  TeamCreatedEvent,\n  TeamDeletedEvent,\n  TeamEditedEvent,\n  TeamEvent,\n} from '@octokit/webhooks-types';\nimport { merge } from 'lodash';\nimport * as uuid from 'uuid';\nimport { Logger } from 'winston';\n\nimport {\n  assignGroupsToUsers,\n  buildOrgHierarchy,\n  defaultOrganizationTeamTransformer,\n  defaultUserTransformer,\n  getOrganizationTeams,\n  getOrganizationUsers,\n  GithubTeam,\n  TeamTransformer,\n  TransformerContext,\n  UserTransformer,\n} from '../lib';\nimport {\n  ANNOTATION_GITHUB_TEAM_SLUG,\n  ANNOTATION_GITHUB_USER_LOGIN,\n} from '../lib/annotation';\nimport {\n  getOrganizationsFromUser,\n  getOrganizationTeam,\n  getOrganizationTeamsFromUsers,\n} from '../lib/github';\nimport { splitTeamSlug } from '../lib/util';\nimport { areGroupEntities, areUserEntities } from '../lib/guards';\n\n/**\n * Options for {@link GithubMultiOrgEntityProvider}.\n *\n * @public\n */\nexport interface GithubMultiOrgEntityProviderOptions {\n  /**\n   * A unique, stable identifier for this provider.\n   *\n   * @example \"production\"\n   */\n  id: string;\n\n  /**\n   * The target that this provider should consume.\n   *\n   * @example \"https://mycompany.github.com\"\n   */\n  githubUrl: string;\n\n  /**\n   * The list of the GitHub orgs to consume. By default will consume all accessible\n   * orgs on the given GitHub instance (support for GitHub App integration only).\n   */\n  orgs?: string[];\n\n  /**\n   * The refresh schedule to use.\n   *\n   * @defaultValue \"manual\"\n   * @remarks\n   *\n   * If you pass in 'manual', you are responsible for calling the `read` method\n   * manually at some interval.\n   *\n   * But more commonly you will pass in the result of\n   * {@link @backstage/backend-tasks#PluginTaskScheduler.createScheduledTaskRunner}\n   * to enable automatic scheduling of tasks.\n   */\n  schedule?: 'manual' | TaskRunner;\n\n  /**\n   * The logger to use.\n   */\n  logger: Logger;\n\n  /**\n   * Optionally supply a custom credentials provider, replacing the default one.\n   */\n  githubCredentialsProvider?: GithubCredentialsProvider;\n\n  /**\n   * Optionally include a user transformer for transforming from GitHub users to User Entities\n   */\n  userTransformer?: UserTransformer;\n\n  /**\n   * Optionally include a team transformer for transforming from GitHub teams to Group Entities.\n   * By default groups will be namespaced according to their GitHub org.\n   */\n  teamTransformer?: TeamTransformer;\n\n  /**\n   * An EventBroker to subscribe this provider to GitHub events to trigger delta mutations\n   */\n  eventBroker?: EventBroker;\n}\n\ntype CreateDeltaOperation = (entities: Entity[]) => {\n  added: DeferredEntity[];\n  removed: DeferredEntity[];\n};\n\n/**\n * Ingests org data (users and groups) from GitHub.\n *\n * @public\n */\nexport class GithubMultiOrgEntityProvider implements EntityProvider {\n  private connection?: EntityProviderConnection;\n  private scheduleFn?: () => Promise<void>;\n\n  static fromConfig(\n    config: Config,\n    options: GithubMultiOrgEntityProviderOptions,\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const gitHubConfig = integrations.github.byUrl(options.githubUrl)?.config;\n\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub integration that matches ${options.githubUrl}. Please add a configuration entry for it under integrations.github.`,\n      );\n    }\n\n    const logger = options.logger.child({\n      target: options.githubUrl,\n    });\n\n    const provider = new GithubMultiOrgEntityProvider({\n      id: options.id,\n      gitHubConfig,\n      githubCredentialsProvider:\n        options.githubCredentialsProvider ||\n        DefaultGithubCredentialsProvider.fromIntegrations(integrations),\n      githubUrl: new URL(options.githubUrl).origin,\n      logger,\n      orgs: options.orgs,\n      userTransformer: options.userTransformer,\n      teamTransformer: options.teamTransformer,\n    });\n\n    provider.schedule(options.schedule);\n\n    if (options.eventBroker) {\n      options.eventBroker.subscribe({\n        supportsEventTopics: provider.supportsEventTopics.bind(provider),\n        onEvent: provider.onEvent.bind(provider),\n      });\n    }\n\n    return provider;\n  }\n\n  constructor(\n    private readonly options: {\n      id: string;\n      gitHubConfig: GithubIntegrationConfig;\n      githubCredentialsProvider: GithubCredentialsProvider;\n      githubUrl: string;\n      logger: Logger;\n      orgs?: string[];\n      userTransformer?: UserTransformer;\n      teamTransformer?: TeamTransformer;\n    },\n  ) {}\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.getProviderName} */\n  getProviderName() {\n    return `GithubMultiOrgEntityProvider:${this.options.id}`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.connect} */\n  async connect(connection: EntityProviderConnection) {\n    this.connection = connection;\n    await this.scheduleFn?.();\n  }\n\n  /**\n   * Runs one single complete ingestion. This is only necessary if you use\n   * manual scheduling.\n   */\n  async read(options?: { logger?: Logger }) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const logger = options?.logger ?? this.options.logger;\n    const { markReadComplete } = trackProgress(logger);\n\n    const allUsersMap = new Map();\n    const allTeams: Entity[] = [];\n\n    const orgsToProcess = this.options.orgs?.length\n      ? this.options.orgs\n      : await this.getAllOrgs(this.options.gitHubConfig);\n\n    for (const org of orgsToProcess) {\n      try {\n        const { headers, type: tokenType } =\n          await this.options.githubCredentialsProvider.getCredentials({\n            url: `${this.options.githubUrl}/${org}`,\n          });\n        const client = graphql.defaults({\n          baseUrl: this.options.gitHubConfig.apiBaseUrl,\n          headers,\n        });\n\n        logger.info(`Reading GitHub users and teams for org: ${org}`);\n\n        const { users } = await getOrganizationUsers(\n          client,\n          org,\n          tokenType,\n          this.options.userTransformer,\n        );\n\n        const { teams } = await getOrganizationTeams(\n          client,\n          org,\n          this.defaultMultiOrgTeamTransformer.bind(this),\n        );\n\n        // Grab current users from `allUsersMap` if they already exist in our\n        // pending users so we can append to their group membership relations\n        const pendingUsers = users.map(u => {\n          const userRef = stringifyEntityRef(u);\n          if (!allUsersMap.has(userRef)) {\n            allUsersMap.set(userRef, u);\n          }\n\n          return allUsersMap.get(userRef);\n        });\n\n        if (areGroupEntities(teams)) {\n          buildOrgHierarchy(teams);\n          if (areUserEntities(pendingUsers)) {\n            assignGroupsToUsers(pendingUsers, teams);\n          }\n        }\n\n        allTeams.push(...teams);\n      } catch (e) {\n        logger.error(`Failed to read GitHub org data for ${org}: ${e}`);\n      }\n    }\n\n    const allUsers = Array.from(allUsersMap.values());\n\n    const { markCommitComplete } = markReadComplete({ allUsers, allTeams });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: [...allUsers, ...allTeams].map(entity => ({\n        locationKey: `github-multi-org-provider:${this.options.id}`,\n        entity: withLocations(\n          `https://${this.options.gitHubConfig.host}`,\n          entity,\n        ),\n      })),\n    });\n\n    markCommitComplete();\n  }\n\n  private supportsEventTopics(): string[] {\n    return [\n      'github.installation',\n      'github.organization',\n      'github.team',\n      'github.membership',\n    ];\n  }\n\n  private async onEvent(params: EventParams): Promise<void> {\n    const { logger } = this.options;\n    logger.debug(`Received event from ${params.topic}`);\n\n    const orgs = this.options.orgs?.length\n      ? this.options.orgs\n      : await this.getAllOrgs(this.options.gitHubConfig);\n\n    const eventPayload = params.eventPayload as\n      | InstallationEvent\n      | OrganizationEvent\n      | MembershipEvent\n      | TeamEvent;\n\n    if (\n      !orgs.includes(\n        (eventPayload as InstallationEvent).installation?.account?.login,\n      ) &&\n      !orgs.includes(\n        (eventPayload as OrganizationEvent | MembershipEvent | TeamEvent)\n          .organization?.login,\n      )\n    ) {\n      return;\n    }\n\n    // https://docs.github.com/webhooks-and-events/webhooks/webhook-events-and-payloads#installation\n    if (\n      params.topic.includes('installation') &&\n      eventPayload.action === 'created'\n    ) {\n      // We can only respond to installation.created events to add new users/groups since a\n      // installation.deleted event won't provide us info on what user/groups we should remove and\n      // we can't query the uninstalled org since we will no longer have access. This will need to be\n      // eventually resolved via occasional full mutation runs by calling read()\n      await this.onInstallationChange(\n        eventPayload as InstallationCreatedEvent,\n        orgs,\n      );\n    }\n\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#organization\n    if (\n      params.topic.includes('organization') &&\n      (eventPayload.action === 'member_added' ||\n        eventPayload.action === 'member_removed')\n    ) {\n      await this.onMemberChangeInOrganization(eventPayload, orgs);\n    }\n\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#team\n    if (params.topic.includes('team')) {\n      if (\n        eventPayload.action === 'created' ||\n        eventPayload.action === 'deleted'\n      ) {\n        await this.onTeamChangeInOrganization(\n          eventPayload as TeamCreatedEvent | TeamDeletedEvent,\n        );\n      } else if (eventPayload.action === 'edited') {\n        await this.onTeamEditedInOrganization(\n          eventPayload as TeamEditedEvent,\n          orgs,\n        );\n      }\n    }\n\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership\n    if (params.topic.includes('membership')) {\n      await this.onMembershipChangedInTeam(\n        eventPayload as MembershipEvent,\n        orgs,\n      );\n    }\n\n    return;\n  }\n\n  private async onInstallationChange(\n    event: InstallationCreatedEvent,\n    applicableOrgs: string[],\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const org = event.installation.account.login;\n    const { headers, type: tokenType } =\n      await this.options.githubCredentialsProvider.getCredentials({\n        url: `${this.options.githubUrl}/${org}`,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { users } = await getOrganizationUsers(\n      client,\n      org,\n      tokenType,\n      this.options.userTransformer,\n    );\n\n    const { teams } = await getOrganizationTeams(\n      client,\n      org,\n      this.defaultMultiOrgTeamTransformer.bind(this),\n    );\n\n    if (users.length) {\n      // Fetch group memberships of users in case they already exist and\n      // have memberships in groups from other applicable orgs\n      for (const userOrg of applicableOrgs) {\n        const { headers: orgHeaders } =\n          await this.options.githubCredentialsProvider.getCredentials({\n            url: `${this.options.githubUrl}/${userOrg}`,\n          });\n        const orgClient = graphql.defaults({\n          baseUrl: this.options.gitHubConfig.apiBaseUrl,\n          headers: orgHeaders,\n        });\n\n        const { teams: userTeams } = await getOrganizationTeamsFromUsers(\n          orgClient,\n          userOrg,\n          users.map(\n            u =>\n              u.metadata.annotations?.[ANNOTATION_GITHUB_USER_LOGIN] ||\n              u.metadata.name,\n          ),\n          this.defaultMultiOrgTeamTransformer.bind(this),\n        );\n\n        if (areGroupEntities(userTeams) && areUserEntities(users)) {\n          assignGroupsToUsers(users, userTeams);\n        }\n      }\n    }\n\n    const { added, removed } = this.createAddEntitiesOperation([\n      ...users,\n      ...teams,\n    ]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onMemberChangeInOrganization(\n    event: OrganizationMemberAddedEvent | OrganizationMemberRemovedEvent,\n    applicableOrgs: string[],\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const userTransformer =\n      this.options.userTransformer || defaultUserTransformer;\n    const { name, avatar_url: avatarUrl, email, login } = event.membership.user;\n    const org = event.organization.login;\n    const { headers } =\n      await this.options.githubCredentialsProvider.getCredentials({\n        url: `${this.options.githubUrl}/${org}`,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { orgs } = await getOrganizationsFromUser(client, login);\n    const userApplicableOrgs = orgs.filter(o => applicableOrgs.includes(o));\n\n    let updateMemberships: boolean;\n    let createDeltaOperation: CreateDeltaOperation;\n    if (event.action === 'member_removed') {\n      if (userApplicableOrgs.length) {\n        // If the user is still associated with another applicable org then we don't want to remove\n        // them, just update the entity to remove any potential group memberships from the old org\n        createDeltaOperation = this.createAddEntitiesOperation.bind(this);\n        updateMemberships = true;\n      } else {\n        // User is no longer part of any applicable orgs so we can remove it,\n        // no need to take memberships into account\n        createDeltaOperation = this.createRemoveEntitiesOperation.bind(this);\n        updateMemberships = false;\n      }\n    } else {\n      // We're not sure if this user was already added as part of another applicable org\n      // so grab the latest memberships (potentially from teams of other orgs) to ensure\n      // we're not accidentally omitting them\n      createDeltaOperation = this.createAddEntitiesOperation.bind(this);\n      updateMemberships = true;\n    }\n\n    const user = await userTransformer(\n      {\n        name,\n        avatarUrl,\n        login,\n        email: email ?? undefined,\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    );\n\n    if (!user) {\n      return;\n    }\n\n    if (updateMemberships) {\n      for (const userOrg of userApplicableOrgs) {\n        const { headers: orgHeaders } =\n          await this.options.githubCredentialsProvider.getCredentials({\n            url: `${this.options.githubUrl}/${userOrg}`,\n          });\n        const orgClient = graphql.defaults({\n          baseUrl: this.options.gitHubConfig.apiBaseUrl,\n          headers: orgHeaders,\n        });\n\n        const { teams } = await getOrganizationTeamsFromUsers(\n          orgClient,\n          userOrg,\n          [login],\n          this.defaultMultiOrgTeamTransformer.bind(this),\n        );\n\n        if (isUserEntity(user) && areGroupEntities(teams)) {\n          assignGroupsToUsers([user], teams);\n        }\n      }\n    }\n\n    const { added, removed } = createDeltaOperation([user]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onTeamChangeInOrganization(\n    event: TeamCreatedEvent | TeamDeletedEvent,\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const org = event.organization.login;\n    const { headers } =\n      await this.options.githubCredentialsProvider.getCredentials({\n        url: `${this.options.githubUrl}/${org}`,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { name, html_url: url, description, slug } = event.team;\n    const group = (await this.defaultMultiOrgTeamTransformer(\n      {\n        name,\n        slug,\n        editTeamUrl: `${url}/edit`,\n        combinedSlug: `${org}/${slug}`,\n        description: description ?? undefined,\n        parentTeam: { slug: event.team?.parent?.slug || '' } as GithubTeam,\n        // entity will be removed or is new\n        members: [],\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    )) as Entity;\n\n    const createDeltaOperation =\n      event.action === 'created'\n        ? this.createAddEntitiesOperation.bind(this)\n        : this.createRemoveEntitiesOperation.bind(this);\n    const { added, removed } = createDeltaOperation([group]);\n\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onTeamEditedInOrganization(\n    event: TeamEditedEvent,\n    applicableOrgs: string[],\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const org = event.organization.login;\n    const { headers, type: tokenType } =\n      await this.options.githubCredentialsProvider.getCredentials({\n        url: `${this.options.githubUrl}/${org}`,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const teamSlug = event.team.slug;\n    const { team } = await getOrganizationTeam(\n      client,\n      org,\n      teamSlug,\n      this.defaultMultiOrgTeamTransformer.bind(this),\n    );\n\n    const { users } = await getOrganizationUsers(\n      client,\n      org,\n      tokenType,\n      this.options.userTransformer,\n    );\n\n    const usersFromChangedGroup = isGroupEntity(team)\n      ? team.spec.members?.map(m =>\n          stringifyEntityRef(parseEntityRef(m, { defaultKind: 'user' })),\n        ) || []\n      : [];\n    const usersToRebuild = users.filter(u =>\n      usersFromChangedGroup.includes(stringifyEntityRef(u)),\n    );\n\n    if (usersToRebuild.length) {\n      // Update memberships of associated members of this group in case the group entity ref changed\n      for (const userOrg of applicableOrgs) {\n        const { headers: orgHeaders } =\n          await this.options.githubCredentialsProvider.getCredentials({\n            url: `${this.options.githubUrl}/${userOrg}`,\n          });\n        const orgClient = graphql.defaults({\n          baseUrl: this.options.gitHubConfig.apiBaseUrl,\n          headers: orgHeaders,\n        });\n\n        const { teams } = await getOrganizationTeamsFromUsers(\n          orgClient,\n          userOrg,\n          usersToRebuild.map(\n            u =>\n              u.metadata.annotations?.[ANNOTATION_GITHUB_USER_LOGIN] ||\n              u.metadata.name,\n          ),\n          this.defaultMultiOrgTeamTransformer.bind(this),\n        );\n\n        if (areGroupEntities(teams) && areUserEntities(usersToRebuild)) {\n          assignGroupsToUsers(usersToRebuild, teams);\n        }\n      }\n    }\n\n    const oldName = event.changes.name?.from || '';\n    const oldSlug = oldName.toLowerCase().replaceAll(/\\s/gi, '-');\n    const oldGroup = (await this.defaultMultiOrgTeamTransformer(\n      {\n        name: event.changes.name?.from,\n        slug: oldSlug,\n        combinedSlug: `${org}/${oldSlug}`,\n        description: event.changes.description?.from,\n        parentTeam: { slug: event.team?.parent?.slug || '' } as GithubTeam,\n        // entity will be removed\n        members: [],\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    )) as Entity;\n\n    // Remove the old group entity in case the entity ref is now different\n    const { removed } = this.createRemoveEntitiesOperation([oldGroup]);\n    const { added } = this.createAddEntitiesOperation([\n      ...usersToRebuild,\n      team,\n    ]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onMembershipChangedInTeam(\n    event: MembershipEvent,\n    applicableOrgs: string[],\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    // The docs are saying I will receive the slug for the removed event,\n    // but the types don't reflect that,\n    // so I will just check to be sure the slug is there\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership\n    if (!('slug' in event.team)) {\n      return;\n    }\n\n    const org = event.organization.login;\n    const { headers } =\n      await this.options.githubCredentialsProvider.getCredentials({\n        url: `${this.options.githubUrl}/${org}`,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const teamSlug = event.team.slug;\n    const { team } = await getOrganizationTeam(\n      client,\n      org,\n      teamSlug,\n      this.defaultMultiOrgTeamTransformer.bind(this),\n    );\n\n    const userTransformer =\n      this.options.userTransformer || defaultUserTransformer;\n    const { name, avatar_url: avatarUrl, email, login } = event.member;\n    const user = await userTransformer(\n      {\n        name,\n        avatarUrl,\n        login,\n        email: email ?? undefined,\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    );\n\n    const mutationEntities = [team];\n\n    if (user && isUserEntity(user)) {\n      const { orgs } = await getOrganizationsFromUser(client, login);\n      const userApplicableOrgs = orgs.filter(o => applicableOrgs.includes(o));\n      for (const userOrg of userApplicableOrgs) {\n        const { headers: orgHeaders } =\n          await this.options.githubCredentialsProvider.getCredentials({\n            url: `${this.options.githubUrl}/${userOrg}`,\n          });\n        const orgClient = graphql.defaults({\n          baseUrl: this.options.gitHubConfig.apiBaseUrl,\n          headers: orgHeaders,\n        });\n\n        const { teams } = await getOrganizationTeamsFromUsers(\n          orgClient,\n          userOrg,\n          [login],\n          this.defaultMultiOrgTeamTransformer.bind(this),\n        );\n\n        if (areGroupEntities(teams)) {\n          assignGroupsToUsers([user], teams);\n        }\n      }\n\n      mutationEntities.push(user);\n    }\n\n    const { added, removed } =\n      this.createAddEntitiesOperation(mutationEntities);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private schedule(schedule: GithubMultiOrgEntityProviderOptions['schedule']) {\n    if (!schedule || schedule === 'manual') {\n      return;\n    }\n\n    this.scheduleFn = async () => {\n      const id = `${this.getProviderName()}:refresh`;\n      await schedule.run({\n        id,\n        fn: async () => {\n          const logger = this.options.logger.child({\n            class: GithubMultiOrgEntityProvider.prototype.constructor.name,\n            taskId: id,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.read({ logger });\n          } catch (error) {\n            logger.error(\n              `${this.getProviderName()} refresh failed, ${error}`,\n              error,\n            );\n          }\n        },\n      });\n    };\n  }\n\n  private async defaultMultiOrgTeamTransformer(\n    team: GithubTeam,\n    ctx: TransformerContext,\n  ): Promise<Entity | undefined> {\n    if (this.options.teamTransformer) {\n      return await this.options.teamTransformer(team, ctx);\n    }\n\n    const result = await defaultOrganizationTeamTransformer(team, ctx);\n\n    if (result && result.spec) {\n      result.metadata.namespace = ctx.org.toLocaleLowerCase('en-US');\n      // Group `spec.members` inherits the namespace of it's group so need to explicitly specify refs here\n      result.spec.members = team.members.map(\n        user => `${DEFAULT_NAMESPACE}/${user.login}`,\n      );\n    }\n\n    return result;\n  }\n\n  // Note: Does not support usage of PATs\n  private async getAllOrgs(\n    gitHubConfig: GithubIntegrationConfig,\n  ): Promise<string[]> {\n    const githubAppMux = new GithubAppCredentialsMux(gitHubConfig);\n    const installs = await githubAppMux.getAllInstallations();\n\n    return installs\n      .map(install =>\n        install.target_type === 'Organization' &&\n        install.account &&\n        'login' in install.account &&\n        install.account.login\n          ? install.account.login\n          : undefined,\n      )\n      .filter(Boolean) as string[];\n  }\n\n  private createAddEntitiesOperation(entities: Entity[]) {\n    return {\n      removed: [],\n      added: entities.map(entity => ({\n        locationKey: `github-multi-org-provider:${this.options.id}`,\n        entity: withLocations(\n          `https://${this.options.gitHubConfig.host}`,\n          entity,\n        ),\n      })),\n    };\n  }\n\n  private createRemoveEntitiesOperation(entities: Entity[]) {\n    return {\n      added: [],\n      removed: entities.map(entity => ({\n        locationKey: `github-multi-org-provider:${this.options.id}`,\n        entity: withLocations(\n          `https://${this.options.gitHubConfig.host}`,\n          entity,\n        ),\n      })),\n    };\n  }\n}\n\n// Helps wrap the timing and logging behaviors\nfunction trackProgress(logger: Logger) {\n  let timestamp = Date.now();\n  let summary: string;\n\n  logger.info('Reading GitHub users and groups');\n\n  function markReadComplete(read: {\n    allUsers: unknown[];\n    allTeams: unknown[];\n  }) {\n    summary = `${read.allUsers.length} GitHub users and ${read.allTeams.length} GitHub groups`;\n    const readDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    timestamp = Date.now();\n    logger.info(`Read ${summary} in ${readDuration} seconds. Committing...`);\n    return { markCommitComplete };\n  }\n\n  function markCommitComplete() {\n    const commitDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    logger.info(`Committed ${summary} in ${commitDuration} seconds.`);\n  }\n\n  return { markReadComplete };\n}\n\n// Makes sure that emitted entities have a proper location\nexport function withLocations(baseUrl: string, entity: Entity): Entity {\n  const login =\n    entity.metadata.annotations?.[ANNOTATION_GITHUB_USER_LOGIN] ||\n    entity.metadata.name;\n\n  let org = entity.metadata.namespace;\n  let team = entity.metadata.name;\n  const slug = entity.metadata.annotations?.[ANNOTATION_GITHUB_TEAM_SLUG];\n  if (slug) {\n    const [slugOrg, slugTeam] = splitTeamSlug(slug);\n    org = slugOrg;\n    team = slugTeam;\n  }\n\n  const location =\n    entity.kind === 'Group'\n      ? `url:${baseUrl}/orgs/${org}/teams/${team}`\n      : `url:${baseUrl}/${login}`;\n  return merge(\n    {\n      metadata: {\n        annotations: {\n          [ANNOTATION_LOCATION]: location,\n          [ANNOTATION_ORIGIN_LOCATION]: location,\n        },\n      },\n    },\n    entity,\n  ) as Entity;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskRunner } from '@backstage/backend-tasks';\nimport { Entity, isGroupEntity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GithubIntegrationConfig,\n  ScmIntegrations,\n  SingleInstanceGithubCredentialsProvider,\n} from '@backstage/integration';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { EventParams, EventSubscriber } from '@backstage/plugin-events-node';\nimport { graphql } from '@octokit/graphql';\nimport {\n  MembershipEvent,\n  OrganizationEvent,\n  OrganizationMemberAddedEvent,\n  OrganizationMemberRemovedEvent,\n  TeamEditedEvent,\n  TeamEvent,\n} from '@octokit/webhooks-types';\nimport * as uuid from 'uuid';\nimport { Logger } from 'winston';\nimport {\n  TeamTransformer,\n  UserTransformer,\n  defaultOrganizationTeamTransformer,\n  defaultUserTransformer,\n} from '../lib/defaultTransformers';\nimport {\n  DeferredEntitiesBuilder,\n  GithubTeam,\n  createAddEntitiesOperation,\n  createRemoveEntitiesOperation,\n  createReplaceEntitiesOperation,\n  getOrganizationTeam,\n  getOrganizationTeams,\n  getOrganizationTeamsFromUsers,\n  getOrganizationUsers,\n} from '../lib/github';\nimport { assignGroupsToUsers, buildOrgHierarchy } from '../lib/org';\nimport { parseGithubOrgUrl } from '../lib/util';\nimport { withLocations } from '../lib/withLocations';\nimport { areGroupEntities, areUserEntities } from '../lib/guards';\n\n/**\n * Options for {@link GithubOrgEntityProvider}.\n *\n * @public\n */\nexport interface GithubOrgEntityProviderOptions {\n  /**\n   * A unique, stable identifier for this provider.\n   *\n   * @example \"production\"\n   */\n  id: string;\n\n  /**\n   * The target that this provider should consume.\n   *\n   * @example \"https://github.com/backstage\"\n   */\n  orgUrl: string;\n\n  /**\n   * The refresh schedule to use.\n   *\n   * @defaultValue \"manual\"\n   * @remarks\n   *\n   * If you pass in 'manual', you are responsible for calling the `read` method\n   * manually at some interval.\n   *\n   * But more commonly you will pass in the result of\n   * {@link @backstage/backend-tasks#PluginTaskScheduler.createScheduledTaskRunner}\n   * to enable automatic scheduling of tasks.\n   */\n  schedule?: 'manual' | TaskRunner;\n\n  /**\n   * The logger to use.\n   */\n  logger: Logger;\n\n  /**\n   * Optionally supply a custom credentials provider, replacing the default one.\n   */\n  githubCredentialsProvider?: GithubCredentialsProvider;\n\n  /**\n   * Optionally include a user transformer for transforming from GitHub users to User Entities\n   */\n  userTransformer?: UserTransformer;\n\n  /**\n   * Optionally include a team transformer for transforming from GitHub teams to Group Entities\n   */\n  teamTransformer?: TeamTransformer;\n}\n\n/**\n * Ingests org data (users and groups) from GitHub.\n *\n * @public\n */\nexport class GithubOrgEntityProvider\n  implements EntityProvider, EventSubscriber\n{\n  private readonly credentialsProvider: GithubCredentialsProvider;\n  private connection?: EntityProviderConnection;\n  private scheduleFn?: () => Promise<void>;\n\n  static fromConfig(config: Config, options: GithubOrgEntityProviderOptions) {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const gitHubConfig = integrations.github.byUrl(options.orgUrl)?.config;\n\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub Org provider that matches ${options.orgUrl}. Please add a configuration for an integration.`,\n      );\n    }\n\n    const logger = options.logger.child({\n      target: options.orgUrl,\n    });\n\n    const provider = new GithubOrgEntityProvider({\n      id: options.id,\n      orgUrl: options.orgUrl,\n      logger,\n      gitHubConfig,\n      githubCredentialsProvider:\n        options.githubCredentialsProvider ||\n        DefaultGithubCredentialsProvider.fromIntegrations(integrations),\n      userTransformer: options.userTransformer,\n      teamTransformer: options.teamTransformer,\n    });\n\n    provider.schedule(options.schedule);\n\n    return provider;\n  }\n\n  constructor(\n    private options: {\n      id: string;\n      orgUrl: string;\n      gitHubConfig: GithubIntegrationConfig;\n      logger: Logger;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n      userTransformer?: UserTransformer;\n      teamTransformer?: TeamTransformer;\n    },\n  ) {\n    this.credentialsProvider =\n      options.githubCredentialsProvider ||\n      SingleInstanceGithubCredentialsProvider.create(this.options.gitHubConfig);\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.getProviderName} */\n  getProviderName() {\n    return `GithubOrgEntityProvider:${this.options.id}`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.connect} */\n  async connect(connection: EntityProviderConnection) {\n    this.connection = connection;\n    await this.scheduleFn?.();\n  }\n\n  /**\n   * Runs one single complete ingestion. This is only necessary if you use\n   * manual scheduling.\n   */\n  async read(options?: { logger?: Logger }) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const logger = options?.logger ?? this.options.logger;\n    const { markReadComplete } = trackProgress(logger);\n\n    const { headers, type: tokenType } =\n      await this.credentialsProvider.getCredentials({\n        url: this.options.orgUrl,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { org } = parseGithubOrgUrl(this.options.orgUrl);\n    const { users } = await getOrganizationUsers(\n      client,\n      org,\n      tokenType,\n      this.options.userTransformer,\n    );\n    const { teams } = await getOrganizationTeams(\n      client,\n      org,\n      this.options.teamTransformer,\n    );\n\n    if (areGroupEntities(teams)) {\n      buildOrgHierarchy(teams);\n      if (areUserEntities(users)) {\n        assignGroupsToUsers(users, teams);\n      }\n    }\n\n    const { markCommitComplete } = markReadComplete({ users, teams });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: [...users, ...teams].map(entity => ({\n        locationKey: `github-org-provider:${this.options.id}`,\n        entity: withLocations(\n          `https://${this.options.gitHubConfig.host}`,\n          org,\n          entity,\n        ),\n      })),\n    });\n\n    markCommitComplete();\n  }\n\n  /** {@inheritdoc @backstage/plugin-events-node#EventSubscriber.onEvent} */\n  async onEvent(params: EventParams): Promise<void> {\n    const { logger } = this.options;\n    logger.debug(`Received event from ${params.topic}`);\n\n    const addEntitiesOperation = createAddEntitiesOperation(\n      this.options.id,\n      this.options.gitHubConfig.host,\n    );\n    const removeEntitiesOperation = createRemoveEntitiesOperation(\n      this.options.id,\n      this.options.gitHubConfig.host,\n    );\n\n    const replaceEntitiesOperation = createReplaceEntitiesOperation(\n      this.options.id,\n      this.options.gitHubConfig.host,\n    );\n\n    // handle change users in the org\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#organization\n    if (params.topic.includes('organization')) {\n      const orgEvent = params.eventPayload as OrganizationEvent;\n\n      if (\n        orgEvent.action === 'member_added' ||\n        orgEvent.action === 'member_removed'\n      ) {\n        const createDeltaOperation =\n          orgEvent.action === 'member_added'\n            ? addEntitiesOperation\n            : removeEntitiesOperation;\n        await this.onMemberChangeInOrganization(orgEvent, createDeltaOperation);\n      }\n    }\n\n    // handle change teams in the org\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#team\n    if (params.topic.includes('team')) {\n      const teamEvent = params.eventPayload as TeamEvent;\n      if (teamEvent.action === 'created' || teamEvent.action === 'deleted') {\n        const createDeltaOperation =\n          teamEvent.action === 'created'\n            ? addEntitiesOperation\n            : removeEntitiesOperation;\n        await this.onTeamChangeInOrganization(teamEvent, createDeltaOperation);\n      } else if (teamEvent.action === 'edited') {\n        await this.onTeamEditedInOrganization(\n          teamEvent,\n          replaceEntitiesOperation,\n        );\n      }\n    }\n\n    // handle change membership in the org\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership\n    if (params.topic.includes('membership')) {\n      const membershipEvent = params.eventPayload as MembershipEvent;\n      this.onMembershipChangedInOrganization(\n        membershipEvent,\n        replaceEntitiesOperation,\n      );\n    }\n\n    return;\n  }\n\n  /** {@inheritdoc @backstage/plugin-events-node#EventSubscriber.supportsEventTopics} */\n  supportsEventTopics(): string[] {\n    return ['github.organization', 'github.team', 'github.membership'];\n  }\n\n  private async onTeamEditedInOrganization(\n    event: TeamEditedEvent,\n    createDeltaOperation: DeferredEntitiesBuilder,\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const teamSlug = event.team.slug;\n    const { headers, type: tokenType } =\n      await this.credentialsProvider.getCredentials({\n        url: this.options.orgUrl,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { org } = parseGithubOrgUrl(this.options.orgUrl);\n    const { team } = await getOrganizationTeam(\n      client,\n      org,\n      teamSlug,\n      this.options.teamTransformer,\n    );\n\n    const { users } = await getOrganizationUsers(\n      client,\n      org,\n      tokenType,\n      this.options.userTransformer,\n    );\n\n    if (!isGroupEntity(team)) {\n      return;\n    }\n\n    const usersFromChangedGroup = team.spec.members || [];\n    const usersToRebuild = users.filter(u =>\n      usersFromChangedGroup.includes(u.metadata.name),\n    );\n\n    const { teams } = await getOrganizationTeamsFromUsers(\n      client,\n      org,\n      usersToRebuild.map(u => u.metadata.name),\n      this.options.teamTransformer,\n    );\n\n    if (areGroupEntities(teams)) {\n      buildOrgHierarchy(teams);\n      if (areUserEntities(usersToRebuild)) {\n        assignGroupsToUsers(usersToRebuild, teams);\n      }\n    }\n\n    const oldName = event.changes.name?.from || event.team.name;\n    const oldSlug = oldName.toLowerCase().replaceAll(/\\s/gi, '-');\n\n    const oldDescription =\n      event.changes.description?.from || event.team.description;\n    const oldDescriptionSlug = oldDescription\n      ?.toLowerCase()\n      .replaceAll(/\\s/gi, '-');\n\n    const { removed } = createDeltaOperation(org, [\n      {\n        ...team,\n        metadata: {\n          name: oldSlug,\n          description: oldDescriptionSlug,\n        },\n      },\n    ]);\n    const { added } = createDeltaOperation(org, [...usersToRebuild, ...teams]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onMembershipChangedInOrganization(\n    event: MembershipEvent,\n    createDeltaOperation: DeferredEntitiesBuilder,\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    // The docs are saying I will receive the slug for the removed event,\n    // but the types don't reflect that,\n    // so I will just check to be sure the slug is there\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership\n    if (!('slug' in event.team)) {\n      return;\n    }\n\n    const teamSlug = event.team.slug;\n    const userLogin = event.member.login;\n    const { headers, type: tokenType } =\n      await this.credentialsProvider.getCredentials({\n        url: this.options.orgUrl,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { org } = parseGithubOrgUrl(this.options.orgUrl);\n    const { team } = await getOrganizationTeam(\n      client,\n      org,\n      teamSlug,\n      this.options.teamTransformer,\n    );\n\n    const { users } = await getOrganizationUsers(\n      client,\n      org,\n      tokenType,\n      this.options.userTransformer,\n    );\n\n    const usersToRebuild = users.filter(u => u.metadata.name === userLogin);\n\n    const { teams } = await getOrganizationTeamsFromUsers(\n      client,\n      org,\n      [userLogin],\n      this.options.teamTransformer,\n    );\n\n    // we include group because the removed event need to update the old group too\n    if (!teams.some(t => t.metadata.name === team.metadata.name)) {\n      teams.push(team);\n    }\n\n    if (areGroupEntities(teams)) {\n      buildOrgHierarchy(teams);\n      if (areUserEntities(usersToRebuild)) {\n        assignGroupsToUsers(usersToRebuild, teams);\n      }\n    }\n\n    const { added, removed } = createDeltaOperation(org, [\n      ...usersToRebuild,\n      ...teams,\n    ]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onTeamChangeInOrganization(\n    event: TeamEvent,\n    createDeltaOperation: DeferredEntitiesBuilder,\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const organizationTeamTransformer =\n      this.options.teamTransformer || defaultOrganizationTeamTransformer;\n    const { name, html_url: url, description, slug } = event.team;\n    const org = event.organization.login;\n    const { headers } = await this.credentialsProvider.getCredentials({\n      url: this.options.orgUrl,\n    });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const group = (await organizationTeamTransformer(\n      {\n        name,\n        slug,\n        editTeamUrl: `${url}/edit`,\n        combinedSlug: `${org}/${slug}`,\n        description: description || undefined,\n        parentTeam: { slug: event.team?.parent?.slug || '' } as GithubTeam,\n        // entity will be removed\n        members: [],\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    )) as Entity;\n\n    const { added, removed } = createDeltaOperation(org, [group]);\n\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onMemberChangeInOrganization(\n    event: OrganizationMemberAddedEvent | OrganizationMemberRemovedEvent,\n    createDeltaOperation: DeferredEntitiesBuilder,\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const userTransformer =\n      this.options.userTransformer || defaultUserTransformer;\n    const { name, avatar_url: avatarUrl, email, login } = event.membership.user;\n    const org = event.organization.login;\n    const { headers } = await this.credentialsProvider.getCredentials({\n      url: this.options.orgUrl,\n    });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const user = (await userTransformer(\n      {\n        name,\n        avatarUrl,\n        login,\n        email: email || undefined,\n        // we don't have this information in the event, so the refresh will handle that for us\n        organizationVerifiedDomainEmails: [],\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    )) as Entity;\n\n    const { added, removed } = createDeltaOperation(org, [user]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private schedule(schedule: GithubOrgEntityProviderOptions['schedule']) {\n    if (!schedule || schedule === 'manual') {\n      return;\n    }\n\n    this.scheduleFn = async () => {\n      const id = `${this.getProviderName()}:refresh`;\n      await schedule.run({\n        id,\n        fn: async () => {\n          const logger = this.options.logger.child({\n            class: GithubOrgEntityProvider.prototype.constructor.name,\n            taskId: id,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.read({ logger });\n          } catch (error) {\n            logger.error(\n              `${this.getProviderName()} refresh failed, ${error}`,\n              error,\n            );\n          }\n        },\n      });\n    };\n  }\n}\n\n// Helps wrap the timing and logging behaviors\nfunction trackProgress(logger: Logger) {\n  let timestamp = Date.now();\n  let summary: string;\n\n  logger.info('Reading GitHub users and teams');\n\n  function markReadComplete(read: { users: unknown[]; teams: unknown[] }) {\n    summary = `${read.users.length} GitHub users and ${read.teams.length} GitHub teams`;\n    const readDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    timestamp = Date.now();\n    logger.info(`Read ${summary} in ${readDuration} seconds. Committing...`);\n    return { markCommitComplete };\n  }\n\n  function markCommitComplete() {\n    const commitDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    logger.info(`Committed ${summary} in ${commitDuration} seconds.`);\n  }\n\n  return { markReadComplete };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PluginTaskScheduler, TaskRunner } from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { Logger } from 'winston';\nimport { GithubEntityProvider } from './providers/GithubEntityProvider';\nimport {\n  GithubOrgEntityProvider,\n  GithubOrgEntityProviderOptions,\n} from './providers/GithubOrgEntityProvider';\n\n/**\n * @public\n * @deprecated Use {@link GithubOrgEntityProvider} instead.\n */\nexport class GitHubOrgEntityProvider extends GithubOrgEntityProvider {\n  static fromConfig(config: Config, options: GitHubOrgEntityProviderOptions) {\n    options.logger.warn(\n      '[Deprecated] Use GithubOrgEntityProvider instead of GitHubOrgEntityProvider.',\n    );\n    return GithubOrgEntityProvider.fromConfig(\n      config,\n      options as GithubOrgEntityProviderOptions,\n    ) as GitHubOrgEntityProvider;\n  }\n}\n\n/**\n * @public\n * @deprecated Use {@link GithubOrgEntityProviderOptions} instead.\n */\nexport type GitHubOrgEntityProviderOptions = GithubOrgEntityProviderOptions;\n\n/**\n * @public\n * @deprecated Use {@link GithubEntityProvider} instead.\n */\nexport class GitHubEntityProvider implements EntityProvider {\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      schedule?: TaskRunner;\n      scheduler?: PluginTaskScheduler;\n    },\n  ): GitHubEntityProvider[] {\n    options.logger.warn(\n      '[Deprecated] Please use GithubEntityProvider instead of GitHubEntityProvider.',\n    );\n    return GithubEntityProvider.fromConfig(config, options).map(\n      delegate => new GitHubEntityProvider(delegate),\n    );\n  }\n\n  private constructor(private readonly delegate: GithubEntityProvider) {}\n\n  connect(connection: EntityProviderConnection): Promise<void> {\n    return this.delegate.connect(connection);\n  }\n\n  getProviderName(): string {\n    return this.delegate.getProviderName();\n  }\n\n  refresh(logger: Logger): Promise<void> {\n    return this.delegate.refresh(logger);\n  }\n}\n"],"names":["__publicField","CatalogClient","ScmIntegrations","DefaultGithubCredentialsProvider","parseGitUrl","Octokit","trimEnd","_a","DEFAULT_NAMESPACE","stringifyEntityRef","parseEntityRef","graphql","getOrganizationRepositories","processingResult","isGroupEntity","isUserEntity","getOrganizationUsers","defaultUserTransformer","getOrganizationTeams","defaultOrganizationTeamTransformer","GithubAppCredentialsMux","parseGithubOrgUrl","trackProgress","getOrganizationTeamsFromUsers","ANNOTATION_GITHUB_USER_LOGIN","getOrganizationsFromUser","getOrganizationTeam","uuid","ANNOTATION_GITHUB_TEAM_SLUG","splitTeamSlug","merge","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION","SingleInstanceGithubCredentialsProvider","withLocations","createAddEntitiesOperation","createRemoveEntitiesOperation","createReplaceEntitiesOperation","GithubEntityProvider"],"mappings":"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"}