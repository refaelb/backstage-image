{"version":3,"file":"GithubEntityProvider-858e0576.cjs.js","sources":["../../src/lib/annotation.ts","../../src/lib/defaultTransformers.ts","../../src/lib/util.ts","../../src/lib/withLocations.ts","../../src/lib/github.ts","../../src/providers/GithubEntityProviderConfig.ts","../../src/providers/GithubEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The value of this annotation is the so-called login that identifies a user on\n * [GitHub](https://github.com) (either the public one, or a private GitHub\n * Enterprise installation) that is related to this entity. It is on the format\n * `<username>`, and is the same as can be seen in the URL location bar of the\n * browser when viewing that user.\n *\n * @public\n */\nexport const ANNOTATION_GITHUB_USER_LOGIN = 'github.com/user-login';\n\n/**\n * The value of this annotation is the so-called slug that identifies a team on\n * [GitHub](https://github.com) (either the public one, or a private GitHub\n * Enterprise installation) that is related to this entity. It is on the format\n * `<organization>/<team>`, and is the same as can be seen in the URL location\n * bar of the browser when viewing that team.\n *\n * @public\n */\nexport const ANNOTATION_GITHUB_TEAM_SLUG = 'github.com/team-slug';\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, GroupEntity, UserEntity } from '@backstage/catalog-model';\nimport { graphql } from '@octokit/graphql';\nimport {\n  ANNOTATION_GITHUB_TEAM_SLUG,\n  ANNOTATION_GITHUB_USER_LOGIN,\n} from './annotation';\nimport { GithubTeam, GithubUser } from './github';\n\n/**\n * Context passed to Transformers\n *\n * @public\n */\nexport interface TransformerContext {\n  client: typeof graphql;\n  query: string;\n  org: string;\n}\n\n/**\n * Transformer for GitHub users to an Entity\n *\n * @public\n */\nexport type UserTransformer = (\n  item: GithubUser,\n  ctx: TransformerContext,\n) => Promise<Entity | undefined>;\n\n/**\n * Transformer for GitHub Team to an Entity\n *\n * @public\n */\nexport type TeamTransformer = (\n  item: GithubTeam,\n  ctx: TransformerContext,\n) => Promise<Entity | undefined>;\n\n/**\n * Default transformer for GitHub users to UserEntity\n *\n * @public\n */\nexport const defaultUserTransformer = async (\n  item: GithubUser,\n  _ctx: TransformerContext,\n): Promise<UserEntity | undefined> => {\n  const entity: UserEntity = {\n    apiVersion: 'backstage.io/v1alpha1',\n    kind: 'User',\n    metadata: {\n      name: item.login,\n      annotations: {\n        [ANNOTATION_GITHUB_USER_LOGIN]: item.login,\n      },\n    },\n    spec: {\n      profile: {},\n      memberOf: [],\n    },\n  };\n\n  if (item.bio) entity.metadata.description = item.bio;\n  if (item.name) entity.spec.profile!.displayName = item.name;\n  if (item.email) entity.spec.profile!.email = item.email;\n  if (item.avatarUrl) entity.spec.profile!.picture = item.avatarUrl;\n  return entity;\n};\n\n/**\n * Default transformer for GitHub Team to GroupEntity\n *\n * @public\n */\nexport const defaultOrganizationTeamTransformer: TeamTransformer =\n  async team => {\n    const annotations: { [annotationName: string]: string } = {\n      [ANNOTATION_GITHUB_TEAM_SLUG]: team.combinedSlug,\n    };\n\n    if (team.editTeamUrl) {\n      annotations['backstage.io/edit-url'] = team.editTeamUrl;\n    }\n\n    const entity: GroupEntity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Group',\n      metadata: {\n        name: team.slug,\n        annotations,\n      },\n      spec: {\n        type: 'team',\n        profile: {},\n        children: [],\n      },\n    };\n\n    if (team.description) {\n      entity.metadata.description = team.description;\n    }\n    if (team.name) {\n      entity.spec.profile!.displayName = team.name;\n    }\n    if (team.avatarUrl) {\n      entity.spec.profile!.picture = team.avatarUrl;\n    }\n    if (team.parentTeam) {\n      entity.spec.parent = team.parentTeam.slug;\n    }\n\n    entity.spec.members = team.members.map(user => user.login);\n\n    return entity;\n  };\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GithubTopicFilters } from '../providers/GithubEntityProviderConfig';\n\nexport function parseGithubOrgUrl(urlString: string): { org: string } {\n  const path = new URL(urlString).pathname.slice(1).split('/');\n\n  // /backstage\n  if (path.length === 1 && path[0].length) {\n    return { org: decodeURIComponent(path[0]) };\n  }\n\n  throw new Error(`Expected a URL pointing to /<org>`);\n}\n\nexport function satisfiesTopicFilter(\n  topics: string[],\n  topicFilter: GithubTopicFilters | undefined,\n): Boolean {\n  // We don't want to do anything if a filter is not configured (or configured but empty)\n  if (!topicFilter) return true;\n  if (!topicFilter.include && !topicFilter.exclude) return true;\n  if (!topicFilter.include?.length && !topicFilter.exclude?.length) return true;\n  // If topic.include is in use, a topic MUST be set that matches the inclusion\n  // filter in order for a repository to be ingested\n  if (topicFilter.include?.length && !topicFilter.exclude) {\n    for (const topic of topics) {\n      if (topicFilter.include.includes(topic)) return true;\n    }\n    return false;\n  }\n  // If topic.exclude is in use, all topics are included by default\n  // with anything matching the filter being discarded. It is technically\n  // possible for the filter to be explicitly empty meaning all repositories\n  // are ingested although doing so would be pointless.\n  if (!topicFilter.include && topicFilter.exclude?.length) {\n    if (!topics.length) return true;\n    for (const topic of topics) {\n      if (topicFilter.exclude.includes(topic)) return false;\n    }\n    return true;\n  }\n  // Now the tricky part is where we have both include and exclude configured.\n  // In this case, exclude wins out so we take everything matching the initial\n  // inclusion filter and from that group, we further discard anything matching\n  // the exclusion filter. If an item were to have a topic set in both filters,\n  // we expect it to be discarded in the end. The use case here is that is that\n  // you may want to retrieve all repos with the topic of team-a while excluding\n  // matching repos that are marked as experiments.\n  if (topicFilter.include && topicFilter.exclude) {\n    const matchesInclude = satisfiesTopicFilter(topics, {\n      include: topicFilter.include,\n    });\n    const matchesExclude = !satisfiesTopicFilter(topics, {\n      exclude: topicFilter.exclude,\n    });\n    if (matchesExclude) return false;\n    return matchesInclude;\n  }\n\n  // If the topic filter is somehow ever in a state that is not covered here, we\n  // will fail \"open\" so that Backstage is still usable as if the filter was\n  // not configured at all.\n  return true;\n}\n\nexport function satisfiesForkFilter(\n  allowForks: boolean | true,\n  isFork: boolean | false,\n): Boolean {\n  // we don't want to include forks if forks are not allowed\n  if (!allowForks && isFork) return false;\n\n  // if forks are allowed, allow all repos through\n  return true;\n}\n\n// Given the github organisation team slug, returns a tuple containing [organisation, team]\nexport function splitTeamSlug(slug: string): [string, string] {\n  const parts = slug.split('/');\n  if (parts.length !== 2) {\n    throw new Error(\n      `Github team slug '${slug}' was not in the expected format <organisation>/<team>`,\n    );\n  }\n  return [parts[0], parts[1]];\n}\n\nexport function satisfiesVisibilityFilter(\n  visibilities: string[],\n  visibility: string,\n): Boolean {\n  if (!visibilities.length) {\n    return true;\n  }\n  const lowerCaseVisibilities = visibilities.map(v =>\n    v.toLocaleLowerCase('en-US'),\n  );\n  const lowerCaseVisibility = visibility.toLocaleLowerCase('en-US');\n\n  return lowerCaseVisibilities.includes(lowerCaseVisibility);\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  Entity,\n} from '@backstage/catalog-model';\nimport { merge } from 'lodash';\nimport {\n  ANNOTATION_GITHUB_TEAM_SLUG,\n  ANNOTATION_GITHUB_USER_LOGIN,\n} from './annotation';\nimport { splitTeamSlug } from './util';\n\n// Makes sure that emitted entities have a proper location\nexport function withLocations(\n  baseUrl: string,\n  org: string,\n  entity: Entity,\n): Entity {\n  const login =\n    entity.metadata.annotations?.[ANNOTATION_GITHUB_USER_LOGIN] ||\n    entity.metadata.name;\n\n  let team = entity.metadata.name;\n  const slug = entity.metadata.annotations?.[ANNOTATION_GITHUB_TEAM_SLUG];\n  if (slug) {\n    const [_, slugTeam] = splitTeamSlug(slug);\n    team = slugTeam;\n  }\n\n  const location =\n    entity.kind === 'Group'\n      ? `url:${baseUrl}/orgs/${org}/teams/${team}`\n      : `url:${baseUrl}/${login}`;\n  return merge(\n    {\n      metadata: {\n        annotations: {\n          [ANNOTATION_LOCATION]: location,\n          [ANNOTATION_ORIGIN_LOCATION]: location,\n        },\n      },\n    },\n    entity,\n  ) as Entity;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { GithubCredentialType } from '@backstage/integration';\nimport { graphql } from '@octokit/graphql';\nimport {\n  defaultOrganizationTeamTransformer,\n  defaultUserTransformer,\n  TeamTransformer,\n  TransformerContext,\n  UserTransformer,\n} from './defaultTransformers';\nimport { withLocations } from './withLocations';\n\nimport { DeferredEntity } from '@backstage/plugin-catalog-node';\n\n// Graphql types\n\nexport type QueryResponse = {\n  organization?: OrganizationResponse;\n  repositoryOwner?: RepositoryOwnerResponse;\n  user?: UserResponse;\n};\n\ntype RepositoryOwnerResponse = {\n  repositories?: Connection<RepositoryResponse>;\n};\n\nexport type OrganizationResponse = {\n  membersWithRole?: Connection<GithubUser>;\n  team?: GithubTeamResponse;\n  teams?: Connection<GithubTeamResponse>;\n  repositories?: Connection<RepositoryResponse>;\n};\n\nexport type UserResponse = {\n  organizations?: Connection<GithubOrg>;\n};\n\nexport type PageInfo = {\n  hasNextPage: boolean;\n  endCursor?: string;\n};\n\nexport type GithubOrg = {\n  login: string;\n};\n\n/**\n * Github User\n *\n * @public\n */\nexport type GithubUser = {\n  login: string;\n  bio?: string;\n  avatarUrl?: string;\n  email?: string;\n  name?: string;\n  organizationVerifiedDomainEmails?: string[];\n};\n\n/**\n * Github Team\n *\n * @public\n */\nexport type GithubTeam = {\n  slug: string;\n  combinedSlug: string;\n  name?: string;\n  description?: string;\n  avatarUrl?: string;\n  editTeamUrl?: string;\n  parentTeam?: GithubTeam;\n  members: GithubUser[];\n};\n\nexport type GithubTeamResponse = Omit<GithubTeam, 'members'> & {\n  members: Connection<GithubUser>;\n};\n\nexport type RepositoryResponse = {\n  name: string;\n  url: string;\n  isArchived: boolean;\n  isFork: boolean;\n  repositoryTopics: RepositoryTopics;\n  defaultBranchRef: {\n    name: string;\n  } | null;\n  catalogInfoFile: {\n    __typename: string;\n    id: string;\n    text: string;\n  } | null;\n  visibility: string;\n};\n\ntype RepositoryTopics = {\n  nodes: TopicNodes[];\n};\n\ntype TopicNodes = {\n  topic: {\n    name: string;\n  };\n};\n\nexport type Connection<T> = {\n  pageInfo: PageInfo;\n  nodes: T[];\n};\n\n/**\n * Gets all the users out of a Github organization.\n *\n * Note that the users will not have their memberships filled in.\n *\n * @param client - An octokit graphql client\n * @param org - The slug of the org to read\n */\nexport async function getOrganizationUsers(\n  client: typeof graphql,\n  org: string,\n  tokenType: GithubCredentialType,\n  userTransformer: UserTransformer = defaultUserTransformer,\n): Promise<{ users: Entity[] }> {\n  const query = `\n    query users($org: String!, $email: Boolean!, $cursor: String) {\n      organization(login: $org) {\n        membersWithRole(first: 100, after: $cursor) {\n          pageInfo { hasNextPage, endCursor }\n          nodes {\n            avatarUrl,\n            bio,\n            email @include(if: $email),\n            login,\n            name,\n            organizationVerifiedDomainEmails(login: $org)\n          }\n        }\n      }\n    }`;\n\n  // There is no user -> teams edge, so we leave the memberships empty for\n  // now and let the team iteration handle it instead\n\n  const users = await queryWithPaging(\n    client,\n    query,\n    org,\n    r => r.organization?.membersWithRole,\n    userTransformer,\n    {\n      org,\n      email: tokenType === 'token',\n    },\n  );\n\n  return { users };\n}\n\n/**\n * Gets all the teams out of a Github organization.\n *\n * Note that the teams will not have any relations apart from parent filled in.\n *\n * @param client - An octokit graphql client\n * @param org - The slug of the org to read\n */\nexport async function getOrganizationTeams(\n  client: typeof graphql,\n  org: string,\n  teamTransformer: TeamTransformer = defaultOrganizationTeamTransformer,\n): Promise<{\n  teams: Entity[];\n}> {\n  const query = `\n    query teams($org: String!, $cursor: String) {\n      organization(login: $org) {\n        teams(first: 100, after: $cursor) {\n          pageInfo { hasNextPage, endCursor }\n          nodes {\n            slug\n            combinedSlug\n            name\n            description\n            avatarUrl\n            editTeamUrl\n            parentTeam { slug }\n            members(first: 100, membership: IMMEDIATE) {\n              pageInfo { hasNextPage }\n              nodes {\n                avatarUrl,\n                bio,\n                email,\n                login,\n                name,\n                organizationVerifiedDomainEmails(login: $org)\n               }\n            }\n          }\n        }\n      }\n    }`;\n\n  const materialisedTeams = async (\n    item: GithubTeamResponse,\n    ctx: TransformerContext,\n  ): Promise<Entity | undefined> => {\n    const memberNames: GithubUser[] = [];\n\n    if (!item.members.pageInfo.hasNextPage) {\n      // We got all the members in one go, run the fast path\n      for (const user of item.members.nodes) {\n        memberNames.push(user);\n      }\n    } else {\n      // There were more than a hundred immediate members - run the slow\n      // path of fetching them explicitly\n      const { members } = await getTeamMembers(ctx.client, ctx.org, item.slug);\n      for (const userLogin of members) {\n        memberNames.push(userLogin);\n      }\n    }\n\n    const team: GithubTeam = {\n      ...item,\n      members: memberNames,\n    };\n\n    return await teamTransformer(team, ctx);\n  };\n\n  const teams = await queryWithPaging(\n    client,\n    query,\n    org,\n    r => r.organization?.teams,\n    materialisedTeams,\n    { org },\n  );\n\n  return { teams };\n}\n\nexport async function getOrganizationTeamsFromUsers(\n  client: typeof graphql,\n  org: string,\n  userLogins: string[],\n  teamTransformer: TeamTransformer = defaultOrganizationTeamTransformer,\n): Promise<{\n  teams: Entity[];\n}> {\n  const query = `\n   query teams($org: String!, $cursor: String, $userLogins: [String!] = \"\") {\n  organization(login: $org) {\n    teams(first: 100, after: $cursor, userLogins: $userLogins) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        slug\n        combinedSlug\n        name\n        description\n        avatarUrl\n        editTeamUrl\n        parentTeam {\n          slug\n        }\n        members(first: 100, membership: IMMEDIATE) {\n          pageInfo {\n            hasNextPage\n          }\n          nodes {\n            avatarUrl,\n            bio,\n            email,\n            login,\n            name,\n            organizationVerifiedDomainEmails(login: $org)\n          }\n        }\n      }\n    }\n  }\n}`;\n\n  const materialisedTeams = async (\n    item: GithubTeamResponse,\n    ctx: TransformerContext,\n  ): Promise<Entity | undefined> => {\n    const memberNames: GithubUser[] = [];\n\n    if (!item.members.pageInfo.hasNextPage) {\n      // We got all the members in one go, run the fast path\n      for (const user of item.members.nodes) {\n        memberNames.push(user);\n      }\n    } else {\n      // There were more than a hundred immediate members - run the slow\n      // path of fetching them explicitly\n      const { members } = await getTeamMembers(ctx.client, ctx.org, item.slug);\n      for (const userLogin of members) {\n        memberNames.push(userLogin);\n      }\n    }\n\n    const team: GithubTeam = {\n      ...item,\n      members: memberNames,\n    };\n\n    return await teamTransformer(team, ctx);\n  };\n\n  const teams = await queryWithPaging(\n    client,\n    query,\n    org,\n    r => r.organization?.teams,\n    materialisedTeams,\n    { org, userLogins },\n  );\n\n  return { teams };\n}\n\nexport async function getOrganizationsFromUser(\n  client: typeof graphql,\n  user: string,\n): Promise<{\n  orgs: string[];\n}> {\n  const query = `\n  query orgs($user: String!) {\n    user(login: $user) {\n      organizations(first: 100) {\n        nodes { login }\n        pageInfo { hasNextPage, endCursor }\n      }\n    }\n  }`;\n\n  const orgs = await queryWithPaging(\n    client,\n    query,\n    '',\n    r => r.user?.organizations,\n    async o => o.login,\n    { user },\n  );\n\n  return { orgs };\n}\n\nexport async function getOrganizationTeam(\n  client: typeof graphql,\n  org: string,\n  teamSlug: string,\n  teamTransformer: TeamTransformer = defaultOrganizationTeamTransformer,\n): Promise<{\n  team: Entity;\n}> {\n  const query = `\n  query teams($org: String!, $teamSlug: String!) {\n      organization(login: $org) {\n        team(slug:$teamSlug) {\n            slug\n            combinedSlug\n            name\n            description\n            avatarUrl\n            editTeamUrl\n            parentTeam { slug }\n            members(first: 100, membership: IMMEDIATE) {\n              pageInfo { hasNextPage }\n              nodes { login }\n            }\n        }\n      }\n    }`;\n\n  const materialisedTeam = async (\n    item: GithubTeamResponse,\n    ctx: TransformerContext,\n  ): Promise<Entity | undefined> => {\n    const memberNames: GithubUser[] = [];\n\n    if (!item.members.pageInfo.hasNextPage) {\n      // We got all the members in one go, run the fast path\n      for (const user of item.members.nodes) {\n        memberNames.push(user);\n      }\n    } else {\n      // There were more than a hundred immediate members - run the slow\n      // path of fetching them explicitly\n      const { members } = await getTeamMembers(ctx.client, ctx.org, item.slug);\n      for (const userLogin of members) {\n        memberNames.push(userLogin);\n      }\n    }\n\n    const team: GithubTeam = {\n      ...item,\n      members: memberNames,\n    };\n\n    return await teamTransformer(team, ctx);\n  };\n\n  const response: QueryResponse = await client(query, {\n    org,\n    teamSlug,\n  });\n\n  if (!response.organization?.team)\n    throw new Error(`Found no match for team ${teamSlug}`);\n\n  const team = await materialisedTeam(response.organization?.team, {\n    query,\n    client,\n    org,\n  });\n\n  if (!team) throw new Error(`Can't transform for team ${teamSlug}`);\n\n  return { team };\n}\n\nexport async function getOrganizationRepositories(\n  client: typeof graphql,\n  org: string,\n  catalogPath: string,\n): Promise<{ repositories: RepositoryResponse[] }> {\n  let relativeCatalogPathRef: string;\n  // We must strip the leading slash or the query for objects does not work\n  if (catalogPath.startsWith('/')) {\n    relativeCatalogPathRef = catalogPath.substring(1);\n  } else {\n    relativeCatalogPathRef = catalogPath;\n  }\n  const catalogPathRef = `HEAD:${relativeCatalogPathRef}`;\n  const query = `\n    query repositories($org: String!, $catalogPathRef: String!, $cursor: String) {\n      repositoryOwner(login: $org) {\n        login\n        repositories(first: 50, after: $cursor) {\n          nodes {\n            name\n            catalogInfoFile: object(expression: $catalogPathRef) {\n              __typename\n              ... on Blob {\n                id\n                text\n              }\n            }\n            url\n            isArchived\n            isFork\n            visibility\n            repositoryTopics(first: 100) {\n              nodes {\n                ... on RepositoryTopic {\n                  topic {\n                    name\n                  }\n                }\n              }\n            }\n            defaultBranchRef {\n              name\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }`;\n\n  const repositories = await queryWithPaging(\n    client,\n    query,\n    org,\n    r => r.repositoryOwner?.repositories,\n    async x => x,\n    { org, catalogPathRef },\n  );\n\n  return { repositories };\n}\n\n/**\n * Gets all the users out of a Github organization.\n *\n * Note that the users will not have their memberships filled in.\n *\n * @param client - An octokit graphql client\n * @param org - The slug of the org to read\n * @param teamSlug - The slug of the team to read\n */\nexport async function getTeamMembers(\n  client: typeof graphql,\n  org: string,\n  teamSlug: string,\n): Promise<{ members: GithubUser[] }> {\n  const query = `\n    query members($org: String!, $teamSlug: String!, $cursor: String) {\n      organization(login: $org) {\n        team(slug: $teamSlug) {\n          members(first: 100, after: $cursor, membership: IMMEDIATE) {\n            pageInfo { hasNextPage, endCursor }\n            nodes { login }\n          }\n        }\n      }\n    }`;\n\n  const members = await queryWithPaging(\n    client,\n    query,\n    org,\n    r => r.organization?.team?.members,\n    async user => user,\n    { org, teamSlug },\n  );\n\n  return { members };\n}\n\n//\n// Helpers\n//\n\n/**\n * Assists in repeatedly executing a query with a paged response.\n *\n * Requires that the query accepts a $cursor variable.\n *\n * @param client - The octokit client\n * @param query - The query to execute\n * @param org - The slug of the org to read\n * @param connection - A function that, given the response, picks out the actual\n *                   Connection object that's being iterated\n * @param transformer - A function that, given one of the nodes in the Connection,\n *               returns the model mapped form of it\n * @param variables - The variable values that the query needs, minus the cursor\n */\nexport async function queryWithPaging<\n  GraphqlType,\n  OutputType,\n  Variables extends {},\n  Response = QueryResponse,\n>(\n  client: typeof graphql,\n  query: string,\n  org: string,\n  connection: (response: Response) => Connection<GraphqlType> | undefined,\n  transformer: (\n    item: GraphqlType,\n    ctx: TransformerContext,\n  ) => Promise<OutputType | undefined>,\n  variables: Variables,\n): Promise<OutputType[]> {\n  const result: OutputType[] = [];\n  const sleep = (ms: number) => new Promise(r => setTimeout(r, ms));\n\n  let cursor: string | undefined = undefined;\n  for (let j = 0; j < 1000 /* just for sanity */; ++j) {\n    const response: Response = await client(query, {\n      ...variables,\n      cursor,\n    });\n\n    const conn = connection(response);\n    if (!conn) {\n      throw new Error(`Found no match for ${JSON.stringify(variables)}`);\n    }\n\n    for (const node of conn.nodes) {\n      const transformedNode = await transformer(node, {\n        client,\n        query,\n        org,\n      });\n\n      if (transformedNode) {\n        result.push(transformedNode);\n      }\n    }\n\n    if (!conn.pageInfo.hasNextPage) {\n      break;\n    } else {\n      await sleep(1000);\n      cursor = conn.pageInfo.endCursor;\n    }\n  }\n\n  return result;\n}\n\nexport type DeferredEntitiesBuilder = (\n  org: string,\n  entities: Entity[],\n) => { added: DeferredEntity[]; removed: DeferredEntity[] };\n\nexport const createAddEntitiesOperation =\n  (id: string, host: string) => (org: string, entities: Entity[]) => ({\n    removed: [],\n    added: entities.map(entity => ({\n      locationKey: `github-org-provider:${id}`,\n      entity: withLocations(`https://${host}`, org, entity),\n    })),\n  });\n\nexport const createRemoveEntitiesOperation =\n  (id: string, host: string) => (org: string, entities: Entity[]) => ({\n    added: [],\n    removed: entities.map(entity => ({\n      locationKey: `github-org-provider:${id}`,\n      entity: withLocations(`https://${host}`, org, entity),\n    })),\n  });\n\nexport const createReplaceEntitiesOperation =\n  (id: string, host: string) => (org: string, entities: Entity[]) => {\n    const entitiesToReplace = entities.map(entity => ({\n      locationKey: `github-org-provider:${id}`,\n      entity: withLocations(`https://${host}`, org, entity),\n    }));\n\n    return {\n      removed: entitiesToReplace,\n      added: entitiesToReplace,\n    };\n  };\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  readTaskScheduleDefinitionFromConfig,\n  TaskScheduleDefinition,\n} from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\n\nconst DEFAULT_CATALOG_PATH = '/catalog-info.yaml';\nconst DEFAULT_PROVIDER_ID = 'default';\n\nexport type GithubEntityProviderConfig = {\n  id: string;\n  catalogPath: string;\n  organization: string;\n  host: string;\n  filters?: {\n    repository?: RegExp;\n    branch?: string;\n    topic?: GithubTopicFilters;\n    allowForks?: boolean;\n    visibility?: string[];\n  };\n  validateLocationsExist: boolean;\n  schedule?: TaskScheduleDefinition;\n};\n\nexport type GithubTopicFilters = {\n  exclude?: string[];\n  include?: string[];\n};\n\nexport function readProviderConfigs(\n  config: Config,\n): GithubEntityProviderConfig[] {\n  const providersConfig = config.getOptionalConfig('catalog.providers.github');\n  if (!providersConfig) {\n    return [];\n  }\n\n  if (providersConfig.has('organization')) {\n    // simple/single config variant\n    return [readProviderConfig(DEFAULT_PROVIDER_ID, providersConfig)];\n  }\n\n  return providersConfig.keys().map(id => {\n    const providerConfig = providersConfig.getConfig(id);\n\n    return readProviderConfig(id, providerConfig);\n  });\n}\n\nfunction readProviderConfig(\n  id: string,\n  config: Config,\n): GithubEntityProviderConfig {\n  const organization = config.getString('organization');\n  const catalogPath =\n    config.getOptionalString('catalogPath') ?? DEFAULT_CATALOG_PATH;\n  const host = config.getOptionalString('host') ?? 'github.com';\n  const repositoryPattern = config.getOptionalString('filters.repository');\n  const branchPattern = config.getOptionalString('filters.branch');\n  const allowForks = config.getOptionalBoolean('filters.allowForks') ?? true;\n  const topicFilterInclude = config?.getOptionalStringArray(\n    'filters.topic.include',\n  );\n  const topicFilterExclude = config?.getOptionalStringArray(\n    'filters.topic.exclude',\n  );\n  const validateLocationsExist =\n    config?.getOptionalBoolean('validateLocationsExist') ?? false;\n\n  const catalogPathContainsWildcard = catalogPath.includes('*');\n\n  const visibilityFilterInclude =\n    config?.getOptionalStringArray('filters.visibility');\n\n  if (validateLocationsExist && catalogPathContainsWildcard) {\n    throw Error(\n      `Error while processing GitHub provider config. The catalog path ${catalogPath} contains a wildcard, which is incompatible with validation of locations existing before emitting them. Ensure that validateLocationsExist is set to false.`,\n    );\n  }\n\n  const schedule = config.has('schedule')\n    ? readTaskScheduleDefinitionFromConfig(config.getConfig('schedule'))\n    : undefined;\n\n  return {\n    id,\n    catalogPath,\n    organization,\n    host,\n    filters: {\n      repository: repositoryPattern\n        ? compileRegExp(repositoryPattern)\n        : undefined,\n      branch: branchPattern || undefined,\n      allowForks: allowForks,\n      topic: {\n        include: topicFilterInclude,\n        exclude: topicFilterExclude,\n      },\n      visibility: visibilityFilterInclude,\n    },\n    schedule,\n    validateLocationsExist,\n  };\n}\n\n/**\n * Compiles a RegExp while enforcing the pattern to contain\n * the start-of-line and end-of-line anchors.\n *\n * @param pattern\n */\nfunction compileRegExp(pattern: string): RegExp {\n  let fullLinePattern = pattern;\n  if (!fullLinePattern.startsWith('^')) {\n    fullLinePattern = `^${fullLinePattern}`;\n  }\n  if (!fullLinePattern.endsWith('$')) {\n    fullLinePattern = `${fullLinePattern}$`;\n  }\n\n  return new RegExp(fullLinePattern);\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PluginTaskScheduler, TaskRunner } from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrations,\n  GithubIntegrationConfig,\n  GithubIntegration,\n  SingleInstanceGithubCredentialsProvider,\n} from '@backstage/integration';\nimport {\n  DeferredEntity,\n  EntityProvider,\n  EntityProviderConnection,\n  locationSpecToLocationEntity,\n} from '@backstage/plugin-catalog-node';\n\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\n\nimport { graphql } from '@octokit/graphql';\nimport * as uuid from 'uuid';\nimport { Logger } from 'winston';\nimport {\n  readProviderConfigs,\n  GithubEntityProviderConfig,\n} from './GithubEntityProviderConfig';\nimport { getOrganizationRepositories } from '../lib/github';\nimport {\n  satisfiesTopicFilter,\n  satisfiesForkFilter,\n  satisfiesVisibilityFilter,\n} from '../lib/util';\n\nimport { EventParams, EventSubscriber } from '@backstage/plugin-events-node';\nimport { PushEvent, Commit } from '@octokit/webhooks-types';\nimport { Minimatch } from 'minimatch';\n\nconst TOPIC_REPO_PUSH = 'github.push';\n\ntype Repository = {\n  name: string;\n  url: string;\n  isArchived: boolean;\n  isFork: boolean;\n  repositoryTopics: string[];\n  defaultBranchRef?: string;\n  isCatalogInfoFilePresent: boolean;\n  visibility: string;\n};\n\n/**\n * Discovers catalog files located in [GitHub](https://github.com).\n * The provider will search your GitHub account and register catalog files matching the configured path\n * as Location entity and via following processing steps add all contained catalog entities.\n * This can be useful as an alternative to static locations or manually adding things to the catalog.\n *\n * @public\n */\nexport class GithubEntityProvider implements EntityProvider, EventSubscriber {\n  private readonly config: GithubEntityProviderConfig;\n  private readonly logger: Logger;\n  private readonly integration: GithubIntegrationConfig;\n  private readonly scheduleFn: () => Promise<void>;\n  private connection?: EntityProviderConnection;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      schedule?: TaskRunner;\n      scheduler?: PluginTaskScheduler;\n    },\n  ): GithubEntityProvider[] {\n    if (!options.schedule && !options.scheduler) {\n      throw new Error('Either schedule or scheduler must be provided.');\n    }\n\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return readProviderConfigs(config).map(providerConfig => {\n      const integrationHost = providerConfig.host;\n      const integration = integrations.github.byHost(integrationHost);\n\n      if (!integration) {\n        throw new Error(\n          `There is no GitHub config that matches host ${integrationHost}. Please add a configuration entry for it under integrations.github`,\n        );\n      }\n\n      if (!options.schedule && !providerConfig.schedule) {\n        throw new Error(\n          `No schedule provided neither via code nor config for github-provider:${providerConfig.id}.`,\n        );\n      }\n\n      const taskRunner =\n        options.schedule ??\n        options.scheduler!.createScheduledTaskRunner(providerConfig.schedule!);\n\n      return new GithubEntityProvider(\n        providerConfig,\n        integration,\n        options.logger,\n        taskRunner,\n      );\n    });\n  }\n\n  private constructor(\n    config: GithubEntityProviderConfig,\n    integration: GithubIntegration,\n    logger: Logger,\n    taskRunner: TaskRunner,\n  ) {\n    this.config = config;\n    this.integration = integration.config;\n    this.logger = logger.child({\n      target: this.getProviderName(),\n    });\n    this.scheduleFn = this.createScheduleFn(taskRunner);\n    this.githubCredentialsProvider =\n      SingleInstanceGithubCredentialsProvider.create(integration.config);\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.getProviderName} */\n  getProviderName(): string {\n    return `github-provider:${this.config.id}`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.connect} */\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n    return await this.scheduleFn();\n  }\n\n  private createScheduleFn(taskRunner: TaskRunner): () => Promise<void> {\n    return async () => {\n      const taskId = `${this.getProviderName()}:refresh`;\n      return taskRunner.run({\n        id: taskId,\n        fn: async () => {\n          const logger = this.logger.child({\n            class: GithubEntityProvider.prototype.constructor.name,\n            taskId,\n            taskInstanceId: uuid.v4(),\n          });\n          try {\n            await this.refresh(logger);\n          } catch (error) {\n            logger.error(\n              `${this.getProviderName()} refresh failed, ${error}`,\n              error,\n            );\n          }\n        },\n      });\n    };\n  }\n\n  async refresh(logger: Logger) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const targets = await this.findCatalogFiles();\n    const matchingTargets = this.matchesFilters(targets);\n    const entities = matchingTargets\n      .map(repository => this.createLocationUrl(repository))\n      .map(GithubEntityProvider.toLocationSpec)\n      .map(location => {\n        return {\n          locationKey: this.getProviderName(),\n          entity: locationSpecToLocationEntity({ location }),\n        };\n      });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n\n    logger.info(\n      `Read ${targets.length} GitHub repositories (${entities.length} matching the pattern)`,\n    );\n  }\n\n  // go to the server and get all of the repositories\n  private async findCatalogFiles(): Promise<Repository[]> {\n    const organization = this.config.organization;\n    const host = this.integration.host;\n    const catalogPath = this.config.catalogPath;\n    const orgUrl = `https://${host}/${organization}`;\n\n    const { headers } = await this.githubCredentialsProvider.getCredentials({\n      url: orgUrl,\n    });\n\n    const client = graphql.defaults({\n      baseUrl: this.integration.apiBaseUrl,\n      headers,\n    });\n\n    const { repositories: repositoriesFromGithub } =\n      await getOrganizationRepositories(client, organization, catalogPath);\n    const repositories = repositoriesFromGithub.map(r => {\n      return {\n        url: r.url,\n        name: r.name,\n        defaultBranchRef: r.defaultBranchRef?.name,\n        repositoryTopics: r.repositoryTopics.nodes.map(t => t.topic.name),\n        isArchived: r.isArchived,\n        isFork: r.isFork,\n        isCatalogInfoFilePresent:\n          r.catalogInfoFile?.__typename === 'Blob' &&\n          r.catalogInfoFile.text !== '',\n        visibility: r.visibility,\n      };\n    });\n\n    if (this.config.validateLocationsExist) {\n      return repositories.filter(\n        repository => repository.isCatalogInfoFilePresent,\n      );\n    }\n\n    return repositories;\n  }\n\n  private matchesFilters(repositories: Repository[]) {\n    const repositoryFilter = this.config.filters?.repository;\n    const topicFilters = this.config.filters?.topic;\n    const allowForks = this.config.filters?.allowForks ?? true;\n    const visibilities = this.config.filters?.visibility ?? [];\n\n    const matchingRepositories = repositories.filter(r => {\n      const repoTopics: string[] = r.repositoryTopics;\n      return (\n        !r.isArchived &&\n        (!repositoryFilter || repositoryFilter.test(r.name)) &&\n        satisfiesTopicFilter(repoTopics, topicFilters) &&\n        satisfiesForkFilter(allowForks, r.isFork) &&\n        satisfiesVisibilityFilter(visibilities, r.visibility) &&\n        r.defaultBranchRef\n      );\n    });\n    return matchingRepositories;\n  }\n\n  private createLocationUrl(repository: Repository): string {\n    const branch =\n      this.config.filters?.branch || repository.defaultBranchRef || '-';\n    const catalogFile = this.config.catalogPath.startsWith('/')\n      ? this.config.catalogPath.substring(1)\n      : this.config.catalogPath;\n    return `${repository.url}/blob/${branch}/${catalogFile}`;\n  }\n\n  private static toLocationSpec(target: string): LocationSpec {\n    return {\n      type: 'url',\n      target: target,\n      presence: 'optional',\n    };\n  }\n\n  /** {@inheritdoc @backstage/plugin-events-node#EventSubscriber.onEvent} */\n  async onEvent(params: EventParams): Promise<void> {\n    this.logger.debug(`Received event from ${params.topic}`);\n    if (params.topic !== TOPIC_REPO_PUSH) {\n      return;\n    }\n\n    await this.onRepoPush(params.eventPayload as PushEvent);\n  }\n\n  /** {@inheritdoc @backstage/plugin-events-node#EventSubscriber.supportsEventTopics} */\n  supportsEventTopics(): string[] {\n    return [TOPIC_REPO_PUSH];\n  }\n\n  private async onRepoPush(event: PushEvent) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    if (this.config.organization !== event.repository.organization) {\n      this.logger.debug(\n        `skipping push event from organization ${event.repository.organization}`,\n      );\n      return;\n    }\n\n    const repoName = event.repository.name;\n    const repoUrl = event.repository.url;\n    this.logger.debug(`handle github:push event for ${repoName} - ${repoUrl}`);\n\n    const branch =\n      this.config.filters?.branch || event.repository.default_branch;\n\n    if (!event.ref.includes(branch)) {\n      this.logger.debug(`skipping push event from ref ${event.ref}`);\n      return;\n    }\n\n    const repository: Repository = {\n      url: event.repository.url,\n      name: event.repository.name,\n      defaultBranchRef: event.repository.default_branch,\n      repositoryTopics: event.repository.topics,\n      isArchived: event.repository.archived,\n      isFork: event.repository.fork,\n      // we can consider this file present because\n      // only the catalog file will be recovered from the commits\n      isCatalogInfoFilePresent: true,\n      visibility: event.repository.visibility,\n    };\n\n    const matchingTargets = this.matchesFilters([repository]);\n    if (matchingTargets.length === 0) {\n      this.logger.debug(\n        `skipping push event from repository ${repoName} because didn't match provider filters`,\n      );\n      return;\n    }\n\n    // the commit has information about the files (added,removed,modified)\n    // so we will process the change based in this data\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push\n    const added = this.collectDeferredEntitiesFromCommit(\n      event.repository.url,\n      branch,\n      event.commits,\n      (commit: Commit) => [...commit.added],\n    );\n    const removed = this.collectDeferredEntitiesFromCommit(\n      event.repository.url,\n      branch,\n      event.commits,\n      (commit: Commit) => [...commit.removed],\n    );\n    const modified = this.collectFilesFromCommit(\n      event.commits,\n      (commit: Commit) => [...commit.modified],\n    );\n\n    if (modified.length > 0) {\n      await this.connection.refresh({\n        keys: [\n          ...modified.map(\n            filePath =>\n              `url:${event.repository.url}/tree/${branch}/${filePath}`,\n          ),\n          ...modified.map(\n            filePath =>\n              `url:${event.repository.url}/blob/${branch}/${filePath}`,\n          ),\n        ],\n      });\n    }\n\n    if (added.length > 0 || removed.length > 0) {\n      await this.connection.applyMutation({\n        type: 'delta',\n        added: added,\n        removed: removed,\n      });\n    }\n\n    this.logger.info(\n      `Processed Github push event: added ${added.length} - removed ${removed.length} - modified ${modified.length}`,\n    );\n  }\n\n  private collectDeferredEntitiesFromCommit(\n    repositoryUrl: string,\n    branch: string,\n    commits: Commit[],\n    transformOperation: (commit: Commit) => string[],\n  ): DeferredEntity[] {\n    const catalogFiles = this.collectFilesFromCommit(\n      commits,\n      transformOperation,\n    );\n    return this.toDeferredEntities(\n      catalogFiles.map(\n        filePath => `${repositoryUrl}/blob/${branch}/${filePath}`,\n      ),\n    );\n  }\n\n  private collectFilesFromCommit(\n    commits: Commit[],\n    transformOperation: (commit: Commit) => string[],\n  ): string[] {\n    const catalogFile = this.config.catalogPath.startsWith('/')\n      ? this.config.catalogPath.substring(1)\n      : this.config.catalogPath;\n\n    const matcher = new Minimatch(catalogFile);\n    return commits\n      .map(transformOperation)\n      .flat()\n      .filter(file => matcher.match(file));\n  }\n\n  private toDeferredEntities(targets: string[]): DeferredEntity[] {\n    return targets\n      .map(target => {\n        const location = GithubEntityProvider.toLocationSpec(target);\n\n        return locationSpecToLocationEntity({ location });\n      })\n      .map(entity => {\n        return {\n          locationKey: this.getProviderName(),\n          entity: entity,\n        };\n      });\n  }\n}\n\n/*\n * Helpers\n */\n\nexport function parseUrl(urlString: string): {\n  org: string;\n  repoSearchPath: RegExp;\n  catalogPath: string;\n  branch: string;\n  host: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.slice(1).split('/');\n\n  // /backstage/techdocs-*/blob/master/catalog-info.yaml\n  // can also be\n  // /backstage\n  if (path.length > 2 && path[0].length && path[1].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      repoSearchPath: escapeRegExp(decodeURIComponent(path[1])),\n      catalogPath: `/${decodeURIComponent(path.slice(4).join('/'))}`,\n      branch: decodeURIComponent(path[3]),\n      host: url.host,\n    };\n  } else if (path.length === 1 && path[0].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      repoSearchPath: escapeRegExp('*'),\n      catalogPath: '/catalog-info.yaml',\n      branch: '-',\n      host: url.host,\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n\nexport function escapeRegExp(str: string): RegExp {\n  return new RegExp(`^${str.replace(/\\*/g, '.*')}$`);\n}\n"],"names":["merge","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION","team","readTaskScheduleDefinitionFromConfig","integration","SingleInstanceGithubCredentialsProvider","ScmIntegrations","uuid","locationSpecToLocationEntity","graphql","Minimatch"],"mappings":"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"}