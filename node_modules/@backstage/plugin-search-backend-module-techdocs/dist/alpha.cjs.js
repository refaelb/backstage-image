'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendCommon = require('@backstage/backend-common');
var backendPluginApi = require('@backstage/backend-plugin-api');
var backendTasks = require('@backstage/backend-tasks');
var alpha$1 = require('@backstage/plugin-catalog-node/alpha');
var pluginSearchBackendModuleTechdocs = require('@backstage/plugin-search-backend-module-techdocs');
var alpha$2 = require('@backstage/plugin-search-backend-node/alpha');

const techdocsCollatorEntityTransformerExtensionPoint = backendPluginApi.createExtensionPoint({
  id: "search.techdocsCollator.transformer"
});
var alpha = backendPluginApi.createBackendModule({
  pluginId: "search",
  moduleId: "techdocs-collator",
  register(env) {
    let transformer;
    env.registerExtensionPoint(
      techdocsCollatorEntityTransformerExtensionPoint,
      {
        setTransformer(newTransformer) {
          if (transformer) {
            throw new Error(
              "TechDocs collator entity transformer may only be set once"
            );
          }
          transformer = newTransformer;
        }
      }
    );
    env.registerInit({
      deps: {
        config: backendPluginApi.coreServices.rootConfig,
        logger: backendPluginApi.coreServices.logger,
        discovery: backendPluginApi.coreServices.discovery,
        tokenManager: backendPluginApi.coreServices.tokenManager,
        scheduler: backendPluginApi.coreServices.scheduler,
        catalog: alpha$1.catalogServiceRef,
        indexRegistry: alpha$2.searchIndexRegistryExtensionPoint
      },
      async init({
        config,
        logger,
        discovery,
        tokenManager,
        scheduler,
        catalog,
        indexRegistry
      }) {
        const defaultSchedule = {
          frequency: { minutes: 10 },
          timeout: { minutes: 15 },
          initialDelay: { seconds: 3 }
        };
        const schedule = config.has("search.collators.techdocs.schedule") ? backendTasks.readTaskScheduleDefinitionFromConfig(
          config.getConfig("search.collators.techdocs.schedule")
        ) : defaultSchedule;
        indexRegistry.addCollator({
          schedule: scheduler.createScheduledTaskRunner(schedule),
          factory: pluginSearchBackendModuleTechdocs.DefaultTechDocsCollatorFactory.fromConfig(config, {
            discovery,
            tokenManager,
            logger: backendCommon.loggerToWinstonLogger(logger),
            catalogClient: catalog,
            entityTransformer: transformer
          })
        });
      }
    });
  }
});

exports["default"] = alpha;
exports.techdocsCollatorEntityTransformerExtensionPoint = techdocsCollatorEntityTransformerExtensionPoint;
//# sourceMappingURL=alpha.cjs.js.map
