'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendCommon = require('@backstage/backend-common');
var backendPluginApi = require('@backstage/backend-plugin-api');
var pluginTechdocsNode = require('@backstage/plugin-techdocs-node');
var Docker = require('dockerode');
var pluginTechdocsBackend = require('@backstage/plugin-techdocs-backend');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Docker__default = /*#__PURE__*/_interopDefaultLegacy(Docker);

const techdocsPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "techdocs",
  register(env) {
    let docsBuildStrategy;
    env.registerExtensionPoint(pluginTechdocsNode.techdocsBuildsExtensionPoint, {
      setBuildStrategy(buildStrategy) {
        if (docsBuildStrategy) {
          throw new Error("DocsBuildStrategy may only be set once");
        }
        docsBuildStrategy = buildStrategy;
      }
    });
    env.registerInit({
      deps: {
        config: backendPluginApi.coreServices.rootConfig,
        logger: backendPluginApi.coreServices.logger,
        urlReader: backendPluginApi.coreServices.urlReader,
        http: backendPluginApi.coreServices.httpRouter,
        discovery: backendPluginApi.coreServices.discovery,
        cache: backendPluginApi.coreServices.cache
      },
      async init({ config, logger, urlReader, http, discovery, cache }) {
        const winstonLogger = backendCommon.loggerToWinstonLogger(logger);
        const preparers = await pluginTechdocsNode.Preparers.fromConfig(config, {
          reader: urlReader,
          logger: winstonLogger
        });
        const dockerClient = new Docker__default["default"]();
        const containerRunner = new backendCommon.DockerContainerRunner({ dockerClient });
        const generators = await pluginTechdocsNode.Generators.fromConfig(config, {
          logger: winstonLogger,
          containerRunner
        });
        const publisher = await pluginTechdocsNode.Publisher.fromConfig(config, {
          logger: winstonLogger,
          discovery
        });
        await publisher.getReadiness();
        const cacheManager = backendCommon.cacheToPluginCacheManager(cache);
        http.use(
          await pluginTechdocsBackend.createRouter({
            logger: winstonLogger,
            cache: cacheManager,
            docsBuildStrategy,
            preparers,
            generators,
            publisher,
            config,
            discovery
          })
        );
      }
    });
  }
});

exports["default"] = techdocsPlugin;
//# sourceMappingURL=alpha.cjs.js.map
