{"version":3,"file":"alpha.esm.js","sources":["../src/alpha.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport LibraryBooks from '@material-ui/icons/LibraryBooks';\nimport {\n  createPlugin,\n  createSchemaFromZod,\n  createApiExtension,\n  createPageExtension,\n  createNavItemExtension,\n} from '@backstage/frontend-plugin-api';\nimport { createSearchResultListItemExtension } from '@backstage/plugin-search-react/alpha';\nimport {\n  configApiRef,\n  createApiFactory,\n  discoveryApiRef,\n  fetchApiRef,\n  identityApiRef,\n} from '@backstage/core-plugin-api';\nimport {\n  compatWrapper,\n  convertLegacyRouteRef,\n} from '@backstage/core-compat-api';\nimport {\n  techdocsApiRef,\n  techdocsStorageApiRef,\n} from '@backstage/plugin-techdocs-react';\nimport { TechDocsClient, TechDocsStorageClient } from './client';\nimport {\n  rootCatalogDocsRouteRef,\n  rootDocsRouteRef,\n  rootRouteRef,\n} from './routes';\nimport { createEntityContentExtension } from '@backstage/plugin-catalog-react/alpha';\n\n/** @alpha */\nconst techDocsStorageApi = createApiExtension({\n  factory: createApiFactory({\n    api: techdocsStorageApiRef,\n    deps: {\n      configApi: configApiRef,\n      discoveryApi: discoveryApiRef,\n      identityApi: identityApiRef,\n      fetchApi: fetchApiRef,\n    },\n    factory: ({ configApi, discoveryApi, identityApi, fetchApi }) =>\n      new TechDocsStorageClient({\n        configApi,\n        discoveryApi,\n        identityApi,\n        fetchApi,\n      }),\n  }),\n});\n\n/** @alpha */\nconst techDocsClientApi = createApiExtension({\n  factory: createApiFactory({\n    api: techdocsApiRef,\n    deps: {\n      configApi: configApiRef,\n      discoveryApi: discoveryApiRef,\n      fetchApi: fetchApiRef,\n    },\n    factory: ({ configApi, discoveryApi, fetchApi }) =>\n      new TechDocsClient({\n        configApi,\n        discoveryApi,\n        fetchApi,\n      }),\n  }),\n});\n\n/** @alpha */\nexport const techDocsSearchResultListItemExtension =\n  createSearchResultListItemExtension({\n    configSchema: createSchemaFromZod(z =>\n      z.object({\n        // TODO: Define how the icon can be configurable\n        title: z.string().optional(),\n        lineClamp: z.number().default(5),\n        asLink: z.boolean().default(true),\n        asListItem: z.boolean().default(true),\n        noTrack: z.boolean().default(false),\n      }),\n    ),\n    predicate: result => result.type === 'techdocs',\n    component: async ({ config }) => {\n      const { TechDocsSearchResultListItem } = await import(\n        './search/components/TechDocsSearchResultListItem'\n      );\n      return props =>\n        compatWrapper(<TechDocsSearchResultListItem {...props} {...config} />);\n    },\n  });\n\n/**\n * Responsible for rendering the provided router element\n *\n * @alpha\n */\nconst techDocsPage = createPageExtension({\n  defaultPath: '/docs',\n  routeRef: convertLegacyRouteRef(rootRouteRef),\n  loader: () =>\n    import('./home/components/TechDocsIndexPage').then(m =>\n      compatWrapper(<m.TechDocsIndexPage />),\n    ),\n});\n\n/**\n * Component responsible for composing a TechDocs reader page experience\n *\n * @alpha\n */\nconst techDocsReaderPage = createPageExtension({\n  name: 'reader',\n  defaultPath: '/docs/:namespace/:kind/:name',\n  routeRef: convertLegacyRouteRef(rootDocsRouteRef),\n  loader: () =>\n    import('./reader/components/TechDocsReaderPage').then(m =>\n      compatWrapper(<m.TechDocsReaderPage />),\n    ),\n});\n\n/**\n * Component responsible for rendering techdocs on entity pages\n *\n * @alpha\n */\nconst techDocsEntityContent = createEntityContentExtension({\n  defaultPath: 'docs',\n  defaultTitle: 'TechDocs',\n  loader: () =>\n    import('./Router').then(m => compatWrapper(<m.EmbeddedDocsRouter />)),\n});\n\n/** @alpha */\nconst techDocsNavItem = createNavItemExtension({\n  icon: LibraryBooks,\n  title: 'Docs',\n  routeRef: convertLegacyRouteRef(rootRouteRef),\n});\n\n/** @alpha */\nexport default createPlugin({\n  id: 'techdocs',\n  extensions: [\n    techDocsClientApi,\n    techDocsStorageApi,\n    techDocsNavItem,\n    techDocsPage,\n    techDocsReaderPage,\n    techDocsEntityContent,\n    techDocsSearchResultListItemExtension,\n  ],\n  routes: {\n    root: convertLegacyRouteRef(rootRouteRef),\n    docRoot: convertLegacyRouteRef(rootDocsRouteRef),\n    entityContent: convertLegacyRouteRef(rootCatalogDocsRouteRef),\n  },\n});\n"],"names":[],"mappings":"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"}