{"version":3,"file":"routes-691e552c.esm.js","sources":["../../src/client.ts","../../src/routes.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  DiscoveryApi,\n  FetchApi,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\nimport { NotFoundError, ResponseError } from '@backstage/errors';\nimport {\n  SyncResult,\n  TechDocsApi,\n  TechDocsEntityMetadata,\n  TechDocsMetadata,\n  TechDocsStorageApi,\n} from '@backstage/plugin-techdocs-react';\nimport { EventSourcePolyfill } from 'event-source-polyfill';\n\n/**\n * API to talk to `techdocs-backend`.\n *\n * @public\n */\nexport class TechDocsClient implements TechDocsApi {\n  public configApi: Config;\n  public discoveryApi: DiscoveryApi;\n  private fetchApi: FetchApi;\n\n  constructor(options: {\n    configApi: Config;\n    discoveryApi: DiscoveryApi;\n    fetchApi: FetchApi;\n  }) {\n    this.configApi = options.configApi;\n    this.discoveryApi = options.discoveryApi;\n    this.fetchApi = options.fetchApi;\n  }\n\n  async getApiOrigin(): Promise<string> {\n    return await this.discoveryApi.getBaseUrl('techdocs');\n  }\n\n  /**\n   * Retrieve TechDocs metadata.\n   *\n   * When docs are built, we generate a techdocs_metadata.json and store it along with the generated\n   * static files. It includes necessary data about the docs site. This method requests techdocs-backend\n   * which retrieves the TechDocs metadata.\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   */\n  async getTechDocsMetadata(\n    entityId: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const requestUrl = `${apiOrigin}/metadata/techdocs/${namespace}/${kind}/${name}`;\n    const request = await this.fetchApi.fetch(`${requestUrl}`);\n    if (!request.ok) {\n      throw await ResponseError.fromResponse(request);\n    }\n\n    return await request.json();\n  }\n\n  /**\n   * Retrieve metadata about an entity.\n   *\n   * This method requests techdocs-backend which uses the catalog APIs to respond with filtered\n   * information required here.\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   */\n  async getEntityMetadata(\n    entityId: CompoundEntityRef,\n  ): Promise<TechDocsEntityMetadata> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const requestUrl = `${apiOrigin}/metadata/entity/${namespace}/${kind}/${name}`;\n\n    const request = await this.fetchApi.fetch(`${requestUrl}`);\n    if (!request.ok) {\n      throw await ResponseError.fromResponse(request);\n    }\n\n    return await request.json();\n  }\n}\n\n/**\n * API which talks to TechDocs storage to fetch files to render.\n *\n * @public\n */\nexport class TechDocsStorageClient implements TechDocsStorageApi {\n  public configApi: Config;\n  public discoveryApi: DiscoveryApi;\n  public identityApi: IdentityApi;\n  private fetchApi: FetchApi;\n\n  constructor(options: {\n    configApi: Config;\n    discoveryApi: DiscoveryApi;\n    identityApi: IdentityApi;\n    fetchApi: FetchApi;\n  }) {\n    this.configApi = options.configApi;\n    this.discoveryApi = options.discoveryApi;\n    this.identityApi = options.identityApi;\n    this.fetchApi = options.fetchApi;\n  }\n\n  async getApiOrigin(): Promise<string> {\n    return await this.discoveryApi.getBaseUrl('techdocs');\n  }\n\n  async getStorageUrl(): Promise<string> {\n    return (\n      this.configApi.getOptionalString('techdocs.storageUrl') ??\n      `${await this.discoveryApi.getBaseUrl('techdocs')}/static/docs`\n    );\n  }\n\n  async getBuilder(): Promise<string> {\n    return this.configApi.getString('techdocs.builder');\n  }\n\n  /**\n   * Fetch HTML content as text for an individual docs page in an entity's docs site.\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   * @param path - The unique path to an individual docs page e.g. overview/what-is-new\n   * @returns HTML content of the docs page as string\n   * @throws Throws error when the page is not found.\n   */\n  async getEntityDocs(\n    entityId: CompoundEntityRef,\n    path: string,\n  ): Promise<string> {\n    const { kind, namespace, name } = entityId;\n\n    const storageUrl = await this.getStorageUrl();\n    const url = `${storageUrl}/${namespace}/${kind}/${name}/${path}`;\n\n    const request = await this.fetchApi.fetch(\n      `${url.endsWith('/') ? url : `${url}/`}index.html`,\n    );\n\n    let errorMessage = '';\n    switch (request.status) {\n      case 404:\n        errorMessage = 'Page not found. ';\n        // path is empty for the home page of an entity's docs site\n        if (!path) {\n          errorMessage +=\n            'This could be because there is no index.md file in the root of the docs directory of this repository.';\n        }\n        throw new NotFoundError(errorMessage);\n      case 500:\n        errorMessage =\n          'Could not generate documentation or an error in the TechDocs backend. ';\n        throw new Error(errorMessage);\n      default:\n        // Do nothing\n        break;\n    }\n\n    return request.text();\n  }\n\n  /**\n   * Check if docs are on the latest version and trigger rebuild if not\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   * @param logHandler - Callback to receive log messages from the build process\n   * @returns Whether documents are currently synchronized to newest version\n   * @throws Throws error on error from sync endpoint in TechDocs Backend\n   */\n  async syncEntityDocs(\n    entityId: CompoundEntityRef,\n    logHandler: (line: string) => void = () => {},\n  ): Promise<SyncResult> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const url = `${apiOrigin}/sync/${namespace}/${kind}/${name}`;\n    const { token } = await this.identityApi.getCredentials();\n\n    return new Promise((resolve, reject) => {\n      // Polyfill is used to add support for custom headers and auth\n      const source = new EventSourcePolyfill(url, {\n        withCredentials: true,\n        headers: token ? { Authorization: `Bearer ${token}` } : {},\n      });\n\n      source.addEventListener('log', (e: any) => {\n        if (e.data) {\n          logHandler(JSON.parse(e.data));\n        }\n      });\n\n      source.addEventListener('finish', (e: any) => {\n        let updated: boolean = false;\n\n        if (e.data) {\n          ({ updated } = JSON.parse(e.data));\n        }\n\n        resolve(updated ? 'updated' : 'cached');\n      });\n\n      source.onerror = (e: any) => {\n        source.close();\n\n        switch (e.status) {\n          // the endpoint returned a 404 status\n          case 404:\n            reject(new NotFoundError(e.message));\n            return;\n\n          // also handles the event-stream close. the reject is ignored if the Promise was already\n          // resolved by a finish event.\n          default:\n            reject(new Error(e.data));\n            return;\n        }\n      };\n    });\n  }\n\n  async getBaseUrl(\n    oldBaseUrl: string,\n    entityId: CompoundEntityRef,\n    path: string,\n  ): Promise<string> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const newBaseUrl = `${apiOrigin}/static/docs/${namespace}/${kind}/${name}/${path}`;\n\n    return new URL(\n      oldBaseUrl,\n      newBaseUrl.endsWith('/') ? newBaseUrl : `${newBaseUrl}/`,\n    ).toString();\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createRouteRef } from '@backstage/core-plugin-api';\n\nexport const rootRouteRef = createRouteRef({\n  id: 'techdocs:index-page',\n});\n\nexport const rootDocsRouteRef = createRouteRef({\n  id: 'techdocs:reader-page',\n  params: ['namespace', 'kind', 'name'],\n});\n\nexport const rootCatalogDocsRouteRef = createRouteRef({\n  id: 'techdocs:catalog-reader-view',\n});\n"],"names":[],"mappings":"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"}