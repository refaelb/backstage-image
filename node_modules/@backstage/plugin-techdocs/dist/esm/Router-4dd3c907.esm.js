import React from 'react';
import { Routes, Route, useRoutes } from 'react-router-dom';
import { getCompoundEntityRef, parseEntityRef } from '@backstage/catalog-model';
import { techdocsStorageApiRef, techdocsApiRef } from '@backstage/plugin-techdocs-react';
import { a as TechDocsStorageClient, T as TechDocsClient, r as rootRouteRef, b as rootDocsRouteRef, c as rootCatalogDocsRouteRef } from './routes-691e552c.esm.js';
import { createPlugin, createApiFactory, configApiRef, discoveryApiRef, identityApiRef, fetchApiRef, createRoutableExtension } from '@backstage/core-plugin-api';
import { createSearchResultListItemExtension } from '@backstage/plugin-search-react';
import { d as TechDocsReaderPageSubheader, c as TechDocsReaderPageContent, f as TechDocsReaderPage$1 } from './TechDocsReaderPage-cbdbc148.esm.js';
import { c as TechDocsIndexPage$1 } from './TechDocsIndexPage-a43a1a1c.esm.js';
import { useEntity, MissingAnnotationEmptyState } from '@backstage/plugin-catalog-react';

const techdocsPlugin = createPlugin({
  id: "techdocs",
  apis: [
    createApiFactory({
      api: techdocsStorageApiRef,
      deps: {
        configApi: configApiRef,
        discoveryApi: discoveryApiRef,
        identityApi: identityApiRef,
        fetchApi: fetchApiRef
      },
      factory: ({ configApi, discoveryApi, identityApi, fetchApi }) => new TechDocsStorageClient({
        configApi,
        discoveryApi,
        identityApi,
        fetchApi
      })
    }),
    createApiFactory({
      api: techdocsApiRef,
      deps: {
        configApi: configApiRef,
        discoveryApi: discoveryApiRef,
        fetchApi: fetchApiRef
      },
      factory: ({ configApi, discoveryApi, fetchApi }) => new TechDocsClient({
        configApi,
        discoveryApi,
        fetchApi
      })
    })
  ],
  routes: {
    root: rootRouteRef,
    docRoot: rootDocsRouteRef,
    entityContent: rootCatalogDocsRouteRef
  }
});
const TechdocsPage = techdocsPlugin.provide(
  createRoutableExtension({
    name: "TechdocsPage",
    component: () => Promise.resolve().then(function () { return Router$1; }).then((m) => m.Router),
    mountPoint: rootRouteRef
  })
);
const EntityTechdocsContent = techdocsPlugin.provide(
  createRoutableExtension({
    name: "EntityTechdocsContent",
    component: () => Promise.resolve().then(function () { return Router$1; }).then((m) => m.EmbeddedDocsRouter),
    mountPoint: rootCatalogDocsRouteRef
  })
);
const TechDocsCustomHome = techdocsPlugin.provide(
  createRoutableExtension({
    name: "TechDocsCustomHome",
    component: () => import('./TechDocsCustomHome-114f3198.esm.js').then(
      (m) => m.TechDocsCustomHome
    ),
    mountPoint: rootRouteRef
  })
);
const TechDocsIndexPage = techdocsPlugin.provide(
  createRoutableExtension({
    name: "TechDocsIndexPage",
    component: () => import('./TechDocsIndexPage-a43a1a1c.esm.js').then(function (n) { return n.d; }).then(
      (m) => m.TechDocsIndexPage
    ),
    mountPoint: rootRouteRef
  })
);
const TechDocsReaderPage = techdocsPlugin.provide(
  createRoutableExtension({
    name: "TechDocsReaderPage",
    component: () => import('./index-25c38d4b.esm.js').then(
      (m) => m.TechDocsReaderPage
    ),
    mountPoint: rootDocsRouteRef
  })
);
const TechDocsSearchResultListItem = techdocsPlugin.provide(
  createSearchResultListItemExtension({
    name: "TechDocsSearchResultListItem",
    component: () => import('./TechDocsSearchResultListItem-4736f829.esm.js').then(
      (m) => m.TechDocsSearchResultListItem
    ),
    predicate: (result) => result.type === "techdocs"
  })
);

const TECHDOCS_EXTERNAL_ANNOTATION$1 = "backstage.io/techdocs-entity";
const EntityPageDocs = ({ entity }) => {
  var _a, _b;
  let entityRef = getCompoundEntityRef(entity);
  if ((_a = entity.metadata.annotations) == null ? void 0 : _a[TECHDOCS_EXTERNAL_ANNOTATION$1]) {
    try {
      entityRef = parseEntityRef(
        (_b = entity.metadata.annotations) == null ? void 0 : _b[TECHDOCS_EXTERNAL_ANNOTATION$1]
      );
    } catch {
    }
  }
  return /* @__PURE__ */ React.createElement(TechDocsReaderPage, { entityRef }, /* @__PURE__ */ React.createElement(TechDocsReaderPageSubheader, null), /* @__PURE__ */ React.createElement(TechDocsReaderPageContent, { withSearch: false }));
};

const TECHDOCS_ANNOTATION = "backstage.io/techdocs-ref";
const TECHDOCS_EXTERNAL_ANNOTATION = "backstage.io/techdocs-entity";
const isTechDocsAvailable = (entity) => {
  var _a, _b, _c, _d;
  return Boolean((_b = (_a = entity == null ? void 0 : entity.metadata) == null ? void 0 : _a.annotations) == null ? void 0 : _b[TECHDOCS_ANNOTATION]) || Boolean((_d = (_c = entity == null ? void 0 : entity.metadata) == null ? void 0 : _c.annotations) == null ? void 0 : _d[TECHDOCS_EXTERNAL_ANNOTATION]);
};
const Router = () => {
  return /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(Route, { path: "/", element: /* @__PURE__ */ React.createElement(TechDocsIndexPage$1, null) }), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: "/:namespace/:kind/:name/*",
      element: /* @__PURE__ */ React.createElement(TechDocsReaderPage$1, null)
    }
  ));
};
const EmbeddedDocsRouter = (props) => {
  var _a, _b;
  const { children } = props;
  const { entity } = useEntity();
  const element = useRoutes([
    {
      path: "/*",
      element: /* @__PURE__ */ React.createElement(EntityPageDocs, { entity }),
      children: [
        {
          path: "*",
          element: children
        }
      ]
    }
  ]);
  const projectId = ((_a = entity.metadata.annotations) == null ? void 0 : _a[TECHDOCS_ANNOTATION]) || ((_b = entity.metadata.annotations) == null ? void 0 : _b[TECHDOCS_EXTERNAL_ANNOTATION]);
  if (!projectId) {
    return /* @__PURE__ */ React.createElement(MissingAnnotationEmptyState, { annotation: [TECHDOCS_ANNOTATION] });
  }
  return element;
};

var Router$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  isTechDocsAvailable: isTechDocsAvailable,
  Router: Router,
  EmbeddedDocsRouter: EmbeddedDocsRouter
});

export { EntityTechdocsContent as E, Router as R, TechDocsCustomHome as T, TechDocsIndexPage as a, TechdocsPage as b, TechDocsReaderPage as c, TechDocsSearchResultListItem as d, EmbeddedDocsRouter as e, Router$1 as f, isTechDocsAvailable as i, techdocsPlugin as t };
//# sourceMappingURL=Router-4dd3c907.esm.js.map
