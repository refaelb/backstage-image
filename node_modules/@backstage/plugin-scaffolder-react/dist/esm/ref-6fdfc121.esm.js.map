{"version":3,"file":"ref-6fdfc121.esm.js","sources":["../../src/extensions/keys.ts","../../src/secrets/SecretsContext.tsx","../../src/api/ref.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const FIELD_EXTENSION_WRAPPER_KEY = 'scaffolder.extensions.wrapper.v1';\n/**\n * The key used to store the field extension data for any `<FieldExtension />` component\n */\nexport const FIELD_EXTENSION_KEY = 'scaffolder.extensions.field.v1';\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  createVersionedContext,\n  createVersionedValueMap,\n} from '@backstage/version-bridge';\nimport React, {\n  useState,\n  useCallback,\n  useContext,\n  PropsWithChildren,\n} from 'react';\n\n/**\n * The contents of the `SecretsContext`\n */\ntype SecretsContextContents = {\n  secrets: Record<string, string>;\n  setSecrets: React.Dispatch<React.SetStateAction<Record<string, string>>>;\n};\n\n/**\n * The context to hold the Secrets.\n */\nconst SecretsContext = createVersionedContext<{\n  1: SecretsContextContents;\n}>('secrets-context');\n\n/**\n * The Context Provider that holds the state for the secrets.\n * @public\n */\nexport const SecretsContextProvider = (props: PropsWithChildren<{}>) => {\n  const [secrets, setSecrets] = useState<Record<string, string>>({});\n\n  return (\n    <SecretsContext.Provider\n      value={createVersionedValueMap({ 1: { secrets, setSecrets } })}\n    >\n      {props.children}\n    </SecretsContext.Provider>\n  );\n};\n\n/**\n * The return type from the useTemplateSecrets hook.\n * @public\n */\nexport interface ScaffolderUseTemplateSecrets {\n  setSecrets: (input: Record<string, string>) => void;\n  secrets: Record<string, string>;\n}\n\n/**\n * Hook to access the secrets context to be able to set secrets that are\n * passed to the Scaffolder backend.\n * @public\n */\nexport const useTemplateSecrets = (): ScaffolderUseTemplateSecrets => {\n  const value = useContext(SecretsContext)?.atVersion(1);\n\n  if (!value) {\n    throw new Error(\n      'useTemplateSecrets must be used within a SecretsContextProvider',\n    );\n  }\n\n  const { setSecrets: updateSecrets, secrets = {} } = value;\n\n  const setSecrets = useCallback(\n    (input: Record<string, string>) => {\n      updateSecrets(currentSecrets => ({ ...currentSecrets, ...input }));\n    },\n    [updateSecrets],\n  );\n\n  return { setSecrets, secrets };\n};\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createApiRef } from '@backstage/core-plugin-api';\nimport { ScaffolderApi } from './types';\nimport { getOrCreateGlobalSingleton } from '@backstage/version-bridge';\n\n/** @public */\nexport const scaffolderApiRef = getOrCreateGlobalSingleton(\n  'scaffolder:scaffolder-api-ref',\n  () =>\n    createApiRef<ScaffolderApi>({\n      id: 'plugin.scaffolder.service',\n    }),\n);\n"],"names":[],"mappings":";;;;AAgBO,MAAM,2BAA8B,GAAA,mCAAA;AAIpC,MAAM,mBAAsB,GAAA;;ACiBnC,MAAM,cAAA,GAAiB,uBAEpB,iBAAiB,CAAA,CAAA;AAMP,MAAA,sBAAA,GAAyB,CAAC,KAAiC,KAAA;AACtE,EAAA,MAAM,CAAC,OAAS,EAAA,UAAU,CAAI,GAAA,QAAA,CAAiC,EAAE,CAAA,CAAA;AAEjE,EACE,uBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,cAAe,CAAA,QAAA;AAAA,IAAf;AAAA,MACC,KAAA,EAAO,wBAAwB,EAAE,CAAA,EAAG,EAAE,OAAS,EAAA,UAAA,IAAc,CAAA;AAAA,KAAA;AAAA,IAE5D,KAAM,CAAA,QAAA;AAAA,GACT,CAAA;AAEJ,EAAA;AAgBO,MAAM,qBAAqB,MAAoC;AAvEtE,EAAA,IAAA,EAAA,CAAA;AAwEE,EAAA,MAAM,KAAQ,GAAA,CAAA,EAAA,GAAA,UAAA,CAAW,cAAc,CAAA,KAAzB,mBAA4B,SAAU,CAAA,CAAA,CAAA,CAAA;AAEpD,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,iEAAA;AAAA,KACF,CAAA;AAAA,GACF;AAEA,EAAA,MAAM,EAAE,UAAY,EAAA,aAAA,EAAe,OAAU,GAAA,IAAO,GAAA,KAAA,CAAA;AAEpD,EAAA,MAAM,UAAa,GAAA,WAAA;AAAA,IACjB,CAAC,KAAkC,KAAA;AACjC,MAAA,aAAA,CAAc,qBAAmB,EAAE,GAAG,cAAgB,EAAA,GAAG,OAAQ,CAAA,CAAA,CAAA;AAAA,KACnE;AAAA,IACA,CAAC,aAAa,CAAA;AAAA,GAChB,CAAA;AAEA,EAAO,OAAA,EAAE,YAAY,OAAQ,EAAA,CAAA;AAC/B;;ACrEO,MAAM,gBAAmB,GAAA,0BAAA;AAAA,EAC9B,+BAAA;AAAA,EACA,MACE,YAA4B,CAAA;AAAA,IAC1B,EAAI,EAAA,2BAAA;AAAA,GACL,CAAA;AACL;;;;"}