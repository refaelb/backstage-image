{"version":3,"file":"index.cjs.js","sources":["../src/actions/gitHelpers.ts","../src/actions/helpers.ts","../src/actions/githubActionsDispatch.examples.ts","../src/actions/githubActionsDispatch.ts","../src/actions/githubIssuesLabel.examples.ts","../src/actions/githubIssuesLabel.ts","../src/actions/inputProperties.ts","../src/actions/outputProperties.ts","../src/actions/githubRepoCreate.examples.ts","../src/actions/githubRepoCreate.ts","../src/actions/githubRepoPush.examples.ts","../src/actions/githubRepoPush.ts","../src/actions/githubWebhook.examples.ts","../src/actions/githubWebhook.ts","../src/actions/githubDeployKey.examples.ts","../src/actions/githubDeployKey.ts","../src/actions/gitHubEnvironment.examples.ts","../src/actions/githubEnvironment.ts","../src/actions/githubPullRequest.examples.ts","../src/actions/githubPullRequest.ts","../src/actions/github.examples.ts","../src/actions/github.ts","../src/actions/githubAutolinks.examples.ts","../src/actions/githubAutolinks.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertError } from '@backstage/errors';\nimport { Octokit } from 'octokit';\nimport { Logger } from 'winston';\n\ntype BranchProtectionOptions = {\n  client: Octokit;\n  owner: string;\n  repoName: string;\n  logger: Logger;\n  requireCodeOwnerReviews: boolean;\n  requiredStatusCheckContexts?: string[];\n  bypassPullRequestAllowances?: {\n    users?: string[];\n    teams?: string[];\n    apps?: string[];\n  };\n  requiredApprovingReviewCount?: number;\n  restrictions?: {\n    users: string[];\n    teams: string[];\n    apps?: string[];\n  };\n  requireBranchesToBeUpToDate?: boolean;\n  requiredConversationResolution?: boolean;\n  defaultBranch?: string;\n  enforceAdmins?: boolean;\n  dismissStaleReviews?: boolean;\n  requiredCommitSigning?: boolean;\n};\n\nexport const enableBranchProtectionOnDefaultRepoBranch = async ({\n  repoName,\n  client,\n  owner,\n  logger,\n  requireCodeOwnerReviews,\n  bypassPullRequestAllowances,\n  requiredApprovingReviewCount,\n  restrictions,\n  requiredStatusCheckContexts = [],\n  requireBranchesToBeUpToDate = true,\n  requiredConversationResolution = false,\n  defaultBranch = 'master',\n  enforceAdmins = true,\n  dismissStaleReviews = false,\n  requiredCommitSigning = false,\n}: BranchProtectionOptions): Promise<void> => {\n  const tryOnce = async () => {\n    try {\n      await client.rest.repos.updateBranchProtection({\n        mediaType: {\n          /**\n           * ðŸ‘‡ we need this preview because allowing a custom\n           * reviewer count on branch protection is a preview\n           * feature\n           *\n           * More here: https://docs.github.com/en/rest/overview/api-previews#require-multiple-approving-reviews\n           */\n          previews: ['luke-cage-preview'],\n        },\n        owner,\n        repo: repoName,\n        branch: defaultBranch,\n        required_status_checks: {\n          strict: requireBranchesToBeUpToDate,\n          contexts: requiredStatusCheckContexts,\n        },\n        restrictions: restrictions ?? null,\n        enforce_admins: enforceAdmins,\n        required_pull_request_reviews: {\n          required_approving_review_count: requiredApprovingReviewCount,\n          require_code_owner_reviews: requireCodeOwnerReviews,\n          bypass_pull_request_allowances: bypassPullRequestAllowances,\n          dismiss_stale_reviews: dismissStaleReviews,\n        },\n        required_conversation_resolution: requiredConversationResolution,\n      });\n\n      if (requiredCommitSigning) {\n        await client.rest.repos.createCommitSignatureProtection({\n          owner,\n          repo: repoName,\n          branch: defaultBranch,\n        });\n      }\n    } catch (e) {\n      assertError(e);\n      if (\n        e.message.includes(\n          'Upgrade to GitHub Pro or make this repository public to enable this feature',\n        )\n      ) {\n        logger.warn(\n          'Branch protection was not enabled as it requires GitHub Pro for private repositories',\n        );\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  try {\n    await tryOnce();\n  } catch (e) {\n    if (!e.message.includes('Branch not found')) {\n      throw e;\n    }\n\n    // GitHub has eventual consistency. Fail silently, wait, and try again.\n    await new Promise(resolve => setTimeout(resolve, 600));\n    await tryOnce();\n  }\n};\n\nexport function entityRefToName(name: string): string {\n  return name.replace(/^.*[:/]/g, '');\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { assertError, InputError, NotFoundError } from '@backstage/errors';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { OctokitOptions } from '@octokit/core/dist-types/types';\nimport { Octokit } from 'octokit';\nimport { Logger } from 'winston';\n\nimport {\n  getRepoSourceDirectory,\n  initRepoAndPush,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\n\nimport Sodium from 'libsodium-wrappers';\nimport {\n  enableBranchProtectionOnDefaultRepoBranch,\n  entityRefToName,\n} from './gitHelpers';\n\nconst DEFAULT_TIMEOUT_MS = 60_000;\n\nexport async function getOctokitOptions(options: {\n  integrations: ScmIntegrationRegistry;\n  credentialsProvider?: GithubCredentialsProvider;\n  token?: string;\n  repoUrl: string;\n}): Promise<OctokitOptions> {\n  const { integrations, credentialsProvider, repoUrl, token } = options;\n  const { owner, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n  const requestOptions = {\n    // set timeout to 60 seconds\n    timeout: DEFAULT_TIMEOUT_MS,\n  };\n\n  if (!owner) {\n    throw new InputError(`No owner provided for repo ${repoUrl}`);\n  }\n\n  const integrationConfig = integrations.github.byHost(host)?.config;\n\n  if (!integrationConfig) {\n    throw new InputError(`No integration for host ${host}`);\n  }\n\n  // short circuit the `githubCredentialsProvider` if there is a token provided by the caller already\n  if (token) {\n    return {\n      auth: token,\n      baseUrl: integrationConfig.apiBaseUrl,\n      previews: ['nebula-preview'],\n      request: requestOptions,\n    };\n  }\n\n  const githubCredentialsProvider =\n    credentialsProvider ??\n    DefaultGithubCredentialsProvider.fromIntegrations(integrations);\n\n  // TODO(blam): Consider changing this API to take host and repo instead of repoUrl, as we end up parsing in this function\n  // and then parsing in the `getCredentials` function too the other side\n  const { token: credentialProviderToken } =\n    await githubCredentialsProvider.getCredentials({\n      url: `https://${host}/${encodeURIComponent(owner)}/${encodeURIComponent(\n        repo,\n      )}`,\n    });\n\n  if (!credentialProviderToken) {\n    throw new InputError(\n      `No token available for host: ${host}, with owner ${owner}, and repo ${repo}`,\n    );\n  }\n\n  return {\n    auth: credentialProviderToken,\n    baseUrl: integrationConfig.apiBaseUrl,\n    previews: ['nebula-preview'],\n  };\n}\n\nexport async function createGithubRepoWithCollaboratorsAndTopics(\n  client: Octokit,\n  repo: string,\n  owner: string,\n  repoVisibility: 'private' | 'internal' | 'public' | undefined,\n  description: string | undefined,\n  homepage: string | undefined,\n  deleteBranchOnMerge: boolean,\n  allowMergeCommit: boolean,\n  allowSquashMerge: boolean,\n  squashMergeCommitTitle: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE' | undefined,\n  squashMergeCommitMessage: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK' | undefined,\n  allowRebaseMerge: boolean,\n  allowAutoMerge: boolean,\n  access: string | undefined,\n  collaborators:\n    | (\n        | {\n            user: string;\n            access: string;\n          }\n        | {\n            team: string;\n            access: string;\n          }\n        | {\n            /** @deprecated This field is deprecated in favor of team */\n            username: string;\n            access: 'pull' | 'push' | 'admin' | 'maintain' | 'triage';\n          }\n      )[]\n    | undefined,\n  hasProjects: boolean | undefined,\n  hasWiki: boolean | undefined,\n  hasIssues: boolean | undefined,\n  topics: string[] | undefined,\n  repoVariables: { [key: string]: string } | undefined,\n  secrets: { [key: string]: string } | undefined,\n  logger: Logger,\n) {\n  // eslint-disable-next-line testing-library/no-await-sync-queries\n  const user = await client.rest.users.getByUsername({\n    username: owner,\n  });\n\n  if (access?.startsWith(`${owner}/`)) {\n    await validateAccessTeam(client, access);\n  }\n\n  const repoCreationPromise =\n    user.data.type === 'Organization'\n      ? client.rest.repos.createInOrg({\n          name: repo,\n          org: owner,\n          private: repoVisibility === 'private',\n          // @ts-ignore https://github.com/octokit/types.ts/issues/522\n          visibility: repoVisibility,\n          description: description,\n          delete_branch_on_merge: deleteBranchOnMerge,\n          allow_merge_commit: allowMergeCommit,\n          allow_squash_merge: allowSquashMerge,\n          squash_merge_commit_title: squashMergeCommitTitle,\n          squash_merge_commit_message: squashMergeCommitMessage,\n          allow_rebase_merge: allowRebaseMerge,\n          allow_auto_merge: allowAutoMerge,\n          homepage: homepage,\n          has_projects: hasProjects,\n          has_wiki: hasWiki,\n          has_issues: hasIssues,\n        })\n      : client.rest.repos.createForAuthenticatedUser({\n          name: repo,\n          private: repoVisibility === 'private',\n          description: description,\n          delete_branch_on_merge: deleteBranchOnMerge,\n          allow_merge_commit: allowMergeCommit,\n          allow_squash_merge: allowSquashMerge,\n          squash_merge_commit_title: squashMergeCommitTitle,\n          squash_merge_commit_message: squashMergeCommitMessage,\n          allow_rebase_merge: allowRebaseMerge,\n          allow_auto_merge: allowAutoMerge,\n          homepage: homepage,\n          has_projects: hasProjects,\n          has_wiki: hasWiki,\n          has_issues: hasIssues,\n        });\n\n  let newRepo;\n\n  try {\n    newRepo = (await repoCreationPromise).data;\n  } catch (e) {\n    assertError(e);\n    if (e.message === 'Resource not accessible by integration') {\n      logger.warn(\n        `The GitHub app or token provided may not have the required permissions to create the ${user.data.type} repository ${owner}/${repo}.`,\n      );\n    }\n    throw new Error(\n      `Failed to create the ${user.data.type} repository ${owner}/${repo}, ${e.message}`,\n    );\n  }\n\n  if (access?.startsWith(`${owner}/`)) {\n    const [, team] = access.split('/');\n    await client.rest.teams.addOrUpdateRepoPermissionsInOrg({\n      org: owner,\n      team_slug: team,\n      owner,\n      repo,\n      permission: 'admin',\n    });\n    // No need to add access if it's the person who owns the personal account\n  } else if (access && access !== owner) {\n    await client.rest.repos.addCollaborator({\n      owner,\n      repo,\n      username: access,\n      permission: 'admin',\n    });\n  }\n\n  if (collaborators) {\n    for (const collaborator of collaborators) {\n      try {\n        if ('user' in collaborator) {\n          await client.rest.repos.addCollaborator({\n            owner,\n            repo,\n            username: entityRefToName(collaborator.user),\n            permission: collaborator.access,\n          });\n        } else if ('team' in collaborator) {\n          await client.rest.teams.addOrUpdateRepoPermissionsInOrg({\n            org: owner,\n            team_slug: entityRefToName(collaborator.team),\n            owner,\n            repo,\n            permission: collaborator.access,\n          });\n        }\n      } catch (e) {\n        assertError(e);\n        const name = extractCollaboratorName(collaborator);\n        logger.warn(\n          `Skipping ${collaborator.access} access for ${name}, ${e.message}`,\n        );\n      }\n    }\n  }\n\n  if (topics) {\n    try {\n      await client.rest.repos.replaceAllTopics({\n        owner,\n        repo,\n        names: topics.map(t => t.toLowerCase()),\n      });\n    } catch (e) {\n      assertError(e);\n      logger.warn(`Skipping topics ${topics.join(' ')}, ${e.message}`);\n    }\n  }\n\n  for (const [key, value] of Object.entries(repoVariables ?? {})) {\n    await client.rest.actions.createRepoVariable({\n      owner,\n      repo,\n      name: key,\n      value: value,\n    });\n  }\n\n  if (secrets) {\n    const publicKeyResponse = await client.rest.actions.getRepoPublicKey({\n      owner,\n      repo,\n    });\n\n    await Sodium.ready;\n    const binaryKey = Sodium.from_base64(\n      publicKeyResponse.data.key,\n      Sodium.base64_variants.ORIGINAL,\n    );\n    for (const [key, value] of Object.entries(secrets)) {\n      const binarySecret = Sodium.from_string(value);\n      const encryptedBinarySecret = Sodium.crypto_box_seal(\n        binarySecret,\n        binaryKey,\n      );\n      const encryptedBase64Secret = Sodium.to_base64(\n        encryptedBinarySecret,\n        Sodium.base64_variants.ORIGINAL,\n      );\n\n      await client.rest.actions.createOrUpdateRepoSecret({\n        owner,\n        repo,\n        secret_name: key,\n        encrypted_value: encryptedBase64Secret,\n        key_id: publicKeyResponse.data.key_id,\n      });\n    }\n  }\n\n  return newRepo;\n}\n\nexport async function initRepoPushAndProtect(\n  remoteUrl: string,\n  password: string,\n  workspacePath: string,\n  sourcePath: string | undefined,\n  defaultBranch: string,\n  protectDefaultBranch: boolean,\n  protectEnforceAdmins: boolean,\n  owner: string,\n  client: Octokit,\n  repo: string,\n  requireCodeOwnerReviews: boolean,\n  bypassPullRequestAllowances:\n    | {\n        users?: string[];\n        teams?: string[];\n        apps?: string[];\n      }\n    | undefined,\n  requiredApprovingReviewCount: number,\n  restrictions:\n    | {\n        users: string[];\n        teams: string[];\n        apps?: string[];\n      }\n    | undefined,\n  requiredStatusCheckContexts: string[],\n  requireBranchesToBeUpToDate: boolean,\n  requiredConversationResolution: boolean,\n  config: Config,\n  logger: any,\n  gitCommitMessage?: string,\n  gitAuthorName?: string,\n  gitAuthorEmail?: string,\n  dismissStaleReviews?: boolean,\n  requiredCommitSigning?: boolean,\n): Promise<{ commitHash: string }> {\n  const gitAuthorInfo = {\n    name: gitAuthorName\n      ? gitAuthorName\n      : config.getOptionalString('scaffolder.defaultAuthor.name'),\n    email: gitAuthorEmail\n      ? gitAuthorEmail\n      : config.getOptionalString('scaffolder.defaultAuthor.email'),\n  };\n\n  const commitMessage =\n    getGitCommitMessage(gitCommitMessage, config) || 'initial commit';\n\n  const commitResult = await initRepoAndPush({\n    dir: getRepoSourceDirectory(workspacePath, sourcePath),\n    remoteUrl,\n    defaultBranch,\n    auth: {\n      username: 'x-access-token',\n      password,\n    },\n    logger,\n    commitMessage,\n    gitAuthorInfo,\n  });\n\n  if (protectDefaultBranch) {\n    try {\n      await enableBranchProtectionOnDefaultRepoBranch({\n        owner,\n        client,\n        repoName: repo,\n        logger,\n        defaultBranch,\n        bypassPullRequestAllowances,\n        requiredApprovingReviewCount,\n        restrictions,\n        requireCodeOwnerReviews,\n        requiredStatusCheckContexts,\n        requireBranchesToBeUpToDate,\n        requiredConversationResolution,\n        enforceAdmins: protectEnforceAdmins,\n        dismissStaleReviews: dismissStaleReviews,\n        requiredCommitSigning: requiredCommitSigning,\n      });\n    } catch (e) {\n      assertError(e);\n      logger.warn(\n        `Skipping: default branch protection on '${repo}', ${e.message}`,\n      );\n    }\n  }\n\n  return { commitHash: commitResult.commitHash };\n}\n\nfunction extractCollaboratorName(\n  collaborator: { user: string } | { team: string } | { username: string },\n) {\n  if ('username' in collaborator) return collaborator.username;\n  if ('user' in collaborator) return collaborator.user;\n  return collaborator.team;\n}\n\nasync function validateAccessTeam(client: Octokit, access: string) {\n  const [org, team_slug] = access.split('/');\n  try {\n    // Below rule disabled because of a 'getByName' check for a different library\n    // incorrectly triggers here.\n    // eslint-disable-next-line testing-library/no-await-sync-queries\n    await client.rest.teams.getByName({\n      org,\n      team_slug,\n    });\n  } catch (e) {\n    if (e.response.data.message === 'Not Found') {\n      const message = `Received 'Not Found' from the API; one of org:\n        ${org} or team: ${team_slug} was not found within GitHub.`;\n      throw new NotFoundError(message);\n    }\n  }\n}\n\nexport function getGitCommitMessage(\n  gitCommitMessage: string | undefined,\n  config: Config,\n): string | undefined {\n  return gitCommitMessage\n    ? gitCommitMessage\n    : config.getOptionalString('scaffolder.defaultCommitMessage');\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'GitHub Action Workflow Without Inputs.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:actions:dispatch',\n          name: 'Dispatch Github Action Workflow',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            workflowId: 'WORKFLOW_ID',\n            branchOrTagName: 'main',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'GitHub Action Workflow With Inputs',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:actions:dispatch',\n          name: 'Dispatch Github Action Workflow with inputs',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            workflowId: 'WORKFLOW_ID',\n            branchOrTagName: 'main',\n            workflowInputs: {\n              input1: 'value1',\n              input2: 'value2',\n            },\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'GitHub Action Workflow With Custom Token',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:actions:dispatch',\n          name: 'Dispatch GitHub Action Workflow (custom token)',\n          input: {\n            repoUrl: 'github.com?repo=reponame&owner=owner',\n            workflowId: 'WORKFLOW_ID',\n            branchOrTagName: 'release-1.0',\n            token: '${{ secrets.MY_CUSTOM_TOKEN }}',\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { Octokit } from 'octokit';\nimport { getOctokitOptions } from './helpers';\nimport { examples } from './githubActionsDispatch.examples';\n\n/**\n * Creates a new action that dispatches a GitHub Action workflow for a given branch or tag.\n * @public\n */\nexport function createGithubActionsDispatchAction(options: {\n  integrations: ScmIntegrations;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    workflowId: string;\n    branchOrTagName: string;\n    workflowInputs?: { [key: string]: string };\n    token?: string;\n  }>({\n    id: 'github:actions:dispatch',\n    description:\n      'Dispatches a GitHub Action workflow for a given branch or tag',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'workflowId', 'branchOrTagName'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          workflowId: {\n            title: 'Workflow ID',\n            description: 'The GitHub Action Workflow filename',\n            type: 'string',\n          },\n          branchOrTagName: {\n            title: 'Branch or Tag name',\n            description:\n              'The git branch or tag name used to dispatch the workflow',\n            type: 'string',\n          },\n          workflowInputs: {\n            title: 'Workflow Inputs',\n            description:\n              'Inputs keys and values to send to GitHub Action configured on the workflow file. The maximum number of properties is 10. ',\n            type: 'object',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The GITHUB_TOKEN to use for authorization to GitHub',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        workflowId,\n        branchOrTagName,\n        workflowInputs,\n        token: providedToken,\n      } = ctx.input;\n\n      ctx.logger.info(\n        `Dispatching workflow ${workflowId} for repo ${repoUrl} on ${branchOrTagName}`,\n      );\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const client = new Octokit(\n        await getOctokitOptions({\n          integrations,\n          repoUrl,\n          credentialsProvider: githubCredentialsProvider,\n          token: providedToken,\n        }),\n      );\n\n      await client.rest.actions.createWorkflowDispatch({\n        owner,\n        repo,\n        workflow_id: workflowId,\n        ref: branchOrTagName,\n        inputs: workflowInputs,\n      });\n\n      ctx.logger.info(`Workflow ${workflowId} dispatched successfully`);\n    },\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'Add labels to pull request or issue',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:issues:label',\n          name: 'Add labels to pull request or issue',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            number: '1',\n            labels: ['bug'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Add labels to pull request or issue with specific token',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:issues:label',\n          name: 'Add labels to pull request or issue with token',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            number: '1',\n            labels: ['bug', 'documentation'],\n            token: 'gph_YourGitHubToken',\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { assertError, InputError } from '@backstage/errors';\nimport { Octokit } from 'octokit';\nimport { getOctokitOptions } from './helpers';\nimport { examples } from './githubIssuesLabel.examples';\n\n/**\n * Adds labels to a pull request or issue on GitHub\n * @public\n */\nexport function createGithubIssuesLabelAction(options: {\n  integrations: ScmIntegrationRegistry;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    number: number;\n    labels: string[];\n    token?: string;\n  }>({\n    id: 'github:issues:label',\n    description: 'Adds labels to a pull request or issue on GitHub.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'number', 'labels'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          number: {\n            title: 'Pull Request or issue number',\n            description: 'The pull request or issue number to add labels to',\n            type: 'number',\n          },\n          labels: {\n            title: 'Labels',\n            description: 'The labels to add to the pull request or issue',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The GITHUB_TOKEN to use for authorization to GitHub',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { repoUrl, number, labels, token: providedToken } = ctx.input;\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n      ctx.logger.info(`Adding labels to ${number} issue on repo ${repo}`);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const client = new Octokit(\n        await getOctokitOptions({\n          integrations,\n          credentialsProvider: githubCredentialsProvider,\n          repoUrl: repoUrl,\n          token: providedToken,\n        }),\n      );\n\n      try {\n        await client.rest.issues.addLabels({\n          owner,\n          repo,\n          issue_number: number,\n          labels,\n        });\n      } catch (e) {\n        assertError(e);\n        ctx.logger.warn(\n          `Failed: adding labels to issue: '${number}' on repo: '${repo}', ${e.message}`,\n        );\n      }\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst repoUrl = {\n  title: 'Repository Location',\n  description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n  type: 'string',\n};\nconst description = {\n  title: 'Repository Description',\n  type: 'string',\n};\nconst homepage = {\n  title: 'Repository Homepage',\n  type: 'string',\n};\nconst access = {\n  title: 'Repository Access',\n  description: `Sets an admin collaborator on the repository. Can either be a user reference different from 'owner' in 'repoUrl' or team reference, eg. 'org/team-name'`,\n  type: 'string',\n};\nconst requireCodeOwnerReviews = {\n  title: 'Require CODEOWNER Reviews?',\n  description:\n    'Require an approved review in PR including files with a designated Code Owner',\n  type: 'boolean',\n};\nconst dismissStaleReviews = {\n  title: 'Dismiss Stale Reviews',\n  description:\n    'New reviewable commits pushed to a matching branch will dismiss pull request review approvals.',\n  type: 'boolean',\n};\nconst requiredStatusCheckContexts = {\n  title: 'Required Status Check Contexts',\n  description:\n    'The list of status checks to require in order to merge into this branch',\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\nconst requireBranchesToBeUpToDate = {\n  title: 'Require Branches To Be Up To Date?',\n  description: `Require branches to be up to date before merging. The default value is 'true'`,\n  type: 'boolean',\n};\nconst requiredConversationResolution = {\n  title: 'Required Conversation Resolution',\n  description:\n    'Requires all conversations on code to be resolved before a pull request can be merged into this branch',\n  type: 'boolean',\n};\nconst repoVisibility = {\n  title: 'Repository Visibility',\n  type: 'string',\n  enum: ['private', 'public', 'internal'],\n};\nconst deleteBranchOnMerge = {\n  title: 'Delete Branch On Merge',\n  type: 'boolean',\n  description: `Delete the branch after merging the PR. The default value is 'false'`,\n};\nconst gitAuthorName = {\n  title: 'Default Author Name',\n  type: 'string',\n  description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n};\nconst gitAuthorEmail = {\n  title: 'Default Author Email',\n  type: 'string',\n  description: `Sets the default author email for the commit.`,\n};\nconst allowMergeCommit = {\n  title: 'Allow Merge Commits',\n  type: 'boolean',\n  description: `Allow merge commits. The default value is 'true'`,\n};\nconst allowSquashMerge = {\n  title: 'Allow Squash Merges',\n  type: 'boolean',\n  description: `Allow squash merges. The default value is 'true'`,\n};\nconst squashMergeCommitTitle = {\n  title: 'Default squash merge commit title',\n  enum: ['PR_TITLE', 'COMMIT_OR_PR_TITLE'],\n  description: `Sets the default value for a squash merge commit title. The default value is 'COMMIT_OR_PR_TITLE'`,\n};\nconst squashMergeCommitMessage = {\n  title: 'Default squash merge commit message',\n  enum: ['PR_BODY', 'COMMIT_MESSAGES', 'BLANK'],\n  description: `Sets the default value for a squash merge commit message. The default value is 'COMMIT_MESSAGES'`,\n};\n\nconst allowRebaseMerge = {\n  title: 'Allow Rebase Merges',\n  type: 'boolean',\n  description: `Allow rebase merges. The default value is 'true'`,\n};\nconst allowAutoMerge = {\n  title: 'Allow Auto Merges',\n  type: 'boolean',\n  description: `Allow individual PRs to merge automatically when all merge requirements are met. The default value is 'false'`,\n};\nconst collaborators = {\n  title: 'Collaborators',\n  description: 'Provide additional users or teams with permissions',\n  type: 'array',\n  items: {\n    type: 'object',\n    additionalProperties: false,\n    required: ['access'],\n    properties: {\n      access: {\n        type: 'string',\n        description: 'The type of access for the user',\n      },\n      user: {\n        type: 'string',\n        description:\n          'The name of the user that will be added as a collaborator',\n      },\n      team: {\n        type: 'string',\n        description:\n          'The name of the team that will be added as a collaborator',\n      },\n    },\n    oneOf: [{ required: ['user'] }, { required: ['team'] }],\n  },\n};\nconst hasProjects = {\n  title: 'Enable projects',\n  type: 'boolean',\n  description: `Enable projects for the repository. The default value is 'true' unless the organization has disabled repository projects`,\n};\nconst hasWiki = {\n  title: 'Enable the wiki',\n  type: 'boolean',\n  description: `Enable the wiki for the repository. The default value is 'true'`,\n};\nconst hasIssues = {\n  title: 'Enable issues',\n  type: 'boolean',\n  description: `Enable issues for the repository. The default value is 'true'`,\n};\nconst token = {\n  title: 'Authentication Token',\n  type: 'string',\n  description: 'The token to use for authorization to GitHub',\n};\nconst topics = {\n  title: 'Topics',\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\nconst defaultBranch = {\n  title: 'Default Branch',\n  type: 'string',\n  description: `Sets the default branch on the repository. The default value is 'master'`,\n};\nconst protectDefaultBranch = {\n  title: 'Protect Default Branch',\n  type: 'boolean',\n  description: `Protect the default branch after creating the repository. The default value is 'true'`,\n};\nconst protectEnforceAdmins = {\n  title: 'Enforce Admins On Protected Branches',\n  type: 'boolean',\n  description: `Enforce admins to adhere to default branch protection. The default value is 'true'`,\n};\n\nconst bypassPullRequestAllowances = {\n  title: 'Bypass pull request requirements',\n  description:\n    'Allow specific users, teams, or apps to bypass pull request requirements.',\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    apps: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n    users: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n    teams: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n  },\n};\n\nconst gitCommitMessage = {\n  title: 'Git Commit Message',\n  type: 'string',\n  description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n};\nconst sourcePath = {\n  title: 'Source Path',\n  description:\n    'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n  type: 'string',\n};\n\nconst requiredApprovingReviewCount = {\n  title: 'Required approving review count',\n  type: 'number',\n  description: `Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. Defaults to 1.`,\n};\n\nconst restrictions = {\n  title: 'Restrict who can push to the protected branch',\n  description:\n    'Restrict who can push to the protected branch. User, app, and team restrictions are only available for organization-owned repositories.',\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    apps: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n    users: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n    teams: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n  },\n};\n\nconst requiredCommitSigning = {\n  title: 'Require commit signing',\n  type: 'boolean',\n  description: `Require commit signing so that you must sign commits on this branch.`,\n};\n\nconst repoVariables = {\n  title: 'Repository Variables',\n  description: `Variables attached to the repository`,\n  type: 'object',\n};\n\nconst secrets = {\n  title: 'Repository Secrets',\n  description: `Secrets attached to the repository`,\n  type: 'object',\n};\n\nexport { access };\nexport { allowMergeCommit };\nexport { allowRebaseMerge };\nexport { allowSquashMerge };\nexport { squashMergeCommitTitle };\nexport { squashMergeCommitMessage };\nexport { allowAutoMerge };\nexport { collaborators };\nexport { defaultBranch };\nexport { deleteBranchOnMerge };\nexport { description };\nexport { gitAuthorEmail };\nexport { gitAuthorName };\nexport { gitCommitMessage };\nexport { homepage };\nexport { protectDefaultBranch };\nexport { protectEnforceAdmins };\nexport { bypassPullRequestAllowances };\nexport { requiredApprovingReviewCount };\nexport { restrictions };\nexport { repoUrl };\nexport { repoVisibility };\nexport { requireCodeOwnerReviews };\nexport { dismissStaleReviews };\nexport { requiredStatusCheckContexts };\nexport { requireBranchesToBeUpToDate };\nexport { requiredConversationResolution };\nexport { hasProjects };\nexport { hasIssues };\nexport { hasWiki };\nexport { sourcePath };\nexport { token };\nexport { topics };\nexport { requiredCommitSigning };\nexport { repoVariables };\nexport { secrets };\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst remoteUrl = {\n  title: 'A URL to the repository with the provider',\n  type: 'string',\n};\nconst repoContentsUrl = {\n  title: 'A URL to the root of the repository',\n  type: 'string',\n};\n\nconst commitHash = {\n  title: 'The git commit hash of the initial commit',\n  type: 'string',\n};\n\nexport { remoteUrl };\nexport { repoContentsUrl };\nexport { commitHash };\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'Creates a GitHub repository with default configuration.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Add a description.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with a description',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            description: 'My new repository',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Disable wiki and issues.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository without wiki and issues',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            hasIssues: false,\n            hasWiki: false,\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { Octokit } from 'octokit';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport {\n  createGithubRepoWithCollaboratorsAndTopics,\n  getOctokitOptions,\n} from './helpers';\nimport * as inputProps from './inputProperties';\nimport * as outputProps from './outputProperties';\nimport { examples } from './githubRepoCreate.examples';\n\n/**\n * Creates a new action that initializes a git repository\n *\n * @public\n */\nexport function createGithubRepoCreateAction(options: {\n  integrations: ScmIntegrationRegistry;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    homepage?: string;\n    access?: string;\n    deleteBranchOnMerge?: boolean;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    allowRebaseMerge?: boolean;\n    allowSquashMerge?: boolean;\n    squashMergeCommitTitle?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';\n    squashMergeCommitMessage?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';\n    allowMergeCommit?: boolean;\n    allowAutoMerge?: boolean;\n    requireCodeOwnerReviews?: boolean;\n    bypassPullRequestAllowances?: {\n      users?: string[];\n      teams?: string[];\n      apps?: string[];\n    };\n    requiredApprovingReviewCount?: number;\n    restrictions?: {\n      users: string[];\n      teams: string[];\n      apps?: string[];\n    };\n    requiredStatusCheckContexts?: string[];\n    requireBranchesToBeUpToDate?: boolean;\n    requiredConversationResolution?: boolean;\n    repoVisibility?: 'private' | 'internal' | 'public';\n    collaborators?: Array<\n      | {\n          user: string;\n          access: string;\n        }\n      | {\n          team: string;\n          access: string;\n        }\n      | {\n          /** @deprecated This field is deprecated in favor of team */\n          username: string;\n          access: 'pull' | 'push' | 'admin' | 'maintain' | 'triage';\n        }\n    >;\n    hasProjects?: boolean;\n    hasWiki?: boolean;\n    hasIssues?: boolean;\n    token?: string;\n    topics?: string[];\n    repoVariables?: { [key: string]: string };\n    secrets?: { [key: string]: string };\n    requireCommitSigning?: boolean;\n  }>({\n    id: 'github:repo:create',\n    description: 'Creates a GitHub repository.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: inputProps.repoUrl,\n          description: inputProps.description,\n          homepage: inputProps.homepage,\n          access: inputProps.access,\n          requireCodeOwnerReviews: inputProps.requireCodeOwnerReviews,\n          bypassPullRequestAllowances: inputProps.bypassPullRequestAllowances,\n          requiredApprovingReviewCount: inputProps.requiredApprovingReviewCount,\n          restrictions: inputProps.restrictions,\n          requiredStatusCheckContexts: inputProps.requiredStatusCheckContexts,\n          requireBranchesToBeUpToDate: inputProps.requireBranchesToBeUpToDate,\n          requiredConversationResolution:\n            inputProps.requiredConversationResolution,\n          repoVisibility: inputProps.repoVisibility,\n          deleteBranchOnMerge: inputProps.deleteBranchOnMerge,\n          allowMergeCommit: inputProps.allowMergeCommit,\n          allowSquashMerge: inputProps.allowSquashMerge,\n          squashMergeCommitTitle: inputProps.squashMergeCommitTitle,\n          squashMergeCommitMessage: inputProps.squashMergeCommitMessage,\n          allowRebaseMerge: inputProps.allowRebaseMerge,\n          allowAutoMerge: inputProps.allowAutoMerge,\n          collaborators: inputProps.collaborators,\n          hasProjects: inputProps.hasProjects,\n          hasWiki: inputProps.hasWiki,\n          hasIssues: inputProps.hasIssues,\n          token: inputProps.token,\n          topics: inputProps.topics,\n          repoVariables: inputProps.repoVariables,\n          secrets: inputProps.secrets,\n          requiredCommitSigning: inputProps.requiredCommitSigning,\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: outputProps.remoteUrl,\n          repoContentsUrl: outputProps.repoContentsUrl,\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        homepage,\n        access,\n        repoVisibility = 'private',\n        deleteBranchOnMerge = false,\n        allowMergeCommit = true,\n        allowSquashMerge = true,\n        squashMergeCommitTitle = 'COMMIT_OR_PR_TITLE',\n        squashMergeCommitMessage = 'COMMIT_MESSAGES',\n        allowRebaseMerge = true,\n        allowAutoMerge = false,\n        collaborators,\n        hasProjects = undefined,\n        hasWiki = undefined,\n        hasIssues = undefined,\n        topics,\n        repoVariables,\n        secrets,\n        token: providedToken,\n      } = ctx.input;\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        token: providedToken,\n        repoUrl: repoUrl,\n      });\n      const client = new Octokit(octokitOptions);\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const newRepo = await createGithubRepoWithCollaboratorsAndTopics(\n        client,\n        repo,\n        owner,\n        repoVisibility,\n        description,\n        homepage,\n        deleteBranchOnMerge,\n        allowMergeCommit,\n        allowSquashMerge,\n        squashMergeCommitTitle,\n        squashMergeCommitMessage,\n        allowRebaseMerge,\n        allowAutoMerge,\n        access,\n        collaborators,\n        hasProjects,\n        hasWiki,\n        hasIssues,\n        topics,\n        repoVariables,\n        secrets,\n        ctx.logger,\n      );\n\n      ctx.output('remoteUrl', newRepo.clone_url);\n    },\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'Setup repo with no modifications to branch protection rules',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:push',\n          name: 'Create test repo with testuser as owner.',\n          input: {\n            repoUrl: 'github.com?repo=test&owner=testuser',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Setup repo with required codeowners check',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:push',\n          name: 'Require codeowner branch protection rule',\n          input: {\n            repoUrl: 'github.com?repo=reponame&owner=owner',\n            requireCodeOwnerReviews: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Change the default required number of approvals',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:push',\n          name: 'Require two approvals before merging',\n          input: {\n            repoUrl: 'github.com?repo=reponame&owner=owner',\n            requiredApprovingReviewCount: 2,\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { Octokit } from 'octokit';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { getOctokitOptions, initRepoPushAndProtect } from './helpers';\nimport * as inputProps from './inputProperties';\nimport * as outputProps from './outputProperties';\nimport { examples } from './githubRepoPush.examples';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to GitHub.\n *\n * @public\n */\nexport function createGithubRepoPushAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, config, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    defaultBranch?: string;\n    protectDefaultBranch?: boolean;\n    protectEnforceAdmins?: boolean;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    requireCodeOwnerReviews?: boolean;\n    dismissStaleReviews?: boolean;\n    bypassPullRequestAllowances?:\n      | {\n          users?: string[];\n          teams?: string[];\n          apps?: string[];\n        }\n      | undefined;\n    requiredApprovingReviewCount?: number;\n    restrictions?:\n      | {\n          users: string[];\n          teams: string[];\n          apps?: string[];\n        }\n      | undefined;\n    requiredStatusCheckContexts?: string[];\n    requireBranchesToBeUpToDate?: boolean;\n    requiredConversationResolution?: boolean;\n    sourcePath?: string;\n    token?: string;\n    requiredCommitSigning?: boolean;\n  }>({\n    id: 'github:repo:push',\n    description:\n      'Initializes a git repository of contents in workspace and publishes it to GitHub.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: inputProps.repoUrl,\n          requireCodeOwnerReviews: inputProps.requireCodeOwnerReviews,\n          dismissStaleReviews: inputProps.dismissStaleReviews,\n          requiredStatusCheckContexts: inputProps.requiredStatusCheckContexts,\n          bypassPullRequestAllowances: inputProps.bypassPullRequestAllowances,\n          requiredApprovingReviewCount: inputProps.requiredApprovingReviewCount,\n          restrictions: inputProps.restrictions,\n          requireBranchesToBeUpToDate: inputProps.requireBranchesToBeUpToDate,\n          requiredConversationResolution:\n            inputProps.requiredConversationResolution,\n          defaultBranch: inputProps.defaultBranch,\n          protectDefaultBranch: inputProps.protectDefaultBranch,\n          protectEnforceAdmins: inputProps.protectEnforceAdmins,\n          gitCommitMessage: inputProps.gitCommitMessage,\n          gitAuthorName: inputProps.gitAuthorName,\n          gitAuthorEmail: inputProps.gitAuthorEmail,\n          sourcePath: inputProps.sourcePath,\n          token: inputProps.token,\n          requiredCommitSigning: inputProps.requiredCommitSigning,\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: outputProps.remoteUrl,\n          repoContentsUrl: outputProps.repoContentsUrl,\n          commitHash: outputProps.commitHash,\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        defaultBranch = 'master',\n        protectDefaultBranch = true,\n        protectEnforceAdmins = true,\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n        requireCodeOwnerReviews = false,\n        dismissStaleReviews = false,\n        bypassPullRequestAllowances,\n        requiredApprovingReviewCount = 1,\n        restrictions,\n        requiredStatusCheckContexts = [],\n        requireBranchesToBeUpToDate = true,\n        requiredConversationResolution = false,\n        token: providedToken,\n        requiredCommitSigning = false,\n      } = ctx.input;\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        token: providedToken,\n        repoUrl,\n      });\n\n      const client = new Octokit(octokitOptions);\n\n      const targetRepo = await client.rest.repos.get({ owner, repo });\n\n      const remoteUrl = targetRepo.data.clone_url;\n      const repoContentsUrl = `${targetRepo.data.html_url}/blob/${defaultBranch}`;\n\n      const { commitHash } = await initRepoPushAndProtect(\n        remoteUrl,\n        octokitOptions.auth,\n        ctx.workspacePath,\n        ctx.input.sourcePath,\n        defaultBranch,\n        protectDefaultBranch,\n        protectEnforceAdmins,\n        owner,\n        client,\n        repo,\n        requireCodeOwnerReviews,\n        bypassPullRequestAllowances,\n        requiredApprovingReviewCount,\n        restrictions,\n        requiredStatusCheckContexts,\n        requireBranchesToBeUpToDate,\n        requiredConversationResolution,\n        config,\n        ctx.logger,\n        gitCommitMessage,\n        gitAuthorName,\n        gitAuthorEmail,\n        dismissStaleReviews,\n        requiredCommitSigning,\n      );\n\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n      ctx.output('commitHash', commitHash);\n    },\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'Create a GitHub webhook for a repository',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:webhook',\n          name: 'Create GitHub Webhook',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            webhookUrl: 'https://example.com/my-webhook',\n            webhookSecret: 'mysecret',\n            events: ['push'],\n            active: true,\n            contentType: 'json',\n            insecureSsl: false,\n            token: 'my-github-token',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a GitHub webhook with minimal configuration',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:webhook',\n          name: 'Create GitHub Webhook',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            webhookUrl: 'https://example.com/my-webhook',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a GitHub webhook with custom events',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:webhook',\n          name: 'Create GitHub Webhook',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            webhookUrl: 'https://example.com/my-webhook',\n            events: ['push', 'pull_request'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a GitHub webhook with JSON content type',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:webhook',\n          name: 'Create GitHub Webhook',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            webhookUrl: 'https://example.com/my-webhook',\n            contentType: 'json',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a GitHub webhook with insecure SSL',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:webhook',\n          name: 'Create GitHub Webhook',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            webhookUrl: 'https://example.com/my-webhook',\n            insecureSsl: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create an inactive GitHub webhook',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:webhook',\n          name: 'Create GitHub Webhook',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            webhookUrl: 'https://example.com/my-webhook',\n            active: false,\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { emitterEventNames } from '@octokit/webhooks';\nimport { assertError, InputError } from '@backstage/errors';\nimport { Octokit } from 'octokit';\nimport { getOctokitOptions } from './helpers';\nimport { examples } from './githubWebhook.examples';\n\n/**\n * Creates new action that creates a webhook for a repository on GitHub.\n * @public\n */\nexport function createGithubWebhookAction(options: {\n  integrations: ScmIntegrationRegistry;\n  defaultWebhookSecret?: string;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, defaultWebhookSecret, githubCredentialsProvider } =\n    options;\n\n  const eventNames = emitterEventNames.filter(event => !event.includes('.'));\n\n  return createTemplateAction<{\n    repoUrl: string;\n    webhookUrl: string;\n    webhookSecret?: string;\n    events?: string[];\n    active?: boolean;\n    contentType?: 'form' | 'json';\n    insecureSsl?: boolean;\n    token?: string;\n  }>({\n    id: 'github:webhook',\n    description: 'Creates webhook for a repository on GitHub.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'webhookUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          webhookUrl: {\n            title: 'Webhook URL',\n            description: 'The URL to which the payloads will be delivered',\n            type: 'string',\n          },\n          webhookSecret: {\n            title: 'Webhook Secret',\n            description:\n              'Webhook secret value. The default can be provided internally in action creation',\n            type: 'string',\n          },\n          events: {\n            title: 'Triggering Events',\n            description:\n              'Determines what events the hook is triggered for. Default: push',\n            type: 'array',\n            oneOf: [\n              {\n                items: {\n                  type: 'string',\n                  enum: eventNames,\n                },\n              },\n              {\n                items: {\n                  type: 'string',\n                  const: '*',\n                },\n              },\n            ],\n          },\n          active: {\n            title: 'Active',\n            type: 'boolean',\n            description: `Determines if notifications are sent when the webhook is triggered. Default: true`,\n          },\n          contentType: {\n            title: 'Content Type',\n            type: 'string',\n            enum: ['form', 'json'],\n            description: `The media type used to serialize the payloads. The default is 'form'`,\n          },\n          insecureSsl: {\n            title: 'Insecure SSL',\n            type: 'boolean',\n            description: `Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Default 'false'`,\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The GITHUB_TOKEN to use for authorization to GitHub',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        webhookUrl,\n        webhookSecret = defaultWebhookSecret,\n        events = ['push'],\n        active = true,\n        contentType = 'form',\n        insecureSsl = false,\n        token: providedToken,\n      } = ctx.input;\n\n      ctx.logger.info(`Creating webhook ${webhookUrl} for repo ${repoUrl}`);\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const client = new Octokit(\n        await getOctokitOptions({\n          integrations,\n          credentialsProvider: githubCredentialsProvider,\n          repoUrl: repoUrl,\n          token: providedToken,\n        }),\n      );\n\n      try {\n        const insecure_ssl = insecureSsl ? '1' : '0';\n        await client.rest.repos.createWebhook({\n          owner,\n          repo,\n          config: {\n            url: webhookUrl,\n            content_type: contentType,\n            secret: webhookSecret,\n            insecure_ssl,\n          },\n          events,\n          active,\n        });\n        ctx.logger.info(`Webhook '${webhookUrl}' created successfully`);\n      } catch (e) {\n        assertError(e);\n        ctx.logger.warn(\n          `Failed: create webhook '${webhookUrl}' on repo: '${repo}', ${e.message}`,\n        );\n      }\n    },\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'Example 1: Create and store a Deploy Key',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:deployKey:create',\n          name: 'Create and store a Deploy Key',\n          input: {\n            repoUrl: 'github.com?repo=repository&owner=owner',\n            publicKey: 'pubkey',\n            privateKey: 'privkey',\n            deployKeyName: 'Push Tags',\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { getOctokitOptions } from './helpers';\nimport { Octokit } from 'octokit';\nimport Sodium from 'libsodium-wrappers';\nimport { examples } from './githubDeployKey.examples';\n\n/**\n * Creates an `github:deployKey:create` Scaffolder action that creates a Deploy Key\n *\n * @public\n */\nexport function createGithubDeployKeyAction(options: {\n  integrations: ScmIntegrationRegistry;\n}) {\n  const { integrations } = options;\n  // For more information on how to define custom actions, see\n  //   https://backstage.io/docs/features/software-templates/writing-custom-actions\n  return createTemplateAction<{\n    repoUrl: string;\n    publicKey: string;\n    privateKey: string;\n    deployKeyName: string;\n    privateKeySecretName?: string;\n    token?: string;\n  }>({\n    id: 'github:deployKey:create',\n    description: 'Creates and stores Deploy Keys',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'publicKey', 'privateKey', 'deployKeyName'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          publicKey: {\n            title: 'SSH Public Key',\n            description: `Generated from ssh-keygen.  Begins with 'ssh-rsa', 'ecdsa-sha2-nistp256', 'ecdsa-sha2-nistp384', 'ecdsa-sha2-nistp521', 'ssh-ed25519', 'sk-ecdsa-sha2-nistp256@openssh.com', or 'sk-ssh-ed25519@openssh.com'.`,\n            type: 'string',\n          },\n          privateKey: {\n            title: 'SSH Private Key',\n            description: `SSH Private Key generated from ssh-keygen`,\n            type: 'string',\n          },\n          deployKeyName: {\n            title: 'Deploy Key Name',\n            description: `Name of the Deploy Key`,\n            type: 'string',\n          },\n          privateKeySecretName: {\n            title: 'Private Key GitHub Secret Name',\n            description: `Name of the GitHub Secret to store the private key related to the Deploy Key.  Defaults to: 'KEY_NAME_PRIVATE_KEY' where 'KEY_NAME' is the name of the Deploy Key`,\n            type: 'string',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitHub',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          privateKeySecretName: {\n            title: 'The GitHub Action Repo Secret Name for the Private Key',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        publicKey,\n        privateKey,\n        deployKeyName,\n        privateKeySecretName = `${deployKeyName\n          .split(' ')\n          .join('_')\n          .toLocaleUpperCase('en-US')}_PRIVATE_KEY`,\n        token: providedToken,\n      } = ctx.input;\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        token: providedToken,\n        repoUrl: repoUrl,\n      });\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(`No owner provided for repo ${repoUrl}`);\n      }\n\n      const client = new Octokit(octokitOptions);\n\n      await client.rest.repos.createDeployKey({\n        owner: owner,\n        repo: repo,\n        title: deployKeyName,\n        key: publicKey,\n      });\n      const publicKeyResponse = await client.rest.actions.getRepoPublicKey({\n        owner: owner,\n        repo: repo,\n      });\n\n      await Sodium.ready;\n      const binaryKey = Sodium.from_base64(\n        publicKeyResponse.data.key,\n        Sodium.base64_variants.ORIGINAL,\n      );\n      const binarySecret = Sodium.from_string(privateKey);\n      const encryptedBinarySecret = Sodium.crypto_box_seal(\n        binarySecret,\n        binaryKey,\n      );\n      const encryptedBase64Secret = Sodium.to_base64(\n        encryptedBinarySecret,\n        Sodium.base64_variants.ORIGINAL,\n      );\n\n      await client.rest.actions.createOrUpdateRepoSecret({\n        owner: owner,\n        repo: repo,\n        secret_name: privateKeySecretName,\n        encrypted_value: encryptedBase64Secret,\n        key_id: publicKeyResponse.data.key_id,\n      });\n\n      ctx.output('privateKeySecretName', privateKeySecretName);\n    },\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description:\n      'Create a GitHub Environment (No Policies, No Variables, No Secrets)',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:environment:create',\n          name: 'Create Environment',\n          input: {\n            repoUrl: 'github.com?repo=repository&owner=owner',\n            name: 'envname',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a GitHub Environment with Protected Branch Policy',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:environment:create',\n          name: 'Create Environment',\n          input: {\n            repoUrl: 'github.com?repo=repository&owner=owner',\n            name: 'envname',\n            deploymentBranchPolicy: {\n              protected_branches: true,\n              custom_branch_policies: false,\n            },\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a GitHub Environment with Custom Branch Policies',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:environment:create',\n          name: 'Create Environment',\n          input: {\n            repoUrl: 'github.com?repo=repository&owner=owner',\n            name: 'envname',\n            deploymentBranchPolicy: {\n              protected_branches: false,\n              custom_branch_policies: true,\n            },\n            customBranchPolicyNames: ['main', '*.*.*'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create a GitHub Environment with Environment Variables and Secrets',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:environment:create',\n          name: 'Create Environment',\n          input: {\n            repoUrl: 'github.com?repo=repository&owner=owner',\n            name: 'envname',\n            environmentVariables: {\n              key1: 'val1',\n              key2: 'val2',\n            },\n            secrets: {\n              secret1: 'supersecret1',\n              secret2: 'supersecret2',\n            },\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { getOctokitOptions } from './helpers';\nimport { Octokit } from 'octokit';\nimport Sodium from 'libsodium-wrappers';\nimport { examples } from './gitHubEnvironment.examples';\n\n/**\n * Creates an `github:environment:create` Scaffolder action that creates a Github Environment.\n *\n * @public\n */\nexport function createGithubEnvironmentAction(options: {\n  integrations: ScmIntegrationRegistry;\n}) {\n  const { integrations } = options;\n  // For more information on how to define custom actions, see\n  //   https://backstage.io/docs/features/software-templates/writing-custom-actions\n  return createTemplateAction<{\n    repoUrl: string;\n    name: string;\n    deploymentBranchPolicy?: {\n      protected_branches: boolean;\n      custom_branch_policies: boolean;\n    };\n    customBranchPolicyNames?: string[];\n    environmentVariables?: { [key: string]: string };\n    secrets?: { [key: string]: string };\n    token?: string;\n  }>({\n    id: 'github:environment:create',\n    description: 'Creates Deployment Environments',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'name'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          name: {\n            title: 'Environment Name',\n            description: `Name of the deployment environment to create`,\n            type: 'string',\n          },\n          deploymentBranchPolicy: {\n            title: 'Deployment Branch Policy',\n            description: `The type of deployment branch policy for this environment. To allow all branches to deploy, set to null.`,\n            type: 'object',\n            required: ['protected_branches', 'custom_branch_policies'],\n            properties: {\n              protected_branches: {\n                title: 'Protected Branches',\n                description: `Whether only branches with branch protection rules can deploy to this environment. If protected_branches is true, custom_branch_policies must be false; if protected_branches is false, custom_branch_policies must be true.`,\n                type: 'boolean',\n              },\n              custom_branch_policies: {\n                title: 'Custom Branch Policies',\n                description: `Whether only branches that match the specified name patterns can deploy to this environment. If custom_branch_policies is true, protected_branches must be false; if custom_branch_policies is false, protected_branches must be true.`,\n                type: 'boolean',\n              },\n            },\n          },\n          customBranchPolicyNames: {\n            title: 'Custom Branch Policy Name',\n            description: `The name pattern that branches must match in order to deploy to the environment.\n\n            Wildcard characters will not match /. For example, to match branches that begin with release/ and contain an additional single slash, use release/*/*. For more information about pattern matching syntax, see the Ruby File.fnmatch documentation.`,\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          environmentVariables: {\n            title: 'Environment Variables',\n            description: `Environment variables attached to the deployment environment`,\n            type: 'object',\n          },\n          secrets: {\n            title: 'Deployment Secrets',\n            description: `Secrets attached to the deployment environment`,\n            type: 'object',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitHub',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        name,\n        deploymentBranchPolicy,\n        customBranchPolicyNames,\n        environmentVariables,\n        secrets,\n        token: providedToken,\n      } = ctx.input;\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        token: providedToken,\n        repoUrl: repoUrl,\n      });\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(`No owner provided for repo ${repoUrl}`);\n      }\n\n      const client = new Octokit(octokitOptions);\n      const repository = await client.rest.repos.get({\n        owner: owner,\n        repo: repo,\n      });\n\n      await client.rest.repos.createOrUpdateEnvironment({\n        owner: owner,\n        repo: repo,\n        environment_name: name,\n        deployment_branch_policy: deploymentBranchPolicy ?? null,\n      });\n\n      if (customBranchPolicyNames) {\n        for (const item of customBranchPolicyNames) {\n          await client.rest.repos.createDeploymentBranchPolicy({\n            owner: owner,\n            repo: repo,\n            environment_name: name,\n            name: item,\n          });\n        }\n      }\n\n      for (const [key, value] of Object.entries(environmentVariables ?? {})) {\n        await client.rest.actions.createEnvironmentVariable({\n          repository_id: repository.data.id,\n          environment_name: name,\n          name: key,\n          value,\n        });\n      }\n\n      if (secrets) {\n        const publicKeyResponse =\n          await client.rest.actions.getEnvironmentPublicKey({\n            repository_id: repository.data.id,\n            environment_name: name,\n          });\n\n        await Sodium.ready;\n        const binaryKey = Sodium.from_base64(\n          publicKeyResponse.data.key,\n          Sodium.base64_variants.ORIGINAL,\n        );\n        for (const [key, value] of Object.entries(secrets)) {\n          const binarySecret = Sodium.from_string(value);\n          const encryptedBinarySecret = Sodium.crypto_box_seal(\n            binarySecret,\n            binaryKey,\n          );\n          const encryptedBase64Secret = Sodium.to_base64(\n            encryptedBinarySecret,\n            Sodium.base64_variants.ORIGINAL,\n          );\n\n          await client.rest.actions.createOrUpdateEnvironmentSecret({\n            repository_id: repository.data.id,\n            environment_name: name,\n            secret_name: key,\n            encrypted_value: encryptedBase64Secret,\n            key_id: publicKeyResponse.data.key_id,\n          });\n        }\n      }\n    },\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'Create a pull request',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:github:pull-request',\n          name: 'Create a pull reuqest',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            branchName: 'new-app',\n            title: 'Create my new app',\n            description: 'This PR is really good',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a pull request with target branch name',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:github:pull-request',\n          name: 'Create a pull reuqest with target branch name',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            branchName: 'new-app',\n            title: 'Create my new app',\n            description: 'This PR is really good',\n            targetBranchName: 'test',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a pull request as draft',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:github:pull-request',\n          name: 'Create a pull reuqest as draft',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            branchName: 'new-app',\n            title: 'Create my new app',\n            description: 'This PR is really good',\n            draft: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a pull request with target path',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:github:pull-request',\n          name: 'Create a pull reuqest with target path',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            branchName: 'new-app',\n            title: 'Create my new app',\n            description: 'This PR is really good',\n            targetPath: 'targetPath',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a pull request with source path',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:github:pull-request',\n          name: 'Create a pull reuqest with source path',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            branchName: 'new-app',\n            title: 'Create my new app',\n            description: 'This PR is really good',\n            sourcePath: 'source',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a pull request with token',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:github:pull-request',\n          name: 'Create a pull reuqest',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            branchName: 'new-app',\n            title: 'Create my new app',\n            description: 'This PR is really good',\n            token: 'gph_YourGitHubToken',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a pull request with reviewers',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:github:pull-request',\n          name: 'Create a pull reuqest with reviewers',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            branchName: 'new-app',\n            title: 'Create my new app',\n            description: 'This PR is really good',\n            reviewers: ['foobar'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a pull request with team reviewers',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:github:pull-request',\n          name: 'Create a pull reuqest with team reviewers',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            branchName: 'new-app',\n            title: 'Create my new app',\n            description: 'This PR is really good',\n            teamReviewers: ['team-foo'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a pull request with commit message',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:github:pull-request',\n          name: 'Create a pull reuqest',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            branchName: 'new-app',\n            title: 'Create my new app',\n            description: 'This PR is really good',\n            commitMessage: 'Custom commit message',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a pull request with all parameters',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:github:pull-request',\n          name: 'Create a pull reuqest',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            branchName: 'new-app',\n            title: 'Create my new app',\n            description: 'This PR is really good',\n            targetBranchName: 'test',\n            draft: true,\n            targetPath: 'targetPath',\n            sourcePath: 'source',\n            token: 'gph_YourGitHubToken',\n            reviewers: ['foobar'],\n            teamReviewers: ['team-foo'],\n            commitMessage: 'Commit for foo changes',\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n  SerializedFile,\n  serializeDirectoryContents,\n} from '@backstage/plugin-scaffolder-node';\nimport { Octokit } from 'octokit';\nimport { InputError, CustomErrorBase } from '@backstage/errors';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\nimport { createPullRequest } from 'octokit-plugin-create-pull-request';\nimport { getOctokitOptions } from './helpers';\nimport { Logger } from 'winston';\nimport { examples } from './githubPullRequest.examples';\n\nexport type Encoding = 'utf-8' | 'base64';\n\nclass GithubResponseError extends CustomErrorBase {}\n\nexport const defaultClientFactory: CreateGithubPullRequestActionOptions['clientFactory'] =\n  async ({\n    integrations,\n    githubCredentialsProvider,\n    owner,\n    repo,\n    host = 'github.com',\n    token: providedToken,\n  }) => {\n    const [encodedHost, encodedOwner, encodedRepo] = [host, owner, repo].map(\n      encodeURIComponent,\n    );\n\n    const octokitOptions = await getOctokitOptions({\n      integrations,\n      credentialsProvider: githubCredentialsProvider,\n      repoUrl: `${encodedHost}?owner=${encodedOwner}&repo=${encodedRepo}`,\n      token: providedToken,\n    });\n\n    const OctokitPR = Octokit.plugin(createPullRequest);\n    return new OctokitPR({\n      ...octokitOptions,\n      ...{ throttle: { enabled: false } },\n    });\n  };\n\n/**\n * The options passed to {@link createPublishGithubPullRequestAction} method\n * @public\n */\nexport interface CreateGithubPullRequestActionOptions {\n  /**\n   * An instance of {@link @backstage/integration#ScmIntegrationRegistry} that will be used in the action.\n   */\n  integrations: ScmIntegrationRegistry;\n  /**\n   * An instance of {@link @backstage/integration#GithubCredentialsProvider} that will be used to get credentials for the action.\n   */\n  githubCredentialsProvider?: GithubCredentialsProvider;\n  /**\n   * A method to return the Octokit client with the Pull Request Plugin.\n   */\n  clientFactory?: (input: {\n    integrations: ScmIntegrationRegistry;\n    githubCredentialsProvider?: GithubCredentialsProvider;\n    host: string;\n    owner: string;\n    repo: string;\n    token?: string;\n  }) => Promise<\n    Octokit & {\n      createPullRequest(options: createPullRequest.Options): Promise<{\n        data: {\n          html_url: string;\n          number: number;\n          base: {\n            ref: string;\n          };\n        };\n      } | null>;\n    }\n  >;\n}\n\ntype GithubPullRequest = {\n  owner: string;\n  repo: string;\n  number: number;\n};\n\n/**\n * Creates a Github Pull Request action.\n * @public\n */\nexport const createPublishGithubPullRequestAction = (\n  options: CreateGithubPullRequestActionOptions,\n) => {\n  const {\n    integrations,\n    githubCredentialsProvider,\n    clientFactory = defaultClientFactory,\n  } = options;\n\n  return createTemplateAction<{\n    title: string;\n    branchName: string;\n    targetBranchName?: string;\n    description: string;\n    repoUrl: string;\n    draft?: boolean;\n    targetPath?: string;\n    sourcePath?: string;\n    token?: string;\n    reviewers?: string[];\n    teamReviewers?: string[];\n    commitMessage?: string;\n    update?: boolean;\n  }>({\n    id: 'publish:github:pull-request',\n    examples,\n    schema: {\n      input: {\n        required: ['repoUrl', 'title', 'description', 'branchName'],\n        type: 'object',\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          branchName: {\n            type: 'string',\n            title: 'Branch Name',\n            description: 'The name for the branch',\n          },\n          targetBranchName: {\n            type: 'string',\n            title: 'Target Branch Name',\n            description: 'The target branch name of the merge request',\n          },\n          title: {\n            type: 'string',\n            title: 'Pull Request Name',\n            description: 'The name for the pull request',\n          },\n          description: {\n            type: 'string',\n            title: 'Pull Request Description',\n            description: 'The description of the pull request',\n          },\n          draft: {\n            type: 'boolean',\n            title: 'Create as Draft',\n            description: 'Create a draft pull request',\n          },\n          sourcePath: {\n            type: 'string',\n            title: 'Working Subdirectory',\n            description:\n              'Subdirectory of working directory to copy changes from',\n          },\n          targetPath: {\n            type: 'string',\n            title: 'Repository Subdirectory',\n            description: 'Subdirectory of repository to apply changes to',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitHub',\n          },\n          reviewers: {\n            title: 'Pull Request Reviewers',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            description:\n              'The users that will be added as reviewers to the pull request',\n          },\n          teamReviewers: {\n            title: 'Pull Request Team Reviewers',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            description:\n              'The teams that will be added as reviewers to the pull request',\n          },\n          commitMessage: {\n            type: 'string',\n            title: 'Commit Message',\n            description: 'The commit message for the pull request commit',\n          },\n          update: {\n            type: 'boolean',\n            title: 'Update',\n            description: 'Update pull request if already exists',\n          },\n        },\n      },\n      output: {\n        required: ['remoteUrl'],\n        type: 'object',\n        properties: {\n          targetBranchName: {\n            title: 'Target branch name of the merge request',\n            type: 'string',\n          },\n          remoteUrl: {\n            type: 'string',\n            title: 'Pull Request URL',\n            description: 'Link to the pull request in Github',\n          },\n          pullRequestNumber: {\n            type: 'number',\n            title: 'Pull Request Number',\n            description: 'The pull request number',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        branchName,\n        targetBranchName,\n        title,\n        description,\n        draft,\n        targetPath,\n        sourcePath,\n        token: providedToken,\n        reviewers,\n        teamReviewers,\n        commitMessage,\n        update,\n      } = ctx.input;\n\n      const { owner, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(\n          `No owner provided for host: ${host}, and repo ${repo}`,\n        );\n      }\n\n      const client = await clientFactory({\n        integrations,\n        githubCredentialsProvider,\n        host,\n        owner,\n        repo,\n        token: providedToken,\n      });\n\n      const fileRoot = sourcePath\n        ? resolveSafeChildPath(ctx.workspacePath, sourcePath)\n        : ctx.workspacePath;\n\n      const directoryContents = await serializeDirectoryContents(fileRoot, {\n        gitignore: true,\n      });\n\n      const determineFileMode = (file: SerializedFile): string => {\n        if (file.symlink) return '120000';\n        if (file.executable) return '100755';\n        return '100644';\n      };\n\n      const determineFileEncoding = (\n        file: SerializedFile,\n      ): 'utf-8' | 'base64' => (file.symlink ? 'utf-8' : 'base64');\n\n      const files = Object.fromEntries(\n        directoryContents.map(file => [\n          targetPath ? path.posix.join(targetPath, file.path) : file.path,\n          {\n            // See the properties of tree items\n            // in https://docs.github.com/en/rest/reference/git#trees\n            mode: determineFileMode(file),\n            // Always use base64 encoding where possible to avoid doubling a binary file in size\n            // due to interpreting a binary file as utf-8 and sending github\n            // the utf-8 encoded content. Symlinks are kept as utf-8 to avoid them\n            // being formatted as a series of scrambled characters\n            //\n            // For example, the original gradle-wrapper.jar is 57.8k in https://github.com/kennethzfeng/pull-request-test/pull/5/files.\n            // Its size could be doubled to 98.3K (See https://github.com/kennethzfeng/pull-request-test/pull/4/files)\n            encoding: determineFileEncoding(file),\n            content: file.content.toString(determineFileEncoding(file)),\n          },\n        ]),\n      );\n\n      try {\n        const createOptions: createPullRequest.Options = {\n          owner,\n          repo,\n          title,\n          changes: [\n            {\n              files,\n              commit: commitMessage ?? title,\n            },\n          ],\n          body: description,\n          head: branchName,\n          draft,\n          update,\n        };\n        if (targetBranchName) {\n          createOptions.base = targetBranchName;\n        }\n        const response = await client.createPullRequest(createOptions);\n\n        if (!response) {\n          throw new GithubResponseError('null response from Github');\n        }\n\n        const pullRequestNumber = response.data.number;\n        if (reviewers || teamReviewers) {\n          const pullRequest = { owner, repo, number: pullRequestNumber };\n          await requestReviewersOnPullRequest(\n            pullRequest,\n            reviewers,\n            teamReviewers,\n            client,\n            ctx.logger,\n          );\n        }\n\n        const targetBranch = response.data.base.ref;\n        ctx.output('targetBranchName', targetBranch);\n        ctx.output('remoteUrl', response.data.html_url);\n        ctx.output('pullRequestNumber', pullRequestNumber);\n      } catch (e) {\n        throw new GithubResponseError('Pull request creation failed', e);\n      }\n    },\n  });\n\n  async function requestReviewersOnPullRequest(\n    pr: GithubPullRequest,\n    reviewers: string[] | undefined,\n    teamReviewers: string[] | undefined,\n    client: Octokit,\n    logger: Logger,\n  ) {\n    try {\n      const result = await client.rest.pulls.requestReviewers({\n        owner: pr.owner,\n        repo: pr.repo,\n        pull_number: pr.number,\n        reviewers,\n        team_reviewers: teamReviewers ? [...new Set(teamReviewers)] : undefined,\n      });\n      const addedUsers = result.data.requested_reviewers?.join(', ') ?? '';\n      const addedTeams = result.data.requested_teams?.join(', ') ?? '';\n      logger.info(\n        `Added users [${addedUsers}] and teams [${addedTeams}] as reviewers to Pull request ${pr.number}`,\n      );\n    } catch (e) {\n      logger.error(\n        `Failure when adding reviewers to Pull request ${pr.number}`,\n        e,\n      );\n    }\n  }\n};\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description:\n      'Initializes a git repository of contents in workspace and publish it to GitHub with default configuration.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:github',\n          name: 'Publish to GitHub',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Add a description.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:github',\n          name: 'Publish to GitHub',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            description: 'Initialize a git repository',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Change visibility of the repository.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:github',\n          name: 'Publish to GitHub',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            description: 'Initialize a git repository',\n            repoVisibility: 'public',\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { Octokit } from 'octokit';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport {\n  createGithubRepoWithCollaboratorsAndTopics,\n  getOctokitOptions,\n  initRepoPushAndProtect,\n} from './helpers';\nimport * as inputProps from './inputProperties';\nimport * as outputProps from './outputProperties';\nimport { examples } from './github.examples';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to GitHub.\n *\n * @public\n */\nexport function createPublishGithubAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, config, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    homepage?: string;\n    access?: string;\n    defaultBranch?: string;\n    protectDefaultBranch?: boolean;\n    protectEnforceAdmins?: boolean;\n    deleteBranchOnMerge?: boolean;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    allowRebaseMerge?: boolean;\n    allowSquashMerge?: boolean;\n    squashMergeCommitTitle?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';\n    squashMergeCommitMessage?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';\n    allowMergeCommit?: boolean;\n    allowAutoMerge?: boolean;\n    sourcePath?: string;\n    bypassPullRequestAllowances?:\n      | {\n          users?: string[];\n          teams?: string[];\n          apps?: string[];\n        }\n      | undefined;\n    requiredApprovingReviewCount?: number;\n    restrictions?:\n      | {\n          users: string[];\n          teams: string[];\n          apps?: string[];\n        }\n      | undefined;\n    requireCodeOwnerReviews?: boolean;\n    dismissStaleReviews?: boolean;\n    requiredStatusCheckContexts?: string[];\n    requireBranchesToBeUpToDate?: boolean;\n    requiredConversationResolution?: boolean;\n    repoVisibility?: 'private' | 'internal' | 'public';\n    collaborators?: Array<\n      | {\n          user: string;\n          access: string;\n        }\n      | {\n          team: string;\n          access: string;\n        }\n      | {\n          /** @deprecated This field is deprecated in favor of team */\n          username: string;\n          access: 'pull' | 'push' | 'admin' | 'maintain' | 'triage';\n        }\n    >;\n    hasProjects?: boolean | undefined;\n    hasWiki?: boolean | undefined;\n    hasIssues?: boolean | undefined;\n    token?: string;\n    topics?: string[];\n    repoVariables?: { [key: string]: string };\n    secrets?: { [key: string]: string };\n    requiredCommitSigning?: boolean;\n  }>({\n    id: 'publish:github',\n    description:\n      'Initializes a git repository of contents in workspace and publishes it to GitHub.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: inputProps.repoUrl,\n          description: inputProps.description,\n          homepage: inputProps.homepage,\n          access: inputProps.access,\n          bypassPullRequestAllowances: inputProps.bypassPullRequestAllowances,\n          requiredApprovingReviewCount: inputProps.requiredApprovingReviewCount,\n          restrictions: inputProps.restrictions,\n          requireCodeOwnerReviews: inputProps.requireCodeOwnerReviews,\n          dismissStaleReviews: inputProps.dismissStaleReviews,\n          requiredStatusCheckContexts: inputProps.requiredStatusCheckContexts,\n          requireBranchesToBeUpToDate: inputProps.requireBranchesToBeUpToDate,\n          requiredConversationResolution:\n            inputProps.requiredConversationResolution,\n          repoVisibility: inputProps.repoVisibility,\n          defaultBranch: inputProps.defaultBranch,\n          protectDefaultBranch: inputProps.protectDefaultBranch,\n          protectEnforceAdmins: inputProps.protectEnforceAdmins,\n          deleteBranchOnMerge: inputProps.deleteBranchOnMerge,\n          gitCommitMessage: inputProps.gitCommitMessage,\n          gitAuthorName: inputProps.gitAuthorName,\n          gitAuthorEmail: inputProps.gitAuthorEmail,\n          allowMergeCommit: inputProps.allowMergeCommit,\n          allowSquashMerge: inputProps.allowSquashMerge,\n          squashMergeCommitTitle: inputProps.squashMergeCommitTitle,\n          squashMergeCommitMessage: inputProps.squashMergeCommitMessage,\n          allowRebaseMerge: inputProps.allowRebaseMerge,\n          allowAutoMerge: inputProps.allowAutoMerge,\n          sourcePath: inputProps.sourcePath,\n          collaborators: inputProps.collaborators,\n          hasProjects: inputProps.hasProjects,\n          hasWiki: inputProps.hasWiki,\n          hasIssues: inputProps.hasIssues,\n          token: inputProps.token,\n          topics: inputProps.topics,\n          repoVariables: inputProps.repoVariables,\n          secrets: inputProps.secrets,\n          requiredCommitSigning: inputProps.requiredCommitSigning,\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: outputProps.remoteUrl,\n          repoContentsUrl: outputProps.repoContentsUrl,\n          commitHash: outputProps.commitHash,\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        homepage,\n        access,\n        requireCodeOwnerReviews = false,\n        dismissStaleReviews = false,\n        bypassPullRequestAllowances,\n        requiredApprovingReviewCount = 1,\n        restrictions,\n        requiredStatusCheckContexts = [],\n        requireBranchesToBeUpToDate = true,\n        requiredConversationResolution = false,\n        repoVisibility = 'private',\n        defaultBranch = 'master',\n        protectDefaultBranch = true,\n        protectEnforceAdmins = true,\n        deleteBranchOnMerge = false,\n        gitCommitMessage,\n        gitAuthorName,\n        gitAuthorEmail,\n        allowMergeCommit = true,\n        allowSquashMerge = true,\n        squashMergeCommitTitle = 'COMMIT_OR_PR_TITLE',\n        squashMergeCommitMessage = 'COMMIT_MESSAGES',\n        allowRebaseMerge = true,\n        allowAutoMerge = false,\n        collaborators,\n        hasProjects = undefined,\n        hasWiki = undefined,\n        hasIssues = undefined,\n        topics,\n        repoVariables,\n        secrets,\n        token: providedToken,\n        requiredCommitSigning = false,\n      } = ctx.input;\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        token: providedToken,\n        repoUrl: repoUrl,\n      });\n      const client = new Octokit(octokitOptions);\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const newRepo = await createGithubRepoWithCollaboratorsAndTopics(\n        client,\n        repo,\n        owner,\n        repoVisibility,\n        description,\n        homepage,\n        deleteBranchOnMerge,\n        allowMergeCommit,\n        allowSquashMerge,\n        squashMergeCommitTitle,\n        squashMergeCommitMessage,\n        allowRebaseMerge,\n        allowAutoMerge,\n        access,\n        collaborators,\n        hasProjects,\n        hasWiki,\n        hasIssues,\n        topics,\n        repoVariables,\n        secrets,\n        ctx.logger,\n      );\n\n      const remoteUrl = newRepo.clone_url;\n      const repoContentsUrl = `${newRepo.html_url}/blob/${defaultBranch}`;\n\n      const commitResult = await initRepoPushAndProtect(\n        remoteUrl,\n        octokitOptions.auth,\n        ctx.workspacePath,\n        ctx.input.sourcePath,\n        defaultBranch,\n        protectDefaultBranch,\n        protectEnforceAdmins,\n        owner,\n        client,\n        repo,\n        requireCodeOwnerReviews,\n        bypassPullRequestAllowances,\n        requiredApprovingReviewCount,\n        restrictions,\n        requiredStatusCheckContexts,\n        requireBranchesToBeUpToDate,\n        requiredConversationResolution,\n        config,\n        ctx.logger,\n        gitCommitMessage,\n        gitAuthorName,\n        gitAuthorEmail,\n        dismissStaleReviews,\n        requiredCommitSigning,\n      );\n\n      ctx.output('commitHash', commitResult?.commitHash);\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'GitHub alphanumric autolink reference',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:autolinks:create',\n          name: 'Create an autolink reference',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            keyPrefix: 'TICKET-',\n            urlTemplate: 'https://example.com/TICKET?query=<num>',\n            isAlphanumeric: false,\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { Octokit } from 'octokit';\nimport { examples } from './githubAutolinks.examples';\nimport { getOctokitOptions } from './helpers';\n\n/**\n * Create an autolink reference for a repository\n * @public\n */\nexport function createGithubAutolinksAction(options: {\n  integrations: ScmIntegrations;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    keyPrefix: string;\n    urlTemplate: string;\n    isAlphanumeric?: boolean;\n    token?: string;\n  }>({\n    id: 'github:autolinks:create',\n    description: 'Create an autolink reference for a repository',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'keyPrefix', 'urlTemplate'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          keyPrefix: {\n            title: 'Key Prefix',\n            description:\n              'This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.',\n            type: 'string',\n          },\n          urlTemplate: {\n            title: 'URL Template',\n            description:\n              'The URL must contain <num> for the reference number. <num> matches different characters depending on the value of isAlphanumeric.',\n            type: 'string',\n          },\n          isAlphanumeric: {\n            title: 'Alphanumeric',\n            description:\n              'Whether this autolink reference matches alphanumeric characters. If true, the <num> parameter of the url_template matches alphanumeric characters A-Z (case insensitive), 0-9, and -. If false, this autolink reference only matches numeric characters. Default: true',\n            type: 'boolean',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitHub',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { repoUrl, keyPrefix, urlTemplate, isAlphanumeric, token } =\n        ctx.input;\n\n      ctx.logger.info(`Creating autolink reference for repo ${repoUrl}`);\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const client = new Octokit(\n        await getOctokitOptions({\n          integrations,\n          repoUrl,\n          credentialsProvider: githubCredentialsProvider,\n          token,\n        }),\n      );\n\n      await client.rest.repos.createAutolink({\n        owner,\n        repo,\n        key_prefix: keyPrefix,\n        url_template: urlTemplate,\n        is_alphanumeric: isAlphanumeric,\n      });\n\n      ctx.logger.info(`Autolink reference created successfully`);\n    },\n  });\n}\n"],"names":["assertError","parseRepoUrl","InputError","DefaultGithubCredentialsProvider","Sodium","initRepoAndPush","getRepoSourceDirectory","NotFoundError","examples","yaml","createTemplateAction","Octokit","inputProps.repoUrl","inputProps.description","inputProps.homepage","inputProps.access","inputProps.requireCodeOwnerReviews","inputProps.bypassPullRequestAllowances","inputProps.requiredApprovingReviewCount","inputProps.restrictions","inputProps.requiredStatusCheckContexts","inputProps.requireBranchesToBeUpToDate","inputProps.requiredConversationResolution","inputProps.repoVisibility","inputProps.deleteBranchOnMerge","inputProps.allowMergeCommit","inputProps.allowSquashMerge","inputProps.squashMergeCommitTitle","inputProps.squashMergeCommitMessage","inputProps.allowRebaseMerge","inputProps.allowAutoMerge","inputProps.collaborators","inputProps.hasProjects","inputProps.hasWiki","inputProps.hasIssues","inputProps.token","inputProps.topics","inputProps.repoVariables","inputProps.secrets","inputProps.requiredCommitSigning","outputProps.remoteUrl","outputProps.repoContentsUrl","inputProps.dismissStaleReviews","inputProps.defaultBranch","inputProps.protectDefaultBranch","inputProps.protectEnforceAdmins","inputProps.gitCommitMessage","inputProps.gitAuthorName","inputProps.gitAuthorEmail","inputProps.sourcePath","outputProps.commitHash","emitterEventNames","CustomErrorBase","createPullRequest","resolveSafeChildPath","serializeDirectoryContents","path"],"mappings":"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"}