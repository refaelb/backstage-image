import { useContent } from '@backstage/core-components';
import { useRouteRef } from '@backstage/core-plugin-api';
import { SearchContextProvider, SearchBar, SearchResult, SearchResultPager } from '@backstage/plugin-search-react';
import { Dialog, useTheme, DialogTitle, DialogContent, Grid, Divider, DialogActions } from '@material-ui/core';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import IconButton from '@material-ui/core/IconButton';
import { makeStyles } from '@material-ui/core/styles';
import ArrowForwardIcon from '@material-ui/icons/ArrowForward';
import CloseIcon from '@material-ui/icons/Close';
import React, { useRef, useEffect, useCallback, useState, useContext } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { r as rootRouteRef } from './SearchType-a8f79021.esm.js';
import { createVersionedContext, createVersionedValueMap } from '@backstage/version-bridge';
import useUpdateEffect from 'react-use/lib/useUpdateEffect';

const useStyles = makeStyles((theme) => ({
  dialogTitle: {
    gap: theme.spacing(1),
    display: "grid",
    alignItems: "center",
    gridTemplateColumns: "1fr auto",
    "&> button": {
      marginTop: theme.spacing(1)
    }
  },
  input: {
    flex: 1
  },
  button: {
    "&:hover": {
      background: "none"
    }
  },
  // Reduces default height of the modal, keeping a gap of 128px between the top and bottom of the page.
  paperFullWidth: { height: "calc(100% - 128px)" },
  dialogActionsContainer: { padding: theme.spacing(1, 3) },
  viewResultsLink: { verticalAlign: "0.5em" }
}));
const Modal = ({ toggleModal }) => {
  const classes = useStyles();
  const navigate = useNavigate();
  const { transitions } = useTheme();
  const { focusContent } = useContent();
  const searchRootRoute = useRouteRef(rootRouteRef)();
  const searchBarRef = useRef(null);
  useEffect(() => {
    var _a;
    (_a = searchBarRef == null ? void 0 : searchBarRef.current) == null ? void 0 : _a.focus();
  });
  const handleSearchResultClick = useCallback(() => {
    setTimeout(focusContent, transitions.duration.leavingScreen);
  }, [focusContent, transitions]);
  const handleSearchBarSubmit = useCallback(() => {
    var _a, _b;
    const query = (_b = (_a = searchBarRef.current) == null ? void 0 : _a.value) != null ? _b : "";
    navigate(`${searchRootRoute}?query=${query}`);
    handleSearchResultClick();
  }, [navigate, handleSearchResultClick, searchRootRoute]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DialogTitle, null, /* @__PURE__ */ React.createElement(Box, { className: classes.dialogTitle }, /* @__PURE__ */ React.createElement(
    SearchBar,
    {
      className: classes.input,
      inputProps: { ref: searchBarRef },
      onSubmit: handleSearchBarSubmit
    }
  ), /* @__PURE__ */ React.createElement(IconButton, { "aria-label": "close", onClick: toggleModal }, /* @__PURE__ */ React.createElement(CloseIcon, null)))), /* @__PURE__ */ React.createElement(DialogContent, null, /* @__PURE__ */ React.createElement(
    Grid,
    {
      container: true,
      direction: "row-reverse",
      justifyContent: "flex-start",
      alignItems: "center"
    },
    /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(
      Button,
      {
        className: classes.button,
        color: "primary",
        endIcon: /* @__PURE__ */ React.createElement(ArrowForwardIcon, null),
        onClick: handleSearchBarSubmit,
        disableRipple: true
      },
      "View Full Results"
    ))
  ), /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(
    SearchResult,
    {
      onClick: handleSearchResultClick,
      onKeyDown: handleSearchResultClick
    }
  )), /* @__PURE__ */ React.createElement(DialogActions, { className: classes.dialogActionsContainer }, /* @__PURE__ */ React.createElement(Grid, { container: true, direction: "row" }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(SearchResultPager, null)))));
};
const SearchModal = (props) => {
  var _a;
  const { open = true, hidden, toggleModal, children } = props;
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(
    Dialog,
    {
      classes: {
        paperFullWidth: classes.paperFullWidth
      },
      onClose: toggleModal,
      "aria-labelledby": "search-modal-title",
      fullWidth: true,
      maxWidth: "lg",
      open,
      hidden
    },
    open && /* @__PURE__ */ React.createElement(SearchContextProvider, { inheritParentContextIfAvailable: true }, (_a = children && children({ toggleModal })) != null ? _a : /* @__PURE__ */ React.createElement(Modal, { toggleModal }))
  );
};

const SearchModalContext = createVersionedContext("search-modal-context");
const SearchModalProvider = (props) => {
  const value = useSearchModal(props.showInitially);
  const versionedValue = createVersionedValueMap({ 1: value });
  return /* @__PURE__ */ React.createElement(SearchModalContext.Provider, { value: versionedValue }, props.children);
};
function useSearchModal(initialState = false) {
  const [state, setState] = useState({
    hidden: !initialState,
    open: initialState
  });
  const toggleModal = useCallback(
    () => setState((prevState) => ({
      open: true,
      hidden: !prevState.hidden
    })),
    []
  );
  const setOpen = useCallback(
    (open) => setState((prevState) => ({
      open: prevState.open || open,
      hidden: !open
    })),
    []
  );
  const parentContext = useContext(SearchModalContext);
  const parentContextValue = parentContext == null ? void 0 : parentContext.atVersion(1);
  const isParentContextPresent = !!(parentContextValue == null ? void 0 : parentContextValue.state);
  const location = useLocation();
  const locationKey = `${location.pathname}${location.search}${location.hash}`;
  useUpdateEffect(() => {
    setState((prevState) => ({
      open: prevState.open,
      hidden: true
    }));
  }, [locationKey]);
  return isParentContextPresent ? parentContextValue : { state, toggleModal, setOpen };
}

export { SearchModal as S, SearchModalProvider as a, useSearchModal as u };
//# sourceMappingURL=useSearchModal-77675f70.esm.js.map
