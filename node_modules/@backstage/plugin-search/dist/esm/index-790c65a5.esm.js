import React, { useCallback, useState, useRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import { SearchBarBase } from '@backstage/plugin-search-react';
import qs from 'qs';
import { useNavigate } from 'react-router-dom';
import { r as rootRouteRef } from './SearchType-a8f79021.esm.js';
import { useRouteRef } from '@backstage/core-plugin-api';
import '@backstage/errors';
import 'react-use/lib/usePrevious';
import '@material-ui/core';
import 'react-use/lib/useEffectOnce';
import '@material-ui/icons/ExpandMore';
import '@material-ui/icons/FontDownload';
import 'react-use/lib/useAsync';

const useNavigateToQuery = () => {
  const searchRoute = useRouteRef(rootRouteRef);
  const navigate = useNavigate();
  return useCallback(
    ({ query }) => {
      const queryString = qs.stringify({ query }, { addQueryPrefix: true });
      navigate(`${searchRoute()}${queryString}`);
    },
    [navigate, searchRoute]
  );
};

const useStyles = makeStyles({
  searchBarRoot: {
    fontSize: "1.5em"
  },
  searchBarOutline: {
    border: "1px solid #555",
    borderRadius: "6px"
  }
});
const HomePageSearchBar = (props) => {
  var _a;
  const classes = useStyles(props);
  const [query, setQuery] = useState("");
  const ref = useRef(null);
  const handleSearch = useNavigateToQuery();
  const handleSubmit = useCallback(() => {
    var _a2, _b;
    handleSearch({ query: (_b = (_a2 = ref.current) == null ? void 0 : _a2.value) != null ? _b : "" });
  }, [handleSearch]);
  return /* @__PURE__ */ React.createElement(
    SearchBarBase,
    {
      value: query,
      onSubmit: handleSubmit,
      onChange: setQuery,
      inputProps: { ref },
      InputProps: {
        ...props.InputProps,
        classes: {
          root: classes.searchBarRoot,
          notchedOutline: classes.searchBarOutline,
          ...(_a = props.InputProps) == null ? void 0 : _a.classes
        }
      },
      ...props
    }
  );
};

export { HomePageSearchBar };
//# sourceMappingURL=index-790c65a5.esm.js.map
