{"version":3,"file":"useSearchModal-77675f70.esm.js","sources":["../../src/components/SearchModal/SearchModal.tsx","../../src/components/SearchModal/useSearchModal.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useContent } from '@backstage/core-components';\nimport { useRouteRef } from '@backstage/core-plugin-api';\nimport {\n  SearchBar,\n  SearchContextProvider,\n  SearchResult,\n  SearchResultPager,\n} from '@backstage/plugin-search-react';\nimport {\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  Grid,\n  useTheme,\n} from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport CloseIcon from '@material-ui/icons/Close';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { rootRouteRef } from '../../plugin';\n\n/**\n * @public\n */\nexport interface SearchModalChildrenProps {\n  /**\n   * A function that should be invoked when navigating away from the modal.\n   */\n  toggleModal: () => void;\n}\n\n/**\n * @public\n */\nexport interface SearchModalProps {\n  /**\n   * If true, it renders the modal.\n   */\n  open?: boolean;\n  /**\n   * This is supposed to be used together with the open prop.\n   * If `hidden` is true, it hides the modal.\n   * If `open` is false, the value of `hidden` has no effect on the modal.\n   * Use `open` for controlling whether the modal should be rendered or not.\n   */\n  hidden?: boolean;\n  /**\n   * a function invoked when a search item is pressed or when the dialog\n   * should be closed.\n   */\n  toggleModal: () => void;\n  /**\n   * A function that returns custom content to render in the search modal in\n   * place of the default.\n   */\n  children?: (props: SearchModalChildrenProps) => JSX.Element;\n}\n\nconst useStyles = makeStyles(theme => ({\n  dialogTitle: {\n    gap: theme.spacing(1),\n    display: 'grid',\n    alignItems: 'center',\n    gridTemplateColumns: '1fr auto',\n    '&> button': {\n      marginTop: theme.spacing(1),\n    },\n  },\n  input: {\n    flex: 1,\n  },\n  button: {\n    '&:hover': {\n      background: 'none',\n    },\n  },\n  // Reduces default height of the modal, keeping a gap of 128px between the top and bottom of the page.\n  paperFullWidth: { height: 'calc(100% - 128px)' },\n  dialogActionsContainer: { padding: theme.spacing(1, 3) },\n  viewResultsLink: { verticalAlign: '0.5em' },\n}));\n\nexport const Modal = ({ toggleModal }: SearchModalChildrenProps) => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const { transitions } = useTheme();\n  const { focusContent } = useContent();\n\n  const searchRootRoute = useRouteRef(rootRouteRef)();\n  const searchBarRef = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    searchBarRef?.current?.focus();\n  });\n\n  const handleSearchResultClick = useCallback(() => {\n    setTimeout(focusContent, transitions.duration.leavingScreen);\n  }, [focusContent, transitions]);\n\n  // This handler is called when \"enter\" is pressed\n  const handleSearchBarSubmit = useCallback(() => {\n    // Using ref to get the current field value without waiting for a query debounce\n    const query = searchBarRef.current?.value ?? '';\n    navigate(`${searchRootRoute}?query=${query}`);\n    handleSearchResultClick();\n  }, [navigate, handleSearchResultClick, searchRootRoute]);\n\n  return (\n    <>\n      <DialogTitle>\n        <Box className={classes.dialogTitle}>\n          <SearchBar\n            className={classes.input}\n            inputProps={{ ref: searchBarRef }}\n            onSubmit={handleSearchBarSubmit}\n          />\n\n          <IconButton aria-label=\"close\" onClick={toggleModal}>\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        <Grid\n          container\n          direction=\"row-reverse\"\n          justifyContent=\"flex-start\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <Button\n              className={classes.button}\n              color=\"primary\"\n              endIcon={<ArrowForwardIcon />}\n              onClick={handleSearchBarSubmit}\n              disableRipple\n            >\n              View Full Results\n            </Button>\n          </Grid>\n        </Grid>\n        <Divider />\n        <SearchResult\n          onClick={handleSearchResultClick}\n          onKeyDown={handleSearchResultClick}\n        />\n      </DialogContent>\n      <DialogActions className={classes.dialogActionsContainer}>\n        <Grid container direction=\"row\">\n          <Grid item xs={12}>\n            <SearchResultPager />\n          </Grid>\n        </Grid>\n      </DialogActions>\n    </>\n  );\n};\n\n/**\n * @public\n */\nexport const SearchModal = (props: SearchModalProps) => {\n  const { open = true, hidden, toggleModal, children } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Dialog\n      classes={{\n        paperFullWidth: classes.paperFullWidth,\n      }}\n      onClose={toggleModal}\n      aria-labelledby=\"search-modal-title\"\n      fullWidth\n      maxWidth=\"lg\"\n      open={open}\n      hidden={hidden}\n    >\n      {open && (\n        <SearchContextProvider inheritParentContextIfAvailable>\n          {(children && children({ toggleModal })) ?? (\n            <Modal toggleModal={toggleModal} />\n          )}\n        </SearchContextProvider>\n      )}\n    </Dialog>\n  );\n};\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactNode, useCallback, useContext, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n  createVersionedContext,\n  createVersionedValueMap,\n} from '@backstage/version-bridge';\nimport useUpdateEffect from 'react-use/lib/useUpdateEffect';\n\n/**\n * The state of the search modal, as well as functions for changing the modal's\n * visibility.\n *\n * @public\n */\nexport type SearchModalValue = {\n  state: {\n    hidden: boolean;\n    open: boolean;\n  };\n  toggleModal: () => void;\n  setOpen: (open: boolean) => void;\n};\n\nconst SearchModalContext = createVersionedContext<{\n  1: SearchModalValue | undefined;\n}>('search-modal-context');\n\n/**\n * Props for the SearchModalProvider.\n * @public\n */\nexport type SearchModalProviderProps = {\n  /**\n   * Children which should have access to the SearchModal context and the\n   * associated useSearchModal() hook.\n   */\n  children: ReactNode;\n\n  /**\n   * Pass true if the modal should be rendered initially.\n   */\n  showInitially?: boolean;\n};\n\n/**\n * A context provider responsible for storing and managing state related to the\n * search modal.\n *\n * @remarks\n * If you need to control visibility of the search toggle outside of the modal\n * itself, you can optionally place this higher up in the react tree where your\n * custom code and the search modal share the same context.\n *\n * @example\n * ```tsx\n * import {\n *   SearchModalProvider,\n *   SidebarSearchModal,\n * } from '@backstage/plugin-search';\n *\n * // ...\n *\n * <SearchModalProvider>\n *   <KeyboardShortcutSearchToggler />\n *   <SidebarSearchModal>\n *     {({ toggleModal }) => <SearchModal toggleModal={toggleModal} />}\n *   </SidebarSearchModal>\n * </SearchModalProvider>\n * ```\n *\n * @public\n */\nexport const SearchModalProvider = (props: SearchModalProviderProps) => {\n  const value = useSearchModal(props.showInitially);\n  const versionedValue = createVersionedValueMap({ 1: value });\n  return (\n    <SearchModalContext.Provider value={versionedValue}>\n      {props.children}\n    </SearchModalContext.Provider>\n  );\n};\n\n/**\n * Use this hook to manage the state of {@link SearchModal}\n * and change its visibility. Monitors route changes setting the hidden state\n * to avoid having to call toggleModal on every result click.\n *\n * @public\n *\n * @param initialState - pass `true` to make the modal initially visible\n * @returns an object containing the state of the modal together with\n * functions for changing the visibility of the modal.\n */\nexport function useSearchModal(initialState = false) {\n  const [state, setState] = useState({\n    hidden: !initialState,\n    open: initialState,\n  });\n\n  const toggleModal = useCallback(\n    () =>\n      setState(prevState => ({\n        open: true,\n        hidden: !prevState.hidden,\n      })),\n    [],\n  );\n\n  const setOpen = useCallback(\n    (open: boolean) =>\n      setState(prevState => ({\n        open: prevState.open || open,\n        hidden: !open,\n      })),\n    [],\n  );\n\n  // Check for any existing parent context.\n  const parentContext = useContext(SearchModalContext);\n  const parentContextValue = parentContext?.atVersion(1);\n  const isParentContextPresent = !!parentContextValue?.state;\n\n  // Monitor route changes to automatically hide the modal.\n  const location = useLocation();\n  const locationKey = `${location.pathname}${location.search}${location.hash}`;\n  useUpdateEffect(() => {\n    setState(prevState => ({\n      open: prevState.open,\n      hidden: true,\n    }));\n  }, [locationKey]);\n\n  // Inherit from parent context, if set.\n  return isParentContextPresent\n    ? parentContextValue\n    : { state, toggleModal, setOpen };\n}\n"],"names":[],"mappings":"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"}