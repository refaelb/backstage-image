import { ResponseError } from '@backstage/errors';
import qs from 'qs';
import { searchApiRef, SearchContextProvider, useSearch } from '@backstage/plugin-search-react';
import { createRouteRef, createPlugin, createApiFactory, discoveryApiRef, identityApiRef, createRoutableExtension, createComponentExtension, useApi } from '@backstage/core-plugin-api';
import React, { useEffect, useState, Fragment, cloneElement } from 'react';
import usePrevious from 'react-use/lib/usePrevious';
import { useOutlet, useLocation } from 'react-router-dom';
import { makeStyles, Card, CardHeader, CardContent, Accordion, AccordionSummary, AccordionDetails, List, Divider, ListItem, ListItemIcon, ListItemText, Tabs, Tab, FormControl, InputLabel, Select, Chip, MenuItem, Checkbox } from '@material-ui/core';
import useEffectOnce from 'react-use/lib/useEffectOnce';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import AllIcon from '@material-ui/icons/FontDownload';
import useAsync from 'react-use/lib/useAsync';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class SearchClient {
  constructor(options) {
    __publicField(this, "discoveryApi");
    __publicField(this, "identityApi");
    this.discoveryApi = options.discoveryApi;
    this.identityApi = options.identityApi;
  }
  async query(query) {
    const { token } = await this.identityApi.getCredentials();
    const queryString = qs.stringify(query);
    const url = `${await this.discoveryApi.getBaseUrl(
      "search"
    )}/query?${queryString}`;
    const response = await fetch(url, {
      headers: token ? { Authorization: `Bearer ${token}` } : {}
    });
    if (!response.ok) {
      throw await ResponseError.fromResponse(response);
    }
    return response.json();
  }
}

const rootRouteRef = createRouteRef({
  id: "search"
});
const searchPlugin = createPlugin({
  id: "search",
  apis: [
    createApiFactory({
      api: searchApiRef,
      deps: { discoveryApi: discoveryApiRef, identityApi: identityApiRef },
      factory: ({ discoveryApi, identityApi }) => {
        return new SearchClient({ discoveryApi, identityApi });
      }
    })
  ],
  routes: {
    root: rootRouteRef
  }
});
const SearchPage$1 = searchPlugin.provide(
  createRoutableExtension({
    name: "SearchPage",
    component: () => import('./index-104a35c3.esm.js').then((m) => m.SearchPage),
    mountPoint: rootRouteRef
  })
);
const SidebarSearchModal = searchPlugin.provide(
  createComponentExtension({
    name: "SidebarSearchModal",
    component: {
      lazy: () => import('./index-eb06eaf0.esm.js').then(
        (m) => m.SidebarSearchModal
      )
    }
  })
);
const HomePageSearchBar = searchPlugin.provide(
  createComponentExtension({
    name: "HomePageSearchBar",
    component: {
      lazy: () => import('./index-790c65a5.esm.js').then((m) => m.HomePageSearchBar)
    }
  })
);

const UrlUpdater = () => {
  const location = useLocation();
  const {
    term,
    setTerm,
    types,
    setTypes,
    pageCursor,
    setPageCursor,
    filters,
    setFilters
  } = useSearch();
  const prevQueryParams = usePrevious(location.search);
  useEffect(() => {
    if (location.search === prevQueryParams) {
      return;
    }
    const query = qs.parse(location.search.substring(1), { arrayLimit: 0 }) || {};
    if (query.filters) {
      setFilters(query.filters);
    }
    if (query.query) {
      setTerm(query.query);
    }
    if (query.pageCursor) {
      setPageCursor(query.pageCursor);
    }
    if (query.types) {
      setTypes(query.types);
    }
  }, [prevQueryParams, location, setTerm, setTypes, setPageCursor, setFilters]);
  useEffect(() => {
    const newParams = qs.stringify(
      {
        query: term,
        types,
        pageCursor,
        filters
      },
      { arrayFormat: "brackets" }
    );
    const newUrl = `${window.location.pathname}?${newParams}`;
    window.history.replaceState(null, document.title, newUrl);
  }, [term, types, pageCursor, filters]);
  return null;
};
const SearchPage = () => {
  const outlet = useOutlet();
  return /* @__PURE__ */ React.createElement(SearchContextProvider, null, /* @__PURE__ */ React.createElement(UrlUpdater, null), outlet);
};

const useStyles$2 = makeStyles((theme) => ({
  card: {
    backgroundColor: "rgba(0, 0, 0, .11)"
  },
  cardContent: {
    paddingTop: theme.spacing(1)
  },
  icon: {
    color: theme.palette.common.black
  },
  list: {
    width: "100%"
  },
  listItemIcon: {
    width: "24px",
    height: "24px"
  },
  accordion: {
    backgroundColor: theme.palette.background.paper
  },
  accordionSummary: {
    minHeight: "auto",
    "&.Mui-expanded": {
      minHeight: "auto"
    }
  },
  accordionSummaryContent: {
    margin: theme.spacing(2, 0),
    "&.Mui-expanded": {
      margin: theme.spacing(2, 0)
    }
  },
  accordionDetails: {
    padding: theme.spacing(0, 0, 1)
  }
}));
const SearchTypeAccordion = (props) => {
  const classes = useStyles$2();
  const { filters, setPageCursor, setTypes, term, types } = useSearch();
  const searchApi = useApi(searchApiRef);
  const [expanded, setExpanded] = useState(true);
  const { defaultValue, name, showCounts, types: givenTypes } = props;
  const toggleExpanded = () => setExpanded((prevState) => !prevState);
  const handleClick = (type) => {
    return () => {
      setTypes(type !== "" ? [type] : []);
      setPageCursor(void 0);
      setExpanded(false);
    };
  };
  useEffect(() => {
    if (defaultValue) {
      setTypes([defaultValue]);
    }
  }, []);
  const definedTypes = [
    {
      value: "",
      name: "All",
      icon: /* @__PURE__ */ React.createElement(AllIcon, null)
    },
    ...givenTypes
  ];
  const selected = types[0] || "";
  const { value: resultCounts } = useAsync(async () => {
    if (!showCounts) {
      return {};
    }
    const counts = await Promise.all(
      definedTypes.map((t) => t.value).map(async (type) => {
        const { numberOfResults } = await searchApi.query({
          term,
          types: type ? [type] : [],
          filters: types.includes(type) || !types.length && !type ? filters : {},
          pageLimit: 0
        });
        return [
          type,
          numberOfResults !== void 0 ? `${numberOfResults >= 1e4 ? `>10000` : numberOfResults} results` : " -- "
        ];
      })
    );
    return Object.fromEntries(counts);
  }, [filters, showCounts, term, types]);
  return /* @__PURE__ */ React.createElement(Card, { className: classes.card }, /* @__PURE__ */ React.createElement(CardHeader, { title: name, titleTypographyProps: { variant: "overline" } }), /* @__PURE__ */ React.createElement(CardContent, { className: classes.cardContent }, /* @__PURE__ */ React.createElement(
    Accordion,
    {
      className: classes.accordion,
      expanded,
      onChange: toggleExpanded
    },
    /* @__PURE__ */ React.createElement(
      AccordionSummary,
      {
        classes: {
          root: classes.accordionSummary,
          content: classes.accordionSummaryContent
        },
        expandIcon: /* @__PURE__ */ React.createElement(ExpandMoreIcon, { className: classes.icon }),
        IconButtonProps: { size: "small" }
      },
      expanded ? "Collapse" : definedTypes.filter((t) => t.value === selected)[0].name
    ),
    /* @__PURE__ */ React.createElement(AccordionDetails, { classes: { root: classes.accordionDetails } }, /* @__PURE__ */ React.createElement(
      List,
      {
        className: classes.list,
        component: "nav",
        "aria-label": "filter by type",
        disablePadding: true,
        dense: true
      },
      definedTypes.map((type) => /* @__PURE__ */ React.createElement(Fragment, { key: type.value }, /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(
        ListItem,
        {
          selected: types[0] === type.value || types.length === 0 && type.value === "",
          onClick: handleClick(type.value),
          button: true
        },
        /* @__PURE__ */ React.createElement(ListItemIcon, null, cloneElement(type.icon, {
          className: classes.listItemIcon
        })),
        /* @__PURE__ */ React.createElement(
          ListItemText,
          {
            primary: type.name,
            secondary: resultCounts && resultCounts[type.value]
          }
        )
      )))
    ))
  )));
};

const useStyles$1 = makeStyles((theme) => ({
  tabs: {
    borderBottom: `1px solid ${theme.palette.textVerySubtle}`
  },
  tab: {
    height: "50px",
    fontWeight: theme.typography.fontWeightBold,
    fontSize: theme.typography.pxToRem(13),
    color: theme.palette.text.primary,
    minWidth: "130px"
  }
}));
const SearchTypeTabs = (props) => {
  const classes = useStyles$1();
  const { setPageCursor, setTypes, types } = useSearch();
  const { defaultValue, types: givenTypes } = props;
  const changeTab = (_, newType) => {
    setTypes(newType !== "" ? [newType] : []);
    setPageCursor(void 0);
  };
  useEffect(() => {
    if (defaultValue) {
      setTypes([defaultValue]);
    }
  }, []);
  const definedTypes = [
    {
      value: "",
      name: "All"
    },
    ...givenTypes
  ];
  return /* @__PURE__ */ React.createElement(
    Tabs,
    {
      "aria-label": "List of search types tabs",
      className: classes.tabs,
      indicatorColor: "primary",
      value: types.length === 0 ? "" : types[0],
      onChange: changeTab
    },
    definedTypes.map((type, idx) => /* @__PURE__ */ React.createElement(
      Tab,
      {
        key: idx,
        className: classes.tab,
        label: type.name,
        value: type.value
      }
    ))
  );
};

const useStyles = makeStyles((theme) => ({
  label: {
    textTransform: "capitalize"
  },
  chips: {
    display: "flex",
    flexWrap: "wrap",
    marginTop: theme.spacing(1)
  },
  chip: {
    margin: 2
  }
}));
const SearchType = (props) => {
  const { className, defaultValue, name, values = [] } = props;
  const classes = useStyles();
  const { types, setTypes } = useSearch();
  useEffectOnce(() => {
    if (!types.length) {
      if (defaultValue && Array.isArray(defaultValue)) {
        setTypes(defaultValue);
      } else if (defaultValue) {
        setTypes([defaultValue]);
      }
    }
  });
  const handleChange = (e) => {
    const value = e.target.value;
    setTypes(value);
  };
  return /* @__PURE__ */ React.createElement(
    FormControl,
    {
      className,
      variant: "filled",
      fullWidth: true,
      "data-testid": "search-typefilter-next"
    },
    /* @__PURE__ */ React.createElement(InputLabel, { className: classes.label, margin: "dense" }, name),
    /* @__PURE__ */ React.createElement(
      Select,
      {
        multiple: true,
        variant: "outlined",
        value: types,
        onChange: handleChange,
        placeholder: "All Results",
        renderValue: (selected) => /* @__PURE__ */ React.createElement("div", { className: classes.chips }, selected.map((value) => /* @__PURE__ */ React.createElement(
          Chip,
          {
            key: value,
            label: value,
            className: classes.chip,
            size: "small"
          }
        )))
      },
      values.map((value) => /* @__PURE__ */ React.createElement(MenuItem, { key: value, value }, /* @__PURE__ */ React.createElement(Checkbox, { checked: types.indexOf(value) > -1 }), /* @__PURE__ */ React.createElement(ListItemText, { primary: value })))
    )
  );
};
SearchType.Accordion = (props) => {
  return /* @__PURE__ */ React.createElement(SearchTypeAccordion, { ...props });
};
SearchType.Tabs = (props) => {
  return /* @__PURE__ */ React.createElement(SearchTypeTabs, { ...props });
};

export { HomePageSearchBar as H, SearchPage as S, UrlUpdater as U, SearchType as a, SearchPage$1 as b, SidebarSearchModal as c, SearchClient as d, rootRouteRef as r, searchPlugin as s };
//# sourceMappingURL=SearchType-a8f79021.esm.js.map
