import React from 'react';
import { makeStyles, Grid, Paper } from '@material-ui/core';
import SearchIcon from '@material-ui/icons/Search';
import { useSidebarPinState, Page, Header, Content, CatalogIcon, DocsIcon } from '@backstage/core-components';
import { discoveryApiRef, identityApiRef, useApi } from '@backstage/core-plugin-api';
import { createApiExtension, createPageExtension, createSchemaFromZod, createExtensionInput, createNavItemExtension, createPlugin } from '@backstage/frontend-plugin-api';
import { catalogApiRef, CATALOG_FILTER_EXISTS } from '@backstage/plugin-catalog-react';
import { searchApiRef, SearchContextProvider, useSearch, SearchBar, SearchFilter, SearchPagination, SearchResult, SearchResultPager, DefaultResultListItem } from '@backstage/plugin-search-react';
import { createSearchResultListItemExtension } from '@backstage/plugin-search-react/alpha';
import { d as SearchClient, r as rootRouteRef, U as UrlUpdater, a as SearchType } from './esm/SearchType-a8f79021.esm.js';
import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import '@backstage/errors';
import 'qs';
import 'react-use/lib/usePrevious';
import 'react-router-dom';
import 'react-use/lib/useEffectOnce';
import '@material-ui/icons/ExpandMore';
import '@material-ui/icons/FontDownload';
import 'react-use/lib/useAsync';

const searchApi = createApiExtension({
  factory: {
    api: searchApiRef,
    deps: { discoveryApi: discoveryApiRef, identityApi: identityApiRef },
    factory: ({
      identityApi,
      discoveryApi
    }) => new SearchClient({ discoveryApi, identityApi })
  }
});
const useSearchPageStyles = makeStyles((theme) => ({
  filter: {
    "& + &": {
      marginTop: theme.spacing(2.5)
    }
  },
  filters: {
    padding: theme.spacing(2),
    marginTop: theme.spacing(2)
  }
}));
const searchPage = createPageExtension({
  routeRef: convertLegacyRouteRef(rootRouteRef),
  configSchema: createSchemaFromZod(
    (z) => z.object({
      path: z.string().default("/search"),
      noTrack: z.boolean().default(false)
    })
  ),
  inputs: {
    items: createExtensionInput({
      item: createSearchResultListItemExtension.itemDataRef
    })
  },
  loader: async ({ config, inputs }) => {
    const getResultItemComponent = (result) => {
      var _a;
      const value = inputs.items.find(
        (item) => {
          var _a2, _b;
          return (_b = item == null ? void 0 : (_a2 = item.output.item).predicate) == null ? void 0 : _b.call(_a2, result);
        }
      );
      return (_a = value == null ? void 0 : value.output.item.component) != null ? _a : DefaultResultListItem;
    };
    const Component = () => {
      const classes = useSearchPageStyles();
      const { isMobile } = useSidebarPinState();
      const { types } = useSearch();
      const catalogApi = useApi(catalogApiRef);
      return /* @__PURE__ */ React.createElement(Page, { themeId: "home" }, !isMobile && /* @__PURE__ */ React.createElement(Header, { title: "Search" }), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(Grid, { container: true, direction: "row" }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(SearchBar, { debounceTime: 100 })), !isMobile && /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 3 }, /* @__PURE__ */ React.createElement(
        SearchType.Accordion,
        {
          name: "Result Type",
          defaultValue: "software-catalog",
          showCounts: true,
          types: [
            {
              value: "software-catalog",
              name: "Software Catalog",
              icon: /* @__PURE__ */ React.createElement(CatalogIcon, null)
            },
            {
              value: "techdocs",
              name: "Documentation",
              icon: /* @__PURE__ */ React.createElement(DocsIcon, null)
            },
            {
              value: "adr",
              name: "Architecture Decision Records",
              icon: /* @__PURE__ */ React.createElement(DocsIcon, null)
            }
          ]
        }
      ), /* @__PURE__ */ React.createElement(Paper, { className: classes.filters }, types.includes("techdocs") && /* @__PURE__ */ React.createElement(
        SearchFilter.Select,
        {
          className: classes.filter,
          label: "Entity",
          name: "name",
          values: async () => {
            const { items } = await catalogApi.getEntities({
              fields: ["metadata.name"],
              filter: {
                "metadata.annotations.backstage.io/techdocs-ref": CATALOG_FILTER_EXISTS
              }
            });
            const names = items.map(
              (entity) => entity.metadata.name
            );
            names.sort();
            return names;
          }
        }
      ), /* @__PURE__ */ React.createElement(
        SearchFilter.Select,
        {
          className: classes.filter,
          label: "Kind",
          name: "kind",
          values: ["Component", "Template"]
        }
      ), /* @__PURE__ */ React.createElement(
        SearchFilter.Checkbox,
        {
          className: classes.filter,
          label: "Lifecycle",
          name: "lifecycle",
          values: ["experimental", "production"]
        }
      ))), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(SearchPagination, null), /* @__PURE__ */ React.createElement(SearchResult, null, ({ results }) => /* @__PURE__ */ React.createElement(React.Fragment, null, results.map((result, index) => {
        const { noTrack } = config;
        const { document, ...rest } = result;
        const SearchResultListItem = getResultItemComponent(result);
        return /* @__PURE__ */ React.createElement(
          SearchResultListItem,
          {
            ...rest,
            key: index,
            result: document,
            noTrack
          }
        );
      }))), /* @__PURE__ */ React.createElement(SearchResultPager, null)))));
    };
    return compatWrapper(
      /* @__PURE__ */ React.createElement(SearchContextProvider, null, /* @__PURE__ */ React.createElement(UrlUpdater, null), /* @__PURE__ */ React.createElement(Component, null))
    );
  }
});
const searchNavItem = createNavItemExtension({
  routeRef: convertLegacyRouteRef(rootRouteRef),
  title: "Search",
  icon: SearchIcon
});
var alpha = createPlugin({
  id: "search",
  extensions: [searchApi, searchPage, searchNavItem],
  routes: {
    root: convertLegacyRouteRef(rootRouteRef)
  }
});

export { alpha as default, searchApi, searchNavItem, searchPage };
//# sourceMappingURL=alpha.esm.js.map
