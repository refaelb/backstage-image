{"version":3,"file":"index.cjs.js","sources":["../src/actions/azure.examples.ts","../src/actions/azure.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Azure.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:azure',\n          name: 'Publish to Azure',\n          input: {\n            repoUrl:\n              'dev.azure.com?organization=organization&owner=project&repo=repo',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Add a description.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:azure',\n          name: 'Publish to Azure',\n          input: {\n            repoUrl:\n              'dev.azure.com?organization=organization&owner=project&repo=repo',\n            description: 'Initialize a git repository',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Change the default branch.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:azure',\n          name: 'Publish to Azure',\n          input: {\n            repoUrl:\n              'dev.azure.com?organization=organization&owner=project&repo=repo',\n            description: 'Initialize a git repository',\n            defaultBranch: 'main',\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  DefaultAzureDevOpsCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  initRepoAndPush,\n  getRepoSourceDirectory,\n  parseRepoUrl,\n  createTemplateAction,\n} from '@backstage/plugin-scaffolder-node';\nimport { GitRepositoryCreateOptions } from 'azure-devops-node-api/interfaces/GitInterfaces';\nimport {\n  getBearerHandler,\n  getPersonalAccessTokenHandler,\n  WebApi,\n} from 'azure-devops-node-api';\nimport { Config } from '@backstage/config';\nimport { examples } from './azure.examples';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to Azure.\n * @public\n */\nexport function createPublishAzureAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    defaultBranch?: string;\n    sourcePath?: string;\n    token?: string;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n  }>({\n    id: 'publish:azure',\n    examples,\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Azure.',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n          },\n          description: {\n            title: 'Repository Description',\n            type: 'string',\n          },\n          defaultBranch: {\n            title: 'Default Branch',\n            type: 'string',\n            description: `Sets the default branch on the repository. The default value is 'master'`,\n          },\n          gitCommitMessage: {\n            title: 'Git Commit Message',\n            type: 'string',\n            description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n          },\n          gitAuthorName: {\n            title: 'Default Author Name',\n            type: 'string',\n            description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n          },\n          gitAuthorEmail: {\n            title: 'Default Author Email',\n            type: 'string',\n            description: `Sets the default author email for the commit.`,\n          },\n          sourcePath: {\n            title: 'Source Path',\n            description:\n              'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            type: 'string',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to Azure',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: {\n            title: 'A URL to the repository with the provider',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the root of the repository',\n            type: 'string',\n          },\n          repositoryId: {\n            title: 'The Id of the created repository',\n            type: 'string',\n          },\n          commitHash: {\n            title: 'The git commit hash of the initial commit',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        defaultBranch = 'master',\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n      } = ctx.input;\n\n      const { owner, repo, host, organization } = parseRepoUrl(\n        repoUrl,\n        integrations,\n      );\n\n      if (!organization) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing organization`,\n        );\n      }\n\n      const url = `https://${host}/${organization}`;\n      const credentialProvider =\n        DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations);\n      const credentials = await credentialProvider.getCredentials({ url: url });\n\n      if (credentials === undefined && ctx.input.token === undefined) {\n        throw new InputError(\n          `No credentials provided ${url}, please check your integrations config`,\n        );\n      }\n\n      const authHandler =\n        ctx.input.token || credentials?.type === 'pat'\n          ? getPersonalAccessTokenHandler(ctx.input.token ?? credentials!.token)\n          : getBearerHandler(credentials!.token);\n\n      const webApi = new WebApi(url, authHandler);\n      const client = await webApi.getGitApi();\n      const createOptions: GitRepositoryCreateOptions = { name: repo };\n      const returnedRepo = await client.createRepository(createOptions, owner);\n\n      if (!returnedRepo) {\n        throw new InputError(\n          `Unable to create the repository with Organization ${organization}, Project ${owner} and Repo ${repo}.\n          Please make sure that both the Org and Project are typed corrected and exist.`,\n        );\n      }\n      const remoteUrl = returnedRepo.remoteUrl;\n\n      if (!remoteUrl) {\n        throw new InputError(\n          'No remote URL returned from create repository for Azure',\n        );\n      }\n      const repositoryId = returnedRepo.id;\n\n      if (!repositoryId) {\n        throw new InputError('No Id returned from create repository for Azure');\n      }\n\n      // blam: Repo contents is serialized into the path,\n      // so it's just the base path I think\n      const repoContentsUrl = remoteUrl;\n\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      const auth =\n        ctx.input.token || credentials?.type === 'pat'\n          ? {\n              username: 'notempty',\n              password: ctx.input.token ?? credentials!.token,\n            }\n          : { token: credentials!.token };\n\n      const commitResult = await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),\n        remoteUrl,\n        defaultBranch,\n        auth: auth,\n        logger: ctx.logger,\n        commitMessage: gitCommitMessage\n          ? gitCommitMessage\n          : config.getOptionalString('scaffolder.defaultCommitMessage'),\n        gitAuthorInfo,\n      });\n\n      ctx.output('commitHash', commitResult?.commitHash);\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n      ctx.output('repositoryId', repositoryId);\n    },\n  });\n}\n"],"names":["yaml","createTemplateAction","parseRepoUrl","InputError","DefaultAzureDevOpsCredentialsProvider","getPersonalAccessTokenHandler","getBearerHandler","WebApi","initRepoAndPush","getRepoSourceDirectory"],"mappings":"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"}