{"version":3,"file":"index.esm.js","sources":["../src/TemplateEntityV1beta3.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  entityKindSchemaValidator,\n  KindValidator,\n} from '@backstage/catalog-model';\nimport { JsonObject } from '@backstage/types';\nimport schema from './Template.v1beta3.schema.json';\n\n/**\n * Backstage catalog Template kind Entity. Templates are used by the Scaffolder\n * plugin to create new entities, such as Components.\n *\n * @public\n */\nexport interface TemplateEntityV1beta3 extends Entity {\n  /**\n   * The apiVersion string of the TaskSpec.\n   */\n  apiVersion: 'scaffolder.backstage.io/v1beta3';\n  /**\n   * The kind of the entity\n   */\n  kind: 'Template';\n  /**\n   * The specification of the Template Entity\n   */\n  spec: {\n    /**\n     * The type that the Template will create. For example service, website or library.\n     */\n    type: string;\n\n    /**\n     * Template specific configuration of the presentation layer.\n     */\n    presentation?: TemplatePresentationV1beta3;\n\n    /**\n     * This is a JSONSchema or an array of JSONSchema's which is used to render a form in the frontend\n     * to collect user input and validate it against that schema. This can then be used in the `steps` part below to template\n     * variables passed from the user into each action in the template.\n     */\n    parameters?: TemplateParametersV1beta3 | TemplateParametersV1beta3[];\n    /**\n     * A list of steps to be executed in sequence which are defined by the template. These steps are a list of the underlying\n     * javascript action and some optional input parameters that may or may not have been collected from the end user.\n     */\n    steps: Array<TemplateEntityStepV1beta3>;\n    /**\n     * The output is an object where template authors can pull out information from template actions and return them in a known standard way.\n     */\n    output?: { [name: string]: string };\n    /**\n     * The owner entityRef of the TemplateEntity\n     */\n    owner?: string;\n  };\n}\n\n/**\n * The presentation of the template.\n *\n * @public\n */\nexport interface TemplatePresentationV1beta3 extends JsonObject {\n  /**\n   * Overrides default buttons' text\n   */\n  buttonLabels?: {\n    /**\n     * The text for the button which leads to the previous template page\n     */\n    backButtonText?: string;\n    /**\n     * The text for the button which starts the execution of the template\n     */\n    createButtonText?: string;\n    /**\n     * The text for the button which opens template's review/summary\n     */\n    reviewButtonText?: string;\n  };\n}\n\n/**\n * Step that is part of a Template Entity.\n *\n * @public\n */\nexport interface TemplateEntityStepV1beta3 extends JsonObject {\n  id?: string;\n  name?: string;\n  action: string;\n  input?: JsonObject;\n  if?: string | boolean;\n  'backstage:permissions'?: TemplatePermissionsV1beta3;\n}\n\n/**\n * Parameter that is part of a Template Entity.\n *\n * @public\n */\nexport interface TemplateParametersV1beta3 extends JsonObject {\n  'backstage:permissions'?: TemplatePermissionsV1beta3;\n}\n\n/**\n *  Access control properties for parts of a template.\n *\n * @public\n */\nexport interface TemplatePermissionsV1beta3 extends JsonObject {\n  tags?: string[];\n}\n\nconst validator = entityKindSchemaValidator(schema);\n\n/**\n * Entity data validator for {@link TemplateEntityV1beta3}.\n *\n * @public\n */\nexport const templateEntityV1beta3Validator: KindValidator = {\n  // TODO(freben): Emulate the old KindValidator until we fix that type\n  async check(data: Entity) {\n    return validator(data) === data;\n  },\n};\n\n/**\n * Typeguard for filtering entities and ensuring v1beta3 entities\n * @public\n */\nexport const isTemplateEntityV1beta3 = (\n  entity: Entity,\n): entity is TemplateEntityV1beta3 =>\n  entity.apiVersion === 'scaffolder.backstage.io/v1beta3' &&\n  entity.kind === 'Template';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoIA,MAAM,SAAA,GAAY,0BAA0B,MAAM,CAAA,CAAA;AAO3C,MAAM,8BAAgD,GAAA;AAAA;AAAA,EAE3D,MAAM,MAAM,IAAc,EAAA;AACxB,IAAO,OAAA,SAAA,CAAU,IAAI,CAAM,KAAA,IAAA,CAAA;AAAA,GAC7B;AACF,EAAA;AAMO,MAAM,0BAA0B,CACrC,MAAA,KAEA,OAAO,UAAe,KAAA,iCAAA,IACtB,OAAO,IAAS,KAAA;;;;"}