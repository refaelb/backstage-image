{"version":3,"file":"alpha.cjs.js","sources":["../src/module/catalogModuleMicrosoftGraphOrgEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createBackendModule,\n  createExtensionPoint,\n} from '@backstage/backend-plugin-api';\nimport { loggerToWinstonLogger } from '@backstage/backend-common';\nimport { catalogProcessingExtensionPoint } from '@backstage/plugin-catalog-node/alpha';\nimport {\n  GroupTransformer,\n  OrganizationTransformer,\n  UserTransformer,\n} from '@backstage/plugin-catalog-backend-module-msgraph';\nimport { MicrosoftGraphOrgEntityProvider } from '../processors';\n\n/**\n * Interface for {@link microsoftGraphOrgEntityProviderTransformExtensionPoint}.\n *\n * @alpha\n */\nexport interface MicrosoftGraphOrgEntityProviderTransformsExtensionPoint {\n  /**\n   * Set the function that transforms a user entry in msgraph to an entity.\n   * Optionally, you can pass separate transformers per provider ID.\n   */\n  setUserTransformer(\n    transformer: UserTransformer | Record<string, UserTransformer>,\n  ): void;\n\n  /**\n   * Set the function that transforms a group entry in msgraph to an entity.\n   * Optionally, you can pass separate transformers per provider ID.\n   */\n  setGroupTransformer(\n    transformer: GroupTransformer | Record<string, GroupTransformer>,\n  ): void;\n\n  /**\n   * Set the function that transforms an organization entry in msgraph to an entity.\n   * Optionally, you can pass separate transformers per provider ID.\n   */\n  setOrganizationTransformer(\n    transformer:\n      | OrganizationTransformer\n      | Record<string, OrganizationTransformer>,\n  ): void;\n}\n\n/**\n * Extension point used to customize the transforms used by the module.\n *\n * @alpha\n */\nexport const microsoftGraphOrgEntityProviderTransformExtensionPoint =\n  createExtensionPoint<MicrosoftGraphOrgEntityProviderTransformsExtensionPoint>(\n    {\n      id: 'catalog.microsoftGraphOrgEntityProvider.transforms',\n    },\n  );\n\n/**\n * Registers the MicrosoftGraphOrgEntityProvider with the catalog processing extension point.\n *\n * @alpha\n */\nexport const catalogModuleMicrosoftGraphOrgEntityProvider = createBackendModule(\n  {\n    pluginId: 'catalog',\n    moduleId: 'microsoftGraphOrgEntityProvider',\n    register(env) {\n      let userTransformer:\n        | UserTransformer\n        | Record<string, UserTransformer>\n        | undefined;\n      let groupTransformer:\n        | GroupTransformer\n        | Record<string, GroupTransformer>\n        | undefined;\n      let organizationTransformer:\n        | OrganizationTransformer\n        | Record<string, OrganizationTransformer>\n        | undefined;\n\n      env.registerExtensionPoint(\n        microsoftGraphOrgEntityProviderTransformExtensionPoint,\n        {\n          setUserTransformer(transformer) {\n            if (userTransformer) {\n              throw new Error('User transformer may only be set once');\n            }\n            userTransformer = transformer;\n          },\n          setGroupTransformer(transformer) {\n            if (groupTransformer) {\n              throw new Error('Group transformer may only be set once');\n            }\n            groupTransformer = transformer;\n          },\n          setOrganizationTransformer(transformer) {\n            if (organizationTransformer) {\n              throw new Error('Organization transformer may only be set once');\n            }\n            organizationTransformer = transformer;\n          },\n        },\n      );\n\n      env.registerInit({\n        deps: {\n          catalog: catalogProcessingExtensionPoint,\n          config: coreServices.rootConfig,\n          logger: coreServices.logger,\n          scheduler: coreServices.scheduler,\n        },\n        async init({ catalog, config, logger, scheduler }) {\n          catalog.addEntityProvider(\n            MicrosoftGraphOrgEntityProvider.fromConfig(config, {\n              logger: loggerToWinstonLogger(logger),\n              scheduler,\n              userTransformer: userTransformer,\n              groupTransformer: groupTransformer,\n              organizationTransformer: organizationTransformer,\n            }),\n          );\n        },\n      });\n    },\n  },\n);\n"],"names":["createExtensionPoint","createBackendModule","catalogProcessingExtensionPoint","coreServices","MicrosoftGraphOrgEntityProvider","loggerToWinstonLogger"],"mappings":";;;;;;;;;;;;;;;;;;AAoEO,MAAM,sDACX,GAAAA,qCAAA;AAAA,EACE;AAAA,IACE,EAAI,EAAA,oDAAA;AAAA,GACN;AACF,EAAA;AAOK,MAAM,4CAA+C,GAAAC,oCAAA;AAAA,EAC1D;AAAA,IACE,QAAU,EAAA,SAAA;AAAA,IACV,QAAU,EAAA,iCAAA;AAAA,IACV,SAAS,GAAK,EAAA;AACZ,MAAI,IAAA,eAAA,CAAA;AAIJ,MAAI,IAAA,gBAAA,CAAA;AAIJ,MAAI,IAAA,uBAAA,CAAA;AAKJ,MAAI,GAAA,CAAA,sBAAA;AAAA,QACF,sDAAA;AAAA,QACA;AAAA,UACE,mBAAmB,WAAa,EAAA;AAC9B,YAAA,IAAI,eAAiB,EAAA;AACnB,cAAM,MAAA,IAAI,MAAM,uCAAuC,CAAA,CAAA;AAAA,aACzD;AACA,YAAkB,eAAA,GAAA,WAAA,CAAA;AAAA,WACpB;AAAA,UACA,oBAAoB,WAAa,EAAA;AAC/B,YAAA,IAAI,gBAAkB,EAAA;AACpB,cAAM,MAAA,IAAI,MAAM,wCAAwC,CAAA,CAAA;AAAA,aAC1D;AACA,YAAmB,gBAAA,GAAA,WAAA,CAAA;AAAA,WACrB;AAAA,UACA,2BAA2B,WAAa,EAAA;AACtC,YAAA,IAAI,uBAAyB,EAAA;AAC3B,cAAM,MAAA,IAAI,MAAM,+CAA+C,CAAA,CAAA;AAAA,aACjE;AACA,YAA0B,uBAAA,GAAA,WAAA,CAAA;AAAA,WAC5B;AAAA,SACF;AAAA,OACF,CAAA;AAEA,MAAA,GAAA,CAAI,YAAa,CAAA;AAAA,QACf,IAAM,EAAA;AAAA,UACJ,OAAS,EAAAC,qCAAA;AAAA,UACT,QAAQC,6BAAa,CAAA,UAAA;AAAA,UACrB,QAAQA,6BAAa,CAAA,MAAA;AAAA,UACrB,WAAWA,6BAAa,CAAA,SAAA;AAAA,SAC1B;AAAA,QACA,MAAM,IAAK,CAAA,EAAE,SAAS,MAAQ,EAAA,MAAA,EAAQ,WAAa,EAAA;AACjD,UAAQ,OAAA,CAAA,iBAAA;AAAA,YACNC,+DAAA,CAAgC,WAAW,MAAQ,EAAA;AAAA,cACjD,MAAA,EAAQC,oCAAsB,MAAM,CAAA;AAAA,cACpC,SAAA;AAAA,cACA,eAAA;AAAA,cACA,gBAAA;AAAA,cACA,uBAAA;AAAA,aACD,CAAA;AAAA,WACH,CAAA;AAAA,SACF;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AACF;;;;;"}