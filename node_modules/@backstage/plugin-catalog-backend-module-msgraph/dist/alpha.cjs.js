'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var backendCommon = require('@backstage/backend-common');
var alpha = require('@backstage/plugin-catalog-node/alpha');
var MicrosoftGraphOrgEntityProvider = require('./cjs/MicrosoftGraphOrgEntityProvider-cc3c67d0.cjs.js');
require('@backstage/plugin-catalog-node');
require('@azure/identity');
require('node-fetch');
require('qs');
require('@backstage/backend-tasks');
require('lodash');
require('@backstage/catalog-model');
require('p-limit');
require('uuid');

const microsoftGraphOrgEntityProviderTransformExtensionPoint = backendPluginApi.createExtensionPoint(
  {
    id: "catalog.microsoftGraphOrgEntityProvider.transforms"
  }
);
const catalogModuleMicrosoftGraphOrgEntityProvider = backendPluginApi.createBackendModule(
  {
    pluginId: "catalog",
    moduleId: "microsoftGraphOrgEntityProvider",
    register(env) {
      let userTransformer;
      let groupTransformer;
      let organizationTransformer;
      env.registerExtensionPoint(
        microsoftGraphOrgEntityProviderTransformExtensionPoint,
        {
          setUserTransformer(transformer) {
            if (userTransformer) {
              throw new Error("User transformer may only be set once");
            }
            userTransformer = transformer;
          },
          setGroupTransformer(transformer) {
            if (groupTransformer) {
              throw new Error("Group transformer may only be set once");
            }
            groupTransformer = transformer;
          },
          setOrganizationTransformer(transformer) {
            if (organizationTransformer) {
              throw new Error("Organization transformer may only be set once");
            }
            organizationTransformer = transformer;
          }
        }
      );
      env.registerInit({
        deps: {
          catalog: alpha.catalogProcessingExtensionPoint,
          config: backendPluginApi.coreServices.rootConfig,
          logger: backendPluginApi.coreServices.logger,
          scheduler: backendPluginApi.coreServices.scheduler
        },
        async init({ catalog, config, logger, scheduler }) {
          catalog.addEntityProvider(
            MicrosoftGraphOrgEntityProvider.MicrosoftGraphOrgEntityProvider.fromConfig(config, {
              logger: backendCommon.loggerToWinstonLogger(logger),
              scheduler,
              userTransformer,
              groupTransformer,
              organizationTransformer
            })
          );
        }
      });
    }
  }
);

exports["default"] = catalogModuleMicrosoftGraphOrgEntityProvider;
exports.microsoftGraphOrgEntityProviderTransformExtensionPoint = microsoftGraphOrgEntityProviderTransformExtensionPoint;
//# sourceMappingURL=alpha.cjs.js.map
