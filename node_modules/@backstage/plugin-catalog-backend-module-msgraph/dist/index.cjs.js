'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var MicrosoftGraphOrgEntityProvider = require('./cjs/MicrosoftGraphOrgEntityProvider-cc3c67d0.cjs.js');
var pluginCatalogNode = require('@backstage/plugin-catalog-node');
require('@backstage/catalog-model');
require('lodash');
require('uuid');
require('@azure/identity');
require('node-fetch');
require('qs');
require('@backstage/backend-tasks');
require('p-limit');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class MicrosoftGraphOrgReaderProcessor {
  constructor(options) {
    __publicField(this, "providers");
    __publicField(this, "logger");
    __publicField(this, "userTransformer");
    __publicField(this, "groupTransformer");
    __publicField(this, "organizationTransformer");
    options.logger.warn(
      "MicrosoftGraphOrgReaderProcessor is deprecated. Please use MicrosoftGraphOrgEntityProvider instead. More info at https://github.com/backstage/backstage/blob/master/plugins/catalog-backend-module-msgraph/CHANGELOG.md#040-next1"
    );
    this.providers = options.providers;
    this.logger = options.logger;
    this.userTransformer = options.userTransformer;
    this.groupTransformer = options.groupTransformer;
    this.organizationTransformer = options.organizationTransformer;
  }
  static fromConfig(config, options) {
    const c = config.getOptionalConfig("catalog.processors.microsoftGraphOrg");
    return new MicrosoftGraphOrgReaderProcessor({
      ...options,
      providers: c ? MicrosoftGraphOrgEntityProvider.readMicrosoftGraphConfig(c) : []
    });
  }
  getProcessorName() {
    return "MicrosoftGraphOrgReaderProcessor";
  }
  async readLocation(location, _optional, emit) {
    if (location.type !== "microsoft-graph-org") {
      return false;
    }
    const provider = this.providers.find(
      (p) => location.target.startsWith(p.target)
    );
    if (!provider) {
      throw new Error(
        `There is no Microsoft Graph Org provider that matches ${location.target}. Please add a configuration entry for it under catalog.processors.microsoftGraphOrg.providers.`
      );
    }
    const startTimestamp = Date.now();
    this.logger.info("Reading Microsoft Graph users and groups");
    const client = MicrosoftGraphOrgEntityProvider.MicrosoftGraphClient.create(provider);
    const { users, groups } = await MicrosoftGraphOrgEntityProvider.readMicrosoftGraphOrg(
      client,
      provider.tenantId,
      {
        userExpand: provider.userExpand,
        userFilter: provider.userFilter,
        userGroupMemberFilter: provider.userGroupMemberFilter,
        userGroupMemberSearch: provider.userGroupMemberSearch,
        groupExpand: provider.groupExpand,
        groupFilter: provider.groupFilter,
        groupSearch: provider.groupSearch,
        groupSelect: provider.groupSelect,
        queryMode: provider.queryMode,
        userTransformer: this.userTransformer,
        groupTransformer: this.groupTransformer,
        organizationTransformer: this.organizationTransformer,
        logger: this.logger
      }
    );
    const duration = ((Date.now() - startTimestamp) / 1e3).toFixed(1);
    this.logger.debug(
      `Read ${users.length} users and ${groups.length} groups from Microsoft Graph in ${duration} seconds`
    );
    for (const group of groups) {
      emit(pluginCatalogNode.processingResult.entity(location, group));
    }
    for (const user of users) {
      emit(pluginCatalogNode.processingResult.entity(location, user));
    }
    return true;
  }
}

exports.MICROSOFT_EMAIL_ANNOTATION = MicrosoftGraphOrgEntityProvider.MICROSOFT_EMAIL_ANNOTATION;
exports.MICROSOFT_GRAPH_GROUP_ID_ANNOTATION = MicrosoftGraphOrgEntityProvider.MICROSOFT_GRAPH_GROUP_ID_ANNOTATION;
exports.MICROSOFT_GRAPH_TENANT_ID_ANNOTATION = MicrosoftGraphOrgEntityProvider.MICROSOFT_GRAPH_TENANT_ID_ANNOTATION;
exports.MICROSOFT_GRAPH_USER_ID_ANNOTATION = MicrosoftGraphOrgEntityProvider.MICROSOFT_GRAPH_USER_ID_ANNOTATION;
exports.MicrosoftGraphClient = MicrosoftGraphOrgEntityProvider.MicrosoftGraphClient;
exports.MicrosoftGraphOrgEntityProvider = MicrosoftGraphOrgEntityProvider.MicrosoftGraphOrgEntityProvider;
exports.defaultGroupTransformer = MicrosoftGraphOrgEntityProvider.defaultGroupTransformer;
exports.defaultOrganizationTransformer = MicrosoftGraphOrgEntityProvider.defaultOrganizationTransformer;
exports.defaultUserTransformer = MicrosoftGraphOrgEntityProvider.defaultUserTransformer;
exports.normalizeEntityName = MicrosoftGraphOrgEntityProvider.normalizeEntityName;
exports.readMicrosoftGraphConfig = MicrosoftGraphOrgEntityProvider.readMicrosoftGraphConfig;
exports.readMicrosoftGraphOrg = MicrosoftGraphOrgEntityProvider.readMicrosoftGraphOrg;
exports.readProviderConfig = MicrosoftGraphOrgEntityProvider.readProviderConfig;
exports.readProviderConfigs = MicrosoftGraphOrgEntityProvider.readProviderConfigs;
exports.MicrosoftGraphOrgReaderProcessor = MicrosoftGraphOrgReaderProcessor;
//# sourceMappingURL=index.cjs.js.map
