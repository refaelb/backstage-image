{"version":3,"file":"index.cjs.js","sources":["../src/processors/MicrosoftGraphOrgReaderProcessor.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { Logger } from 'winston';\nimport {\n  GroupTransformer,\n  MicrosoftGraphClient,\n  MicrosoftGraphProviderConfig,\n  OrganizationTransformer,\n  readMicrosoftGraphConfig,\n  readMicrosoftGraphOrg,\n  UserTransformer,\n} from '../microsoftGraph';\n\n/**\n * Extracts teams and users out of the Microsoft Graph API.\n *\n * @public\n * @deprecated Use the MicrosoftGraphOrgEntityProvider instead.\n */\nexport class MicrosoftGraphOrgReaderProcessor implements CatalogProcessor {\n  private readonly providers: MicrosoftGraphProviderConfig[];\n  private readonly logger: Logger;\n  private readonly userTransformer?: UserTransformer;\n  private readonly groupTransformer?: GroupTransformer;\n  private readonly organizationTransformer?: OrganizationTransformer;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      userTransformer?: UserTransformer;\n      groupTransformer?: GroupTransformer;\n      organizationTransformer?: OrganizationTransformer;\n    },\n  ) {\n    const c = config.getOptionalConfig('catalog.processors.microsoftGraphOrg');\n    return new MicrosoftGraphOrgReaderProcessor({\n      ...options,\n      providers: c ? readMicrosoftGraphConfig(c) : [],\n    });\n  }\n\n  constructor(options: {\n    providers: MicrosoftGraphProviderConfig[];\n    logger: Logger;\n    userTransformer?: UserTransformer;\n    groupTransformer?: GroupTransformer;\n    organizationTransformer?: OrganizationTransformer;\n  }) {\n    options.logger.warn(\n      'MicrosoftGraphOrgReaderProcessor is deprecated. Please use MicrosoftGraphOrgEntityProvider instead. More info at https://github.com/backstage/backstage/blob/master/plugins/catalog-backend-module-msgraph/CHANGELOG.md#040-next1',\n    );\n    this.providers = options.providers;\n    this.logger = options.logger;\n    this.userTransformer = options.userTransformer;\n    this.groupTransformer = options.groupTransformer;\n    this.organizationTransformer = options.organizationTransformer;\n  }\n\n  getProcessorName(): string {\n    return 'MicrosoftGraphOrgReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'microsoft-graph-org') {\n      return false;\n    }\n\n    const provider = this.providers.find(p =>\n      location.target.startsWith(p.target),\n    );\n    if (!provider) {\n      throw new Error(\n        `There is no Microsoft Graph Org provider that matches ${location.target}. Please add a configuration entry for it under catalog.processors.microsoftGraphOrg.providers.`,\n      );\n    }\n\n    // Read out all the raw data\n    const startTimestamp = Date.now();\n    this.logger.info('Reading Microsoft Graph users and groups');\n\n    // We create a client each time as we need one that matches the specific provider\n    const client = MicrosoftGraphClient.create(provider);\n    const { users, groups } = await readMicrosoftGraphOrg(\n      client,\n      provider.tenantId,\n      {\n        userExpand: provider.userExpand,\n        userFilter: provider.userFilter,\n        userGroupMemberFilter: provider.userGroupMemberFilter,\n        userGroupMemberSearch: provider.userGroupMemberSearch,\n        groupExpand: provider.groupExpand,\n        groupFilter: provider.groupFilter,\n        groupSearch: provider.groupSearch,\n        groupSelect: provider.groupSelect,\n        queryMode: provider.queryMode,\n        userTransformer: this.userTransformer,\n        groupTransformer: this.groupTransformer,\n        organizationTransformer: this.organizationTransformer,\n        logger: this.logger,\n      },\n    );\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${users.length} users and ${groups.length} groups from Microsoft Graph in ${duration} seconds`,\n    );\n\n    // Done!\n    for (const group of groups) {\n      emit(processingResult.entity(location, group));\n    }\n    for (const user of users) {\n      emit(processingResult.entity(location, user));\n    }\n\n    return true;\n  }\n}\n"],"names":["readMicrosoftGraphConfig","MicrosoftGraphClient","readMicrosoftGraphOrg","processingResult"],"mappings":"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"}