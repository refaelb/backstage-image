"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeNpmScriptsWithTargets = exports.mergePackageJsonConfigurationWithProjectJson = exports.buildProjectFromProjectJson = exports.CreateProjectJsonProjectsPlugin = void 0;
const node_path_1 = require("node:path");
const node_fs_1 = require("node:fs");
const workspaces_1 = require("../../../config/workspaces");
const fileutils_1 = require("../../../utils/fileutils");
const package_json_1 = require("../../../utils/package-json");
exports.CreateProjectJsonProjectsPlugin = {
    name: 'nx-core-build-project-json-nodes',
    createNodes: [
        '{project.json,**/project.json}',
        (file, context) => {
            const root = context.workspaceRoot;
            const json = (0, fileutils_1.readJsonFile)((0, node_path_1.join)(root, file));
            const project = buildProjectFromProjectJson(json, file);
            mergePackageJsonConfigurationWithProjectJson(project, root);
            return {
                projects: {
                    [project.name]: project,
                },
            };
        },
    ],
};
function buildProjectFromProjectJson(json, path) {
    return {
        name: (0, workspaces_1.toProjectName)(path),
        root: (0, node_path_1.dirname)(path),
        ...json,
    };
}
exports.buildProjectFromProjectJson = buildProjectFromProjectJson;
function mergePackageJsonConfigurationWithProjectJson(p, root) {
    if ((0, node_fs_1.existsSync)((0, node_path_1.join)(root, p.root, 'package.json'))) {
        try {
            const packageJson = (0, fileutils_1.readJsonFile)((0, node_path_1.join)(root, p.root, 'package.json'));
            p.targets = mergeNpmScriptsWithTargets(packageJson, p.targets);
            const { nx } = packageJson;
            if (nx?.tags) {
                p.tags = [...(p.tags || []), ...nx.tags];
            }
            if (nx?.implicitDependencies) {
                p.implicitDependencies = [
                    ...(p.implicitDependencies || []),
                    ...nx.implicitDependencies,
                ];
            }
            if (nx?.namedInputs) {
                p.namedInputs = { ...(p.namedInputs || {}), ...nx.namedInputs };
            }
        }
        catch (e) {
            // ignore json parser errors
        }
    }
}
exports.mergePackageJsonConfigurationWithProjectJson = mergePackageJsonConfigurationWithProjectJson;
function mergeNpmScriptsWithTargets(packageJson, targets) {
    try {
        return { ...(0, package_json_1.readTargetsFromPackageJson)(packageJson), ...(targets || {}) };
    }
    catch (e) {
        return targets;
    }
}
exports.mergeNpmScriptsWithTargets = mergeNpmScriptsWithTargets;
