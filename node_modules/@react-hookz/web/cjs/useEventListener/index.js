"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useEventListener = void 0;
const react_1 = require("react");
const useIsMounted_1 = require("../useIsMounted");
const useSyncedRef_1 = require("../useSyncedRef");
const misc_1 = require("../util/misc");
/**
 *  An HTML element or ref object containing an HTML element.
 *
 * @param target An HTML element or ref object containing an HTML element.
 * @param params Parameters specific to the target element's `addEventListener` method. Commonly
 * something like `[eventName, listener, options]`.
 */
function useEventListener(target, ...params) {
    const isMounted = (0, useIsMounted_1.useIsMounted)();
    // Create static event listener
    const listenerRef = (0, useSyncedRef_1.useSyncedRef)(params[1]);
    const eventListener = (0, react_1.useMemo)(() => 
    // As some event listeners designed to be used through `this`
    // it is better to make listener a conventional function as it
    // infers call context
    function (...args) {
        // Normally, such situation should not happen, but better to
        // have back covered
        /* istanbul ignore next */
        if (!isMounted())
            return;
        // We dont care if non-listener provided, simply dont do anything
        /* istanbul ignore else */
        if (typeof listenerRef.current === 'function') {
            listenerRef.current.apply(this, args);
        }
        else if (typeof listenerRef.current.handleEvent === 'function') {
            listenerRef.current.handleEvent.apply(this, args);
        }
    }, []);
    (0, react_1.useEffect)(() => {
        const tgt = target && (0, misc_1.hasOwnProperty)(target, 'current') ? target.current : target;
        if (!tgt)
            return;
        const restParams = params.slice(2);
        (0, misc_1.on)(tgt, params[0], eventListener, ...restParams);
        return () => {
            (0, misc_1.off)(tgt, params[0], eventListener, ...restParams);
        };
    }, [target, params[0]]);
}
exports.useEventListener = useEventListener;
