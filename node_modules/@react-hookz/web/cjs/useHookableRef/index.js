"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useHookableRef = void 0;
const react_1 = require("react");
const useSyncedRef_1 = require("../useSyncedRef");
/**
 * Like `React.useRef` but it is possible to define get and set handlers.
 *
 * @param initialValue Initial value of a hook.
 * @param onSet Function to be called while ref.current value set. Return value
 * will be stored in ref.
 * @param onGet Function to be called while ref.current value accessed. Return
 * value will be used as a return value.
 */
function useHookableRef(initialValue, onSet, onGet) {
    const onSetRef = (0, useSyncedRef_1.useSyncedRef)(onSet);
    const onGetRef = (0, useSyncedRef_1.useSyncedRef)(onGet);
    return (0, react_1.useMemo)(() => {
        let v = initialValue;
        return {
            get current() {
                return onGetRef.current === undefined ? v : onGetRef.current(v);
            },
            set current(val) {
                v = onSetRef.current === undefined ? val : onSetRef.current(val);
            },
        };
    }, []);
}
exports.useHookableRef = useHookableRef;
