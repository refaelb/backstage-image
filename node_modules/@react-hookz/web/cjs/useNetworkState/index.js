"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useNetworkState = void 0;
const react_1 = require("react");
const const_1 = require("../util/const");
const misc_1 = require("../util/misc");
const navigator = const_1.isBrowser ? window.navigator : undefined;
const conn = navigator && (navigator.connection ?? navigator.mozConnection ?? navigator.webkitConnection);
function getConnectionState(previousState) {
    const online = navigator?.onLine;
    const previousOnline = previousState?.online;
    return {
        online,
        previous: previousOnline,
        since: online === previousOnline ? previousState?.since : new Date(),
        downlink: conn?.downlink,
        downlinkMax: conn?.downlinkMax,
        effectiveType: conn?.effectiveType,
        rtt: conn?.rtt,
        saveData: conn?.saveData,
        type: conn?.type,
    };
}
/**
 * Tracks the state of browser's network connection.
 */
function useNetworkState(initialState) {
    const [state, setState] = (0, react_1.useState)(initialState ?? getConnectionState);
    (0, react_1.useEffect)(() => {
        const handleStateChange = () => {
            setState(getConnectionState);
        };
        (0, misc_1.on)(window, 'online', handleStateChange, { passive: true });
        (0, misc_1.on)(window, 'offline', handleStateChange, { passive: true });
        // It is quite hard to test it in jsdom environment maybe will be improved in future
        /* istanbul ignore next */
        if (conn) {
            (0, misc_1.on)(conn, 'change', handleStateChange, { passive: true });
        }
        return () => {
            (0, misc_1.off)(window, 'online', handleStateChange);
            (0, misc_1.off)(window, 'offline', handleStateChange);
            /* istanbul ignore next */
            if (conn) {
                (0, misc_1.off)(conn, 'change', handleStateChange);
            }
        };
    }, []);
    return state;
}
exports.useNetworkState = useNetworkState;
