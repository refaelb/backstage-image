"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useToggle = void 0;
const react_1 = require("react");
const useSyncedRef_1 = require("../useSyncedRef");
const resolveHookState_1 = require("../util/resolveHookState");
/**
 * Like `useState`, but can only become `true` or `false`.
 *
 * State setter, in case called without arguments, will change the state to opposite. React
 * synthetic events are ignored by default so state setter can be used as event handler directly,
 * such behaviour can be changed by setting 2nd parameter to `false`.
 */
function useToggle(initialState = false, ignoreReactEvents = true) {
    // We don't use useReducer (which would end up with less code), because exposed
    // action does not provide functional updates feature.
    // Therefore, we have to create and expose our own state setter with
    // toggle logic.
    const [state, setState] = (0, react_1.useState)(initialState);
    const ignoreReactEventsRef = (0, useSyncedRef_1.useSyncedRef)(ignoreReactEvents);
    return [
        state,
        (0, react_1.useCallback)((nextState) => {
            setState((prevState) => {
                if (nextState === undefined ||
                    (ignoreReactEventsRef.current &&
                        typeof nextState === 'object' &&
                        (nextState.constructor.name === 'SyntheticBaseEvent' ||
                            typeof nextState._reactName === 'string'))) {
                    return !prevState;
                }
                return Boolean((0, resolveHookState_1.resolveHookState)(nextState, prevState));
            });
        }, []),
    ];
}
exports.useToggle = useToggle;
