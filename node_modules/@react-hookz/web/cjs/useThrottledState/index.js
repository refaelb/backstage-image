"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useThrottledState = void 0;
const react_1 = require("react");
const useThrottledCallback_1 = require("../useThrottledCallback");
/**
 * Like `useState` but its state setter is throttled.
 *
 * @param initialState Initial state to pass to underlying `useState`.
 * @param delay Throttle delay.
 * @param noTrailing If `noTrailing` is true, callback will only execute every
 * `delay` milliseconds, otherwise, callback will be executed one final time
 * after the last throttled-function call.
 */
function useThrottledState(initialState, delay, noTrailing = false) {
    const [state, setState] = (0, react_1.useState)(initialState);
    return [state, (0, useThrottledCallback_1.useThrottledCallback)(setState, [], delay, noTrailing)];
}
exports.useThrottledState = useThrottledState;
