"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMediaQuery = void 0;
const react_1 = require("react");
const const_1 = require("../util/const");
const queriesMap = new Map();
const createQueryEntry = (query) => {
    const mql = matchMedia(query);
    const dispatchers = new Set();
    const listener = () => {
        dispatchers.forEach((d) => {
            d(mql.matches);
        });
    };
    if (mql.addEventListener)
        mql.addEventListener('change', listener, { passive: true });
    else
        mql.addListener(listener);
    return {
        mql,
        dispatchers,
        listener,
    };
};
const querySubscribe = (query, setState) => {
    let entry = queriesMap.get(query);
    if (!entry) {
        entry = createQueryEntry(query);
        queriesMap.set(query, entry);
    }
    entry.dispatchers.add(setState);
    setState(entry.mql.matches);
};
const queryUnsubscribe = (query, setState) => {
    const entry = queriesMap.get(query);
    // Else path is impossible to test in normal situation
    /* istanbul ignore else */
    if (entry) {
        const { mql, dispatchers, listener } = entry;
        dispatchers.delete(setState);
        if (!dispatchers.size) {
            queriesMap.delete(query);
            if (mql.removeEventListener)
                mql.removeEventListener('change', listener);
            else
                mql.removeListener(listener);
        }
    }
};
/**
 * Tracks the state of CSS media query.
 *
 * @param query CSS media query to track.
 * @param options Hook options:
 * `initializeWithValue` (default: `true`) - Determine media query match state on first render. Setting
 * this to false will make the hook yield `undefined` on first render.
 */
function useMediaQuery(query, options = {}) {
    let { initializeWithValue = true } = options;
    if (!const_1.isBrowser) {
        initializeWithValue = false;
    }
    const [state, setState] = (0, react_1.useState)(() => {
        if (initializeWithValue) {
            let entry = queriesMap.get(query);
            if (!entry) {
                entry = createQueryEntry(query);
                queriesMap.set(query, entry);
            }
            return entry.mql.matches;
        }
    });
    (0, react_1.useEffect)(() => {
        querySubscribe(query, setState);
        return () => {
            queryUnsubscribe(query, setState);
        };
    }, [query]);
    return state;
}
exports.useMediaQuery = useMediaQuery;
