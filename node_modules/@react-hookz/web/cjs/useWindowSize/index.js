"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWindowSize = void 0;
const react_1 = require("react");
const useFirstMountState_1 = require("../useFirstMountState");
const useMountEffect_1 = require("../useMountEffect");
const useRafState_1 = require("../useRafState");
const const_1 = require("../util/const");
const listeners = new Set();
const callAllListeners = () => {
    listeners.forEach((l) => {
        l({
            width: window.innerWidth,
            height: window.innerHeight,
        });
    });
};
/**
 * Tracks the inner dimensions of the browser window.
 *
 * @param stateHook State hook that will be used to hold the dimensions of the window.
 * @param measureOnMount If `true`, the size of the window will be measured during the effects
  stage, after the component has mounted. If `false`, the window size is measured synchronously during
  the component render. Set this to `true` during SSR.
 */
function useWindowSize(stateHook = useRafState_1.useRafState, measureOnMount) {
    const isFirstMount = (0, useFirstMountState_1.useFirstMountState)();
    const [size, setSize] = stateHook({
        width: isFirstMount && const_1.isBrowser && !measureOnMount ? window.innerWidth : 0,
        height: isFirstMount && const_1.isBrowser && !measureOnMount ? window.innerHeight : 0,
    });
    (0, useMountEffect_1.useMountEffect)(() => {
        if (measureOnMount) {
            setSize({
                width: window.innerWidth,
                height: window.innerHeight,
            });
        }
    });
    (0, react_1.useEffect)(() => {
        if (listeners.size === 0) {
            window.addEventListener('resize', callAllListeners, { passive: true });
        }
        listeners.add(setSize);
        return () => {
            listeners.delete(setSize);
            if (listeners.size === 0) {
                window.removeEventListener('resize', callAllListeners);
            }
        };
    }, [setSize]);
    return size;
}
exports.useWindowSize = useWindowSize;
