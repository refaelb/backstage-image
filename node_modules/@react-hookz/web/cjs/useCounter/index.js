"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCounter = void 0;
const react_1 = require("react");
const useMediatedState_1 = require("../useMediatedState");
const useSyncedRef_1 = require("../useSyncedRef");
const resolveHookState_1 = require("../util/resolveHookState");
/**
 * Tracks a numeric value.
 *
 * @param initialValue The initial value of the counter.
 * @param max The maximum value the counter is allowed to reach.
 *            If `initialValue` is greater than `max`, then `max` is set as the initial value.
 * @param min The minimum value the counter is allowed to reach.
 *            If `initialValue` is smaller than `min`, then `min` is set as the initial value.
 */
function useCounter(initialValue = 0, max, min) {
    const [state, setState] = (0, useMediatedState_1.useMediatedState)(initialValue, (v) => {
        if (max !== undefined) {
            v = Math.min(max, v);
        }
        if (min !== undefined) {
            v = Math.max(min, v);
        }
        return v;
    });
    const stateRef = (0, useSyncedRef_1.useSyncedRef)(state);
    return [
        state,
        (0, react_1.useMemo)(() => ({
            get: () => stateRef.current,
            set: setState,
            dec(delta = 1) {
                setState((val) => val - (0, resolveHookState_1.resolveHookState)(delta, val));
            },
            inc(delta = 1) {
                setState((val) => val + (0, resolveHookState_1.resolveHookState)(delta, val));
            },
            reset(val = initialValue) {
                setState((v) => (0, resolveHookState_1.resolveHookState)(val, v));
            },
        }), [initialValue, setState, stateRef]),
    ];
}
exports.useCounter = useCounter;
