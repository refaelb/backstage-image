"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useIntervalEffect = void 0;
const react_1 = require("react");
const useSyncedRef_1 = require("../useSyncedRef");
/**
 * Like `setInterval` but in the form of a React hook.
 *
 * @param callback Function to call within the interval.
 * @param ms Delay passed to the underlying `setInterval`. If set to `undefined`, the interval will
 * be cancelled. Keep in mind, that changing this parameter will reset the interval.
 */
function useIntervalEffect(callback, ms) {
    const cbRef = (0, useSyncedRef_1.useSyncedRef)(callback);
    (0, react_1.useEffect)(() => {
        if (!ms && ms !== 0) {
            return;
        }
        const id = setInterval(() => {
            cbRef.current();
        }, ms);
        return () => {
            clearInterval(id);
        };
    }, [ms]);
}
exports.useIntervalEffect = useIntervalEffect;
