"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useKeyboardEvent = void 0;
const react_1 = require("react");
const useSyncedRef_1 = require("../useSyncedRef");
const useEventListener_1 = require("../useEventListener");
const const_1 = require("../util/const");
const misc_1 = require("../util/misc");
const createKeyPredicate = (keyFilter) => {
    if (typeof keyFilter === 'function')
        return keyFilter;
    if (typeof keyFilter === 'string')
        return (ev) => ev.key === keyFilter;
    return keyFilter ? misc_1.yieldTrue : misc_1.yieldFalse;
};
const WINDOW_OR_NULL = const_1.isBrowser ? window : null;
/**
 * Invokes a callback when a keyboard event occurs on the chosen target element.
 *
 * @param keyOrPredicate Filters key presses on which `callback` is invoked.
 * @param callback Function to call when a key is pressed and `keyOrPredicate` matches positive.
 * @param deps Dependencies list that is passed to the underlying `useMemo`.
 * @param options Hook options.
 */
function useKeyboardEvent(keyOrPredicate, callback, deps, options = {}) {
    const { event = 'keydown', target = WINDOW_OR_NULL, eventOptions } = options;
    const cbRef = (0, useSyncedRef_1.useSyncedRef)(callback);
    const handler = (0, react_1.useMemo)(() => {
        const predicate = createKeyPredicate(keyOrPredicate);
        return function (ev) {
            if (predicate(ev)) {
                cbRef.current.call(this, ev);
            }
        };
    }, deps);
    (0, useEventListener_1.useEventListener)(target, event, handler, eventOptions);
}
exports.useKeyboardEvent = useKeyboardEvent;
